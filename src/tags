!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
--enable-max-key-len	masstree/GNUmakefile	/^	.\/configure  '--enable-max-key-len=1024' '--enable-assertions' '--enable-invariants' '--enable-preconditions' '--with-malloc=tcmalloc' 'LDFLAGS=-L \/home\/ipandis\/GITPROJECTS\/Impala\/thirdparty\/gperftools-2.0\/.libs\/ '$/;"	m
A16	third-party/lz4/lz4.c	203;"	d	file:
A16	third-party/lz4/lz4hc.c	178;"	d	file:
A32	third-party/lz4/lz4.c	202;"	d	file:
A32	third-party/lz4/lz4hc.c	177;"	d	file:
A32	third-party/lz4/xxhash.c	147;"	d	file:
A64	third-party/lz4/lz4.c	201;"	d	file:
A64	third-party/lz4/lz4hc.c	176;"	d	file:
AARCH	third-party/lz4/lz4.c	236;"	d	file:
AARCH	third-party/lz4/lz4.c	245;"	d	file:
AARCH	third-party/lz4/lz4hc.c	221;"	d	file:
AARCH	third-party/lz4/lz4hc.c	229;"	d	file:
ABORT_REASONS	txn.h	/^    ABORT_REASONS(ENUM_X)$/;"	e	enum:transaction_base::abort_reason
ABORT_REASONS	txn.h	82;"	d
ACCOUNT_PERMISSION_KEY_FIELDS	benchmarks/tpce.h	20;"	d
ACCOUNT_PERMISSION_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct ACCOUNT_PERMISSION_ROW$/;"	s	namespace:TPCE
ACCOUNT_PERMISSION_VALUE_FIELDS	benchmarks/tpce.h	23;"	d
ADDRESS_KEY_FIELDS	benchmarks/tpce.h	345;"	d
ADDRESS_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct ADDRESS_ROW$/;"	s	namespace:TPCE
ADDRESS_TABLE_H	benchmarks/egen/AddressTable.h	42;"	d
ADDRESS_VALUE_FIELDS	benchmarks/tpce.h	347;"	d
ADLER32_CSUM_INIT	dbcore/adler.h	/^static uint32_t const ADLER32_CSUM_INIT = 1;$/;"	v
AD_CTRY	benchmarks/egen/Table_Defs.h	/^    char                    AD_CTRY[ cAD_CTRY_len+1 ];$/;"	m	struct:TPCE::ADDRESS_ROW
AD_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  AD_ID;$/;"	m	struct:TPCE::ADDRESS_ROW
AD_LINE1	benchmarks/egen/Table_Defs.h	/^    char                    AD_LINE1[ cAD_LINE_len+1];$/;"	m	struct:TPCE::ADDRESS_ROW
AD_LINE2	benchmarks/egen/Table_Defs.h	/^    char                    AD_LINE2[ cAD_LINE_len+1];$/;"	m	struct:TPCE::ADDRESS_ROW
AD_ZC_CODE	benchmarks/egen/Table_Defs.h	/^    char                    AD_ZC_CODE[ cAD_ZIP_len+1 ];$/;"	m	struct:TPCE::ADDRESS_ROW
ALLOCATOR	third-party/lz4/lz4hc.c	43;"	d	file:
ALLOCATOR_FID	dbcore/sm-oid-impl.h	/^    static FID const ALLOCATOR_FID = 1;$/;"	m	struct:sm_oid_mgr_impl
ALLOW___SYNC_BUILTINS	masstree/compiler.hh	60;"	d
ALWAYS_ASSERT	macros.h	60;"	d
ALWAYS_ASSERT	macros.h	62;"	d
ALWAYS_INLINE	macros.h	51;"	d
AND	benchmarks/results/make_graphs-6.py	/^    def AND(*extractors):$/;"	f
ANON_REGION	scopedperf.hh	757;"	d
APPLY_X_AND_Y	record/encoder.h	365;"	d
AP_ACL	benchmarks/egen/Table_Defs.h	/^    char                    AP_ACL[ cACL_len+1 ];   \/\/binary column in the table$/;"	m	struct:TPCE::ACCOUNT_PERMISSION_ROW
AP_CA_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  AP_CA_ID;$/;"	m	struct:TPCE::ACCOUNT_PERMISSION_ROW
AP_F_NAME	benchmarks/egen/Table_Defs.h	/^    char                    AP_F_NAME[ cF_NAME_len+1 ];$/;"	m	struct:TPCE::ACCOUNT_PERMISSION_ROW
AP_L_NAME	benchmarks/egen/Table_Defs.h	/^    char                    AP_L_NAME[ cL_NAME_len+1 ];$/;"	m	struct:TPCE::ACCOUNT_PERMISSION_ROW
AP_TAX_ID	benchmarks/egen/Table_Defs.h	/^    char                    AP_TAX_ID[ cTAX_ID_len+1 ];$/;"	m	struct:TPCE::ACCOUNT_PERMISSION_ROW
AR	masstree/GNUmakefile	/^AR = ar$/;"	m
AREA_CODE	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char        AREA_CODE[ cAREA_len+1 ];$/;"	m	struct:TPCE::TAreaCodeInputRow
ARRAY_NELEMS	macros.h	65;"	d
ASI_BITS	dbcore/sm-common.h	/^    static uint64_t const ASI_BITS = FLAG_BITS-1;$/;"	m	struct:fat_ptr
ASI_EXT	dbcore/sm-common.h	/^    static uint64_t const ASI_EXT = 0x30;$/;"	m	struct:fat_ptr
ASI_EXT_FLAG	dbcore/sm-common.h	/^    static uint64_t const ASI_EXT_FLAG = ASI_EXT << ASI_START_BIT;$/;"	m	struct:fat_ptr
ASI_FLAG_MASK	dbcore/sm-common.h	/^    static uint64_t const ASI_FLAG_MASK = ASI_MASK << ASI_START_BIT;$/;"	m	struct:fat_ptr
ASI_HEAP	dbcore/sm-common.h	/^    static uint64_t const ASI_HEAP = 0x20;$/;"	m	struct:fat_ptr
ASI_HEAP_FLAG	dbcore/sm-common.h	/^    static uint64_t const ASI_HEAP_FLAG = ASI_HEAP << ASI_START_BIT;$/;"	m	struct:fat_ptr
ASI_HOT	dbcore/sm-common.h	/^	static uint64_t const ASI_HOT = 0x01;$/;"	m	struct:fat_ptr
ASI_HOT_FLAG	dbcore/sm-common.h	/^    static uint64_t const ASI_HOT_FLAG = ASI_HOT << ASI_START_BIT;$/;"	m	struct:fat_ptr
ASI_LOG	dbcore/sm-common.h	/^    static uint64_t const ASI_LOG = 0x10;$/;"	m	struct:fat_ptr
ASI_LOG_FLAG	dbcore/sm-common.h	/^    static uint64_t const ASI_LOG_FLAG = ASI_LOG << ASI_START_BIT;$/;"	m	struct:fat_ptr
ASI_MASK	dbcore/sm-common.h	/^    static uint64_t const ASI_MASK = (1 << ASI_BITS) - 1;$/;"	m	struct:fat_ptr
ASI_SEGMENT_MASK	dbcore/sm-common.h	/^    static uint64_t const ASI_SEGMENT_MASK = 0x0f;$/;"	m	struct:fat_ptr
ASI_START_BIT	dbcore/sm-common.h	/^    static uint64_t const ASI_START_BIT = FLAG_START_BIT;$/;"	m	struct:fat_ptr
ASI_XID	dbcore/sm-common.h	/^    static uint64_t const ASI_XID = 0x40;$/;"	m	struct:fat_ptr
ASI_XID_FLAG	dbcore/sm-common.h	/^    static uint64_t const ASI_XID_FLAG = ASI_XID << ASI_START_BIT;$/;"	m	struct:fat_ptr
ASSERT	dbcore/sm-defs.h	178;"	d
ASSERTION_FAILURE	dbcore/sm-defs.h	189;"	d
ASSERTION_FAILURE	dbcore/sm-defs.h	192;"	d
ASSERT_MSG	dbcore/sm-defs.h	184;"	d
ASSUME	dbcore/sm-defs.h	201;"	d
ASSUME	dbcore/sm-defs.h	203;"	d
ASSUMED_PAGE_SIZE	dbcore/sm-oid-alloc-impl.h	/^    static size_t const ASSUMED_PAGE_SIZE = 1<<16;$/;"	m	struct:sm_allocator
ASSUMED_PAGE_SIZE	dbcore/sm-oid-alloc-impl.h	/^static_assert(is_aligned(sm_allocator::l2_alloc_size(), sm_allocator::ASSUMED_PAGE_SIZE),$/;"	m	class:sm_allocator
ASSUMED_PAGE_SIZE	dbcore/sm-oid-alloc-impl.h	/^static_assert(sm_allocator::l1_alloc_size() == sm_allocator::ASSUMED_PAGE_SIZE,$/;"	m	class:sm_allocator
AUTHOR	third-party/lz4/fullbench.c	101;"	d	file:
AUTHOR	third-party/lz4/lz4c.c	85;"	d	file:
AbortReasonCounter	txn.h	/^  AbortReasonCounter(abort_reason reason)$/;"	f	class:transaction_base
AbortReasonStr	txn.h	/^  AbortReasonStr(abort_reason reason)$/;"	f	class:transaction_base
AccountPermissionBuffer	benchmarks/egen/shore_tpce_egen.h	/^    AccountPermissionBuffer(int c): EgenTupleContainer<ACCOUNT_PERMISSION_ROW>(c){}$/;"	f	class:TPCE::AccountPermissionBuffer
AccountPermissionBuffer	benchmarks/egen/shore_tpce_egen.h	/^class AccountPermissionBuffer: public EgenTupleContainer<ACCOUNT_PERMISSION_ROW>{$/;"	c	namespace:TPCE
AccountPermissionRowFmt	benchmarks/egen/Table_Defs.h	/^const char AccountPermissionRowFmt[] = "%" PRId64 "|%s|%s|%s|%s\\n";$/;"	m	namespace:TPCE
Action	benchmarks/egen/error.h	/^    enum Action$/;"	g	class:TPCE::CSystemErr
Add	benchmarks/egen/DateTime.cpp	/^void CDateTime::Add(INT32 days, INT32 msec, bool adjust_weekend \/* =false *\/)$/;"	f	class:CDateTime
Add	benchmarks/egen/FixedArray.h	/^    void Add(TData *pData)$/;"	f	class:TPCE::CFixedArray
Add	benchmarks/egen/FixedMap.h	/^    void Add(int iKey, TData *pData, int iPrevKeysToFill = 1)$/;"	f	class:TPCE::CFixedMap
Add	benchmarks/egen/WheelTime.cpp	/^void CWheelTime::Add( INT32 Interval )$/;"	f	class:CWheelTime
AddArtificialEntries	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::AddArtificialEntries( void )$/;"	f	class:CMEETickerTape
AddEntry	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::AddEntry( PTickerEntry pTickerEntry )$/;"	f	class:CMEETickerTape
AddLimitTrigger	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::AddLimitTrigger( PTickerEntry pTickerEntry )$/;"	f	class:CMEETickerTape
AddMinutes	benchmarks/egen/DateTime.cpp	/^void CDateTime::AddMinutes(INT32 Minutes)$/;"	f	class:CDateTime
AddMsg	benchmarks/egen/EGenError.h	/^    void AddMsg( string Msg )$/;"	f	class:TPCE::CEGenErrorException
AddNodeToLockRegion	btree.h	/^  AddNodeToLockRegion(const node *n)$/;"	f	class:btree
AddNodeToLockRegion	masstree_btree.h	/^  AddNodeToLockRegion(const node_base_type *n)$/;"	f	class:mbtree
AddNodeToLockRegion	ownership_checker.h	/^  AddNodeToLockRegion(const T *n)$/;"	f	class:ownership_checker
AddToBatch	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::AddToBatch( PTickerEntry pTickerEntry )$/;"	f	class:CMEETickerTape
AddWorkMs	benchmarks/egen/DateTime.cpp	/^void CDateTime::AddWorkMs(INT64 WorkMs)$/;"	f	class:CDateTime
AddressBuffer	benchmarks/egen/shore_tpce_egen.h	/^    AddressBuffer(int c): EgenTupleContainer<ADDRESS_ROW>(c){}$/;"	f	class:TPCE::AddressBuffer
AddressBuffer	benchmarks/egen/shore_tpce_egen.h	/^class AddressBuffer: public EgenTupleContainer<ADDRESS_ROW>{$/;"	c	namespace:TPCE
AddressRowFmt	benchmarks/egen/Table_Defs.h	/^const char AddressRowFmt[] = "%" PRId64 "|%s|%s|%s|%s\\n";$/;"	m	namespace:TPCE
AllFields	typed_txn_btree.h	/^  typedef util::Fields<AllFieldsMask> AllFields;$/;"	t	class:typed_txn_btree
AllFieldsMask	typed_txn_btree.h	/^  static const uint64_t AllFieldsMask = (1UL << value_descriptor_type::nfields()) - 1;$/;"	m	struct:typed_txn_btree_
AllFieldsMask	typed_txn_btree.h	/^  static const uint64_t AllFieldsMask = typed_txn_btree_<Schema>::AllFieldsMask;$/;"	m	class:typed_txn_btree
AllocAlignment	allocator.h	/^  static const size_t AllocAlignment = 1 << LgAllocAlignment;$/;"	m	class:allocator
AreaCodes	benchmarks/egen/InputFlatFilesStructure.h	/^    TAreaCodeFile               *AreaCodes;$/;"	m	class:TPCE::CInputFiles
ArrayJson	masstree/json.hh	/^    inline ArrayJson(int cap)$/;"	f	struct:lcdf::Json::ArrayJson
ArrayJson	masstree/json.hh	/^struct Json::ArrayJson : public ComplexJson {$/;"	s	class:lcdf::Json
AsInternal	btree.h	/^  AsInternal(const node *n)$/;"	f	class:btree
AsInternal	btree.h	/^  AsInternal(node *n)$/;"	f	class:btree
AsInternalCheck	btree.h	/^  AsInternalCheck(const node *n)$/;"	f	class:btree
AsInternalCheck	btree.h	/^  AsInternalCheck(node *n)$/;"	f	class:btree
AsLeaf	btree.h	/^  AsLeaf(const node *n)$/;"	f	class:btree
AsLeaf	btree.h	/^  AsLeaf(node *n)$/;"	f	class:btree
AsLeafCheck	btree.h	/^  AsLeafCheck(const node *n)$/;"	f	class:btree
AsLeafCheck	btree.h	/^  AsLeafCheck(const node *n, uint64_t v)$/;"	f	class:btree
AsLeafCheck	btree.h	/^  AsLeafCheck(node *n)$/;"	f	class:btree
AsLeafCheck	btree.h	/^  AsLeafCheck(node *n, uint64_t v)$/;"	f	class:btree
AssertAllNodeLocksReleased	btree.h	/^  AssertAllNodeLocksReleased()$/;"	f	class:btree
AssertAllNodeLocksReleased	masstree_btree.h	/^  AssertAllNodeLocksReleased()$/;"	f	class:mbtree
AssertAllNodeLocksReleased	ownership_checker.h	/^  AssertAllNodeLocksReleased()$/;"	f	class:ownership_checker
AssignmentsValid	persist_test.cc	/^  AssignmentsValid(const vector<vector<unsigned>> &assignments,$/;"	f	class:database_simulation
AutoRand	benchmarks/tpce.cc	/^unsigned int AutoRand()$/;"	f
AutoSetRNGSeeds	benchmarks/egen/CE.cpp	/^void CCE::AutoSetRNGSeeds( UINT32 UniqueId )$/;"	f	class:CCE
AutoSetRNGSeeds	benchmarks/egen/DM.cpp	/^void CDM::AutoSetRNGSeeds( UINT32 UniqueId )$/;"	f	class:CDM
AutoSetRNGSeeds	benchmarks/egen/MEE.cpp	/^void CMEE::AutoSetRNGSeeds( UINT32 UniqueId )$/;"	f	class:CMEE
B	dbcore/size-encode.cpp	11;"	d	file:
B	dbcore/size-encode.cpp	12;"	d	file:
B	dbcore/size-encode.cpp	21;"	d	file:
B	dbcore/size-encode.cpp	3;"	d	file:
B16	dbcore/adler.cpp	/^static v16qi const B16 = {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16};$/;"	v	file:
BACKOFF_SPINS_FACTOR	macros.h	86;"	d
BASE	masstree/doc/GNUmakefile	/^BASE := $(basename $(MAIN))$/;"	m
BASE_LOADER_FACTORY_H	benchmarks/egen/BaseLoaderFactory.h	43;"	d
BASE_LOADER_H	benchmarks/egen/BaseLoader.h	42;"	d
BASE_LOGGER_H	benchmarks/egen/BaseLogger.h	42;"	d
BASE_LOG_FORMATTER_H	benchmarks/egen/BaseLogFormatter.h	43;"	d
BENCHMARKS	benchmarks/results/tom-2-6-13.py	/^BENCHMARKS = ('tpcc',)$/;"	v
BENCH_CXXFLAGS	Makefile	/^BENCH_CXXFLAGS := $(CXXFLAGS)$/;"	m
BENCH_LDFLAGS	Makefile	/^BENCH_LDFLAGS := $(LDFLAGS) -ldb_cxx -lz -lrt -lcrypt -laio -ldl -lssl -lcrypto$/;"	m
BENCH_LDFLAGS	Makefile	/^BENCH_LDFLAGS := -L\/usr\/lib\/mysql -lmysqld $(BENCH_LDFLAGS)$/;"	m
BENCH_OBJFILES	Makefile	/^BENCH_OBJFILES := $(patsubst %.cc, $(O)\/%.o, $(BENCH_SRCFILES))$/;"	m
BENCH_SRCFILES	Makefile	/^BENCH_SRCFILES = \\$/;"	m
BIBFILES	masstree/doc/GNUmakefile	/^BIBFILES := $(wildcard *.bib)$/;"	m
BIBTEX	masstree/doc/GNUmakefile	/^BIBTEX = bibtex -min-crossrefs=1000$/;"	m
BIDMAX_REC_KEY_FIELDS	benchmarks/bid.cc	40;"	d	file:
BIDMAX_REC_VALUE_FIELDS	benchmarks/bid.cc	42;"	d	file:
BIDUSER_REC_KEY_FIELDS	benchmarks/bid.cc	26;"	d	file:
BIDUSER_REC_VALUE_FIELDS	benchmarks/bid.cc	28;"	d	file:
BID_REC_KEY_FIELDS	benchmarks/bid.cc	32;"	d	file:
BID_REC_VALUE_FIELDS	benchmarks/bid.cc	35;"	d	file:
BIGMATH_H	benchmarks/egen/BigMath.h	38;"	d
BIG_TO_HOST_TRANSFORM	record/encoder.h	84;"	d
BIT63	benchmarks/egen/BigMath.h	46;"	d
BITS_PER_WORD	dbcore/xid.cpp	/^    static size_t const constexpr BITS_PER_WORD = 8*sizeof(uint64_t);$/;"	m	struct:TXN::bitmap	file:
BMK_GetFileSize	third-party/lz4/bench.c	/^static U64 BMK_GetFileSize(char* infilename)$/;"	f	file:
BMK_GetFileSize	third-party/lz4/fullbench.c	/^static U64 BMK_GetFileSize(char* infilename)$/;"	f	file:
BMK_GetMilliSpan	third-party/lz4/bench.c	/^static int BMK_GetMilliSpan( int nTimeStart )$/;"	f	file:
BMK_GetMilliSpan	third-party/lz4/fullbench.c	/^static int BMK_GetMilliSpan( int nTimeStart )$/;"	f	file:
BMK_GetMilliStart	third-party/lz4/bench.c	/^static int BMK_GetMilliStart()$/;"	f	file:
BMK_GetMilliStart	third-party/lz4/fullbench.c	/^static int BMK_GetMilliStart()$/;"	f	file:
BMK_LEGACY_TIMER	third-party/lz4/bench.c	43;"	d	file:
BMK_LEGACY_TIMER	third-party/lz4/fullbench.c	43;"	d	file:
BMK_SetBlocksize	third-party/lz4/bench.c	/^void BMK_SetBlocksize(int bsize)$/;"	f
BMK_SetBlocksize	third-party/lz4/fullbench.c	/^void BMK_SetBlocksize(int bsize)$/;"	f
BMK_SetNbIterations	third-party/lz4/bench.c	/^void BMK_SetNbIterations(int nbLoops)$/;"	f
BMK_SetNbIterations	third-party/lz4/fullbench.c	/^void BMK_SetNbIterations(int nbLoops)$/;"	f
BMK_SetPause	third-party/lz4/bench.c	/^void BMK_SetPause()$/;"	f
BMK_SetPause	third-party/lz4/fullbench.c	/^void BMK_SetPause()$/;"	f
BMK_benchFile	third-party/lz4/bench.c	/^int BMK_benchFile(char** fileNamesTable, int nbFiles, int cLevel)$/;"	f
BMK_findMaxMem	third-party/lz4/bench.c	/^static size_t BMK_findMaxMem(U64 requiredMem)$/;"	f	file:
BMK_findMaxMem	third-party/lz4/fullbench.c	/^static size_t BMK_findMaxMem(U64 requiredMem)$/;"	f	file:
BMK_pause	third-party/lz4/bench.c	/^static int BMK_pause = 0;$/;"	v	file:
BMK_pause	third-party/lz4/fullbench.c	/^static int BMK_pause = 0;$/;"	v	file:
BONE	dbcore/adler.cpp	/^static v16qi const BONE = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};$/;"	v	file:
BOOLEAN_FALSE	benchmarks/egen/FlatFileLoader.h	70;"	d
BOOLEAN_TRUE	benchmarks/egen/FlatFileLoader.h	66;"	d
BROKERS_H	benchmarks/egen/Brokers.h	41;"	d
BROKER_KEY_FIELDS	benchmarks/tpce.h	127;"	d
BROKER_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct BROKER_ROW$/;"	s	namespace:TPCE
BROKER_VALUE_FIELDS	benchmarks/tpce.h	129;"	d
BROKER_VOLUME	benchmarks/egen/CE.h	/^    static const INT32 BROKER_VOLUME            = CCETxnMixGenerator::BROKER_VOLUME;$/;"	m	class:TPCE::CCE
BROKER_VOLUME	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 BROKER_VOLUME            =  1;$/;"	m	class:TPCE::CCETxnMixGenerator
BTREE_LEAFLINK_HH	masstree/btree_leaflink.hh	17;"	d
BTREE_NODE_ALLOC_CACHE_ALIGNED	macros.h	16;"	d
BTREE_NODE_PREFETCH	macros.h	11;"	d
BUCKETSIM_H_INCLUDED	benchmarks/egen/bucketsimulator.h	38;"	d
BUFFER_SIZE	benchmarks/egen/FlatFileLoader.h	74;"	d
BUILDDIR	benchmarks/stats_runner.py	/^BUILDDIR='..\/out-perf.ectrs'$/;"	v
BVF1_ERROR1	benchmarks/egen/error.h	/^        BVF1_ERROR1 = -111,	\/\/ list_len not in [0..max_broker_list_len]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
BV_settings	benchmarks/egen/DriverParamSettings.h	/^    CBrokerVolumeSettings       BV_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
BYTE	third-party/lz4/bench.c	/^  typedef uint8_t  BYTE;$/;"	t	file:
BYTE	third-party/lz4/bench.c	/^  typedef unsigned char       BYTE;$/;"	t	file:
BYTE	third-party/lz4/fullbench.c	/^  typedef uint8_t  BYTE;$/;"	t	file:
BYTE	third-party/lz4/fullbench.c	/^  typedef unsigned char       BYTE;$/;"	t	file:
BYTE	third-party/lz4/lz4.c	/^  typedef uint8_t  BYTE;$/;"	t	file:
BYTE	third-party/lz4/lz4.c	/^  typedef unsigned char       BYTE;$/;"	t	file:
BYTE	third-party/lz4/lz4hc.c	/^  typedef uint8_t  BYTE;$/;"	t	file:
BYTE	third-party/lz4/lz4hc.c	/^  typedef unsigned char       BYTE;$/;"	t	file:
BYTE	third-party/lz4/xxhash.c	/^  typedef uint8_t  BYTE;$/;"	t	file:
BYTE	third-party/lz4/xxhash.c	/^  typedef unsigned char      BYTE;$/;"	t	file:
B_COMM_TOTAL	benchmarks/egen/Table_Defs.h	/^    double                  B_COMM_TOTAL;$/;"	m	struct:TPCE::BROKER_ROW
B_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  B_ID;$/;"	m	struct:TPCE::BROKER_ROW
B_NAME	benchmarks/egen/Table_Defs.h	/^    char                    B_NAME[ cB_NAME_len+1 ];$/;"	m	struct:TPCE::BROKER_ROW
B_NUM_TRADES	benchmarks/egen/Table_Defs.h	/^    int                     B_NUM_TRADES;$/;"	m	struct:TPCE::BROKER_ROW
B_ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    B_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::BROKER_ROW
BackOffFromEndTimeFrame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   BackOffFromEndTimeFrame2;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeLookupSettings
BackOffFromEndTimeFrame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   BackOffFromEndTimeFrame2;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeUpdateSettings
BackOffFromEndTimeFrame2	benchmarks/egen/DriverParamSettings.h	/^    bool    BackOffFromEndTimeFrame2;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeLookupSettingsState
BackOffFromEndTimeFrame2	benchmarks/egen/DriverParamSettings.h	/^    bool    BackOffFromEndTimeFrame2;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeUpdateSettingsState
BackOffFromEndTimeFrame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   BackOffFromEndTimeFrame3;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeLookupSettings
BackOffFromEndTimeFrame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   BackOffFromEndTimeFrame3;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeUpdateSettings
BackOffFromEndTimeFrame3	benchmarks/egen/DriverParamSettings.h	/^    bool    BackOffFromEndTimeFrame3;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeLookupSettingsState
BackOffFromEndTimeFrame3	benchmarks/egen/DriverParamSettings.h	/^    bool    BackOffFromEndTimeFrame3;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeUpdateSettingsState
BackOffFromEndTimeFrame4	benchmarks/egen/DriverParamSettings.h	/^    INT32   BackOffFromEndTimeFrame4;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeLookupSettings
BackOffFromEndTimeFrame4	benchmarks/egen/DriverParamSettings.h	/^    bool    BackOffFromEndTimeFrame4;   \/\/ Used to cap time interval generated.$/;"	m	struct:TPCE::TTradeLookupSettingsState
BrokerBuffer	benchmarks/egen/shore_tpce_egen.h	/^    BrokerBuffer(int c): EgenTupleContainer<BROKER_ROW>(c){}$/;"	f	class:TPCE::BrokerBuffer
BrokerBuffer	benchmarks/egen/shore_tpce_egen.h	/^class BrokerBuffer: public EgenTupleContainer<BROKER_ROW>{$/;"	c	namespace:TPCE
BrokerRowFmt	benchmarks/egen/Table_Defs.h	/^const char BrokerRowFmt[] = "%" PRId64 "|%s|%s|%d|%.2f\\n";$/;"	m	namespace:TPCE
BrokerVolume	benchmarks/tpce.cc	/^		static txn_result BrokerVolume(bench_worker *w)$/;"	f	class:tpce_worker
BrokerVolumeMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   BrokerVolumeMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
BrokerVolumeMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    BrokerVolumeMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
BucketProgress	benchmarks/egen/bucketsimulator.cpp	/^BucketProgress::BucketProgress(double acceptable_stddev, int total_in, int verbosity, std::ostream* output)$/;"	f	class:TPCE::BucketProgress
BucketProgress	benchmarks/egen/bucketsimulator.h	/^class BucketProgress : public ProgressMeter$/;"	c	namespace:TPCE
BucketSimOptions	benchmarks/egen/EGenValidate.cpp	/^        BucketSimOptions()$/;"	f	class:BucketSimOptions
BucketSimOptions	benchmarks/egen/EGenValidate.cpp	/^class BucketSimOptions {$/;"	c	file:
BucketSimulator	benchmarks/egen/bucketsimulator.cpp	/^BucketSimulator::BucketSimulator($/;"	f	class:TPCE::BucketSimulator
BucketSimulator	benchmarks/egen/bucketsimulator.h	/^class BucketSimulator {$/;"	c	namespace:TPCE
BuyDTS	benchmarks/egen/TradeGen.h	/^    CDateTime       BuyDTS;$/;"	m	struct:TPCE::THoldingInfo
C2	dbcore/adler.cpp	/^static v16qi const C2 = {16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1};$/;"	v	file:
CACHELINE	third-party/lz4/lz4c.c	105;"	d	file:
CACHELINE_SIZE	macros.h	33;"	d
CACHE_ALIGNED	core.h	/^  static std::atomic<unsigned> g_core_count CACHE_ALIGNED;$/;"	m	class:coreid
CACHE_ALIGNED	macros.h	42;"	d
CACHE_ALIGNED	persist_test.cc	/^  } per_thread_sync_epochs_[g_nmax_loggers] CACHE_ALIGNED;$/;"	m	class:database_simulation	typeref:struct:database_simulation::__anon1	file:
CACHE_ALIGNED	ticker.h	/^  static ticker s_instance CACHE_ALIGNED; \/\/ system wide ticker$/;"	m	class:ticker
CACHE_ALIGNED	txn_proto2_impl.h	/^    g_hack CACHE_ALIGNED;$/;"	m	class:transaction_proto2_static
CACHE_ALIGNED	util.h	/^} CACHE_ALIGNED;$/;"	m	namespace:util	typeref:class:util::aligned_padded_elem
CACHE_LINE_SIZE	masstree/config.h	11;"	d
CACHE_PADOUT	core.h	/^  CACHE_PADOUT;$/;"	m	class:percore_lazy
CACHE_PADOUT	macros.h	46;"	d
CACHE_PADOUT	persist_test.cc	/^    CACHE_PADOUT;$/;"	m	struct:database_simulation::__anon1	file:
CACHE_PADOUT	util.h	/^  CACHE_PADOUT;$/;"	m	class:util::aligned_padded_elem
CAPACITY	dbcore/sm-oid-alloc-impl.h	/^    static size_t const CAPACITY = CAPACITY_BYTES\/sizeof(uint16_t);$/;"	m	struct:sparse_bitset
CAPACITY_BYTES	dbcore/sm-oid-alloc-impl.h	/^    static size_t const CAPACITY_BYTES = 2*sizeof(v8hi);$/;"	m	struct:sparse_bitset
CARRY32	benchmarks/egen/BigMath.h	47;"	d
CASE_X	txn.h	107;"	d
CASE_X	txn.h	109;"	d
CASH_KEY_FIELDS	benchmarks/tpce.h	136;"	d
CASH_TRANSACTION_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct CASH_TRANSACTION_ROW$/;"	s	namespace:TPCE
CASH_VALUE_FIELDS	benchmarks/tpce.h	138;"	d
CA_BAL	benchmarks/egen/Table_Defs.h	/^    double                  CA_BAL;$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_ROW
CA_B_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CA_B_ID;$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_ROW
CA_C_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CA_C_ID;$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_ROW
CA_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CA_ID;$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_ROW
CA_NAME	benchmarks/egen/Table_Defs.h	/^    char                    CA_NAME[ cCA_NAME_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_ROW
CA_TAX_ST	benchmarks/egen/Table_Defs.h	/^    char                    CA_TAX_ST;$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_ROW
CAddressTable	benchmarks/egen/AddressTable.cpp	/^CAddressTable::CAddressTable(CInputFiles    inputFiles,$/;"	f	class:CAddressTable
CAddressTable	benchmarks/egen/AddressTable.h	/^class CAddressTable : public TableTemplate<ADDRESS_ROW>$/;"	c	namespace:TPCE
CBaseErr	benchmarks/egen/error.h	/^    CBaseErr()$/;"	f	class:TPCE::CBaseErr
CBaseErr	benchmarks/egen/error.h	/^    CBaseErr(char const * szLoc)$/;"	f	class:TPCE::CBaseErr
CBaseErr	benchmarks/egen/error.h	/^    CBaseErr(int idMsg)$/;"	f	class:TPCE::CBaseErr
CBaseErr	benchmarks/egen/error.h	/^    CBaseErr(int idMsg, char const * szLoc)$/;"	f	class:TPCE::CBaseErr
CBaseErr	benchmarks/egen/error.h	/^class CBaseErr : public std::exception$/;"	c	namespace:TPCE
CBaseLoader	benchmarks/egen/BaseLoader.h	/^template <typename T> class CBaseLoader$/;"	c	namespace:TPCE
CBaseLoaderFactory	benchmarks/egen/BaseLoaderFactory.h	/^class CBaseLoaderFactory$/;"	c	namespace:TPCE
CBaseLogFormatter	benchmarks/egen/BaseLogFormatter.h	/^class CBaseLogFormatter$/;"	c	namespace:TPCE
CBaseLogger	benchmarks/egen/BaseLogger.cpp	/^CBaseLogger::CBaseLogger(eDriverType drvType, INT32 UniqueId, CBaseLogFormatter* pFormatter)$/;"	f	class:CBaseLogger
CBaseLogger	benchmarks/egen/BaseLogger.h	/^class CBaseLogger$/;"	c	namespace:TPCE
CBaseTxnErr	benchmarks/egen/error.h	/^class CBaseTxnErr$/;"	c	namespace:TPCE
CBrokerVolume	benchmarks/egen/TxnHarnessBrokerVolume.h	/^    CBrokerVolume(CBrokerVolumeDBInterface *pDB)$/;"	f	class:TPCE::CBrokerVolume
CBrokerVolume	benchmarks/egen/TxnHarnessBrokerVolume.h	/^class CBrokerVolume$/;"	c	namespace:TPCE
CBrokerVolumeDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CBrokerVolumeDBInterface {$/;"	c	namespace:TPCE
CBrokerVolumeSettings	benchmarks/egen/DriverParamSettings.h	/^    CBrokerVolumeSettings()$/;"	f	class:TPCE::CBrokerVolumeSettings
CBrokerVolumeSettings	benchmarks/egen/DriverParamSettings.h	/^class CBrokerVolumeSettings : public CParametersWithDefaults< struct TBrokerVolumeSettings, struct TBrokerVolumeSettingsState >$/;"	c	namespace:TPCE
CBrokersTable	benchmarks/egen/Brokers.h	/^    CBrokersTable(CInputFiles inputFiles, TIdent iCustomerCount, TIdent iStartFromCustomer)$/;"	f	class:TPCE::CBrokersTable
CBrokersTable	benchmarks/egen/Brokers.h	/^class CBrokersTable : public TableTemplate<BROKER_ROW>$/;"	c	namespace:TPCE
CC	masstree/GNUmakefile	/^CC = gcc$/;"	m
CC	third-party/lz4/Makefile	/^CC=gcc$/;"	m
CCE	benchmarks/egen/CE.cpp	/^CCE::CCE( CCESUTInterface *pSUT, CBaseLogger *pLogger, const CInputFiles &inputFiles,$/;"	f	class:CCE
CCE	benchmarks/egen/CE.h	/^class CCE$/;"	c	namespace:TPCE
CCESUTInterface	benchmarks/egen/CESUTInterface.h	/^class CCESUTInterface$/;"	c	namespace:TPCE
CCETxnInputGenerator	benchmarks/egen/CETxnInputGenerator.cpp	/^CCETxnInputGenerator::CCETxnInputGenerator( const CInputFiles &inputFiles,$/;"	f	class:CCETxnInputGenerator
CCETxnInputGenerator	benchmarks/egen/CETxnInputGenerator.h	/^class CCETxnInputGenerator$/;"	c	namespace:TPCE
CCETxnMixGenerator	benchmarks/egen/CETxnMixGenerator.cpp	/^CCETxnMixGenerator::CCETxnMixGenerator( const PDriverCETxnSettings pDriverCETxnSettings, CBaseLogger* pLogger )$/;"	f	class:CCETxnMixGenerator
CCETxnMixGenerator	benchmarks/egen/CETxnMixGenerator.cpp	/^CCETxnMixGenerator::CCETxnMixGenerator( const PDriverCETxnSettings pDriverCETxnSettings, RNGSEED RNGSeed, CBaseLogger* pLogger )$/;"	f	class:CCETxnMixGenerator
CCETxnMixGenerator	benchmarks/egen/CETxnMixGenerator.h	/^class CCETxnMixGenerator$/;"	c	namespace:TPCE
CChargeTable	benchmarks/egen/ChargeTable.h	/^    CChargeTable( char *szDirName ) \/\/ input directory where to find the flat file$/;"	f	class:TPCE::CChargeTable
CChargeTable	benchmarks/egen/ChargeTable.h	/^class CChargeTable : public TableTemplate<CHARGE_ROW>$/;"	c	namespace:TPCE
CCheckErr	benchmarks/egen/error.h	/^    CCheckErr()$/;"	f	class:TPCE::CCheckErr
CCheckErr	benchmarks/egen/error.h	/^    CCheckErr(const char *name, const std::string& msg)$/;"	f	class:TPCE::CCheckErr
CCheckErr	benchmarks/egen/error.h	/^class CCheckErr : public CBaseErr$/;"	c	namespace:TPCE
CCommissionRateTable	benchmarks/egen/CommissionRateTable.h	/^    CCommissionRateTable( char *szDirName )$/;"	f	class:TPCE::CCommissionRateTable
CCommissionRateTable	benchmarks/egen/CommissionRateTable.h	/^class CCommissionRateTable : public TableTemplate<COMMISSION_RATE_ROW>$/;"	c	namespace:TPCE
CCompanyCompetitorFile	benchmarks/egen/CompanyCompetitorFile.h	/^    CCompanyCompetitorFile(const char *szListFile, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CCompanyCompetitorFile
CCompanyCompetitorFile	benchmarks/egen/CompanyCompetitorFile.h	/^    CCompanyCompetitorFile(const string &str, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CCompanyCompetitorFile
CCompanyCompetitorFile	benchmarks/egen/CompanyCompetitorFile.h	/^class CCompanyCompetitorFile : public CFlatFile<TCompanyCompetitorInputRow, TCompanyCompetitorLimits>$/;"	c	namespace:TPCE
CCompanyCompetitorTable	benchmarks/egen/CompanyCompetitorTable.h	/^    CCompanyCompetitorTable(CInputFiles inputFiles,$/;"	f	class:TPCE::CCompanyCompetitorTable
CCompanyCompetitorTable	benchmarks/egen/CompanyCompetitorTable.h	/^class CCompanyCompetitorTable : public TableTemplate<COMPANY_COMPETITOR_ROW>$/;"	c	namespace:TPCE
CCompanyFile	benchmarks/egen/CompanyFile.h	/^    CCompanyFile(const char *szListFile, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CCompanyFile
CCompanyFile	benchmarks/egen/CompanyFile.h	/^    CCompanyFile(const string &str, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CCompanyFile
CCompanyFile	benchmarks/egen/CompanyFile.h	/^class CCompanyFile  : public CFlatFile<TCompanyInputRow, TCompanyLimits>$/;"	c	namespace:TPCE
CCompanyTable	benchmarks/egen/CompanyTable.h	/^    CCompanyTable(  CInputFiles inputFiles,$/;"	f	class:TPCE::CCompanyTable
CCompanyTable	benchmarks/egen/CompanyTable.h	/^class CCompanyTable : public TableTemplate<COMPANY_ROW>$/;"	c	namespace:TPCE
CCondition	benchmarks/egen/threading_pthread.h	/^class CCondition$/;"	c	namespace:TPCE
CCondition	benchmarks/egen/threading_single.h	/^class CCondition$/;"	c	namespace:TPCE
CCustomerAccountsAndPermissionsTable	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    CCustomerAccountsAndPermissionsTable(CInputFiles    inputFiles,$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
CCustomerAccountsAndPermissionsTable	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^class CCustomerAccountsAndPermissionsTable : public TableTemplate<CUSTOMER_ACCOUNT_AND_PERMISSION_ROW>$/;"	c	namespace:TPCE
CCustomerPosition	benchmarks/egen/TxnHarnessCustomerPosition.h	/^    CCustomerPosition(CCustomerPositionDBInterface *pDB)$/;"	f	class:TPCE::CCustomerPosition
CCustomerPosition	benchmarks/egen/TxnHarnessCustomerPosition.h	/^class CCustomerPosition$/;"	c	namespace:TPCE
CCustomerPositionDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CCustomerPositionDBInterface {$/;"	c	namespace:TPCE
CCustomerPositionSettings	benchmarks/egen/DriverParamSettings.h	/^    CCustomerPositionSettings()$/;"	f	class:TPCE::CCustomerPositionSettings
CCustomerPositionSettings	benchmarks/egen/DriverParamSettings.h	/^class CCustomerPositionSettings : public CParametersWithDefaults< struct TCustomerPositionSettings, struct TCustomerPositionSettingsState >$/;"	c	namespace:TPCE
CCustomerSelection	benchmarks/egen/CustomerSelection.cpp	/^CCustomerSelection::CCustomerSelection( CRandom*    pRND,$/;"	f	class:CCustomerSelection
CCustomerSelection	benchmarks/egen/CustomerSelection.cpp	/^CCustomerSelection::CCustomerSelection()$/;"	f	class:CCustomerSelection
CCustomerSelection	benchmarks/egen/CustomerSelection.h	/^class CCustomerSelection$/;"	c	namespace:TPCE
CCustomerTable	benchmarks/egen/CustomerTable.cpp	/^CCustomerTable::CCustomerTable(CInputFiles  inputFiles,$/;"	f	class:CCustomerTable
CCustomerTable	benchmarks/egen/CustomerTable.h	/^class CCustomerTable : public TableTemplate<CUSTOMER_ROW>$/;"	c	namespace:TPCE
CCustomerTaxratesTable	benchmarks/egen/CustomerTaxratesTable.h	/^        CCustomerTaxratesTable(CInputFiles inputFiles,$/;"	f	class:TPCE::CCustomerTaxratesTable
CCustomerTaxratesTable	benchmarks/egen/CustomerTaxratesTable.h	/^class CCustomerTaxratesTable : public TableTemplate<CUSTOMER_TAXRATE_ROWS>$/;"	c	namespace:TPCE
CDM	benchmarks/egen/DM.cpp	/^CDM::CDM( CDMSUTInterface *pSUT, CBaseLogger *pLogger, CInputFiles &inputFiles, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount, INT32 iScaleFactor, INT32 iDaysOfInitialTrades, UINT32 UniqueId )$/;"	f	class:CDM
CDM	benchmarks/egen/DM.cpp	/^CDM::CDM( CDMSUTInterface *pSUT, CBaseLogger *pLogger, CInputFiles &inputFiles, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount, INT32 iScaleFactor, INT32 iDaysOfInitialTrades, UINT32 UniqueId, RNGSEED RNGSeed )$/;"	f	class:CDM
CDM	benchmarks/egen/DM.h	/^class CDM$/;"	c	namespace:TPCE
CDMSUTInterface	benchmarks/egen/DMSUTInterface.h	/^class CDMSUTInterface$/;"	c	namespace:TPCE
CDailyMarketTable	benchmarks/egen/DailyMarketTable.h	/^    CDailyMarketTable(  CInputFiles inputFiles,$/;"	f	class:TPCE::CDailyMarketTable
CDailyMarketTable	benchmarks/egen/DailyMarketTable.h	/^class CDailyMarketTable : public TableTemplate<DAILY_MARKET_GEN_ROW>$/;"	c	namespace:TPCE
CDataMaintenance	benchmarks/egen/TxnHarnessDataMaintenance.h	/^    CDataMaintenance(CDataMaintenanceDBInterface *pDB)$/;"	f	class:TPCE::CDataMaintenance
CDataMaintenance	benchmarks/egen/TxnHarnessDataMaintenance.h	/^class CDataMaintenance$/;"	c	namespace:TPCE
CDataMaintenanceDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CDataMaintenanceDBInterface {$/;"	c	namespace:TPCE
CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::CDateTime(INT32 dayno)$/;"	f	class:CDateTime
CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::CDateTime(INT32 year, INT32 month, INT32 day)$/;"	f	class:CDateTime
CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::CDateTime(INT32 year, INT32 month, INT32 day, INT32 hour, INT32 minute, INT32 second, INT32 msec)$/;"	f	class:CDateTime
CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::CDateTime(TPCE::TIMESTAMP_STRUCT *ts)$/;"	f	class:CDateTime
CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::CDateTime(const CDateTime& dt)$/;"	f	class:CDateTime
CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::CDateTime(void)$/;"	f	class:CDateTime
CDateTime	benchmarks/egen/DateTime.h	/^class CDateTime$/;"	c	namespace:TPCE
CDriverCEPartitionSettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverCEPartitionSettings( )$/;"	f	class:TPCE::CDriverCEPartitionSettings
CDriverCEPartitionSettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverCEPartitionSettings( TIdent iMyStartingCustomerId, TIdent iMyCustomerCount, INT32 iPartitionPercent )$/;"	f	class:TPCE::CDriverCEPartitionSettings
CDriverCEPartitionSettings	benchmarks/egen/DriverParamSettings.h	/^class CDriverCEPartitionSettings : public CParametersWithDefaults< struct TDriverCEPartitionSettings, struct TDriverCEPartitionSettingsState >$/;"	c	namespace:TPCE
CDriverCESettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverCESettings( UINT32 UniqueId, RNGSEED TxnMixRNGSeed, RNGSEED TxnInputRNGSeed )$/;"	f	class:TPCE::CDriverCESettings
CDriverCESettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverCESettings() {} ;$/;"	f	class:TPCE::CDriverCESettings
CDriverCESettings	benchmarks/egen/DriverParamSettings.h	/^class CDriverCESettings : public CParametersWithoutDefaults< struct TDriverCESettings >$/;"	c	namespace:TPCE
CDriverDMSettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverDMSettings( UINT32 UniqueId, RNGSEED RNGSeed )$/;"	f	class:TPCE::CDriverDMSettings
CDriverDMSettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverDMSettings() {};$/;"	f	class:TPCE::CDriverDMSettings
CDriverDMSettings	benchmarks/egen/DriverParamSettings.h	/^class CDriverDMSettings : public CParametersWithoutDefaults< struct TDriverDMSettings >$/;"	c	namespace:TPCE
CDriverGlobalSettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverGlobalSettings( TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount, INT32 iScaleFactor, INT32 iDaysOfInitialTrades )$/;"	f	class:TPCE::CDriverGlobalSettings
CDriverGlobalSettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverGlobalSettings()$/;"	f	class:TPCE::CDriverGlobalSettings
CDriverGlobalSettings	benchmarks/egen/DriverParamSettings.h	/^class CDriverGlobalSettings : public CParametersWithDefaults< struct TDriverGlobalSettings, struct TDriverGlobalSettingsState >$/;"	c	namespace:TPCE
CDriverMEESettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverMEESettings( UINT32 UniqueId, RNGSEED RNGSeed, RNGSEED TickerTapeRNGSeed, RNGSEED TradingFloorRNGSeed )$/;"	f	class:TPCE::CDriverMEESettings
CDriverMEESettings	benchmarks/egen/DriverParamSettings.h	/^    CDriverMEESettings() {} ;$/;"	f	class:TPCE::CDriverMEESettings
CDriverMEESettings	benchmarks/egen/DriverParamSettings.h	/^class CDriverMEESettings : public CParametersWithoutDefaults< struct TDriverMEESettings >$/;"	c	namespace:TPCE
CEGenErrorException	benchmarks/egen/EGenError.h	/^    CEGenErrorException( string Msg )$/;"	f	class:TPCE::CEGenErrorException
CEGenErrorException	benchmarks/egen/EGenError.h	/^class CEGenErrorException$/;"	c	namespace:TPCE
CEGenErrorMessages	benchmarks/egen/EGenError.h	/^class CEGenErrorMessages$/;"	c	namespace:TPCE
CEGenLogger	benchmarks/egen/EGenLogger.h	/^    CEGenLogger(eDriverType drvType, UINT32 UniqueId, const char *szFilename, CBaseLogFormatter* pLogFormatter)$/;"	f	class:TPCE::CEGenLogger
CEGenLogger	benchmarks/egen/EGenLogger.h	/^class CEGenLogger : public CBaseLogger$/;"	c	namespace:TPCE
CE_H	benchmarks/egen/CE.h	107;"	d
CE_SUT_INTERFACE_H	benchmarks/egen/CESUTInterface.h	44;"	d
CE_TXN_INPUT_GENERATOR_H	benchmarks/egen/CETxnInputGenerator.h	42;"	d
CE_TXN_MIX_GENERATOR_H	benchmarks/egen/CETxnMixGenerator.h	43;"	d
CExchangeTable	benchmarks/egen/ExchangeTable.h	/^    CExchangeTable( char *szDirName, TIdent iConfiguredCustomerCount )$/;"	f	class:TPCE::CExchangeTable
CExchangeTable	benchmarks/egen/ExchangeTable.h	/^class CExchangeTable : public TableTemplate<EXCHANGE_ROW>$/;"	c	namespace:TPCE
CFLAGS	masstree/GNUmakefile	/^CFLAGS = -g -W -Wall -O2$/;"	m
CFLAGS	third-party/lz4/Makefile	/^CFLAGS=-I. -std=c99 -Wall -W -Wundef -Wno-implicit-function-declaration$/;"	m
CFileInMemoryList	benchmarks/egen/FlatFile.h	/^    typedef CFixedArray<T, TKeyAndElementsLimits>   CFileInMemoryList;  \/\/array of arrays$/;"	t	class:TPCE::CFlatFile
CFileInMemoryList	benchmarks/egen/InputFile.h	/^    typedef CFixedMap<T, TKeyAndElementsLimits> CFileInMemoryList;  \/\/(key, data) pairs container$/;"	t	class:TPCE::CInputFile
CFileInMemoryList	benchmarks/egen/InputFileNoWeight.h	/^    typedef vector<PVectorT>    CFileInMemoryList;  \/\/array of arrays$/;"	t	class:TPCE::CInputFileNoWeight
CFinalTransform	benchmarks/egen/FinalTransform.h	/^class CFinalTransform$/;"	c	namespace:TPCE
CFinancialTable	benchmarks/egen/FinancialTable.h	/^    CFinancialTable(CInputFiles inputFiles,$/;"	f	class:TPCE::CFinancialTable
CFinancialTable	benchmarks/egen/FinancialTable.h	/^class CFinancialTable : public TableTemplate<FINANCIAL_GEN_ROW>$/;"	c	namespace:TPCE
CFixedArray	benchmarks/egen/FixedArray.h	/^    CFixedArray()$/;"	f	class:TPCE::CFixedArray
CFixedArray	benchmarks/egen/FixedArray.h	/^class CFixedArray$/;"	c	namespace:TPCE
CFixedArrayErr	benchmarks/egen/FixedArray.h	/^    CFixedArrayErr( eFixedArrayErrs iErr, const char *szLoc) : CBaseErr(iErr, szLoc) {};$/;"	f	class:TPCE::CFixedArrayErr
CFixedArrayErr	benchmarks/egen/FixedArray.h	/^class CFixedArrayErr : public CBaseErr$/;"	c	namespace:TPCE
CFixedMap	benchmarks/egen/FixedMap.h	/^    CFixedMap()$/;"	f	class:TPCE::CFixedMap
CFixedMap	benchmarks/egen/FixedMap.h	/^class CFixedMap$/;"	c	namespace:TPCE
CFixedMapErr	benchmarks/egen/FixedMap.h	/^    CFixedMapErr( eFixedMapErrs iErr, const char *szLoc) : CBaseErr(iErr, szLoc) {};$/;"	f	class:TPCE::CFixedMapErr
CFixedMapErr	benchmarks/egen/FixedMap.h	/^class CFixedMapErr : public CBaseErr$/;"	c	namespace:TPCE
CFlatAccountPermissionLoad	benchmarks/egen/FlatAccountPermissionLoad.h	/^    CFlatAccountPermissionLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode) : CFlatFileLoader<ACCOUNT_PERMISSION_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatAccountPermissionLoad
CFlatAccountPermissionLoad	benchmarks/egen/FlatAccountPermissionLoad.h	/^class CFlatAccountPermissionLoad : public CFlatFileLoader <ACCOUNT_PERMISSION_ROW>$/;"	c	namespace:TPCE
CFlatAddressLoad	benchmarks/egen/FlatAddressLoad.h	/^    CFlatAddressLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<ADDRESS_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatAddressLoad
CFlatAddressLoad	benchmarks/egen/FlatAddressLoad.h	/^class CFlatAddressLoad : public CFlatFileLoader <ADDRESS_ROW>$/;"	c	namespace:TPCE
CFlatBrokerLoad	benchmarks/egen/FlatBrokerLoad.h	/^    CFlatBrokerLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<BROKER_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatBrokerLoad
CFlatBrokerLoad	benchmarks/egen/FlatBrokerLoad.h	/^class CFlatBrokerLoad : public CFlatFileLoader <BROKER_ROW>$/;"	c	namespace:TPCE
CFlatCashTransactionLoad	benchmarks/egen/FlatCashTransactionLoad.h	/^    CFlatCashTransactionLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<CASH_TRANSACTION_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatCashTransactionLoad
CFlatCashTransactionLoad	benchmarks/egen/FlatCashTransactionLoad.h	/^class CFlatCashTransactionLoad : public CFlatFileLoader <CASH_TRANSACTION_ROW>$/;"	c	namespace:TPCE
CFlatChargeLoad	benchmarks/egen/FlatChargeLoad.h	/^    CFlatChargeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<CHARGE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatChargeLoad
CFlatChargeLoad	benchmarks/egen/FlatChargeLoad.h	/^class CFlatChargeLoad : public CFlatFileLoader <CHARGE_ROW>$/;"	c	namespace:TPCE
CFlatCommissionRateLoad	benchmarks/egen/FlatCommissionRateLoad.h	/^    CFlatCommissionRateLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<COMMISSION_RATE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatCommissionRateLoad
CFlatCommissionRateLoad	benchmarks/egen/FlatCommissionRateLoad.h	/^class CFlatCommissionRateLoad : public CFlatFileLoader <COMMISSION_RATE_ROW>$/;"	c	namespace:TPCE
CFlatCompanyCompetitorLoad	benchmarks/egen/FlatCompanyCompetitorLoad.h	/^    CFlatCompanyCompetitorLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<COMPANY_COMPETITOR_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatCompanyCompetitorLoad
CFlatCompanyCompetitorLoad	benchmarks/egen/FlatCompanyCompetitorLoad.h	/^class CFlatCompanyCompetitorLoad : public CFlatFileLoader <COMPANY_COMPETITOR_ROW>$/;"	c	namespace:TPCE
CFlatCompanyLoad	benchmarks/egen/FlatCompanyLoad.h	/^    CFlatCompanyLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<COMPANY_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatCompanyLoad
CFlatCompanyLoad	benchmarks/egen/FlatCompanyLoad.h	/^class CFlatCompanyLoad : public CFlatFileLoader <COMPANY_ROW>$/;"	c	namespace:TPCE
CFlatCustomerAccountLoad	benchmarks/egen/FlatCustomerAccountLoad.h	/^    CFlatCustomerAccountLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<CUSTOMER_ACCOUNT_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatCustomerAccountLoad
CFlatCustomerAccountLoad	benchmarks/egen/FlatCustomerAccountLoad.h	/^class CFlatCustomerAccountLoad : public CFlatFileLoader <CUSTOMER_ACCOUNT_ROW>$/;"	c	namespace:TPCE
CFlatCustomerLoad	benchmarks/egen/FlatCustomerLoad.h	/^    CFlatCustomerLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<CUSTOMER_ROW>(szFileName, FlatFileOutputMode) {};$/;"	f	class:TPCE::CFlatCustomerLoad
CFlatCustomerLoad	benchmarks/egen/FlatCustomerLoad.h	/^class CFlatCustomerLoad : public CFlatFileLoader <CUSTOMER_ROW>$/;"	c	namespace:TPCE
CFlatCustomerTaxrateLoad	benchmarks/egen/FlatCustomerTaxrateLoad.h	/^    CFlatCustomerTaxrateLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<CUSTOMER_TAXRATE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatCustomerTaxrateLoad
CFlatCustomerTaxrateLoad	benchmarks/egen/FlatCustomerTaxrateLoad.h	/^class CFlatCustomerTaxrateLoad : public CFlatFileLoader <CUSTOMER_TAXRATE_ROW>$/;"	c	namespace:TPCE
CFlatDailyMarketLoad	benchmarks/egen/FlatDailyMarketLoad.h	/^    CFlatDailyMarketLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<DAILY_MARKET_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatDailyMarketLoad
CFlatDailyMarketLoad	benchmarks/egen/FlatDailyMarketLoad.h	/^class CFlatDailyMarketLoad : public CFlatFileLoader <DAILY_MARKET_ROW>$/;"	c	namespace:TPCE
CFlatExchangeLoad	benchmarks/egen/FlatExchangeLoad.h	/^    CFlatExchangeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<EXCHANGE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatExchangeLoad
CFlatExchangeLoad	benchmarks/egen/FlatExchangeLoad.h	/^class CFlatExchangeLoad : public CFlatFileLoader <EXCHANGE_ROW>$/;"	c	namespace:TPCE
CFlatFile	benchmarks/egen/FlatFile.h	/^    CFlatFile(const char *szListFile)$/;"	f	class:TPCE::CFlatFile
CFlatFile	benchmarks/egen/FlatFile.h	/^    CFlatFile(const string &str)$/;"	f	class:TPCE::CFlatFile
CFlatFile	benchmarks/egen/FlatFile.h	/^template <typename T, typename TKeyAndElementsLimits> class CFlatFile$/;"	c	namespace:TPCE
CFlatFileLoader	benchmarks/egen/FlatFileLoader.h	/^CFlatFileLoader<T>::CFlatFileLoader(char *szFileName, FlatFileOutputModes flatFileOutputMode)$/;"	f	class:TPCE::CFlatFileLoader
CFlatFileLoader	benchmarks/egen/FlatFileLoader.h	/^template <typename T> class CFlatFileLoader : public CBaseLoader<T>$/;"	c	namespace:TPCE
CFlatFinancialLoad	benchmarks/egen/FlatFinancialLoad.h	/^    CFlatFinancialLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<FINANCIAL_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatFinancialLoad
CFlatFinancialLoad	benchmarks/egen/FlatFinancialLoad.h	/^class CFlatFinancialLoad : public CFlatFileLoader <FINANCIAL_ROW>$/;"	c	namespace:TPCE
CFlatHoldingHistoryLoad	benchmarks/egen/FlatHoldingHistoryLoad.h	/^    CFlatHoldingHistoryLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<HOLDING_HISTORY_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatHoldingHistoryLoad
CFlatHoldingHistoryLoad	benchmarks/egen/FlatHoldingHistoryLoad.h	/^class CFlatHoldingHistoryLoad : public CFlatFileLoader <HOLDING_HISTORY_ROW>$/;"	c	namespace:TPCE
CFlatHoldingLoad	benchmarks/egen/FlatHoldingLoad.h	/^    CFlatHoldingLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<HOLDING_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatHoldingLoad
CFlatHoldingLoad	benchmarks/egen/FlatHoldingLoad.h	/^class CFlatHoldingLoad : public CFlatFileLoader <HOLDING_ROW>$/;"	c	namespace:TPCE
CFlatHoldingSummaryLoad	benchmarks/egen/FlatHoldingSummaryLoad.h	/^    CFlatHoldingSummaryLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<HOLDING_SUMMARY_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatHoldingSummaryLoad
CFlatHoldingSummaryLoad	benchmarks/egen/FlatHoldingSummaryLoad.h	/^class CFlatHoldingSummaryLoad : public CFlatFileLoader <HOLDING_SUMMARY_ROW>$/;"	c	namespace:TPCE
CFlatIndustryLoad	benchmarks/egen/FlatIndustryLoad.h	/^    CFlatIndustryLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<INDUSTRY_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatIndustryLoad
CFlatIndustryLoad	benchmarks/egen/FlatIndustryLoad.h	/^class CFlatIndustryLoad : public CFlatFileLoader <INDUSTRY_ROW>$/;"	c	namespace:TPCE
CFlatLastTradeLoad	benchmarks/egen/FlatLastTradeLoad.h	/^    CFlatLastTradeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<LAST_TRADE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatLastTradeLoad
CFlatLastTradeLoad	benchmarks/egen/FlatLastTradeLoad.h	/^class CFlatLastTradeLoad : public CFlatFileLoader <LAST_TRADE_ROW>$/;"	c	namespace:TPCE
CFlatLoaderFactory	benchmarks/egen/FlatLoaderFactory.h	/^    CFlatLoaderFactory(char *szOutDir, FlatFileOutputModes eOutputMode)$/;"	f	class:TPCE::CFlatLoaderFactory
CFlatLoaderFactory	benchmarks/egen/FlatLoaderFactory.h	/^class CFlatLoaderFactory : public CBaseLoaderFactory$/;"	c	namespace:TPCE
CFlatNewsItemLoad	benchmarks/egen/FlatNewsItemLoad.h	/^    CFlatNewsItemLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<NEWS_ITEM_ROW>(szFileName, FlatFileOutputMode) {};$/;"	f	class:TPCE::CFlatNewsItemLoad
CFlatNewsItemLoad	benchmarks/egen/FlatNewsItemLoad.h	/^class CFlatNewsItemLoad : public CFlatFileLoader <NEWS_ITEM_ROW>$/;"	c	namespace:TPCE
CFlatNewsXRefLoad	benchmarks/egen/FlatNewsXRefLoad.h	/^    CFlatNewsXRefLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<NEWS_XREF_ROW>(szFileName, FlatFileOutputMode) {};$/;"	f	class:TPCE::CFlatNewsXRefLoad
CFlatNewsXRefLoad	benchmarks/egen/FlatNewsXRefLoad.h	/^class CFlatNewsXRefLoad : public CFlatFileLoader <NEWS_XREF_ROW>$/;"	c	namespace:TPCE
CFlatSectorLoad	benchmarks/egen/FlatSectorLoad.h	/^    CFlatSectorLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<SECTOR_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatSectorLoad
CFlatSectorLoad	benchmarks/egen/FlatSectorLoad.h	/^class CFlatSectorLoad : public CFlatFileLoader <SECTOR_ROW>$/;"	c	namespace:TPCE
CFlatSecurityLoad	benchmarks/egen/FlatSecurityLoad.h	/^    CFlatSecurityLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<SECURITY_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatSecurityLoad
CFlatSecurityLoad	benchmarks/egen/FlatSecurityLoad.h	/^class CFlatSecurityLoad : public CFlatFileLoader <SECURITY_ROW>$/;"	c	namespace:TPCE
CFlatSettlementLoad	benchmarks/egen/FlatSettlementLoad.h	/^    CFlatSettlementLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<SETTLEMENT_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatSettlementLoad
CFlatSettlementLoad	benchmarks/egen/FlatSettlementLoad.h	/^class CFlatSettlementLoad : public CFlatFileLoader <SETTLEMENT_ROW>$/;"	c	namespace:TPCE
CFlatStatusTypeLoad	benchmarks/egen/FlatStatusTypeLoad.h	/^    CFlatStatusTypeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<STATUS_TYPE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatStatusTypeLoad
CFlatStatusTypeLoad	benchmarks/egen/FlatStatusTypeLoad.h	/^class CFlatStatusTypeLoad : public CFlatFileLoader <STATUS_TYPE_ROW>$/;"	c	namespace:TPCE
CFlatTaxrateLoad	benchmarks/egen/FlatTaxrateLoad.h	/^    CFlatTaxrateLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<TAXRATE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatTaxrateLoad
CFlatTaxrateLoad	benchmarks/egen/FlatTaxrateLoad.h	/^class CFlatTaxrateLoad : public CFlatFileLoader <TAXRATE_ROW>$/;"	c	namespace:TPCE
CFlatTradeHistoryLoad	benchmarks/egen/FlatTradeHistoryLoad.h	/^    CFlatTradeHistoryLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<TRADE_HISTORY_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatTradeHistoryLoad
CFlatTradeHistoryLoad	benchmarks/egen/FlatTradeHistoryLoad.h	/^class CFlatTradeHistoryLoad : public CFlatFileLoader <TRADE_HISTORY_ROW>$/;"	c	namespace:TPCE
CFlatTradeLoad	benchmarks/egen/FlatTradeLoad.h	/^    CFlatTradeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<TRADE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatTradeLoad
CFlatTradeLoad	benchmarks/egen/FlatTradeLoad.h	/^class CFlatTradeLoad : public CFlatFileLoader <TRADE_ROW>$/;"	c	namespace:TPCE
CFlatTradeRequestLoad	benchmarks/egen/FlatTradeRequestLoad.h	/^    CFlatTradeRequestLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<TRADE_REQUEST_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatTradeRequestLoad
CFlatTradeRequestLoad	benchmarks/egen/FlatTradeRequestLoad.h	/^class CFlatTradeRequestLoad : public CFlatFileLoader <TRADE_REQUEST_ROW>$/;"	c	namespace:TPCE
CFlatTradeTypeLoad	benchmarks/egen/FlatTradeTypeLoad.h	/^    CFlatTradeTypeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<TRADE_TYPE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatTradeTypeLoad
CFlatTradeTypeLoad	benchmarks/egen/FlatTradeTypeLoad.h	/^class CFlatTradeTypeLoad : public CFlatFileLoader <TRADE_TYPE_ROW>$/;"	c	namespace:TPCE
CFlatWatchItemLoad	benchmarks/egen/FlatWatchItemLoad.h	/^    CFlatWatchItemLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<WATCH_ITEM_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatWatchItemLoad
CFlatWatchItemLoad	benchmarks/egen/FlatWatchItemLoad.h	/^class CFlatWatchItemLoad : public CFlatFileLoader <WATCH_ITEM_ROW>$/;"	c	namespace:TPCE
CFlatWatchListLoad	benchmarks/egen/FlatWatchListLoad.h	/^    CFlatWatchListLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<WATCH_LIST_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatWatchListLoad
CFlatWatchListLoad	benchmarks/egen/FlatWatchListLoad.h	/^class CFlatWatchListLoad : public CFlatFileLoader <WATCH_LIST_ROW>$/;"	c	namespace:TPCE
CFlatZipCodeLoad	benchmarks/egen/FlatZipCodeLoad.h	/^    CFlatZipCodeLoad( char *szFileName, FlatFileOutputModes FlatFileOutputMode ) : CFlatFileLoader<ZIP_CODE_ROW>(szFileName, FlatFileOutputMode){};$/;"	f	class:TPCE::CFlatZipCodeLoad
CFlatZipCodeLoad	benchmarks/egen/FlatZipCodeLoad.h	/^class CFlatZipCodeLoad : public CFlatFileLoader <ZIP_CODE_ROW>$/;"	c	namespace:TPCE
CGenerateAndLoad	benchmarks/egen/EGenGenerateAndLoad.cpp	/^CGenerateAndLoad::CGenerateAndLoad(CInputFiles                  inputFiles,$/;"	f	class:CGenerateAndLoad
CGenerateAndLoad	benchmarks/egen/EGenGenerateAndLoad.h	/^class CGenerateAndLoad$/;"	c	namespace:TPCE
CGenerateAndLoadBaseOutput	benchmarks/egen/EGenGenerateAndLoadBaseOutput.h	/^class CGenerateAndLoadBaseOutput$/;"	c	namespace:TPCE
CGenerateAndLoadStandardOutput	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	/^class CGenerateAndLoadStandardOutput : public CGenerateAndLoadBaseOutput$/;"	c	namespace:TPCE
CHARGE_KEY_FIELDS	benchmarks/tpce.h	145;"	d
CHARGE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct CHARGE_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
CHARGE_TABLE_H	benchmarks/egen/ChargeTable.h	41;"	d
CHARGE_VALUE_FIELDS	benchmarks/tpce.h	148;"	d
CHECK	masstree/jsontest.cc	23;"	d	file:
CHECK_INVARIANTS	Makefile	/^CHECK_INVARIANTS ?= 0$/;"	m
CHECK_INVARIANTS_S	Makefile	/^CHECK_INVARIANTS_S=$(strip $(CHECK_INVARIANTS))$/;"	m
CHECK_JUP	masstree/jsontest.cc	24;"	d	file:
CHKPT_FILE_NAME_BUFSZ	dbcore/sm-log-file.cpp	17;"	d	file:
CHKPT_FILE_NAME_FMT	dbcore/sm-log-file.cpp	16;"	d	file:
CH_CHRG	benchmarks/egen/Table_Defs.h	/^    double                  CH_CHRG;$/;"	m	struct:TPCE::CHARGE_ROW
CH_C_TIER	benchmarks/egen/Table_Defs.h	/^    int                     CH_C_TIER;$/;"	m	struct:TPCE::CHARGE_ROW
CH_TT_ID	benchmarks/egen/Table_Defs.h	/^    char                    CH_TT_ID[cTT_ID_len+1];$/;"	m	struct:TPCE::CHARGE_ROW
CHigh	benchmarks/egen/CustomerSelection.h	/^    inline TIdent CHigh(TIdent C_ID) { return ((C_ID - 1) \/ 1000); }$/;"	f	class:TPCE::CCustomerSelection
CHoldingsAndTradesTable	benchmarks/egen/HoldingsAndTradesTable.h	/^    CHoldingsAndTradesTable(CInputFiles inputFiles,$/;"	f	class:TPCE::CHoldingsAndTradesTable
CHoldingsAndTradesTable	benchmarks/egen/HoldingsAndTradesTable.h	/^class CHoldingsAndTradesTable$/;"	c	namespace:TPCE
CIndustryTable	benchmarks/egen/IndustryTable.h	/^    CIndustryTable( char *szDirName )$/;"	f	class:TPCE::CIndustryTable
CIndustryTable	benchmarks/egen/IndustryTable.h	/^class CIndustryTable : public TableTemplate<INDUSTRY_ROW>$/;"	c	namespace:TPCE
CInputFile	benchmarks/egen/InputFile.h	/^    CInputFile(const char *szListFile)$/;"	f	class:TPCE::CInputFile
CInputFile	benchmarks/egen/InputFile.h	/^    CInputFile(const string &str)$/;"	f	class:TPCE::CInputFile
CInputFile	benchmarks/egen/InputFile.h	/^template <typename T, typename TKeyAndElementsLimits> class CInputFile$/;"	c	namespace:TPCE
CInputFileNoWeight	benchmarks/egen/InputFileNoWeight.h	/^    CInputFileNoWeight(const char *szListFile)$/;"	f	class:TPCE::CInputFileNoWeight
CInputFileNoWeight	benchmarks/egen/InputFileNoWeight.h	/^    CInputFileNoWeight(const string &str)$/;"	f	class:TPCE::CInputFileNoWeight
CInputFileNoWeight	benchmarks/egen/InputFileNoWeight.h	/^template <typename T> class CInputFileNoWeight$/;"	c	namespace:TPCE
CInputFiles	benchmarks/egen/InputFlatFilesStructure.h	/^    CInputFiles() $/;"	f	class:TPCE::CInputFiles
CInputFiles	benchmarks/egen/InputFlatFilesStructure.h	/^class CInputFiles$/;"	c	namespace:TPCE
CKState_Go	masstree/mtd.cc	/^enum { CKState_Quit, CKState_Uninit, CKState_Ready, CKState_Go };$/;"	e	enum:__anon55	file:
CKState_Quit	masstree/mtd.cc	/^enum { CKState_Quit, CKState_Uninit, CKState_Ready, CKState_Go };$/;"	e	enum:__anon55	file:
CKState_Ready	masstree/mtd.cc	/^enum { CKState_Quit, CKState_Uninit, CKState_Ready, CKState_Go };$/;"	e	enum:__anon55	file:
CKState_Uninit	masstree/mtd.cc	/^enum { CKState_Quit, CKState_Uninit, CKState_Ready, CKState_Go };$/;"	e	enum:__anon55	file:
CLASS_STATIC_COUNTER_DECL	scopedperf.hh	770;"	d
CLASS_STATIC_COUNTER_IMPL	scopedperf.hh	773;"	d
CLICK_HASHCODE_HH	masstree/hashcode.hh	17;"	d
CLP_SENTINEL	masstree/clp.h	228;"	d
CLP_SENTINEL	masstree/clp.h	230;"	d
CLP_SENTINEL	masstree/clp.h	344;"	d
CLastTradeTable	benchmarks/egen/LastTradeTable.h	/^    CLastTradeTable(CInputFiles inputFiles,$/;"	f	class:TPCE::CLastTradeTable
CLastTradeTable	benchmarks/egen/LastTradeTable.h	/^class CLastTradeTable : public TableTemplate<LAST_TRADE_ROW>$/;"	c	namespace:TPCE
CLoaderSettings	benchmarks/egen/DriverParamSettings.h	/^    CLoaderSettings( TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount,$/;"	f	class:TPCE::CLoaderSettings
CLoaderSettings	benchmarks/egen/DriverParamSettings.h	/^    CLoaderSettings()$/;"	f	class:TPCE::CLoaderSettings
CLoaderSettings	benchmarks/egen/DriverParamSettings.h	/^class CLoaderSettings : public CParametersWithDefaults< struct TLoaderSettings, struct TLoaderSettingsState >$/;"	c	namespace:TPCE
CLogFormatTab	benchmarks/egen/EGenLogFormatterTab.h	/^class CLogFormatTab : public CBaseLogFormatter$/;"	c	namespace:TPCE
CLow	benchmarks/egen/CustomerSelection.h	/^    inline TIdent CLow(TIdent C_ID) { return ((C_ID - 1) % 1000); }$/;"	f	class:TPCE::CCustomerSelection
CMEE	benchmarks/egen/MEE.cpp	/^CMEE::CMEE( INT32 TradingTimeSoFar, CMEESUTInterface *pSUT, CBaseLogger *pLogger, const CInputFiles& inputFiles, UINT32 UniqueId )$/;"	f	class:CMEE
CMEE	benchmarks/egen/MEE.cpp	/^CMEE::CMEE( INT32 TradingTimeSoFar, CMEESUTInterface *pSUT, CBaseLogger *pLogger, const CInputFiles& inputFiles, UINT32 UniqueId, RNGSEED TickerTapeRNGSeed, RNGSEED TradingFloorRNGSeed )$/;"	f	class:CMEE
CMEE	benchmarks/egen/MEE.h	/^class CMEE$/;"	c	namespace:TPCE
CMEEPriceBoard	benchmarks/egen/MEEPriceBoard.cpp	/^CMEEPriceBoard::CMEEPriceBoard( INT32           TradingTimeSoFar,$/;"	f	class:CMEEPriceBoard
CMEEPriceBoard	benchmarks/egen/MEEPriceBoard.h	/^class CMEEPriceBoard$/;"	c	namespace:TPCE
CMEESUT	benchmarks/MEESUT.h	/^class CMEESUT: public TPCE::CMEESUTInterface$/;"	c	namespace:TPCE
CMEESUTInterface	benchmarks/egen/MEESUTInterface.h	/^class CMEESUTInterface$/;"	c	namespace:TPCE
CMEESecurity	benchmarks/egen/MEESecurity.cpp	/^CMEESecurity::CMEESecurity()$/;"	f	class:CMEESecurity
CMEESecurity	benchmarks/egen/MEESecurity.h	/^class CMEESecurity$/;"	c	namespace:TPCE
CMEETickerTape	benchmarks/egen/MEETickerTape.cpp	/^CMEETickerTape::CMEETickerTape( CMEESUTInterface* pSUT, CMEEPriceBoard* pPriceBoard, CDateTime* pBaseTime, CDateTime* pCurrentTime, RNGSEED RNGSeed, const CInputFiles &inputFiles )$/;"	f	class:CMEETickerTape
CMEETickerTape	benchmarks/egen/MEETickerTape.cpp	/^CMEETickerTape::CMEETickerTape( CMEESUTInterface* pSUT, CMEEPriceBoard* pPriceBoard, CDateTime* pBaseTime, CDateTime* pCurrentTime, const CInputFiles &inputFiles )$/;"	f	class:CMEETickerTape
CMEETickerTape	benchmarks/egen/MEETickerTape.h	/^class CMEETickerTape$/;"	c	namespace:TPCE
CMEETradingFloor	benchmarks/egen/MEETradingFloor.cpp	/^CMEETradingFloor::CMEETradingFloor( CMEESUTInterface* pSUT, CMEEPriceBoard* pPriceBoard, CMEETickerTape* pTickerTape, CDateTime* pBaseTime, CDateTime* pCurrentTime )$/;"	f	class:CMEETradingFloor
CMEETradingFloor	benchmarks/egen/MEETradingFloor.cpp	/^CMEETradingFloor::CMEETradingFloor( CMEESUTInterface* pSUT, CMEEPriceBoard* pPriceBoard, CMEETickerTape* pTickerTape, CDateTime* pBaseTime, CDateTime* pCurrentTime, RNGSEED RNGSeed )$/;"	f	class:CMEETradingFloor
CMEETradingFloor	benchmarks/egen/MEETradingFloor.h	/^class CMEETradingFloor$/;"	c	namespace:TPCE
CMarketFeed	benchmarks/egen/TxnHarnessMarketFeed.h	/^    CMarketFeed(CMarketFeedDBInterface *pDB, CSendToMarketInterface *pSendToMarket)$/;"	f	class:TPCE::CMarketFeed
CMarketFeed	benchmarks/egen/TxnHarnessMarketFeed.h	/^class CMarketFeed$/;"	c	namespace:TPCE
CMarketFeedDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CMarketFeedDBInterface {$/;"	c	namespace:TPCE
CMarketWatch	benchmarks/egen/TxnHarnessMarketWatch.h	/^    CMarketWatch(CMarketWatchDBInterface *pDB)$/;"	f	class:TPCE::CMarketWatch
CMarketWatch	benchmarks/egen/TxnHarnessMarketWatch.h	/^class CMarketWatch$/;"	c	namespace:TPCE
CMarketWatchDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CMarketWatchDBInterface {$/;"	c	namespace:TPCE
CMarketWatchSettings	benchmarks/egen/DriverParamSettings.h	/^    CMarketWatchSettings()$/;"	f	class:TPCE::CMarketWatchSettings
CMarketWatchSettings	benchmarks/egen/DriverParamSettings.h	/^class CMarketWatchSettings : public CParametersWithDefaults< struct TMarketWatchSettings, struct TMarketWatchSettingsState >$/;"	c	namespace:TPCE
CMemoryErr	benchmarks/egen/error.h	/^    CMemoryErr()$/;"	f	class:TPCE::CMemoryErr
CMemoryErr	benchmarks/egen/error.h	/^    CMemoryErr(char const * szLoc)$/;"	f	class:TPCE::CMemoryErr
CMemoryErr	benchmarks/egen/error.h	/^class CMemoryErr : public CBaseErr$/;"	c	namespace:TPCE
CMoney	benchmarks/egen/Money.h	/^    CMoney()$/;"	f	class:TPCE::CMoney
CMoney	benchmarks/egen/Money.h	/^    CMoney(CMoney* m)$/;"	f	class:TPCE::CMoney
CMoney	benchmarks/egen/Money.h	/^    CMoney(double fAmount)$/;"	f	class:TPCE::CMoney
CMoney	benchmarks/egen/Money.h	/^class CMoney$/;"	c	namespace:TPCE
CMutex	benchmarks/egen/locking.cpp	/^CMutex::CMutex()$/;"	f	class:TPCE::CMutex
CMutex	benchmarks/egen/locking.h	/^class CMutex$/;"	c	namespace:TPCE
CMutex	benchmarks/egen/threading_pthread.h	/^class CMutex$/;"	c	namespace:TPCE
CMutex	benchmarks/egen/threading_single.h	/^class CMutex$/;"	c	namespace:TPCE
CNewsItemAndXRefTable	benchmarks/egen/NewsItemAndXRefTable.h	/^    CNewsItemAndXRefTable(  CInputFiles inputFiles,$/;"	f	class:TPCE::CNewsItemAndXRefTable
CNewsItemAndXRefTable	benchmarks/egen/NewsItemAndXRefTable.h	/^class CNewsItemAndXRefTable : public TableTemplate<NEWS_ITEM_AND_XREF_ROW>$/;"	c	namespace:TPCE
CNullLoader	benchmarks/egen/NullLoader.h	/^template <typename T> class CNullLoader : public CBaseLoader<T>$/;"	c	namespace:TPCE
CNullLoaderFactory	benchmarks/egen/NullLoaderFactory.h	/^class CNullLoaderFactory : public CBaseLoaderFactory$/;"	c	namespace:TPCE
COMBINED_NAME	third-party/lz4/lz4hc_encoder.h	/^int COMBINED_NAME(FUNCTION_NAME,_continue) ($/;"	f
COMBINED_NAME	third-party/lz4/lz4hc_encoder.h	53;"	d
COMBINED_NAME_RAW	third-party/lz4/lz4hc_encoder.h	52;"	d
COMMISSION_RATE_KEY_FIELDS	benchmarks/tpce.h	153;"	d
COMMISSION_RATE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct COMMISSION_RATE_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
COMMISSION_RATE_TABLE_H	benchmarks/egen/CommissionRateTable.h	41;"	d
COMMISSION_RATE_VALUE_FIELDS	benchmarks/tpce.h	158;"	d
COMPANY_COMPETITOR_FILE_H	benchmarks/egen/CompanyCompetitorFile.h	43;"	d
COMPANY_COMPETITOR_KEY_FIELDS	benchmarks/tpce.h	232;"	d
COMPANY_COMPETITOR_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct COMPANY_COMPETITOR_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
COMPANY_COMPETITOR_TABLE_H	benchmarks/egen/CompanyCompetitorTable.h	41;"	d
COMPANY_COMPETITOR_VALUE_FIELDS	benchmarks/tpce.h	236;"	d
COMPANY_FILE_H	benchmarks/egen/CompanyFile.h	43;"	d
COMPANY_KEY_FIELDS	benchmarks/tpce.h	219;"	d
COMPANY_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct COMPANY_ROW$/;"	s	namespace:TPCE
COMPANY_TABLE_H	benchmarks/egen/CompanyTable.h	41;"	d
COMPANY_VALUE_FIELDS	benchmarks/tpce.h	221;"	d
COMPILED	third-party/lz4/fullbench.c	100;"	d	file:
COMPILED	third-party/lz4/lz4c.c	84;"	d	file:
COMPILER_MEMORY_FENCE	macros.h	57;"	d
COMPILE_CUSTOM_LOAD	benchmarks/egen/EGenLoader_stdafx.h	81;"	d
COMPRESSOR0	third-party/lz4/bench.c	68;"	d	file:
COMPRESSOR0	third-party/lz4/fullbench.c	68;"	d	file:
COMPRESSOR1	third-party/lz4/bench.c	70;"	d	file:
COMPRESSOR1	third-party/lz4/fullbench.c	70;"	d	file:
COMPRESSOR_NAME	third-party/lz4/fullbench.c	98;"	d	file:
COMPRESSOR_NAME	third-party/lz4/lz4c.c	82;"	d	file:
COMPRESSOR_VERSION	third-party/lz4/fullbench.c	99;"	d	file:
COMPRESSOR_VERSION	third-party/lz4/lz4c.c	83;"	d	file:
COMPRESS_64K	third-party/lz4/lz4.c	386;"	d	file:
COMPRESS_64K	third-party/lz4/lz4.c	404;"	d	file:
COMPRESS_64K	third-party/lz4/lz4.c	472;"	d	file:
COMPRESS_64K	third-party/lz4/lz4.c	492;"	d	file:
COMPRESS_64K	third-party/lz4/lz4_encoder.h	261;"	d
CONFIG_FILES	masstree/GNUmakefile	/^	CONFIG_FILES= $(SHELL) .\/config.status$/;"	m
CONFIG_FILES	masstree/GNUmakefile	/^	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) .\/config.status$/;"	m
CONFIG_H	Makefile	/^	CONFIG_H = config\/config-backoff.h$/;"	m
CONFIG_H	Makefile	/^	CONFIG_H = config\/config-factor-fake-compression.h$/;"	m
CONFIG_H	Makefile	/^	CONFIG_H = config\/config-factor-gc-nowriteinplace.h$/;"	m
CONFIG_H	Makefile	/^	CONFIG_H = config\/config-factor-gc.h$/;"	m
CONFIG_H	Makefile	/^	CONFIG_H = config\/config-perf.h$/;"	m
CONFIG_H	Makefile	/^	CONFIG_H = config\/config-sandbox.h$/;"	m
COPYLENGTH	third-party/lz4/lz4.c	213;"	d	file:
COPYLENGTH	third-party/lz4/lz4hc.c	202;"	d	file:
CO_AD_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CO_AD_ID;$/;"	m	struct:TPCE::COMPANY_ROW
CO_CEO	benchmarks/egen/Table_Defs.h	/^    char                    CO_CEO[ cCEO_NAME_len+1 ];$/;"	m	struct:TPCE::COMPANY_ROW
CO_DESC	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    CO_DESC[ cCO_DESC_len+1 ];$/;"	m	struct:TPCE::TCompanyInputRow
CO_DESC	benchmarks/egen/Table_Defs.h	/^    char                    CO_DESC[ cCO_DESC_len+1 ];$/;"	m	struct:TPCE::COMPANY_ROW
CO_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TIdent      CO_ID;$/;"	m	struct:TPCE::TCompanyInputRow
CO_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CO_ID;$/;"	m	struct:TPCE::COMPANY_ROW
CO_IN_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    CO_IN_ID[ cIN_ID_len+1 ];$/;"	m	struct:TPCE::TCompanyInputRow
CO_IN_ID	benchmarks/egen/Table_Defs.h	/^    char                    CO_IN_ID[ cIN_ID_len+1 ];$/;"	m	struct:TPCE::COMPANY_ROW
CO_NAME	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    CO_NAME[ cCO_NAME_len+1 ];$/;"	m	struct:TPCE::TCompanyInputRow
CO_NAME	benchmarks/egen/Table_Defs.h	/^    char                    CO_NAME[ cCO_NAME_len+1 ];$/;"	m	struct:TPCE::COMPANY_ROW
CO_OPEN_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               CO_OPEN_DATE;$/;"	m	struct:TPCE::COMPANY_ROW
CO_SP_RATE	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char        CO_SP_RATE[ cCO_SP_RATE_len+1 ];$/;"	m	struct:TPCE::TCompanySPRateInputRow
CO_SP_RATE	benchmarks/egen/Table_Defs.h	/^    char                    CO_SP_RATE[ cSP_RATE_len+1 ];$/;"	m	struct:TPCE::COMPANY_ROW
CO_ST_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    CO_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::TCompanyInputRow
CO_ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    CO_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::COMPANY_ROW
CPF1_ERROR1	benchmarks/egen/error.h	/^        CPF1_ERROR1 = -211,	\/\/ acct_len not in [1..max_acct_len]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
CPF2_ERROR1	benchmarks/egen/error.h	/^        CPF2_ERROR1 = -221,	\/\/ hist_len not in [min_hist_len..max_hist_len]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
CPN	masstree/mtclient.cc	1189;"	d	file:
CPU_BIG_ENDIAN	third-party/lz4/lz4c.c	119;"	d	file:
CPU_LITTLE_ENDIAN	third-party/lz4/lz4c.c	118;"	d	file:
CP_COMP_CO_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TIdent      CP_COMP_CO_ID;$/;"	m	struct:TPCE::TCompanyCompetitorInputRow
CP_COMP_CO_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CP_COMP_CO_ID;$/;"	m	struct:TPCE::COMPANY_COMPETITOR_ROW
CP_CO_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TIdent      CP_CO_ID;$/;"	m	struct:TPCE::TCompanyCompetitorInputRow
CP_CO_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CP_CO_ID;$/;"	m	struct:TPCE::COMPANY_COMPETITOR_ROW
CP_IN_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    CP_IN_ID[cIN_ID_len+1];$/;"	m	struct:TPCE::TCompanyCompetitorInputRow
CP_IN_ID	benchmarks/egen/Table_Defs.h	/^    char                    CP_IN_ID[cIN_ID_len+1];$/;"	m	struct:TPCE::COMPANY_COMPETITOR_ROW
CP_settings	benchmarks/egen/DriverParamSettings.h	/^    CCustomerPositionSettings   CP_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
CParametersWithDefaults	benchmarks/egen/DriverParamSettings.h	/^    CParametersWithDefaults() {}$/;"	f	class:TPCE::CParametersWithDefaults
CParametersWithDefaults	benchmarks/egen/DriverParamSettings.h	/^template < typename T, typename T2 > class CParametersWithDefaults$/;"	c	namespace:TPCE
CParametersWithoutDefaults	benchmarks/egen/DriverParamSettings.h	/^    CParametersWithoutDefaults() {}$/;"	f	class:TPCE::CParametersWithoutDefaults
CParametersWithoutDefaults	benchmarks/egen/DriverParamSettings.h	/^template < typename T > class CParametersWithoutDefaults$/;"	c	namespace:TPCE
CPerson	benchmarks/egen/Person.cpp	/^CPerson::CPerson(CInputFiles inputFiles$/;"	f	class:CPerson
CPerson	benchmarks/egen/Person.h	/^class CPerson$/;"	c	namespace:TPCE
CRITICAL_SECTION	benchmarks/MEESUT.h	/^	CRITICAL_SECTION()$/;"	f	class:TPCE::CRITICAL_SECTION
CRITICAL_SECTION	benchmarks/MEESUT.h	/^class CRITICAL_SECTION$/;"	c	namespace:TPCE
CR_C_TIER	benchmarks/egen/Table_Defs.h	/^    int                     CR_C_TIER;$/;"	m	struct:TPCE::COMMISSION_RATE_ROW
CR_EX_ID	benchmarks/egen/Table_Defs.h	/^    char                    CR_EX_ID[cEX_ID_len+1];$/;"	m	struct:TPCE::COMMISSION_RATE_ROW
CR_FROM_QTY	benchmarks/egen/Table_Defs.h	/^    double                  CR_FROM_QTY;$/;"	m	struct:TPCE::COMMISSION_RATE_ROW
CR_RATE	benchmarks/egen/Table_Defs.h	/^    double                  CR_RATE;$/;"	m	struct:TPCE::COMMISSION_RATE_ROW
CR_TO_QTY	benchmarks/egen/Table_Defs.h	/^    double                  CR_TO_QTY;$/;"	m	struct:TPCE::COMMISSION_RATE_ROW
CR_TT_ID	benchmarks/egen/Table_Defs.h	/^    char                    CR_TT_ID[cTT_ID_len+1];$/;"	m	struct:TPCE::COMMISSION_RATE_ROW
CRandom	benchmarks/egen/Random.cpp	/^CRandom::CRandom(RNGSEED seed)$/;"	f	class:CRandom
CRandom	benchmarks/egen/Random.cpp	/^CRandom::CRandom(void)$/;"	f	class:CRandom
CRandom	benchmarks/egen/Random.h	/^class CRandom$/;"	c	namespace:TPCE
CSectorTable	benchmarks/egen/SectorTable.h	/^    CSectorTable( char *szDirName )$/;"	f	class:TPCE::CSectorTable
CSectorTable	benchmarks/egen/SectorTable.h	/^class CSectorTable : public TableTemplate<SECTOR_ROW>$/;"	c	namespace:TPCE
CSecurityDetail	benchmarks/egen/TxnHarnessSecurityDetail.h	/^    CSecurityDetail(CSecurityDetailDBInterface *pDB)$/;"	f	class:TPCE::CSecurityDetail
CSecurityDetail	benchmarks/egen/TxnHarnessSecurityDetail.h	/^class CSecurityDetail$/;"	c	namespace:TPCE
CSecurityDetailDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CSecurityDetailDBInterface {$/;"	c	namespace:TPCE
CSecurityDetailSettings	benchmarks/egen/DriverParamSettings.h	/^    CSecurityDetailSettings()$/;"	f	class:TPCE::CSecurityDetailSettings
CSecurityDetailSettings	benchmarks/egen/DriverParamSettings.h	/^class CSecurityDetailSettings : public CParametersWithDefaults< struct TSecurityDetailSettings, struct TSecurityDetailSettingsState >$/;"	c	namespace:TPCE
CSecurityFile	benchmarks/egen/SecurityFile.h	/^    CSecurityFile(const char *szListFile, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CSecurityFile
CSecurityFile	benchmarks/egen/SecurityFile.h	/^    CSecurityFile(const string &str, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CSecurityFile
CSecurityFile	benchmarks/egen/SecurityFile.h	/^class CSecurityFile : public CFlatFile<TSecurityInputRow, TSecurityLimits>$/;"	c	namespace:TPCE
CSecurityTable	benchmarks/egen/SecurityTable.h	/^    CSecurityTable( CInputFiles inputFiles,$/;"	f	class:TPCE::CSecurityTable
CSecurityTable	benchmarks/egen/SecurityTable.h	/^class CSecurityTable : public TableTemplate<SECURITY_ROW>$/;"	c	namespace:TPCE
CSendToMarketInterface	benchmarks/egen/TxnHarnessSendToMarketInterface.h	/^class CSendToMarketInterface$/;"	c	namespace:TPCE
CStatusTypeTable	benchmarks/egen/StatusTypeTable.h	/^    CStatusTypeTable( char *szDirName )$/;"	f	class:TPCE::CStatusTypeTable
CStatusTypeTable	benchmarks/egen/StatusTypeTable.h	/^class CStatusTypeTable : public TableTemplate<STATUS_TYPE_ROW>$/;"	c	namespace:TPCE
CSyncLock	benchmarks/egen/SyncLockInterface.h	/^    CSyncLock() {$/;"	f	class:TPCE::CSyncLock
CSyncLock	benchmarks/egen/SyncLockInterface.h	/^class CSyncLock$/;"	c	namespace:TPCE
CSystemErr	benchmarks/egen/error.cpp	/^CSystemErr::CSystemErr(Action eAction, char const * szLocation) $/;"	f	class:CSystemErr
CSystemErr	benchmarks/egen/error.cpp	/^CSystemErr::CSystemErr(int iError, Action eAction, char const * szLocation) $/;"	f	class:CSystemErr
CSystemErr	benchmarks/egen/error.h	/^class CSystemErr : public CBaseErr$/;"	c	namespace:TPCE
CT_AMT	benchmarks/egen/Table_Defs.h	/^    double                  CT_AMT;$/;"	m	struct:TPCE::CASH_TRANSACTION_ROW
CT_DTS	benchmarks/egen/Table_Defs.h	/^    CDateTime               CT_DTS;$/;"	m	struct:TPCE::CASH_TRANSACTION_ROW
CT_NAME	benchmarks/egen/Table_Defs.h	/^    char                    CT_NAME[cCT_NAME_len+1];$/;"	m	struct:TPCE::CASH_TRANSACTION_ROW
CT_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  CT_T_ID;$/;"	m	struct:TPCE::CASH_TRANSACTION_ROW
CTaxrateTable	benchmarks/egen/TaxrateTable.h	/^    CTaxrateTable( CInputFiles inputFiles )$/;"	f	class:TPCE::CTaxrateTable
CTaxrateTable	benchmarks/egen/TaxrateTable.h	/^class CTaxrateTable : public TableTemplate<TAXRATE_ROW>$/;"	c	namespace:TPCE
CTimerWheel	benchmarks/egen/TimerWheel.h	/^CTimerWheel< T,  T2, Period, Resolution >::CTimerWheel( )$/;"	f	class:TPCE::CTimerWheel
CTimerWheel	benchmarks/egen/TimerWheel.h	/^class CTimerWheel$/;"	c	namespace:TPCE
CTimerWheelTimer	benchmarks/egen/TimerWheelTimer.h	/^CTimerWheelTimer<T,T2>::CTimerWheelTimer( T2* pExpiryObject, void (T2::* pExpiryFunction) ( T* ), T* pExpiryData )$/;"	f	class:TPCE::CTimerWheelTimer
CTimerWheelTimer	benchmarks/egen/TimerWheelTimer.h	/^class CTimerWheelTimer$/;"	c	namespace:TPCE
CTradeCleanup	benchmarks/egen/TxnHarnessTradeCleanup.h	/^    CTradeCleanup(CTradeCleanupDBInterface *pDB)$/;"	f	class:TPCE::CTradeCleanup
CTradeCleanup	benchmarks/egen/TxnHarnessTradeCleanup.h	/^class CTradeCleanup$/;"	c	namespace:TPCE
CTradeCleanupDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CTradeCleanupDBInterface {$/;"	c	namespace:TPCE
CTradeGen	benchmarks/egen/TradeGen.cpp	/^CTradeGen::CTradeGen(CInputFiles    inputFiles,$/;"	f	class:CTradeGen
CTradeGen	benchmarks/egen/TradeGen.h	/^class CTradeGen$/;"	c	namespace:TPCE
CTradeLookup	benchmarks/egen/TxnHarnessTradeLookup.h	/^    CTradeLookup(CTradeLookupDBInterface *pDB)$/;"	f	class:TPCE::CTradeLookup
CTradeLookup	benchmarks/egen/TxnHarnessTradeLookup.h	/^class CTradeLookup$/;"	c	namespace:TPCE
CTradeLookupDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CTradeLookupDBInterface {$/;"	c	namespace:TPCE
CTradeLookupSettings	benchmarks/egen/DriverParamSettings.h	/^    CTradeLookupSettings()$/;"	f	class:TPCE::CTradeLookupSettings
CTradeLookupSettings	benchmarks/egen/DriverParamSettings.h	/^class CTradeLookupSettings : public CParametersWithDefaults< struct TTradeLookupSettings, struct TTradeLookupSettingsState >$/;"	c	namespace:TPCE
CTradeOrder	benchmarks/egen/TxnHarnessTradeOrder.h	/^    CTradeOrder(CTradeOrderDBInterface *pDB, CSendToMarketInterface *pSendToMarket)$/;"	f	class:TPCE::CTradeOrder
CTradeOrder	benchmarks/egen/TxnHarnessTradeOrder.h	/^class CTradeOrder$/;"	c	namespace:TPCE
CTradeOrderDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CTradeOrderDBInterface {$/;"	c	namespace:TPCE
CTradeOrderSettings	benchmarks/egen/DriverParamSettings.h	/^    CTradeOrderSettings()$/;"	f	class:TPCE::CTradeOrderSettings
CTradeOrderSettings	benchmarks/egen/DriverParamSettings.h	/^class CTradeOrderSettings : public CParametersWithDefaults< struct TTradeOrderSettings, struct TTradeOrderSettingsState >$/;"	c	namespace:TPCE
CTradeResult	benchmarks/egen/TxnHarnessTradeResult.h	/^    CTradeResult(CTradeResultDBInterface *pDB)$/;"	f	class:TPCE::CTradeResult
CTradeResult	benchmarks/egen/TxnHarnessTradeResult.h	/^class CTradeResult$/;"	c	namespace:TPCE
CTradeResultDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CTradeResultDBInterface {$/;"	c	namespace:TPCE
CTradeStatus	benchmarks/egen/TxnHarnessTradeStatus.h	/^    CTradeStatus(CTradeStatusDBInterface *pDB)$/;"	f	class:TPCE::CTradeStatus
CTradeStatus	benchmarks/egen/TxnHarnessTradeStatus.h	/^class CTradeStatus$/;"	c	namespace:TPCE
CTradeStatusDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CTradeStatusDBInterface {$/;"	c	namespace:TPCE
CTradeTypeTable	benchmarks/egen/TradeTypeTable.h	/^    CTradeTypeTable( char *szDirName )$/;"	f	class:TPCE::CTradeTypeTable
CTradeTypeTable	benchmarks/egen/TradeTypeTable.h	/^class CTradeTypeTable : public TableTemplate<TRADE_TYPE_ROW>$/;"	c	namespace:TPCE
CTradeUpdate	benchmarks/egen/TxnHarnessTradeUpdate.h	/^    CTradeUpdate(CTradeUpdateDBInterface *pDB)$/;"	f	class:TPCE::CTradeUpdate
CTradeUpdate	benchmarks/egen/TxnHarnessTradeUpdate.h	/^class CTradeUpdate$/;"	c	namespace:TPCE
CTradeUpdateDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^class CTradeUpdateDBInterface {$/;"	c	namespace:TPCE
CTradeUpdateSettings	benchmarks/egen/DriverParamSettings.h	/^    CTradeUpdateSettings()$/;"	f	class:TPCE::CTradeUpdateSettings
CTradeUpdateSettings	benchmarks/egen/DriverParamSettings.h	/^class CTradeUpdateSettings : public CParametersWithDefaults< struct TTradeUpdateSettings, struct TTradeUpdateSettingsState >$/;"	c	namespace:TPCE
CTxnMixGeneratorSettings	benchmarks/egen/DriverParamSettings.h	/^    CTxnMixGeneratorSettings()$/;"	f	class:TPCE::CTxnMixGeneratorSettings
CTxnMixGeneratorSettings	benchmarks/egen/DriverParamSettings.h	/^class CTxnMixGeneratorSettings : public CParametersWithDefaults< struct TTxnMixGeneratorSettings, struct TTxnMixGeneratorSettingsState >$/;"	c	namespace:TPCE
CURRENTBASE	third-party/lz4/lz4_encoder.h	249;"	d
CURRENTBASE	third-party/lz4/lz4_encoder.h	58;"	d
CURRENTBASE	third-party/lz4/lz4_encoder.h	62;"	d
CURRENT_H_TYPE	third-party/lz4/lz4_encoder.h	248;"	d
CURRENT_H_TYPE	third-party/lz4/lz4_encoder.h	57;"	d
CURRENT_H_TYPE	third-party/lz4/lz4_encoder.h	61;"	d
CUSTOMER_ACCOUNTS_AND_PERMISSIONS_TABLE_H	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	41;"	d
CUSTOMER_ACCOUNT_AND_PERMISSION_ROW	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^typedef struct CUSTOMER_ACCOUNT_AND_PERMISSION_ROW$/;"	s	namespace:TPCE
CUSTOMER_ACCOUNT_KEY_FIELDS	benchmarks/tpce.h	59;"	d
CUSTOMER_ACCOUNT_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct CUSTOMER_ACCOUNT_ROW$/;"	s	namespace:TPCE
CUSTOMER_ACCOUNT_VALUE_FIELDS	benchmarks/tpce.h	61;"	d
CUSTOMER_KEY_FIELDS	benchmarks/tpcc.h	8;"	d
CUSTOMER_KEY_FIELDS	benchmarks/tpce.h	31;"	d
CUSTOMER_NAME_IDX_KEY_FIELDS	benchmarks/tpcc.h	33;"	d
CUSTOMER_NAME_IDX_VALUE_FIELDS	benchmarks/tpcc.h	38;"	d
CUSTOMER_POSITION	benchmarks/egen/CE.h	/^    static const INT32 CUSTOMER_POSITION        = CCETxnMixGenerator::CUSTOMER_POSITION;$/;"	m	class:TPCE::CCE
CUSTOMER_POSITION	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 CUSTOMER_POSITION        =  2;$/;"	m	class:TPCE::CCETxnMixGenerator
CUSTOMER_ROW	benchmarks/egen/Table_Defs.h	/^    CUSTOMER_ROW()$/;"	f	struct:TPCE::CUSTOMER_ROW
CUSTOMER_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct CUSTOMER_ROW$/;"	s	namespace:TPCE
CUSTOMER_SELECTION_H	benchmarks/egen/CustomerSelection.h	48;"	d
CUSTOMER_TABLE_H	benchmarks/egen/CustomerTable.h	41;"	d
CUSTOMER_TAXRATES_TABLE_H	benchmarks/egen/CustomerTaxratesTable.h	41;"	d
CUSTOMER_TAXRATE_KEY_FIELDS	benchmarks/tpce.h	69;"	d
CUSTOMER_TAXRATE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct CUSTOMER_TAXRATE_ROW$/;"	s	namespace:TPCE
CUSTOMER_TAXRATE_ROWS	benchmarks/egen/CustomerTaxratesTable.h	/^typedef struct CUSTOMER_TAXRATE_ROWS$/;"	s	namespace:TPCE
CUSTOMER_TAXRATE_VALUE_FIELDS	benchmarks/tpce.h	73;"	d
CUSTOMER_VALUE_FIELDS	benchmarks/tpcc.h	12;"	d
CUSTOMER_VALUE_FIELDS	benchmarks/tpce.h	33;"	d
CUSTOM_LOAD	benchmarks/egen/EGenLoader.cpp	/^    CUSTOM_LOAD     \/\/ sponsor-provided load mechanism$/;"	e	enum:eLoadImplementation	file:
CWatchListsAndItemsTable	benchmarks/egen/WatchListsAndItemsTable.h	/^    CWatchListsAndItemsTable(CInputFiles inputFiles,$/;"	f	class:TPCE::CWatchListsAndItemsTable
CWatchListsAndItemsTable	benchmarks/egen/WatchListsAndItemsTable.h	/^class CWatchListsAndItemsTable : public TableTemplate<WATCH_LIST_AND_ITEM_ROW>$/;"	c	namespace:TPCE
CWheelTime	benchmarks/egen/WheelTime.cpp	/^CWheelTime::CWheelTime( PWheelConfig pWheelConfig )$/;"	f	class:CWheelTime
CWheelTime	benchmarks/egen/WheelTime.cpp	/^CWheelTime::CWheelTime( PWheelConfig pWheelConfig, CDateTime& Base, CDateTime& Now, INT32 offset )$/;"	f	class:CWheelTime
CWheelTime	benchmarks/egen/WheelTime.cpp	/^CWheelTime::CWheelTime( PWheelConfig pWheelConfig, INT32 cycles, INT32 index )$/;"	f	class:CWheelTime
CWheelTime	benchmarks/egen/WheelTime.h	/^class CWheelTime$/;"	c	namespace:TPCE
CXX	Makefile	/^CXX=g++$/;"	m
CXX	masstree/GNUmakefile	/^CXX = g++ -std=gnu++0x$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS := -Wall -std=c++0x -g$/;"	m
CX_C_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  CX_C_ID;$/;"	m	struct:TPCE::CUSTOMER_TAXRATE_ROW
CX_TX_ID	benchmarks/egen/Table_Defs.h	/^    char                    CX_TX_ID[ cTX_ID_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_TAXRATE_ROW
CZipCodeTable	benchmarks/egen/ZipCodeTable.h	/^    CZipCodeTable( CInputFiles inputFiles )$/;"	f	class:TPCE::CZipCodeTable
CZipCodeTable	benchmarks/egen/ZipCodeTable.h	/^class CZipCodeTable : public TableTemplate<ZIP_CODE_ROW>$/;"	c	namespace:TPCE
C_AD_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  C_AD_ID;$/;"	m	struct:TPCE::CUSTOMER_ROW
C_AREA_1	benchmarks/egen/Table_Defs.h	/^    char                    C_AREA_1[ cAREA_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_AREA_2	benchmarks/egen/Table_Defs.h	/^    char                    C_AREA_2[ cAREA_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_AREA_3	benchmarks/egen/Table_Defs.h	/^    char                    C_AREA_3[ cAREA_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_CTRY_1	benchmarks/egen/Table_Defs.h	/^    char                    C_CTRY_1[ cCTRY_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_CTRY_2	benchmarks/egen/Table_Defs.h	/^    char                    C_CTRY_2[ cCTRY_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_CTRY_3	benchmarks/egen/Table_Defs.h	/^    char                    C_CTRY_3[ cCTRY_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_DOB	benchmarks/egen/Table_Defs.h	/^    CDateTime               C_DOB;$/;"	m	struct:TPCE::CUSTOMER_ROW
C_EMAIL_1	benchmarks/egen/Table_Defs.h	/^    char                    C_EMAIL_1[ cEMAIL_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_EMAIL_2	benchmarks/egen/Table_Defs.h	/^    char                    C_EMAIL_2[ cEMAIL_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_EXT_1	benchmarks/egen/Table_Defs.h	/^    char                    C_EXT_1[ cEXT_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_EXT_2	benchmarks/egen/Table_Defs.h	/^    char                    C_EXT_2[ cEXT_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_EXT_3	benchmarks/egen/Table_Defs.h	/^    char                    C_EXT_3[ cEXT_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_F_NAME	benchmarks/egen/Table_Defs.h	/^    char                    C_F_NAME[ cF_NAME_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_GNDR	benchmarks/egen/Table_Defs.h	/^    char                    C_GNDR;$/;"	m	struct:TPCE::CUSTOMER_ROW
C_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  C_ID;$/;"	m	struct:TPCE::CUSTOMER_ROW
C_LOCAL_1	benchmarks/egen/Table_Defs.h	/^    char                    C_LOCAL_1[ cLOCAL_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_LOCAL_2	benchmarks/egen/Table_Defs.h	/^    char                    C_LOCAL_2[ cLOCAL_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_LOCAL_3	benchmarks/egen/Table_Defs.h	/^    char                    C_LOCAL_3[ cLOCAL_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_L_NAME	benchmarks/egen/Table_Defs.h	/^    char                    C_L_NAME[ cL_NAME_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_M_NAME	benchmarks/egen/Table_Defs.h	/^    char                    C_M_NAME[ cM_NAME_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    C_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_TAX_ID	benchmarks/egen/Table_Defs.h	/^    char                    C_TAX_ID[ cTAX_ID_len+1 ];$/;"	m	struct:TPCE::CUSTOMER_ROW
C_TIER	benchmarks/egen/Table_Defs.h	/^    char                    C_TIER;$/;"	m	struct:TPCE::CUSTOMER_ROW
CalculateCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent CalculateCompanyCompetitorCount(TIdent iCustomerCount)$/;"	f	class:TPCE::CCompanyCompetitorFile
CalculateCompanyCount	benchmarks/egen/CompanyFile.h	/^    TIdent CalculateCompanyCount(TIdent iCustomerCount)$/;"	f	class:TPCE::CCompanyFile
CalculatePrice	benchmarks/egen/MEEPriceBoard.cpp	/^CMoney  CMEEPriceBoard::CalculatePrice( char* pSecuritySymbol, double fTime )$/;"	f	class:CMEEPriceBoard
CalculatePrice	benchmarks/egen/MEESecurity.cpp	/^CMoney  CMEESecurity::CalculatePrice(   TIdent SecurityIndex,$/;"	f	class:CMEESecurity
CalculateSecurityCount	benchmarks/egen/SecurityFile.h	/^    TIdent CalculateSecurityCount(TIdent iCustomerCount)$/;"	f	class:TPCE::CSecurityFile
CalculateStartFromCompany	benchmarks/egen/CompanyFile.h	/^    TIdent CalculateStartFromCompany(TIdent iStartFromCustomer)$/;"	f	class:TPCE::CCompanyFile
CalculateStartFromCompanyCompetitor	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent CalculateStartFromCompanyCompetitor(TIdent iStartFromCustomer)$/;"	f	class:TPCE::CCompanyCompetitorFile
CalculateStartFromSecurity	benchmarks/egen/SecurityFile.h	/^    TIdent CalculateStartFromSecurity(TIdent iStartFromCustomer)$/;"	f	class:TPCE::CSecurityFile
CalculateTime	benchmarks/egen/MEESecurity.cpp	/^double  CMEESecurity::CalculateTime($/;"	f	class:CMEESecurity
CashTransactionBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CashTransactionBuffer(int c): EgenTupleContainer<CASH_TRANSACTION_ROW>(c){}$/;"	f	class:TPCE::CashTransactionBuffer
CashTransactionBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CashTransactionBuffer: public EgenTupleContainer<CASH_TRANSACTION_ROW>{$/;"	c	namespace:TPCE
CashTransactionRowFmt	benchmarks/egen/Table_Defs.h	/^const char CashTransactionRowFmt[] = "%" PRId64 "|%s|%.2f|%s\\n";$/;"	m	namespace:TPCE
CentsAmount	benchmarks/egen/Money.h	/^    INT64 CentsAmount()$/;"	f	class:TPCE::CMoney
Charge	benchmarks/egen/InputFlatFilesStructure.h	/^    TChargeFile                 *Charge;$/;"	m	class:TPCE::CInputFiles
Charge	benchmarks/egen/TradeGen.h	/^    CMoney                          Charge;$/;"	m	struct:TPCE::TAdditionalTradeInfo
ChargeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    ChargeBuffer(int c): EgenTupleContainer<CHARGE_ROW>(c){}$/;"	f	class:TPCE::ChargeBuffer
ChargeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class ChargeBuffer: public EgenTupleContainer<CHARGE_ROW>{$/;"	c	namespace:TPCE
ChargeRowFmt	benchmarks/egen/Table_Defs.h	/^const char ChargeRowFmt[] = "%s|%d|%.2f\\n";$/;"	m	namespace:TPCE
CheckBetweenInclusive	benchmarks/tpcc.cc	/^  CheckBetweenInclusive(int v, int lower, int upper)$/;"	f	class:tpcc_worker_mixin
CheckBetweenInclusive	benchmarks/tpce.cc	/^			CheckBetweenInclusive(int v, int lower, int upper)$/;"	f	class:tpce_worker_mixin
CheckBounds	imstring.h	/^  CheckBounds(size_t l)$/;"	f	class:base_imstring
CheckBounds	tuple.h	/^  CheckBounds(size_type s)$/;"	f	struct:dbtuple
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CCustomerPositionSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CDriverCEPartitionSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CDriverGlobalSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CLoaderSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CMarketWatchSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CSecurityDetailSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CTradeLookupSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CTradeOrderSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CTradeUpdateSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void) {$/;"	f	class:TPCE::CTxnMixGeneratorSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void)$/;"	f	class:TPCE::CBrokerVolumeSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void)$/;"	f	class:TPCE::CDriverCESettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void)$/;"	f	class:TPCE::CDriverDMSettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void)$/;"	f	class:TPCE::CDriverMEESettings
CheckCompliant	benchmarks/egen/DriverParamSettings.h	/^    void CheckCompliant(void)$/;"	f	struct:TPCE::TDriverCETxnSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    virtual void CheckDefaults(void) {}$/;"	f	class:TPCE::CParametersWithDefaults
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CBrokerVolumeSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CCustomerPositionSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CDriverCEPartitionSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CDriverGlobalSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CLoaderSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CMarketWatchSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CSecurityDetailSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CTradeLookupSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CTradeOrderSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CTradeUpdateSettings
CheckDefaults	benchmarks/egen/DriverParamSettings.h	/^    void CheckDefaults(void)$/;"	f	class:TPCE::CTxnMixGeneratorSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CCustomerPositionSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CDriverCEPartitionSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CDriverGlobalSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CLoaderSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CMarketWatchSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CSecurityDetailSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CTradeLookupSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CTradeOrderSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CTradeUpdateSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void) {$/;"	f	class:TPCE::CTxnMixGeneratorSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void)$/;"	f	class:TPCE::CBrokerVolumeSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void)$/;"	f	class:TPCE::CDriverCESettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void)$/;"	f	class:TPCE::CDriverDMSettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void)$/;"	f	class:TPCE::CDriverMEESettings
CheckValid	benchmarks/egen/DriverParamSettings.h	/^    void CheckValid(void)$/;"	f	struct:TPCE::TDriverCETxnSettings
CheckVersion	btree.h	/^    CheckVersion(uint64_t t, uint64_t stablev)$/;"	f	struct:private_::u64manip
CheckVersion	btree.h	/^  CheckVersion(LoadVersionType v, uint64_t stablev)$/;"	f	class:btree_version_manip
CheckVersion	btree.h	/^  CheckVersion(uint64_t a, uint64_t b)$/;"	f	class:btree
ClaimLock	benchmarks/egen/SyncLockInterface.h	/^    void ClaimLock() {$/;"	f	class:TPCE::CSyncLock
ClearRecord	benchmarks/egen/TableTemplate.h	/^    void ClearRecord() { memset(&m_row, 0, sizeof(m_row)); }$/;"	f	class:TPCE::TableTemplate
ClearRoot	btree.h	/^  ClearRoot(VersionType &v)$/;"	f	class:btree_version_manip
Clp_AddStringListType	masstree/clp.c	/^Clp_AddStringListType(Clp_Parser *clp, int val_type, int flags, ...)$/;"	f
Clp_AddStringListTypeVec	masstree/clp.c	/^Clp_AddStringListTypeVec(Clp_Parser *clp, int val_type, int flags,$/;"	f
Clp_AddType	masstree/clp.c	/^Clp_AddType(Clp_Parser *clp, int val_type, int flags,$/;"	f
Clp_AllowNumbers	masstree/clp.h	282;"	d
Clp_BadOption	masstree/clp.h	159;"	d
Clp_BuildString	masstree/clp.c	/^typedef struct Clp_BuildString {$/;"	s	file:
Clp_BuildString	masstree/clp.c	/^} Clp_BuildString;$/;"	t	typeref:struct:Clp_BuildString	file:
Clp_CurOptionName	masstree/clp.c	/^Clp_CurOptionName(Clp_Parser *clp)$/;"	f
Clp_CurOptionNameBuf	masstree/clp.c	/^Clp_CurOptionNameBuf(Clp_Parser *clp, char *buf, int len)$/;"	f
Clp_DeleteParser	masstree/clp.c	/^Clp_DeleteParser(Clp_Parser *clp)$/;"	f
Clp_DeleteParserState	masstree/clp.c	/^Clp_DeleteParserState(Clp_ParserState *state)$/;"	f
Clp_DisallowOptions	masstree/clp.h	272;"	d
Clp_Done	masstree/clp.h	157;"	d
Clp_DoubledLong	masstree/clp.c	158;"	d	file:
Clp_Error	masstree/clp.h	161;"	d
Clp_ErrorHandler	masstree/clp.h	/^typedef void (*Clp_ErrorHandler)(Clp_Parser *clp, const char *message);$/;"	t
Clp_InitialValType	masstree/clp.c	160;"	d	file:
Clp_InternOption	masstree/clp.c	/^} Clp_InternOption;$/;"	t	typeref:struct:__anon43	file:
Clp_Internal	masstree/clp.c	/^typedef struct Clp_Internal {$/;"	s	file:
Clp_Internal	masstree/clp.c	/^} Clp_Internal;$/;"	t	typeref:struct:Clp_Internal	file:
Clp_IsLong	masstree/clp.c	/^Clp_IsLong(Clp_Parser *clp, const char *long_name)$/;"	f
Clp_IsShort	masstree/clp.c	/^Clp_IsShort(Clp_Parser *clp, int short_name)$/;"	f
Clp_Long	masstree/clp.h	144;"	d
Clp_LongImplicit	masstree/clp.h	150;"	d
Clp_LongNegated	masstree/clp.h	148;"	d
Clp_Mandatory	masstree/clp.h	113;"	d
Clp_Negate	masstree/clp.h	121;"	d
Clp_NewParser	masstree/clp.c	/^Clp_NewParser(int argc, const char * const *argv, int nopt, const Clp_Option *opt)$/;"	f
Clp_NewParserState	masstree/clp.c	/^Clp_NewParserState(void)$/;"	f
Clp_Next	masstree/clp.c	/^Clp_Next(Clp_Parser *clp)$/;"	f
Clp_NoVal	masstree/clp.h	72;"	d
Clp_NotOption	masstree/clp.h	155;"	d
Clp_Oclass	masstree/clp.c	/^} Clp_Oclass;$/;"	t	typeref:struct:__anon44	file:
Clp_OclassSize	masstree/clp.c	192;"	d	file:
Clp_OnlyNegated	masstree/clp.h	125;"	d
Clp_Option	masstree/clp.h	/^struct Clp_Option {$/;"	s
Clp_Option	masstree/clp.h	/^typedef struct Clp_Option Clp_Option;$/;"	t	typeref:struct:Clp_Option
Clp_OptionChar	masstree/clp.c	/^Clp_OptionChar(Clp_Parser *clp, int c)$/;"	f
Clp_OptionCharsSize	masstree/clp.c	186;"	d	file:
Clp_OptionError	masstree/clp.c	/^Clp_OptionError(Clp_Parser *clp, const char *format, ...)$/;"	f
Clp_Optional	masstree/clp.h	119;"	d
Clp_Parser	masstree/clp.h	/^struct Clp_Parser {$/;"	s
Clp_Parser	masstree/clp.h	/^typedef struct Clp_Parser Clp_Parser;$/;"	t	typeref:struct:Clp_Parser
Clp_ParserState	masstree/clp.c	/^struct Clp_ParserState {$/;"	s	file:
Clp_ParserState	masstree/clp.h	/^typedef struct Clp_ParserState Clp_ParserState;$/;"	t	typeref:struct:Clp_ParserState
Clp_PreferredMatch	masstree/clp.h	131;"	d
Clp_ProgramName	masstree/clp.c	/^Clp_ProgramName(Clp_Parser *clp)$/;"	f
Clp_RestoreParser	masstree/clp.c	/^Clp_RestoreParser(Clp_Parser *clp, const Clp_ParserState *state)$/;"	f
Clp_SaveParser	masstree/clp.c	/^Clp_SaveParser(const Clp_Parser *clp, Clp_ParserState *state)$/;"	f
Clp_SetArguments	masstree/clp.c	/^Clp_SetArguments(Clp_Parser *clp, int argc, const char * const *argv)$/;"	f
Clp_SetErrorHandler	masstree/clp.c	/^Clp_SetErrorHandler(Clp_Parser *clp, void (*errh)(Clp_Parser *, const char *))$/;"	f
Clp_SetOptionChar	masstree/clp.c	/^Clp_SetOptionChar(Clp_Parser *clp, int c, int type)$/;"	f
Clp_SetOptionProcessing	masstree/clp.c	/^Clp_SetOptionProcessing(Clp_Parser *clp, int on)$/;"	f
Clp_SetOptions	masstree/clp.c	/^Clp_SetOptions(Clp_Parser *clp, int nopt, const Clp_Option *opt)$/;"	f
Clp_SetProgramName	masstree/clp.c	/^Clp_SetProgramName(Clp_Parser *clp, const char *name)$/;"	f
Clp_SetUTF8	masstree/clp.c	/^Clp_SetUTF8(Clp_Parser *clp, int utf8)$/;"	f
Clp_Shift	masstree/clp.c	/^Clp_Shift(Clp_Parser *clp, int allow_options)$/;"	f
Clp_Short	masstree/clp.h	142;"	d
Clp_ShortNegated	masstree/clp.h	146;"	d
Clp_StringList	masstree/clp.c	/^typedef struct Clp_StringList {$/;"	s	file:
Clp_StringList	masstree/clp.c	/^} Clp_StringList;$/;"	t	typeref:struct:Clp_StringList	file:
Clp_StringListLong	masstree/clp.h	286;"	d
Clp_ValBool	masstree/clp.h	79;"	d
Clp_ValDouble	masstree/clp.h	102;"	d
Clp_ValFirstUser	masstree/clp.h	105;"	d
Clp_ValInt	masstree/clp.h	84;"	d
Clp_ValIntSize	masstree/clp.h	166;"	d
Clp_ValLong	masstree/clp.h	98;"	d
Clp_ValParseFunc	masstree/clp.h	/^typedef int (*Clp_ValParseFunc)(Clp_Parser *clp, const char *vstr,$/;"	t
Clp_ValSize	masstree/clp.h	164;"	d
Clp_ValString	masstree/clp.h	73;"	d
Clp_ValStringNotOption	masstree/clp.h	75;"	d
Clp_ValType	masstree/clp.c	/^} Clp_ValType;$/;"	t	typeref:struct:__anon42	file:
Clp_ValUnsigned	masstree/clp.h	91;"	d
Clp_ValUnsignedLong	masstree/clp.h	100;"	d
Clp_fprintf	masstree/clp.c	/^Clp_fprintf(Clp_Parser* clp, FILE* f, const char* format, ...)$/;"	f
Clp_vbsprintf	masstree/clp.c	/^Clp_vbsprintf(Clp_Parser *clp, Clp_BuildString *bs,$/;"	f	file:
Clp_vfprintf	masstree/clp.c	/^Clp_vfprintf(Clp_Parser* clp, FILE* f, const char* format, va_list val)$/;"	f
Clp_vsnprintf	masstree/clp.c	/^Clp_vsnprintf(Clp_Parser* clp, char* str, size_t size,$/;"	f
Cmd_Checkpoint	masstree/kvproto.hh	/^    Cmd_Checkpoint = 12,$/;"	e	enum:__anon12
Cmd_Get	masstree/kvproto.hh	/^    Cmd_Get = 2,$/;"	e	enum:__anon12
Cmd_Handshake	masstree/kvproto.hh	/^    Cmd_Handshake = 14,$/;"	e	enum:__anon12
Cmd_Max	masstree/kvproto.hh	/^    Cmd_Max$/;"	e	enum:__anon12
Cmd_None	masstree/kvproto.hh	/^    Cmd_None = 0,$/;"	e	enum:__anon12
Cmd_Put	masstree/kvproto.hh	/^    Cmd_Put = 6,$/;"	e	enum:__anon12
Cmd_Remove	masstree/kvproto.hh	/^    Cmd_Remove = 10,$/;"	e	enum:__anon12
Cmd_Replace	masstree/kvproto.hh	/^    Cmd_Replace = 8,$/;"	e	enum:__anon12
Cmd_Scan	masstree/kvproto.hh	/^    Cmd_Scan = 4,$/;"	e	enum:__anon12
Commission	benchmarks/egen/TradeGen.h	/^    CMoney                          Commission;$/;"	m	struct:TPCE::TAdditionalTradeInfo
CommissionRate	benchmarks/egen/InputFlatFilesStructure.h	/^    TCommissionRateFile         *CommissionRate;$/;"	m	class:TPCE::CInputFiles
CommissionRateBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CommissionRateBuffer(int c): EgenTupleContainer<COMMISSION_RATE_ROW>(c){}$/;"	f	class:TPCE::CommissionRateBuffer
CommissionRateBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CommissionRateBuffer: public EgenTupleContainer<COMMISSION_RATE_ROW>{$/;"	c	namespace:TPCE
CommissionRateRowFmt	benchmarks/egen/Table_Defs.h	/^const char CommissionRateRowFmt[] = "%d|%s|%s|%.0f|%.0f|%.2f\\n";$/;"	m	namespace:TPCE
Commit	benchmarks/egen/BaseLoader.h	/^    virtual void Commit() {};   \/\/ default implementation is empty$/;"	f	class:TPCE::CBaseLoader
Company	benchmarks/egen/InputFlatFilesStructure.h	/^    CCompanyFile                *Company;$/;"	m	class:TPCE::CInputFiles
CompanyBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CompanyBuffer(int c): EgenTupleContainer<COMPANY_ROW>(c){}$/;"	f	class:TPCE::CompanyBuffer
CompanyBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CompanyBuffer: public EgenTupleContainer<COMPANY_ROW>{$/;"	c	namespace:TPCE
CompanyCompetitor	benchmarks/egen/InputFlatFilesStructure.h	/^    CCompanyCompetitorFile      *CompanyCompetitor;$/;"	m	class:TPCE::CInputFiles
CompanyCompetitorBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CompanyCompetitorBuffer(int c): EgenTupleContainer<COMPANY_COMPETITOR_ROW>(c){}$/;"	f	class:TPCE::CompanyCompetitorBuffer
CompanyCompetitorBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CompanyCompetitorBuffer: public EgenTupleContainer<COMPANY_COMPETITOR_ROW>{$/;"	c	namespace:TPCE
CompanyCompetitorRowFmt	benchmarks/egen/Table_Defs.h	/^const char CompanyCompetitorRowFmt[] = "%" PRId64 "|%" PRId64 "|%s\\n";$/;"	m	namespace:TPCE
CompanyRowFmt	benchmarks/egen/Table_Defs.h	/^const char CompanyRowFmt[] = "%" PRId64 "|%s|%s|%s|%s|%s|%" PRId64 "|%s|%s\\n";$/;"	m	namespace:TPCE
CompanySPRate	benchmarks/egen/InputFlatFilesStructure.h	/^    TCompanySPRateFile          *CompanySPRate;$/;"	m	class:TPCE::CInputFiles
CompletionTime	benchmarks/egen/TradeGen.h	/^    double          CompletionTime; \/\/ seconds from StartTime$/;"	m	struct:TPCE::TTradeInfo
ComplexJson	masstree/json.hh	/^	ComplexJson()$/;"	f	struct:lcdf::Json::ComplexJson
ComplexJson	masstree/json.hh	/^    struct ComplexJson {$/;"	s	class:lcdf::Json
ComputeNumSecurities	benchmarks/egen/ExchangeTable.h	/^    void ComputeNumSecurities( TIdent iCustomerCount )$/;"	f	class:TPCE::CExchangeTable
ConvertTradeTypeIdToEnum	benchmarks/egen/MEETickerTape.cpp	/^eTradeTypeID CMEETickerTape::ConvertTradeTypeIdToEnum( char* pTradeType )$/;"	f	class:CMEETickerTape
CoreBits	persist_test.cc	/^  static const size_t CoreBits = NMAXCOREBITS; \/\/ allow 2^CoreShift distinct threads$/;"	m	struct:tidhelpers	file:
CoreId	persist_test.cc	/^  uint64_t CoreId(uint64_t v)$/;"	f	struct:tidhelpers
CoreMask	persist_test.cc	/^  static const uint64_t CoreMask = (NMaxCores - 1);$/;"	m	struct:tidhelpers	file:
CoresPerChip	masstree/perfstat.cc	/^enum { CoresPerChip = MaxCores \/ MaxNumaNode };$/;"	e	enum:__anon53	file:
Correctness	masstree/doc/spec.tex	/^Masstree can support other operations, such as remove and a compare-and-swap-style atomic put, but these three suffice to discuss correctness.$/;"	s
CreateAccountPermissionLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<ACCOUNT_PERMISSION_ROW>*    CreateAccountPermissionLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateAccountPermissionLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<ACCOUNT_PERMISSION_ROW>*    CreateAccountPermissionLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateAddressLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<ADDRESS_ROW>*               CreateAddressLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateAddressLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<ADDRESS_ROW>*               CreateAddressLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateBrokerLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<BROKER_ROW>*                CreateBrokerLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateBrokerLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<BROKER_ROW>*                CreateBrokerLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCashTransactionLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<CASH_TRANSACTION_ROW>*      CreateCashTransactionLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCashTransactionLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<CASH_TRANSACTION_ROW>*      CreateCashTransactionLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateChargeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<CHARGE_ROW>*                CreateChargeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateChargeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<CHARGE_ROW>*                CreateChargeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCommissionRateLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<COMMISSION_RATE_ROW>*       CreateCommissionRateLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCommissionRateLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<COMMISSION_RATE_ROW>*       CreateCommissionRateLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCompanyCompetitorLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<COMPANY_COMPETITOR_ROW>*    CreateCompanyCompetitorLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCompanyCompetitorLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<COMPANY_COMPETITOR_ROW>*    CreateCompanyCompetitorLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCompanyLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<COMPANY_ROW>*               CreateCompanyLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCompanyLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<COMPANY_ROW>*               CreateCompanyLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCustomerAccountLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<CUSTOMER_ACCOUNT_ROW>*      CreateCustomerAccountLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCustomerAccountLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<CUSTOMER_ACCOUNT_ROW>*      CreateCustomerAccountLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCustomerLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<CUSTOMER_ROW>*              CreateCustomerLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCustomerLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<CUSTOMER_ROW>*              CreateCustomerLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateCustomerTaxrateLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<CUSTOMER_TAXRATE_ROW>*      CreateCustomerTaxrateLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateCustomerTaxrateLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<CUSTOMER_TAXRATE_ROW>*      CreateCustomerTaxrateLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateDailyMarketLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<DAILY_MARKET_ROW>*          CreateDailyMarketLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateDailyMarketLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<DAILY_MARKET_ROW>*          CreateDailyMarketLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateExchangeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<EXCHANGE_ROW>*              CreateExchangeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateExchangeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<EXCHANGE_ROW>*              CreateExchangeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateFinancialLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<FINANCIAL_ROW>*             CreateFinancialLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateFinancialLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<FINANCIAL_ROW>*             CreateFinancialLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateHoldingHistoryLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<HOLDING_HISTORY_ROW>*       CreateHoldingHistoryLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateHoldingHistoryLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<HOLDING_HISTORY_ROW>*       CreateHoldingHistoryLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateHoldingLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<HOLDING_ROW>*               CreateHoldingLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateHoldingLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<HOLDING_ROW>*               CreateHoldingLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateHoldingSummaryLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<HOLDING_SUMMARY_ROW>*           CreateHoldingSummaryLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateHoldingSummaryLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<HOLDING_SUMMARY_ROW>*           CreateHoldingSummaryLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateIndustryLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<INDUSTRY_ROW>*              CreateIndustryLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateIndustryLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<INDUSTRY_ROW>*              CreateIndustryLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateLastTradeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<LAST_TRADE_ROW>*            CreateLastTradeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateLastTradeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<LAST_TRADE_ROW>*            CreateLastTradeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateLoaderFactory	benchmarks/egen/EGenLoader.cpp	/^	CBaseLoaderFactory* CreateLoaderFactory(eLoadImplementation eLoadType)$/;"	f
CreateName	benchmarks/egen/CompanyFile.h	/^    void CreateName(TIdent  iIndex,     \/\/ row number$/;"	f	class:TPCE::CCompanyFile
CreateName	benchmarks/egen/SecurityTable.h	/^    void CreateName(    TIdent  iIndex,     \/\/ row number$/;"	f	class:TPCE::CSecurityTable
CreateNewsItemLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<NEWS_ITEM_ROW>*             CreateNewsItemLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateNewsItemLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<NEWS_ITEM_ROW>*             CreateNewsItemLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateNewsXRefLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<NEWS_XREF_ROW>*             CreateNewsXRefLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateNewsXRefLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<NEWS_XREF_ROW>*             CreateNewsXRefLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateSectorLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<SECTOR_ROW>*                CreateSectorLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateSectorLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<SECTOR_ROW>*                CreateSectorLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateSecurityLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<SECURITY_ROW>*              CreateSecurityLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateSecurityLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<SECURITY_ROW>*              CreateSecurityLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateSettlementLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<SETTLEMENT_ROW>*            CreateSettlementLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateSettlementLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<SETTLEMENT_ROW>*            CreateSettlementLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateStatusTypeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<STATUS_TYPE_ROW>*           CreateStatusTypeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateStatusTypeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<STATUS_TYPE_ROW>*           CreateStatusTypeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateSuffix	benchmarks/egen/SecurityFile.h	/^    void CreateSuffix( TIdent Multiplier, char* pBuf, size_t BufSize )$/;"	f	class:TPCE::CSecurityFile
CreateSymbol	benchmarks/egen/SecurityFile.h	/^    void CreateSymbol(  TIdent  iIndex,     \/\/ row number$/;"	f	class:TPCE::CSecurityFile
CreateTaxrateLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<TAXRATE_ROW>*               CreateTaxrateLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateTaxrateLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<TAXRATE_ROW>*               CreateTaxrateLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateTradeHistoryLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<TRADE_HISTORY_ROW>*         CreateTradeHistoryLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateTradeHistoryLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<TRADE_HISTORY_ROW>*         CreateTradeHistoryLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateTradeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<TRADE_ROW>*                 CreateTradeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateTradeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<TRADE_ROW>*                 CreateTradeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateTradeRequestLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<TRADE_REQUEST_ROW>*         CreateTradeRequestLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateTradeRequestLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<TRADE_REQUEST_ROW>*         CreateTradeRequestLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateTradeTypeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<TRADE_TYPE_ROW>*            CreateTradeTypeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateTradeTypeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<TRADE_TYPE_ROW>*            CreateTradeTypeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateWatchItemLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<WATCH_ITEM_ROW>*            CreateWatchItemLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateWatchItemLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<WATCH_ITEM_ROW>*            CreateWatchItemLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateWatchListLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<WATCH_LIST_ROW>*            CreateWatchListLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateWatchListLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<WATCH_LIST_ROW>*            CreateWatchListLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CreateZipCodeLoader	benchmarks/egen/FlatLoaderFactory.h	/^    virtual CBaseLoader<ZIP_CODE_ROW>*          CreateZipCodeLoader()$/;"	f	class:TPCE::CFlatLoaderFactory
CreateZipCodeLoader	benchmarks/egen/NullLoaderFactory.h	/^    virtual CBaseLoader<ZIP_CODE_ROW>*          CreateZipCodeLoader()$/;"	f	class:TPCE::CNullLoaderFactory
CustomerAccountBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CustomerAccountBuffer(int c): EgenTupleContainer<CUSTOMER_ACCOUNT_ROW>(c){}$/;"	f	class:TPCE::CustomerAccountBuffer
CustomerAccountBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CustomerAccountBuffer: public EgenTupleContainer<CUSTOMER_ACCOUNT_ROW>{$/;"	c	namespace:TPCE
CustomerAccountRowFmt	benchmarks/egen/Table_Defs.h	/^const char CustomerAccountRowFmt[] = "%" PRId64 "|%" PRId64 "|%" PRId64 "|%s|%d|%.2f\\n";$/;"	m	namespace:TPCE
CustomerBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CustomerBuffer(int c): EgenTupleContainer<CUSTOMER_ROW>(c){}$/;"	f	class:TPCE::CustomerBuffer
CustomerBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CustomerBuffer: public EgenTupleContainer<CUSTOMER_ROW>{$/;"	c	namespace:TPCE
CustomerLastNameMaxSize	benchmarks/tpcc.cc	/^  static const size_t CustomerLastNameMaxSize = 5 * 3;$/;"	m	class:tpcc_worker_mixin	file:
CustomerPosition	benchmarks/tpce.cc	/^		static txn_result CustomerPosition(bench_worker *w)$/;"	f	class:tpce_worker
CustomerPositionMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   CustomerPositionMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
CustomerPositionMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    CustomerPositionMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
CustomerRowFmt	benchmarks/egen/Table_Defs.h	/^const char CustomerRowFmt[] = "%" PRId64 "|%s|%s|%s|%s|%s|%c|%d|%s|%" PRId64 "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\\n";$/;"	m	namespace:TPCE
CustomerTaxrateBuffer	benchmarks/egen/shore_tpce_egen.h	/^    CustomerTaxrateBuffer(int c): EgenTupleContainer<CUSTOMER_TAXRATE_ROW>(c){}$/;"	f	class:TPCE::CustomerTaxrateBuffer
CustomerTaxrateBuffer	benchmarks/egen/shore_tpce_egen.h	/^class CustomerTaxrateBuffer: public EgenTupleContainer<CUSTOMER_TAXRATE_ROW>{$/;"	c	namespace:TPCE
CustomerTaxrateRowFmt	benchmarks/egen/Table_Defs.h	/^const char CustomerTaxrateRowFmt[] = "%s|%" PRId64 "\\n";$/;"	m	namespace:TPCE
Cycles	benchmarks/egen/WheelTime.h	/^    inline INT32 Cycles( void ) { return m_Cycles; };$/;"	f	class:TPCE::CWheelTime
D	dbcore/size-encode.cpp	114;"	d	file:
DAEMON_HAS_WORK	dbcore/sm-log-alloc.cpp	/^    enum { DAEMON_HAS_WORK=0x1, DAEMON_SLEEPING=0x2 };$/;"	e	enum:__anon88::__anon89	file:
DAEMON_SLEEPING	dbcore/sm-log-alloc.cpp	/^    enum { DAEMON_HAS_WORK=0x1, DAEMON_SLEEPING=0x2 };$/;"	e	enum:__anon88::__anon89	file:
DAILY_MARKET_GEN_ROW	benchmarks/egen/DailyMarketTable.h	/^typedef struct DAILY_MARKET_GEN_ROW$/;"	s	namespace:TPCE
DAILY_MARKET_KEY_FIELDS	benchmarks/tpce.h	240;"	d
DAILY_MARKET_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct DAILY_MARKET_ROW$/;"	s	namespace:TPCE
DAILY_MARKET_TABLE_H	benchmarks/egen/DailyMarketTable.h	41;"	d
DAILY_MARKET_VALUE_FIELDS	benchmarks/tpce.h	243;"	d
DATA	dbcore/test-adler.cpp	/^uint32_t \/*__attribute__((aligned(16)))*\/ DATA[] = {$/;"	v
DATETIME_FORMAT	benchmarks/egen/FlatFileLoader.h	54;"	d
DATE_FORMAT	benchmarks/egen/FlatFileLoader.h	62;"	d
DATE_TIME_H	benchmarks/egen/DateTime.h	38;"	d
DBCORE_OBJFILES	Makefile	/^DBCORE_OBJFILES := $(patsubst dbcore\/%.cpp, $(O)\/dbcore\/%.o, $(DBCORE_SRCFILES))$/;"	m
DBCORE_SRCFILES	Makefile	/^DBCORE_SRCFILES = dbcore\/sm-alloc.cpp \\$/;"	m
DBINTERFACE_H_INCLUDED	benchmarks/egen/TxnHarnessDBInterface.h	42;"	d
DBS	benchmarks/results/tom-1-22-13.py	/^DBS = ('mysql', 'berkeley-db', 'nu-db', 'ndb-proto2')$/;"	v
DBS	benchmarks/results/tom-2-6-13.py	/^DBS = ('ndb-proto1', 'ndb-proto2')$/;"	v
DB_INDICATOR	benchmarks/egen/EGenStandardTypes.h	/^    typedef INT32   DB_INDICATOR;$/;"	t
DB_INDICATOR	benchmarks/egen/EGenStandardTypes.h	/^    typedef UINT16  DB_INDICATOR;$/;"	t
DB_INDICATOR	benchmarks/egen/EGenStandardTypes.h	/^    typedef long    DB_INDICATOR;$/;"	t
DB_INDICATOR	benchmarks/egen/EGenStandardTypes.h	/^    typedef sb2     DB_INDICATOR;$/;"	t
DEBUG	Makefile	/^DEBUG ?= 0$/;"	m
DEBUG	third-party/lz4/lz4c.c	154;"	d	file:
DEBUGOUTPUT	third-party/lz4/lz4c.c	155;"	d	file:
DEBUG_S	Makefile	/^DEBUG_S=$(strip $(DEBUG))$/;"	m
DEFAULTCOMPRESSOR	third-party/lz4/bench.c	71;"	d	file:
DEFAULTCOMPRESSOR	third-party/lz4/fullbench.c	71;"	d	file:
DEFAULT_ALIGNMENT	dbcore/dynarray.cpp	/^static_assert(sizeof(dynarray) == DEFAULT_ALIGNMENT, "Dynarray is not the expected size");$/;"	v
DEFAULT_ALIGNMENT	dbcore/sm-defs.h	22;"	d
DEFAULT_ALIGNMENT_BITS	dbcore/sm-defs.h	21;"	d
DEFAULT_BINARY	benchmarks/runner.py	/^  DEFAULT_BINARY=binary_path('out-perf')$/;"	v
DEFAULT_CHUNKSIZE	third-party/lz4/bench.c	103;"	d	file:
DEFAULT_CHUNKSIZE	third-party/lz4/fullbench.c	109;"	d	file:
DEFER	dbcore/defer.h	49;"	d
DEFER_UNLESS	dbcore/defer.h	73;"	d
DEFN_TBL_ACCESSOR_X	benchmarks/tpcc.cc	317;"	d	file:
DEFN_TBL_ACCESSOR_X	benchmarks/tpcc.cc	331;"	d	file:
DEFN_TBL_ACCESSOR_X	benchmarks/tpce.cc	231;"	d	file:
DEFN_TBL_ACCESSOR_X	benchmarks/tpce.cc	243;"	d	file:
DEFN_TBL_INIT_X	benchmarks/tpcc.cc	302;"	d	file:
DEFN_TBL_INIT_X	benchmarks/tpcc.cc	313;"	d	file:
DEFN_TBL_INIT_X	benchmarks/tpce.cc	217;"	d	file:
DEFN_TBL_INIT_X	benchmarks/tpce.cc	227;"	d	file:
DEF_IMPL	dbcore/stub-impl.h	85;"	d
DEF_IMPL2	dbcore/stub-impl.h	87;"	d
DELTANEXT	third-party/lz4/lz4hc.c	267;"	d	file:
DEPCFLAGS	masstree/GNUmakefile	/^DEPCFLAGS = -MD -MF $(DEPSDIR)\/$*.d -MP$/;"	m
DEPFILES	Makefile	/^DEPFILES := $(wildcard $(O)\/*.d $(O)\/*\/*.d $(O)\/*\/*\/*.d masstree\/_masstree_config.d)$/;"	m
DEPFILES	masstree/GNUmakefile	/^DEPFILES := $(wildcard $(DEPSDIR)\/*.d)$/;"	m
DEPSDIR	masstree/GNUmakefile	/^DEPSDIR := .deps$/;"	m
DEP_BENCH_CONFIG	Makefile	/^DEP_BENCH_CONFIG := $(shell mkdir -p $(O); echo >$(O)\/buildstamp.bench; echo "DEP_BENCH_CONFIG:=$(MYSQL_S)" >$(O)\/_bench_config.d)$/;"	m
DEP_MAIN_CONFIG	Makefile	/^DEP_MAIN_CONFIG := $(shell mkdir -p $(O); echo >$(O)\/buildstamp; echo "DEP_MAIN_CONFIG:=$(DEBUG_S).$(CHECK_INVARIANTS_S).$(EVENT_COUNTERS_S)" >$(O)\/_main_config.d)$/;"	m
DEP_MASSTREE_CONFIG	Makefile	/^DEP_MASSTREE_CONFIG := $(shell mkdir -p $(O); echo >$(O)\/buildstamp.masstree; echo "DEP_MASSTREE_CONFIG:=$(MASSTREE_CONFIG)" >masstree\/_masstree_config.d)$/;"	m
DESCRIPTOR_VALUE_FAILSAFE_READ_FN_X	record/encoder.h	202;"	d
DESCRIPTOR_VALUE_FAILSAFE_SKIP_FN_X	record/encoder.h	208;"	d
DESCRIPTOR_VALUE_MAX_NBYTES_X	record/encoder.h	210;"	d
DESCRIPTOR_VALUE_NBYTES_FN_X	record/encoder.h	204;"	d
DESCRIPTOR_VALUE_OFFSETOF_X	record/encoder.h	212;"	d
DESCRIPTOR_VALUE_READ_FN_X	record/encoder.h	200;"	d
DESCRIPTOR_VALUE_SIZEOF_X	record/encoder.h	214;"	d
DESCRIPTOR_VALUE_SKIP_FN_X	record/encoder.h	206;"	d
DESCRIPTOR_VALUE_WRITE_FN_X	record/encoder.h	198;"	d
DICTIONARY_LOGSIZE	third-party/lz4/lz4hc.c	186;"	d	file:
DIE	dbcore/sm-defs.h	243;"	d
DIE_IF	dbcore/sm-defs.h	219;"	d
DIRTY_BIT	dbcore/sm-common.h	/^    static uint64_t const DIRTY_BIT = VALUE_START_BIT-1;$/;"	m	struct:fat_ptr
DIRTY_MASK	dbcore/sm-common.h	/^    static uint64_t const DIRTY_MASK = 1 << DIRTY_BIT;$/;"	m	struct:fat_ptr
DISABLE_OVERWRITE_IN_PLACE	config/config-factor-gc-nowriteinplace.h	5;"	d
DISPLAY	third-party/lz4/bench.c	128;"	d	file:
DISPLAY	third-party/lz4/fullbench.c	128;"	d	file:
DISPLAY	third-party/lz4/lz4c.c	126;"	d	file:
DISTRICT_KEY_FIELDS	benchmarks/tpcc.h	42;"	d
DISTRICT_VALUE_FIELDS	benchmarks/tpcc.h	45;"	d
DM_CLOSE	benchmarks/egen/Table_Defs.h	/^    double                  DM_CLOSE;$/;"	m	struct:TPCE::DAILY_MARKET_ROW
DM_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               DM_DATE;$/;"	m	struct:TPCE::DAILY_MARKET_ROW
DM_H	benchmarks/egen/DM.h	70;"	d
DM_HIGH	benchmarks/egen/Table_Defs.h	/^    double                  DM_HIGH;$/;"	m	struct:TPCE::DAILY_MARKET_ROW
DM_LOW	benchmarks/egen/Table_Defs.h	/^    double                  DM_LOW;$/;"	m	struct:TPCE::DAILY_MARKET_ROW
DM_SUT_INTERFACE_H	benchmarks/egen/DMSUTInterface.h	43;"	d
DM_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    DM_S_SYMB[cSYMBOL_len+1];$/;"	m	struct:TPCE::DAILY_MARKET_ROW
DM_VOL	benchmarks/egen/Table_Defs.h	/^    INT64                   DM_VOL;$/;"	m	struct:TPCE::DAILY_MARKET_ROW
DO_EARLY_SSN_CHECKS	macros.h	9;"	d
DO_IF	dbcore/sm-defs.h	211;"	d
DO_STRUCT	record/encoder.h	368;"	d
DO_STRUCT_COMMON	record/encoder.h	321;"	d
DO_STRUCT_ENCODE_REST	record/encoder.h	244;"	d
DO_STRUCT_MASSTREE	record/encoder.h	311;"	d
DO_STRUCT_MASSTREE	record/encoder.h	318;"	d
DO_STRUCT_PASS_THROUGH_REST	record/encoder.h	277;"	d
DO_STRUCT_REST_VALUE	record/encoder.h	360;"	d
DO_STRUCT_REST_VALUE	record/encoder.h	362;"	d
DRIVERPARAM_CHECK_BETWEEN	benchmarks/egen/DriverParamSettings.h	80;"	d
DRIVERPARAM_CHECK_DEFAULT	benchmarks/egen/DriverParamSettings.h	84;"	d
DRIVERPARAM_CHECK_EQUAL	benchmarks/egen/DriverParamSettings.h	59;"	d
DRIVERPARAM_CHECK_GE	benchmarks/egen/DriverParamSettings.h	66;"	d
DRIVERPARAM_CHECK_LE	benchmarks/egen/DriverParamSettings.h	73;"	d
DRIVER_PARAM_SETTINGS_H	benchmarks/egen/DriverParamSettings.h	45;"	d
DRIVER_TYPES_H	benchmarks/egen/DriverTypes.h	42;"	d
DRYRUN	benchmarks/runner.py	/^DRYRUN = True$/;"	v
DURABLE_FILE_NAME_BUFSZ	dbcore/sm-log-file.cpp	21;"	d	file:
DURABLE_FILE_NAME_FMT	dbcore/sm-log-file.cpp	20;"	d	file:
DVIPS	masstree/doc/GNUmakefile	/^DVIPS := dvips -P pdf -j0 -G0 -t letter$/;"	m
DZERO	dbcore/adler.cpp	/^static v4si const DZERO = {0,0,0,0};$/;"	v	file:
D_RANGE	benchmarks/runner.py	/^  D_RANGE = range(0, 11)$/;"	v
DailyMarketBuffer	benchmarks/egen/shore_tpce_egen.h	/^    DailyMarketBuffer(int c): EgenTupleContainer<DAILY_MARKET_ROW>(c){}$/;"	f	class:TPCE::DailyMarketBuffer
DailyMarketBuffer	benchmarks/egen/shore_tpce_egen.h	/^class DailyMarketBuffer: public EgenTupleContainer<DAILY_MARKET_ROW>{$/;"	c	namespace:TPCE
DailyMarketRowFmt	benchmarks/egen/Table_Defs.h	/^const char DailyMarketRowFmt[] = "%s|%s|%.2f|%.2f|%.2f|%" PRId64 "\\n";$/;"	m	namespace:TPCE
Data structures	masstree/doc/spec.tex	/^\\end{enumerate}$/;"	s
DataMaintenance	benchmarks/tpce.cc	/^		static txn_result DataMaintenance(bench_worker *w)$/;"	f	class:tpce_worker
DataMaintenanceTableName	benchmarks/egen/DM.cpp	/^static const char*  DataMaintenanceTableName[iDataMaintenanceTableCount] =$/;"	v	file:
DayNo	benchmarks/egen/DateTime.h	/^    inline UINT32 DayNo(void) { return (UINT32)m_dayno; };$/;"	f	class:TPCE::CDateTime
DaysPerWeek	benchmarks/egen/DateTime.h	/^const INT32     DaysPerWeek             = 7;$/;"	m	namespace:TPCE
DaysPerWorkWeek	benchmarks/egen/DateTime.h	/^const INT32     DaysPerWorkWeek         = 5;$/;"	m	namespace:TPCE
DecKeySlotsUsed	btree.h	/^  DecKeySlotsUsed(VersionType &v)$/;"	f	class:btree_version_manip
Decode	record/encoder.h	/^Decode(const char *buf, T &obj)$/;"	f
Decode	record/encoder.h	/^Decode(const std::string &buf, T &obj)$/;"	f
Definitions	masstree/doc/spec.tex	/^\\begin{document}$/;"	s
Destroy	benchmarks/ndb_wrapper_impl.h	/^Destroy(T *t)$/;"	f
DiffInMilliSeconds	benchmarks/egen/DateTime.cpp	/^INT32 CDateTime::DiffInMilliSeconds( CDateTime* pBaseTime )$/;"	f	class:CDateTime
DiffInMilliSeconds	benchmarks/egen/DateTime.cpp	/^INT32 CDateTime::DiffInMilliSeconds( const CDateTime& BaseTime )$/;"	f	class:CDateTime
DisableTicker	benchmarks/egen/MEETickerTape.cpp	/^bool CMEETickerTape::DisableTicker( void )$/;"	f	class:CMEETickerTape
DisableTickerTape	benchmarks/egen/MEE.cpp	/^bool CMEE::DisableTickerTape( void )$/;"	f	class:CMEE
DoBrokerVolumeFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoBrokerVolumeFrame1(const TBrokerVolumeFrame1Input *pIn, TBrokerVolumeFrame1Output *pOut)$/;"	f	class:tpce_worker
DoCleanupTxn	benchmarks/egen/DM.cpp	/^void CDM::DoCleanupTxn( void )$/;"	f	class:CDM
DoCustomerPositionFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoCustomerPositionFrame1(const TCustomerPositionFrame1Input *pIn, TCustomerPositionFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoCustomerPositionFrame2	benchmarks/tpce.cc	/^void tpce_worker::DoCustomerPositionFrame2(const TCustomerPositionFrame2Input *pIn, TCustomerPositionFrame2Output *pOut){}$/;"	f	class:tpce_worker
DoCustomerPositionFrame3	benchmarks/tpce.cc	/^void tpce_worker::DoCustomerPositionFrame3(void){}$/;"	f	class:tpce_worker
DoDataMaintenanceFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoDataMaintenanceFrame1(const TDataMaintenanceFrame1Input *pIn){}$/;"	f	class:tpce_worker
DoMarketFeedFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoMarketFeedFrame1(const TMarketFeedFrame1Input *pIn, TMarketFeedFrame1Output *pOut, CSendToMarketInterface *pSendToMarket){}$/;"	f	class:tpce_worker
DoMarketWatchFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoMarketWatchFrame1 (const TMarketWatchFrame1Input *pIn, TMarketWatchFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoSecurityDetailFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoSecurityDetailFrame1(const TSecurityDetailFrame1Input *pIn, TSecurityDetailFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoTradeCleanupFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoTradeCleanupFrame1(const TTradeCleanupFrame1Input *pIn){}$/;"	f	class:tpce_worker
DoTradeLookupFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoTradeLookupFrame1(const TTradeLookupFrame1Input *pIn, TTradeLookupFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoTradeLookupFrame2	benchmarks/tpce.cc	/^void tpce_worker::DoTradeLookupFrame2(const TTradeLookupFrame2Input *pIn, TTradeLookupFrame2Output *pOut){}$/;"	f	class:tpce_worker
DoTradeLookupFrame3	benchmarks/tpce.cc	/^void tpce_worker::DoTradeLookupFrame3(const TTradeLookupFrame3Input *pIn, TTradeLookupFrame3Output *pOut){}$/;"	f	class:tpce_worker
DoTradeLookupFrame4	benchmarks/tpce.cc	/^void tpce_worker::DoTradeLookupFrame4(const TTradeLookupFrame4Input *pIn, TTradeLookupFrame4Output *pOut){}$/;"	f	class:tpce_worker
DoTradeOrderFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoTradeOrderFrame1(const TTradeOrderFrame1Input *pIn, TTradeOrderFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoTradeOrderFrame2	benchmarks/tpce.cc	/^void tpce_worker::DoTradeOrderFrame2(const TTradeOrderFrame2Input *pIn, TTradeOrderFrame2Output *pOut){}$/;"	f	class:tpce_worker
DoTradeOrderFrame3	benchmarks/tpce.cc	/^void tpce_worker::DoTradeOrderFrame3(const TTradeOrderFrame3Input *pIn, TTradeOrderFrame3Output *pOut){}$/;"	f	class:tpce_worker
DoTradeOrderFrame4	benchmarks/tpce.cc	/^void tpce_worker::DoTradeOrderFrame4(const TTradeOrderFrame4Input *pIn, TTradeOrderFrame4Output *pOut){}$/;"	f	class:tpce_worker
DoTradeOrderFrame5	benchmarks/tpce.cc	/^void tpce_worker::DoTradeOrderFrame5(void                                                            ){}$/;"	f	class:tpce_worker
DoTradeOrderFrame6	benchmarks/tpce.cc	/^void tpce_worker::DoTradeOrderFrame6(void                                                            ){}$/;"	f	class:tpce_worker
DoTradeResultFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoTradeResultFrame1(const TTradeResultFrame1Input *pIn, TTradeResultFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoTradeResultFrame2	benchmarks/tpce.cc	/^void tpce_worker::DoTradeResultFrame2(const TTradeResultFrame2Input *pIn, TTradeResultFrame2Output *pOut){}$/;"	f	class:tpce_worker
DoTradeResultFrame3	benchmarks/tpce.cc	/^void tpce_worker::DoTradeResultFrame3(const TTradeResultFrame3Input *pIn, TTradeResultFrame3Output *pOut){}$/;"	f	class:tpce_worker
DoTradeResultFrame4	benchmarks/tpce.cc	/^void tpce_worker::DoTradeResultFrame4(const TTradeResultFrame4Input *pIn, TTradeResultFrame4Output *pOut){}$/;"	f	class:tpce_worker
DoTradeResultFrame5	benchmarks/tpce.cc	/^void tpce_worker::DoTradeResultFrame5(const TTradeResultFrame5Input *pIn                                ){}$/;"	f	class:tpce_worker
DoTradeResultFrame6	benchmarks/tpce.cc	/^void tpce_worker::DoTradeResultFrame6(const TTradeResultFrame6Input *pIn, TTradeResultFrame6Output *pOut){}$/;"	f	class:tpce_worker
DoTradeStatusFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoTradeStatusFrame1(const TTradeStatusFrame1Input *pIn, TTradeStatusFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoTradeUpdateFrame1	benchmarks/tpce.cc	/^void tpce_worker::DoTradeUpdateFrame1(const TTradeUpdateFrame1Input *pIn, TTradeUpdateFrame1Output *pOut){}$/;"	f	class:tpce_worker
DoTradeUpdateFrame2	benchmarks/tpce.cc	/^void tpce_worker::DoTradeUpdateFrame2(const TTradeUpdateFrame2Input *pIn, TTradeUpdateFrame2Output *pOut){}$/;"	f	class:tpce_worker
DoTradeUpdateFrame3	benchmarks/tpce.cc	/^void tpce_worker::DoTradeUpdateFrame3(const TTradeUpdateFrame3Input *pIn, TTradeUpdateFrame3Output *pOut){}$/;"	f	class:tpce_worker
DoTxn	benchmarks/egen/CE.cpp	/^void CCE::DoTxn( void )$/;"	f	class:CCE
DoTxn	benchmarks/egen/DM.cpp	/^void CDM::DoTxn( void )$/;"	f	class:CDM
DoTxn	benchmarks/egen/TxnHarnessBrokerVolume.h	/^    void DoTxn( PBrokerVolumeTxnInput pTxnInput, PBrokerVolumeTxnOutput pTxnOutput )$/;"	f	class:TPCE::CBrokerVolume
DoTxn	benchmarks/egen/TxnHarnessCustomerPosition.h	/^    void DoTxn( PCustomerPositionTxnInput pTxnInput, PCustomerPositionTxnOutput pTxnOutput)$/;"	f	class:TPCE::CCustomerPosition
DoTxn	benchmarks/egen/TxnHarnessDataMaintenance.h	/^    void DoTxn( PDataMaintenanceTxnInput pTxnInput, PDataMaintenanceTxnOutput pTxnOutput )$/;"	f	class:TPCE::CDataMaintenance
DoTxn	benchmarks/egen/TxnHarnessMarketFeed.h	/^    void DoTxn( PMarketFeedTxnInput pTxnInput, PMarketFeedTxnOutput pTxnOutput )$/;"	f	class:TPCE::CMarketFeed
DoTxn	benchmarks/egen/TxnHarnessMarketWatch.h	/^    void DoTxn(PMarketWatchTxnInput pTxnInput, PMarketWatchTxnOutput pTxnOutput)$/;"	f	class:TPCE::CMarketWatch
DoTxn	benchmarks/egen/TxnHarnessSecurityDetail.h	/^    void DoTxn( PSecurityDetailTxnInput pTxnInput, PSecurityDetailTxnOutput pTxnOutput )$/;"	f	class:TPCE::CSecurityDetail
DoTxn	benchmarks/egen/TxnHarnessTradeCleanup.h	/^    void DoTxn( PTradeCleanupTxnInput pTxnInput, PTradeCleanupTxnOutput pTxnOutput)$/;"	f	class:TPCE::CTradeCleanup
DoTxn	benchmarks/egen/TxnHarnessTradeLookup.h	/^    void DoTxn( PTradeLookupTxnInput pTxnInput, PTradeLookupTxnOutput pTxnOutput )$/;"	f	class:TPCE::CTradeLookup
DoTxn	benchmarks/egen/TxnHarnessTradeOrder.h	/^    void DoTxn( PTradeOrderTxnInput pTxnInput, PTradeOrderTxnOutput pTxnOutput )$/;"	f	class:TPCE::CTradeOrder
DoTxn	benchmarks/egen/TxnHarnessTradeResult.h	/^    void DoTxn( PTradeResultTxnInput pTxnInput, PTradeResultTxnOutput pTxnOutput )$/;"	f	class:TPCE::CTradeResult
DoTxn	benchmarks/egen/TxnHarnessTradeStatus.h	/^    void DoTxn( PTradeStatusTxnInput pTxnInput, PTradeStatusTxnOutput pTxnOutput)$/;"	f	class:TPCE::CTradeStatus
DoTxn	benchmarks/egen/TxnHarnessTradeUpdate.h	/^    void DoTxn( PTradeUpdateTxnInput pTxnInput, PTradeUpdateTxnOutput pTxnOutput )$/;"	f	class:TPCE::CTradeUpdate
DollarAmount	benchmarks/egen/Money.h	/^    double DollarAmount()$/;"	f	class:TPCE::CMoney
E	dbcore/size-encode.cpp	16;"	d	file:
E	dbcore/size-encode.cpp	19;"	d	file:
EFIRST	dbcore/size-encode.cpp	59;"	d	file:
EGEN_BASELOADER_STDAFX_H	benchmarks/egen/EGenBaseLoader_stdafx.h	38;"	d
EGEN_ERROR_H	benchmarks/egen/EGenError.h	42;"	d
EGEN_GENERATE_AND_LOAD_BASE_OUTPUT_H	benchmarks/egen/EGenGenerateAndLoadBaseOutput.h	43;"	d
EGEN_GENERATE_AND_LOAD_H	benchmarks/egen/EGenGenerateAndLoad.h	44;"	d
EGEN_GENERATE_AND_LOAD_STANDARD_OUTPUT_H	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	42;"	d
EGEN_GENERATE_AND_LOAD_STDAFX_H	benchmarks/egen/EGenGenerateAndLoad_stdafx.h	38;"	d
EGEN_LOADER_STDAFX_H	benchmarks/egen/EGenLoader_stdafx.h	38;"	d
EGEN_LOGGER_H	benchmarks/egen/EGenLogger.h	42;"	d
EGEN_LOG_FORMATTER_H	benchmarks/egen/EGenLogFormatterTab.h	43;"	d
EGEN_NULLLOADER_STDAFX_H	benchmarks/egen/EGenNullLoader_stdafx.h	43;"	d
EGEN_NULLLOADER_STDAFX_H	benchmarks/egen/NullLoad_stdafx.h	38;"	d
EGEN_OBJFILES	Makefile	/^EGEN_OBJFILES := $(patsubst %.cpp, $(O)\/%.o, $(EGEN_SRCFILES))$/;"	m
EGEN_SRCFILES	Makefile	/^EGEN_SRCFILES = \\$/;"	m
EGEN_STANDARD_TYPES_H	benchmarks/egen/EGenStandardTypes.h	44;"	d
EGEN_TABLES_COMMON_H	benchmarks/egen/EGenTables_common.h	38;"	d
EGEN_TABLES_STDAFX_H	benchmarks/egen/EGenTables_stdafx.h	38;"	d
EGEN_UTILITIES_STDAFX_H	benchmarks/egen/EGenUtilities_stdafx.h	38;"	d
EGEN_VERSION_H	benchmarks/egen/EGenVersion.h	43;"	d
ELAST	dbcore/size-encode.cpp	60;"	d	file:
ELOG	dbcore/epoch.cpp	49;"	d	file:
ELOG	dbcore/epoch.cpp	51;"	d	file:
EMAIL_DOMAINs	benchmarks/egen/CustomerTable.cpp	/^char        EMAIL_DOMAINs[iNumEMAIL_DOMAINs][15] = {"@msn.com","@hotmail.com","@rr.com","@netzero.com","@earthlink.com","@attbi.com"};$/;"	m	namespace:TPCE	file:
ENABLE_ASSERTIONS	masstree/config.h	14;"	d
ENABLE_INVARIANTS	masstree/config.h	17;"	d
ENABLE_PRECONDITIONS	masstree/config.h	20;"	d
ENCODE_SEQUENCE	third-party/lz4/lz4hc_encoder.h	341;"	d
ENCODE_SEQUENCE	third-party/lz4/lz4hc_encoder.h	56;"	d
ENCODE_SEQUENCE	third-party/lz4/lz4hc_encoder.h	58;"	d
ENCODE_SEQUENCE_NAME	third-party/lz4/lz4hc_encoder.h	/^forceinline static int ENCODE_SEQUENCE_NAME ($/;"	f
ENCODE_SEQUENCE_NAME	third-party/lz4/lz4hc_encoder.h	342;"	d
ENCODE_SEQUENCE_NAME	third-party/lz4/lz4hc_encoder.h	54;"	d
ENCSTRESS_REC_KEY_FIELDS	benchmarks/encstress.cc	24;"	d	file:
ENCSTRESS_REC_VALUE_FIELDS	benchmarks/encstress.cc	26;"	d	file:
ENSURE_BUILD_STRING	masstree/clp.c	2062;"	d	file:
ENTERING_PRECOMMIT	dbcore/sm-tx-log.cpp	/^log_allocation * const ENTERING_PRECOMMIT = (log_allocation*) 0x1;$/;"	v	file:
ENTRIES_PER_PAGE	dbcore/sm-oid-impl.h	/^        static size_t const ENTRIES_PER_PAGE = sizeof(fat_ptr) << SZCODE_ALIGN_BITS;$/;"	m	struct:sm_oid_mgr_impl::oid_array
ENUM_X	txn.h	100;"	d
ENUM_X	txn.h	98;"	d
ERROR_BAD_OPTION	benchmarks/egen/EGenLoader_stdafx.h	86;"	d
ERROR_H	benchmarks/egen/error.h	38;"	d
ERROR_INPUT_FILE	benchmarks/egen/EGenLoader_stdafx.h	87;"	d
ERROR_INVALID_OPTION_VALUE	benchmarks/egen/EGenLoader_stdafx.h	88;"	d
ERR_INS_MEMORY	benchmarks/egen/error.h	53;"	d
ERR_MSG_BUF_SIZE	benchmarks/egen/error.h	55;"	d
ERR_SUCCESS	benchmarks/egen/error.h	46;"	d
ERR_TYPE_CHECK	benchmarks/egen/error.h	51;"	d
ERR_TYPE_FIXED_ARRAY	benchmarks/egen/error.h	50;"	d
ERR_TYPE_FIXED_MAP	benchmarks/egen/error.h	49;"	d
ERR_TYPE_LOGIC	benchmarks/egen/error.h	45;"	d
ERR_TYPE_MEMORY	benchmarks/egen/error.h	48;"	d
ERR_TYPE_OS	benchmarks/egen/error.h	47;"	d
ERR_UNKNOWN	benchmarks/egen/error.h	54;"	d
EVENT_COUNTERS_S	Makefile	/^EVENT_COUNTERS_S=$(strip $(EVENT_COUNTERS))$/;"	m
EVENT_COUNTER_CASE_X	txn.h	136;"	d
EVENT_COUNTER_CASE_X	txn.h	138;"	d
EVENT_COUNTER_DEF_X	txn.h	127;"	d
EVENT_COUNTER_DEF_X	txn.h	130;"	d
EVENT_COUNTER_IMPL_X	txn.cc	48;"	d	file:
EVENT_COUNTER_IMPL_X	txn.cc	51;"	d	file:
EXCHANGE_KEY_FIELDS	benchmarks/tpce.h	250;"	d
EXCHANGE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct EXCHANGE_ROW$/;"	s	namespace:TPCE
EXCHANGE_TABLE_H	benchmarks/egen/ExchangeTable.h	41;"	d
EXCHANGE_VALUE_FIELDS	benchmarks/tpce.h	252;"	d
EXM_THROW	third-party/lz4/lz4c.c	156;"	d	file:
EXPECTED_ROLLBACK	benchmarks/egen/error.h	/^        EXPECTED_ROLLBACK = 1,	\/\/ returned from Trade-Order Frame 5 to indicate transaction rollback$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
EXPECT_ATLEAST	btree.cc	/^    EXPECT_ATLEAST,$/;"	e	enum:test_range_scan_helper::ExpectType	file:
EXPECT_EXACT	btree.cc	/^    EXPECT_EXACT,$/;"	e	enum:test_range_scan_helper::ExpectType	file:
EXT	third-party/lz4/Makefile	/^EXT =$/;"	m
EXT	third-party/lz4/Makefile	/^EXT =.exe$/;"	m
EXTENSION	third-party/lz4/lz4c.c	86;"	d	file:
EXTRA_SMALL_SIZE_MAP	macros.h	82;"	d
EX_AD_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  EX_AD_ID;$/;"	m	struct:TPCE::EXCHANGE_ROW
EX_CLOSE	benchmarks/egen/Table_Defs.h	/^    int                     EX_CLOSE;$/;"	m	struct:TPCE::EXCHANGE_ROW
EX_DESC	benchmarks/egen/Table_Defs.h	/^    char                    EX_DESC[ cEX_DESC_len+1 ];$/;"	m	struct:TPCE::EXCHANGE_ROW
EX_ID	benchmarks/egen/Table_Defs.h	/^    char                    EX_ID[ cEX_ID_len+1 ];$/;"	m	struct:TPCE::EXCHANGE_ROW
EX_NAME	benchmarks/egen/Table_Defs.h	/^    char                    EX_NAME[ cEX_NAME_len+1 ];$/;"	m	struct:TPCE::EXCHANGE_ROW
EX_NUM_SYMB	benchmarks/egen/Table_Defs.h	/^    int                     EX_NUM_SYMB;$/;"	m	struct:TPCE::EXCHANGE_ROW
EX_OPEN	benchmarks/egen/Table_Defs.h	/^    int                     EX_OPEN;$/;"	m	struct:TPCE::EXCHANGE_ROW
EgenTimeStampToTimeT	benchmarks/tpce.cc	/^int64_t EgenTimeStampToTimeT(TIMESTAMP_STRUCT &tss) \/\/Converts EGEN TIMESTAMP representation to time_t structure$/;"	f
EgenTimeToTimeT	benchmarks/tpce.cc	/^int64_t EgenTimeToTimeT(CDateTime &cdt)$/;"	f
EgenTupleContainer	benchmarks/egen/shore_tpce_egen.h	/^    EgenTupleContainer (int cap): size(0), capacity(cap){$/;"	f	class:TPCE::EgenTupleContainer
EgenTupleContainer	benchmarks/egen/shore_tpce_egen.h	/^class EgenTupleContainer $/;"	c	namespace:TPCE
ElementCount	benchmarks/egen/FixedMap.h	/^    UINT ElementCount( )$/;"	f	class:TPCE::CFixedMap
Empty	benchmarks/egen/TimerWheel.h	/^bool CTimerWheel< T,  T2, Period, Resolution >::Empty( void )$/;"	f	class:TPCE::CTimerWheel
EnableTicker	benchmarks/egen/MEETickerTape.cpp	/^bool CMEETickerTape::EnableTicker( void )$/;"	f	class:CMEETickerTape
EnableTickerTape	benchmarks/egen/MEE.cpp	/^bool CMEE::EnableTickerTape( void )$/;"	f	class:CMEE
Encode	record/encoder.h	/^Encode(const T &t)$/;"	f
Encode	record/encoder.h	/^Encode(std::string &buf, const T &t)$/;"	f
Encode	record/encoder.h	/^Encode(uint8_t *buf, const T &t)$/;"	f
Entries	benchmarks/egen/TxnHarnessStructs.h	/^    TTickerEntry        Entries[max_feed_len];$/;"	m	struct:TPCE::TMarketFeedFrame1Input
Entries	benchmarks/egen/TxnHarnessStructs.h	/^    TTickerEntry        Entries[max_feed_len];$/;"	m	struct:TPCE::TMarketFeedTxnInput
Entry	dbcore/test-sm-log.cpp	/^    typedef std::pair<fat_ptr, db_record*> Entry;$/;"	t	struct:db_file	file:
EpochId	persist_test.cc	/^  uint64_t EpochId(uint64_t v)$/;"	f	struct:tidhelpers
EpochMask	persist_test.cc	/^  static const uint64_t EpochMask = ((uint64_t)-1) << EpochShift;$/;"	m	struct:tidhelpers	file:
EpochShift	persist_test.cc	/^  static const uint64_t EpochShift = CoreBits + NBitsNumber;$/;"	m	struct:tidhelpers	file:
ErrorLoc	benchmarks/egen/error.h	/^    virtual const char *ErrorLoc() { return m_location.c_str(); }$/;"	f	class:TPCE::CBaseErr
ErrorNum	benchmarks/egen/error.h	/^    virtual int ErrorNum() { return m_idMsg; }$/;"	f	class:TPCE::CBaseErr
ErrorText	benchmarks/egen/FixedArray.h	/^    const char *ErrorText() const$/;"	f	class:TPCE::CFixedArrayErr
ErrorText	benchmarks/egen/FixedMap.h	/^    const char *ErrorText() const$/;"	f	class:TPCE::CFixedMapErr
ErrorText	benchmarks/egen/error.cpp	/^const char * CSystemErr::ErrorText() const$/;"	f	class:CSystemErr
ErrorText	benchmarks/egen/error.h	/^    const char *ErrorText() const {$/;"	f	class:TPCE::CCheckErr
ErrorText	benchmarks/egen/error.h	/^    const char *ErrorText() const {return ERR_INS_MEMORY;}$/;"	f	class:TPCE::CMemoryErr
ErrorType	benchmarks/egen/FixedArray.h	/^    int ErrorType() {return ERR_TYPE_FIXED_ARRAY;};$/;"	f	class:TPCE::CFixedArrayErr
ErrorType	benchmarks/egen/FixedMap.h	/^    int ErrorType() {return ERR_TYPE_FIXED_MAP;};$/;"	f	class:TPCE::CFixedMapErr
ErrorType	benchmarks/egen/error.h	/^    int     ErrorType() { return ERR_TYPE_OS;};$/;"	f	class:TPCE::CSystemErr
ErrorType	benchmarks/egen/error.h	/^    int ErrorType() {return ERR_TYPE_CHECK;}$/;"	f	class:TPCE::CCheckErr
ErrorType	benchmarks/egen/error.h	/^    int ErrorType() {return ERR_TYPE_MEMORY;}$/;"	f	class:TPCE::CMemoryErr
Exchange	benchmarks/egen/InputFlatFilesStructure.h	/^    TExchangeFile               *Exchange;$/;"	m	class:TPCE::CInputFiles
ExchangeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    ExchangeBuffer(int c): EgenTupleContainer<EXCHANGE_ROW>(c){}$/;"	f	class:TPCE::ExchangeBuffer
ExchangeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class ExchangeBuffer: public EgenTupleContainer<EXCHANGE_ROW>{$/;"	c	namespace:TPCE
ExchangeRowFmt	benchmarks/egen/Table_Defs.h	/^const char ExchangeRowFmt[] = "%s|%s|%d|%d|%d|%s|%" PRId64 "\\n";$/;"	m	namespace:TPCE
ExpectType	btree.cc	/^  enum ExpectType {$/;"	g	class:test_range_scan_helper	file:
ExpiryProcessing	benchmarks/egen/TimerWheel.h	/^INT32 CTimerWheel< T,  T2, Period, Resolution >::ExpiryProcessing( void )$/;"	f	class:TPCE::CTimerWheel
ExtractValues	btree_impl.h	/^btree<P>::ExtractValues(const node_opaque_t *n)$/;"	f	class:btree
ExtractValues	masstree_btree.h	/^mbtree<P>::ExtractValues(const node_opaque_t *n)$/;"	f	class:mbtree
ExtractVersionNumber	btree.h	/^  ExtractVersionNumber(const node_opaque_t *n)$/;"	f	class:btree
ExtractVersionNumber	masstree_btree.h	/^  ExtractVersionNumber(const node_opaque_t *n) {$/;"	f	class:mbtree
FID	dbcore/sm-common.h	/^typedef uint32_t FID;$/;"	t
FIELDS	util.h	480;"	d
FILES	benchmarks/results/make_graphs-5.py	/^FILES = ($/;"	v
FINAL_OUTPUT_FILENAME	benchmarks/results/make_graphs-6.py	/^    FINAL_OUTPUT_FILENAME='istc3-cameraready.pdf'$/;"	v
FINAL_TRANSFORM_H	benchmarks/egen/FinalTransform.h	46;"	d
FINANCIAL_GEN_ROW	benchmarks/egen/FinancialTable.h	/^typedef struct FINANCIAL_GEN_ROW$/;"	s	namespace:TPCE
FINANCIAL_KEY_FIELDS	benchmarks/tpce.h	261;"	d
FINANCIAL_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct FINANCIAL_ROW$/;"	s	namespace:TPCE
FINANCIAL_TABLE_H	benchmarks/egen/FinancialTable.h	41;"	d
FINANCIAL_VALUE_FIELDS	benchmarks/tpce.h	265;"	d
FIRST_FREE_FID	dbcore/sm-oid-impl.h	/^    static FID const FIRST_FREE_FID = 3;$/;"	m	struct:sm_oid_mgr_impl
FIRST_NAME	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    FIRST_NAME[cF_NAME_len+1];$/;"	m	struct:TPCE::TFirstNameInputRow
FIXED_ARRAY_H	benchmarks/egen/FixedArray.h	42;"	d
FIXED_MAP_H	benchmarks/egen/FixedMap.h	44;"	d
FI_ASSETS	benchmarks/egen/Table_Defs.h	/^    double                  FI_ASSETS;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_BASIC_EPS	benchmarks/egen/Table_Defs.h	/^    double                  FI_BASIC_EPS;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_CO_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  FI_CO_ID;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_DILUT_EPS	benchmarks/egen/Table_Defs.h	/^    double                  FI_DILUT_EPS;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_INVENTORY	benchmarks/egen/Table_Defs.h	/^    double                  FI_INVENTORY;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_LIABILITY	benchmarks/egen/Table_Defs.h	/^    double                  FI_LIABILITY;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_MARGIN	benchmarks/egen/Table_Defs.h	/^    double                  FI_MARGIN;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_NET_EARN	benchmarks/egen/Table_Defs.h	/^    double                  FI_NET_EARN;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_OUT_BASIC	benchmarks/egen/Table_Defs.h	/^    INT64                   FI_OUT_BASIC;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_OUT_DILUT	benchmarks/egen/Table_Defs.h	/^    INT64                   FI_OUT_DILUT;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_QTR	benchmarks/egen/Table_Defs.h	/^    int                     FI_QTR;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_QTR_START_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               FI_QTR_START_DATE;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_REVENUE	benchmarks/egen/Table_Defs.h	/^    double                  FI_REVENUE;$/;"	m	struct:TPCE::FINANCIAL_ROW
FI_YEAR	benchmarks/egen/Table_Defs.h	/^    int                     FI_YEAR;$/;"	m	struct:TPCE::FINANCIAL_ROW
FLAG_BITS	dbcore/sm-common.h	/^    static uint64_t const FLAG_BITS = VALUE_START_BIT - SIZE_BITS;$/;"	m	struct:fat_ptr
FLAG_MASK	dbcore/sm-common.h	/^    static uint64_t const FLAG_MASK = ((1 << FLAG_BITS) - 1) << FLAG_START_BIT;$/;"	m	struct:fat_ptr
FLAG_START_BIT	dbcore/sm-common.h	/^    static uint64_t const FLAG_START_BIT = SIZE_BITS;$/;"	m	struct:fat_ptr
FLAT_ACCOUNT_PERMISSION_LOAD_H	benchmarks/egen/FlatAccountPermissionLoad.h	42;"	d
FLAT_ADDRESS_LOAD_H	benchmarks/egen/FlatAddressLoad.h	42;"	d
FLAT_BROKER_LOAD_H	benchmarks/egen/FlatBrokerLoad.h	42;"	d
FLAT_CASH_TRANSACTION_LOAD_H	benchmarks/egen/FlatCashTransactionLoad.h	41;"	d
FLAT_CHARGE_LOAD_H	benchmarks/egen/FlatChargeLoad.h	41;"	d
FLAT_COMMISSION_RATE_LOAD_H	benchmarks/egen/FlatCommissionRateLoad.h	41;"	d
FLAT_COMPANY_COMPETITOR_LOAD_H	benchmarks/egen/FlatCompanyCompetitorLoad.h	41;"	d
FLAT_COMPANY_LOAD_H	benchmarks/egen/FlatCompanyLoad.h	41;"	d
FLAT_CUSTOMER_ACCOUNT_LOAD_H	benchmarks/egen/FlatCustomerAccountLoad.h	41;"	d
FLAT_CUSTOMER_LOAD_H	benchmarks/egen/FlatCustomerLoad.h	42;"	d
FLAT_CUSTOMER_TAXRATE_LOAD_H	benchmarks/egen/FlatCustomerTaxrateLoad.h	41;"	d
FLAT_DAILY_MARKET_LOAD_H	benchmarks/egen/FlatDailyMarketLoad.h	41;"	d
FLAT_EXCHANGE_LOAD_H	benchmarks/egen/FlatExchangeLoad.h	41;"	d
FLAT_FILE_H	benchmarks/egen/FlatFile.h	41;"	d
FLAT_FILE_LOAD	benchmarks/egen/EGenLoader.cpp	/^    FLAT_FILE_LOAD,$/;"	e	enum:eLoadImplementation	file:
FLAT_FILE_LOADER_H	benchmarks/egen/FlatFileLoader.h	41;"	d
FLAT_FILE_LOAD_COMMON_H	benchmarks/egen/FlatFileLoad_common.h	38;"	d
FLAT_FILE_LOAD_STDAFX_H	benchmarks/egen/FlatFileLoad_stdafx.h	38;"	d
FLAT_FILE_OUTPUT_APPEND	benchmarks/egen/FlatFileLoader.h	/^    FLAT_FILE_OUTPUT_APPEND = 0,$/;"	e	enum:TPCE::FlatFileOutputModes
FLAT_FILE_OUTPUT_OVERWRITE	benchmarks/egen/FlatFileLoader.h	/^    FLAT_FILE_OUTPUT_OVERWRITE$/;"	e	enum:TPCE::FlatFileOutputModes
FLAT_FINANCIAL_LOAD_H	benchmarks/egen/FlatFinancialLoad.h	41;"	d
FLAT_HOLDING_HISTORY_LOAD_H	benchmarks/egen/FlatHoldingHistoryLoad.h	41;"	d
FLAT_HOLDING_LOAD_H	benchmarks/egen/FlatHoldingLoad.h	41;"	d
FLAT_HOLDING_SUMMARY_LOAD_H	benchmarks/egen/FlatHoldingSummaryLoad.h	41;"	d
FLAT_INDUSTRY_LOAD_H	benchmarks/egen/FlatIndustryLoad.h	41;"	d
FLAT_IN_PATH	benchmarks/egen/EGenLoader.cpp	86;"	d	file:
FLAT_LAST_TRADE_LOAD_H	benchmarks/egen/FlatLastTradeLoad.h	41;"	d
FLAT_LOADER_FACTORY_H	benchmarks/egen/FlatLoaderFactory.h	42;"	d
FLAT_NEWS_ITEM_LOAD_H	benchmarks/egen/FlatNewsItemLoad.h	41;"	d
FLAT_NEWS_XREF_LOAD_H	benchmarks/egen/FlatNewsXRefLoad.h	41;"	d
FLAT_OUT_PATH	benchmarks/egen/EGenLoader.cpp	90;"	d	file:
FLAT_SECTOR_LOAD_H	benchmarks/egen/FlatSectorLoad.h	41;"	d
FLAT_SECURITY_LOAD_H	benchmarks/egen/FlatSecurityLoad.h	41;"	d
FLAT_SETTLEMENT_LOAD_H	benchmarks/egen/FlatSettlementLoad.h	41;"	d
FLAT_STATUS_TYPE_LOAD_H	benchmarks/egen/FlatStatusTypeLoad.h	41;"	d
FLAT_TAXRATE_LOAD_H	benchmarks/egen/FlatTaxrateLoad.h	41;"	d
FLAT_TRADE_HISTORY_H	benchmarks/egen/FlatTradeHistoryLoad.h	41;"	d
FLAT_TRADE_LOAD_H	benchmarks/egen/FlatTradeLoad.h	41;"	d
FLAT_TRADE_REQUEST_LOAD_H	benchmarks/egen/FlatTradeRequestLoad.h	41;"	d
FLAT_TRADE_TYPE_LOAD_H	benchmarks/egen/FlatTradeTypeLoad.h	41;"	d
FLAT_WATCH_ITEM_LOAD_H	benchmarks/egen/FlatWatchItemLoad.h	41;"	d
FLAT_WATCH_LIST_LOAD_H	benchmarks/egen/FlatWatchListLoad.h	41;"	d
FLAT_ZIP_CODE_LOAD_H	benchmarks/egen/FlatZipCodeLoad.h	41;"	d
FORCE_ENABLE_ASSERTIONS	masstree/test_atomics.cc	16;"	d	file:
FREEMEM	third-party/lz4/lz4hc.c	44;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	353;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	368;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	385;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	403;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	434;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	452;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	471;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4.c	491;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4_encoder.h	/^int FUNCTION_NAME($/;"	f
FUNCTION_NAME	third-party/lz4/lz4_encoder.h	241;"	d
FUNCTION_NAME	third-party/lz4/lz4hc.c	566;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4hc.c	581;"	d	file:
FUNCTION_NAME	third-party/lz4/lz4hc_encoder.h	/^int FUNCTION_NAME (const char* source, $/;"	f
FUNCTION_NAME	third-party/lz4/lz4hc_encoder.h	338;"	d
FUZ_CHECKTEST	third-party/lz4/fuzzer.c	135;"	d	file:
FUZ_GetMilliSpan	third-party/lz4/fuzzer.c	/^static int FUZ_GetMilliSpan( int nTimeStart )$/;"	f	file:
FUZ_GetMilliStart	third-party/lz4/fuzzer.c	/^static int FUZ_GetMilliStart()$/;"	f	file:
FUZ_SecurityTest	third-party/lz4/fuzzer.c	/^int FUZ_SecurityTest()$/;"	f
FUZ_avail	third-party/lz4/fuzzer.c	129;"	d	file:
FUZ_max	third-party/lz4/fuzzer.c	128;"	d	file:
FUZ_rand	third-party/lz4/fuzzer.c	/^unsigned int FUZ_rand(unsigned int* src)$/;"	f
FastNewOrderIdGen	benchmarks/tpcc.cc	/^FastNewOrderIdGen(unsigned warehouse, unsigned district)$/;"	f	file:
FemaleFirstNames	benchmarks/egen/InputFlatFilesStructure.h	/^    TFemaleFirstNamesFile       *FemaleFirstNames;$/;"	m	class:TPCE::CInputFiles
Fields	util.h	/^struct Fields {$/;"	s	namespace:util
FillAPRow	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void FillAPRow(TIdent CA_ID, TIdent C_ID, const char *szACL, ACCOUNT_PERMISSION_ROW &row)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
FinancialBuffer	benchmarks/egen/shore_tpce_egen.h	/^    FinancialBuffer(int c): EgenTupleContainer<FINANCIAL_ROW>(c){}$/;"	f	class:TPCE::FinancialBuffer
FinancialBuffer	benchmarks/egen/shore_tpce_egen.h	/^class FinancialBuffer: public EgenTupleContainer<FINANCIAL_ROW>{$/;"	c	namespace:TPCE
FinancialRowFmt	benchmarks/egen/Table_Defs.h	/^const char FinancialRowFmt[] = "%" PRId64 "|%d|%d|%s|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%" PRId64 "|%" PRId64 "\\n";$/;"	m	namespace:TPCE
FindNextHolding	benchmarks/egen/TradeGen.cpp	/^bool CTradeGen::FindNextHolding()$/;"	f	class:CTradeGen
FindNextHoldingList	benchmarks/egen/TradeGen.cpp	/^bool CTradeGen::FindNextHoldingList()$/;"	f	class:CTradeGen
FindRespLeafExact	btree_impl.h	/^btree<P>::FindRespLeafExact($/;"	f	class:btree
FindRespLeafLowerBound	btree_impl.h	/^btree<P>::FindRespLeafLowerBound($/;"	f	class:btree
FindRespLeafNode	btree_impl.h	/^btree<P>::FindRespLeafNode($/;"	f	class:btree
FinishLoad	benchmarks/egen/FlatFileLoader.h	/^void CFlatFileLoader<T>::FinishLoad()$/;"	f	class:TPCE::CFlatFileLoader
FinishLoad	benchmarks/egen/NullLoader.h	/^    virtual void FinishLoad() {};   \/\/do nothing$/;"	f	class:TPCE::CNullLoader
FlatFileBoolFalse	benchmarks/egen/FlatFileLoader.h	/^const char* const   FlatFileBoolFalse       = BOOLEAN_FALSE;$/;"	m	namespace:TPCE
FlatFileBoolTrue	benchmarks/egen/FlatFileLoader.h	/^const char* const   FlatFileBoolTrue        = BOOLEAN_TRUE;$/;"	m	namespace:TPCE
FlatFileBufferSize	benchmarks/egen/FlatFileLoader.h	/^const int           FlatFileBufferSize      = BUFFER_SIZE;$/;"	m	namespace:TPCE
FlatFileDateFormat	benchmarks/egen/FlatFileLoader.h	/^const int           FlatFileDateFormat      = DATE_FORMAT;$/;"	m	namespace:TPCE
FlatFileDateTimeFormat	benchmarks/egen/FlatFileLoader.h	/^const int           FlatFileDateTimeFormat  = DATETIME_FORMAT;$/;"	m	namespace:TPCE
FlatFileOutputMode	benchmarks/egen/EGenLoader.cpp	/^FlatFileOutputModes     FlatFileOutputMode;$/;"	v
FlatFileOutputModes	benchmarks/egen/FlatFileLoader.h	/^enum FlatFileOutputModes {$/;"	g	namespace:TPCE
FlatFileTimeFormat	benchmarks/egen/FlatFileLoader.h	/^const int           FlatFileTimeFormat      = TIME_FORMAT;$/;"	m	namespace:TPCE
Flat_CO_OPEN_DATE	benchmarks/egen/FlatCompanyLoad.h	/^    CDateTime   Flat_CO_OPEN_DATE;$/;"	m	class:TPCE::CFlatCompanyLoad
Flat_CT_DTS	benchmarks/egen/FlatCashTransactionLoad.h	/^    CDateTime   Flat_CT_DTS;$/;"	m	class:TPCE::CFlatCashTransactionLoad
Flat_C_DOB	benchmarks/egen/FlatCustomerLoad.h	/^    CDateTime   Flat_C_DOB;$/;"	m	class:TPCE::CFlatCustomerLoad
Flat_DM_DATE	benchmarks/egen/FlatDailyMarketLoad.h	/^    CDateTime   Flat_DM_DATE;$/;"	m	class:TPCE::CFlatDailyMarketLoad
Flat_FI_QTR_START_DATE	benchmarks/egen/FlatFinancialLoad.h	/^    CDateTime   Flat_FI_QTR_START_DATE;$/;"	m	class:TPCE::CFlatFinancialLoad
Flat_H_DTS	benchmarks/egen/FlatHoldingLoad.h	/^    CDateTime   Flat_H_DTS;$/;"	m	class:TPCE::CFlatHoldingLoad
Flat_LT_DTS	benchmarks/egen/FlatLastTradeLoad.h	/^    CDateTime   Flat_LT_DTS;$/;"	m	class:TPCE::CFlatLastTradeLoad
Flat_NI_DTS	benchmarks/egen/FlatNewsItemLoad.h	/^    CDateTime   Flat_NI_DTS;$/;"	m	class:TPCE::CFlatNewsItemLoad
Flat_SE_CASH_DUE_DATE	benchmarks/egen/FlatSettlementLoad.h	/^    CDateTime   Flat_SE_CASH_DUE_DATE;$/;"	m	class:TPCE::CFlatSettlementLoad
Flat_S_52WK_HIGH_DATE	benchmarks/egen/FlatSecurityLoad.h	/^    CDateTime   Flat_S_52WK_HIGH_DATE;$/;"	m	class:TPCE::CFlatSecurityLoad
Flat_S_52WK_LOW_DATE	benchmarks/egen/FlatSecurityLoad.h	/^    CDateTime   Flat_S_52WK_LOW_DATE;$/;"	m	class:TPCE::CFlatSecurityLoad
Flat_S_EXCH_DATE	benchmarks/egen/FlatSecurityLoad.h	/^    CDateTime   Flat_S_EXCH_DATE;$/;"	m	class:TPCE::CFlatSecurityLoad
Flat_S_START_DATE	benchmarks/egen/FlatSecurityLoad.h	/^    CDateTime   Flat_S_START_DATE;$/;"	m	class:TPCE::CFlatSecurityLoad
Flat_TH_DTS	benchmarks/egen/FlatTradeHistoryLoad.h	/^    CDateTime   Flat_TH_DTS;$/;"	m	class:TPCE::CFlatTradeHistoryLoad
Flat_T_DTS	benchmarks/egen/FlatTradeLoad.h	/^    CDateTime   Flat_T_DTS;$/;"	m	class:TPCE::CFlatTradeLoad
Found	masstree/kvproto.hh	/^    Found,$/;"	e	enum:result_t
GAMUT	dbcore/sm-oid-alloc-impl.h	/^    static size_t const GAMUT = size_t(1) + UINT16_MAX;$/;"	m	struct:sparse_bitset
GB	third-party/lz4/lz4c.c	91;"	d	file:
GB	third-party/lz4/lz4hc.c	210;"	d	file:
GCC_AT_LEAST_47	macros.h	105;"	d
GCC_AT_LEAST_47	macros.h	107;"	d
GCC_VERSION	third-party/lz4/lz4.c	116;"	d	file:
GCC_VERSION	third-party/lz4/lz4c.c	63;"	d	file:
GCC_VERSION	third-party/lz4/xxhash.c	153;"	d	file:
GETNEXT	third-party/lz4/lz4hc.c	268;"	d	file:
GET_COUNTER_VALUE	stats_common.h	/^enum class stats_command : uint8_t { GET_COUNTER_VALUE = 0x1 };$/;"	m	class:stats_command
GPERFTOOLS	Makefile	/^GPERFTOOLS :=$/;"	m
GSTORE_LOCAL_VECTOR_HH	masstree/local_vector.hh	2;"	d
GSTORE_MSGPACK_HH	masstree/msgpack.hh	2;"	d
GS_FONTPATH	masstree/doc/GNUmakefile	/^GS_FONTPATH := $(shell x=`kpsewhich cmr10.pfb`; echo $$GS_FONTPATH:`dirname $$x`)$/;"	m
GUARDED_FIELDS	util.h	484;"	d
GUARDED_FIELDS	util.h	487;"	d
GenProcessingDelay	benchmarks/egen/MEETradingFloor.cpp	/^inline double CMEETradingFloor::GenProcessingDelay( double Mean )$/;"	f	class:CMEETradingFloor
GenerateAD_LINE_1	benchmarks/egen/AddressTable.cpp	/^void CAddressTable::GenerateAD_LINE_1()$/;"	f	class:CAddressTable
GenerateAD_LINE_2	benchmarks/egen/AddressTable.cpp	/^void CAddressTable::GenerateAD_LINE_2()$/;"	f	class:CAddressTable
GenerateAD_ZC_CODE_CTRY	benchmarks/egen/AddressTable.cpp	/^void CAddressTable::GenerateAD_ZC_CODE_CTRY()$/;"	f	class:CAddressTable
GenerateAPRows	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void GenerateAPRows()$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateAndLoadAddress	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadAddress()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCharge	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCharge()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCommissionRate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCommissionRate()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCompany	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCompany()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCompanyCompetitor	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCompanyCompetitor()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCustomer	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCustomer()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCustomerAccountAndAccountPermission	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCustomerAccountAndAccountPermission()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadCustomerTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadCustomerTaxrate()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadDailyMarket	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadDailyMarket()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadExchange	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadExchange()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadFinancial	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadFinancial()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadFixedTables	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadFixedTables()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadGrowingTables	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadGrowingTables()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadHoldingAndTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadHoldingAndTrade()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadIndustry	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadIndustry()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadLastTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadLastTrade()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadNewsItemAndNewsXRef	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadNewsItemAndNewsXRef()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadScalingTables	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadScalingTables()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadSector	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadSector()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadSecurity	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadSecurity()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadStatusType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadStatusType()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadTaxrate()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadTradeType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadTradeType()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadWatchListAndWatchItem	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadWatchListAndWatchItem()$/;"	f	class:CGenerateAndLoad
GenerateAndLoadZipCode	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::GenerateAndLoadZipCode()$/;"	f	class:CGenerateAndLoad
GenerateBrokerIdForAccount	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent GenerateBrokerIdForAccount(TIdent iCA_ID)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateBrokerName	benchmarks/egen/Brokers.h	/^    void GenerateBrokerName(TIdent B_ID, char *B_NAME, size_t B_NAME_len)$/;"	f	class:TPCE::CBrokersTable
GenerateBrokerVolumeInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateBrokerVolumeInput(TBrokerVolumeTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GenerateCARow	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void GenerateCARow()$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateC_AD_ID	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_AD_ID()$/;"	f	class:CCustomerTable
GenerateC_AREA_1	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_AREA_1()$/;"	f	class:CCustomerTable
GenerateC_AREA_2	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_AREA_2()$/;"	f	class:CCustomerTable
GenerateC_AREA_3	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_AREA_3()$/;"	f	class:CCustomerTable
GenerateC_CTRY_1	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_CTRY_1()$/;"	f	class:CCustomerTable
GenerateC_CTRY_2	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_CTRY_2()$/;"	f	class:CCustomerTable
GenerateC_CTRY_3	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_CTRY_3()$/;"	f	class:CCustomerTable
GenerateC_DOB	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_DOB()$/;"	f	class:CCustomerTable
GenerateC_EMAIL_1_and_C_EMAIL_2	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_EMAIL_1_and_C_EMAIL_2()$/;"	f	class:CCustomerTable
GenerateC_EXT_1	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_EXT_1()$/;"	f	class:CCustomerTable
GenerateC_EXT_2	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_EXT_2()$/;"	f	class:CCustomerTable
GenerateC_EXT_3	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_EXT_3()$/;"	f	class:CCustomerTable
GenerateC_LOCAL_1	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_LOCAL_1()$/;"	f	class:CCustomerTable
GenerateC_LOCAL_2	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_LOCAL_2()$/;"	f	class:CCustomerTable
GenerateC_LOCAL_3	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_LOCAL_3()$/;"	f	class:CCustomerTable
GenerateC_ST_ID	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GenerateC_ST_ID()$/;"	f	class:CCustomerTable
GenerateCashTransactionRow	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateCashTransactionRow()$/;"	f	class:CTradeGen
GenerateCompanySPRate	benchmarks/egen/CompanyTable.h	/^    void GenerateCompanySPRate(void)$/;"	f	class:TPCE::CCompanyTable
GenerateCompleteTrade	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateCompleteTrade()$/;"	f	class:CTradeGen
GenerateCompletedTradeInfo	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateCompletedTradeInfo()$/;"	f	class:CTradeGen
GenerateCustomerPositionInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateCustomerPositionInput(TCustomerPositionTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GenerateDailyMarketRows	benchmarks/egen/DailyMarketTable.h	/^    void GenerateDailyMarketRows()$/;"	f	class:TPCE::CDailyMarketTable
GenerateDelayBetweenTrades	benchmarks/egen/TradeGen.cpp	/^inline double CTradeGen::GenerateDelayBetweenTrades()$/;"	f	class:CTradeGen
GenerateFinancialRows	benchmarks/egen/FinancialTable.h	/^    bool GenerateFinancialRows()$/;"	f	class:TPCE::CFinancialTable
GenerateHoldingHistoryRow	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateHoldingHistoryRow($/;"	f	class:CTradeGen
GenerateLastTradeRow	benchmarks/egen/LastTradeTable.h	/^    void GenerateLastTradeRow()$/;"	f	class:TPCE::CLastTradeTable
GenerateMarketWatchInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateMarketWatchInput(TMarketWatchTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GenerateNewTrade	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateNewTrade()$/;"	f	class:CTradeGen
GenerateNewsItemHeadlineAndSummary	benchmarks/egen/NewsItemAndXRefTable.h	/^    void GenerateNewsItemHeadlineAndSummary(NEWS_ITEM_ROW &news_item)$/;"	f	class:TPCE::CNewsItemAndXRefTable
GenerateNextAD_ID	benchmarks/egen/AddressTable.cpp	/^TIdent CAddressTable::GenerateNextAD_ID()$/;"	f	class:CAddressTable
GenerateNextBrokerRecord	benchmarks/egen/TradeGen.h	/^    bool                        GenerateNextBrokerRecord() { return m_BrokerTable.GenerateNextRecord(); }$/;"	f	class:TPCE::CTradeGen
GenerateNextCA_AD	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent GenerateNextCA_AD()$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateNextCO_ID	benchmarks/egen/CompanyTable.h	/^    bool GenerateNextCO_ID()$/;"	f	class:TPCE::CCompanyTable
GenerateNextC_ID	benchmarks/egen/CustomerTable.cpp	/^TIdent CCustomerTable::GenerateNextC_ID()$/;"	f	class:CCustomerTable
GenerateNextHolding	benchmarks/egen/TradeGen.cpp	/^bool CTradeGen::GenerateNextHolding()$/;"	f	class:CTradeGen
GenerateNextHoldingSummaryRow	benchmarks/egen/TradeGen.cpp	/^bool CTradeGen::GenerateNextHoldingSummaryRow()$/;"	f	class:CTradeGen
GenerateNextRecord	benchmarks/egen/AddressTable.cpp	/^bool CAddressTable::GenerateNextRecord()$/;"	f	class:CAddressTable
GenerateNextRecord	benchmarks/egen/Brokers.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CBrokersTable
GenerateNextRecord	benchmarks/egen/ChargeTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CChargeTable
GenerateNextRecord	benchmarks/egen/CommissionRateTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CCommissionRateTable
GenerateNextRecord	benchmarks/egen/CompanyCompetitorTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CCompanyCompetitorTable
GenerateNextRecord	benchmarks/egen/CompanyTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CCompanyTable
GenerateNextRecord	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateNextRecord	benchmarks/egen/CustomerTable.cpp	/^bool CCustomerTable::GenerateNextRecord()$/;"	f	class:CCustomerTable
GenerateNextRecord	benchmarks/egen/CustomerTaxratesTable.h	/^        bool GenerateNextRecord()$/;"	f	class:TPCE::CCustomerTaxratesTable
GenerateNextRecord	benchmarks/egen/DailyMarketTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CDailyMarketTable
GenerateNextRecord	benchmarks/egen/ExchangeTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CExchangeTable
GenerateNextRecord	benchmarks/egen/FinancialTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CFinancialTable
GenerateNextRecord	benchmarks/egen/IndustryTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CIndustryTable
GenerateNextRecord	benchmarks/egen/LastTradeTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CLastTradeTable
GenerateNextRecord	benchmarks/egen/NewsItemAndXRefTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CNewsItemAndXRefTable
GenerateNextRecord	benchmarks/egen/SectorTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CSectorTable
GenerateNextRecord	benchmarks/egen/SecurityTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CSecurityTable
GenerateNextRecord	benchmarks/egen/StatusTypeTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CStatusTypeTable
GenerateNextRecord	benchmarks/egen/TaxrateTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CTaxrateTable
GenerateNextRecord	benchmarks/egen/TradeTypeTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CTradeTypeTable
GenerateNextRecord	benchmarks/egen/WatchListsAndItemsTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CWatchListsAndItemsTable
GenerateNextRecord	benchmarks/egen/ZipCodeTable.h	/^    bool GenerateNextRecord()$/;"	f	class:TPCE::CZipCodeTable
GenerateNextTrade	benchmarks/egen/TradeGen.cpp	/^bool CTradeGen::GenerateNextTrade()$/;"	f	class:CTradeGen
GenerateNextTradeId	benchmarks/egen/TradeGen.cpp	/^TTrade CTradeGen::GenerateNextTradeId()$/;"	f	class:CTradeGen
GenerateNextTxnType	benchmarks/egen/CETxnMixGenerator.cpp	/^int CCETxnMixGenerator::GenerateNextTxnType()$/;"	f	class:CCETxnMixGenerator
GenerateNextWL_ID	benchmarks/egen/WatchListsAndItemsTable.h	/^    void GenerateNextWL_ID()$/;"	f	class:TPCE::CWatchListsAndItemsTable
GenerateNonUniformRandomCustomerId	benchmarks/egen/CETxnInputGenerator.cpp	/^inline void CCETxnInputGenerator::GenerateNonUniformRandomCustomerId(TIdent &iCustomerId, eCustomerTier &iCustomerTier)$/;"	f	class:CCETxnInputGenerator
GenerateNonUniformTradeDTS	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateNonUniformTradeDTS( TPCE::TIMESTAMP_STRUCT &dts, INT64 MaxTimeInMilliSeconds, INT32 AValue, INT32 SValue )$/;"	f	class:CCETxnInputGenerator
GenerateNonUniformTradeID	benchmarks/egen/CETxnInputGenerator.cpp	/^TTrade CCETxnInputGenerator::GenerateNonUniformTradeID( INT32 AValue, INT32 SValue )$/;"	f	class:CCETxnInputGenerator
GeneratePersonInfo	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GeneratePersonInfo()$/;"	f	class:CCustomerTable
GenerateRandomAccountId	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent GenerateRandomAccountId( CRandom& RND, TIdent iCustomerId,$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateRandomAccountId	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void GenerateRandomAccountId(CRandom&       RND,                \/\/ in - external RNG$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GenerateRandomAccountSecurity	benchmarks/egen/HoldingsAndTradesTable.h	/^    void GenerateRandomAccountSecurity($/;"	f	class:TPCE::CHoldingsAndTradesTable
GenerateRandomBrokerId	benchmarks/egen/Brokers.h	/^    TIdent GenerateRandomBrokerId(CRandom*  pRnd)$/;"	f	class:TPCE::CBrokersTable
GenerateRandomCompanyId	benchmarks/egen/DM.cpp	/^TIdent CDM::GenerateRandomCompanyId()$/;"	f	class:CDM
GenerateRandomCustomer	benchmarks/egen/CustomerSelection.cpp	/^void CCustomerSelection::GenerateRandomCustomer(TIdent &C_ID, eCustomerTier &C_TIER)$/;"	f	class:CCustomerSelection
GenerateRandomCustomerAccountId	benchmarks/egen/CETxnInputGenerator.cpp	/^TIdent CCETxnInputGenerator::GenerateRandomCustomerAccountId()$/;"	f	class:CCETxnInputGenerator
GenerateRandomCustomerAccountId	benchmarks/egen/DM.cpp	/^TIdent CDM::GenerateRandomCustomerAccountId()$/;"	f	class:CDM
GenerateRandomCustomerId	benchmarks/egen/DM.cpp	/^TIdent CDM::GenerateRandomCustomerId()$/;"	f	class:CDM
GenerateRandomSecurityId	benchmarks/egen/DM.cpp	/^TIdent CDM::GenerateRandomSecurityId()$/;"	f	class:CDM
GenerateSecurityDetailInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateSecurityDetailInput(TSecurityDetailTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GenerateSecurityRow	benchmarks/egen/SecurityTable.h	/^    void GenerateSecurityRow()$/;"	f	class:TPCE::CSecurityTable
GenerateSettlementAmount	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateSettlementAmount()$/;"	f	class:CTradeGen
GenerateSettlementRow	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateSettlementRow()$/;"	f	class:CTradeGen
GenerateTradeCharge	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateTradeCharge()$/;"	f	class:CTradeGen
GenerateTradeCommission	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateTradeCommission()$/;"	f	class:CTradeGen
GenerateTradeHistoryRow	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateTradeHistoryRow()$/;"	f	class:CTradeGen
GenerateTradeLookupInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateTradeLookupInput(TTradeLookupTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GenerateTradeOrderInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateTradeOrderInput(TTradeOrderTxnInput &TxnReq, INT32 &iTradeType, bool &bExecutorIsAccountOwner)$/;"	f	class:CCETxnInputGenerator
GenerateTradeResult	benchmarks/egen/MEE.cpp	/^INT32 CMEE::GenerateTradeResult( void )$/;"	f	class:CMEE
GenerateTradeResult	benchmarks/egen/MEETradingFloor.cpp	/^INT32 CMEETradingFloor::GenerateTradeResult( void )$/;"	f	class:CMEETradingFloor
GenerateTradeRow	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateTradeRow()$/;"	f	class:CTradeGen
GenerateTradeStatusInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateTradeStatusInput(TTradeStatusTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GenerateTradeTax	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::GenerateTradeTax()$/;"	f	class:CTradeGen
GenerateTradeType	benchmarks/egen/TradeGen.cpp	/^eTradeTypeID CTradeGen::GenerateTradeType()$/;"	f	class:CTradeGen
GenerateTradeUpdateInput	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::GenerateTradeUpdateInput(TTradeUpdateTxnInput &TxnReq)$/;"	f	class:CCETxnInputGenerator
GetAD_IDForCustomer	benchmarks/egen/AddressTable.cpp	/^TIdent CAddressTable::GetAD_IDForCustomer(TIdent C_ID)$/;"	f	class:CAddressTable
GetAPRow	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    PACCOUNT_PERMISSION_ROW GetAPRow(UINT i)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetAccountTaxStatus	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eTaxStatus GetAccountTaxStatus(TIdent iCA_ID)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetActiveCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent GetActiveCompanyCompetitorCount()$/;"	f	class:TPCE::CCompanyCompetitorFile
GetActiveCompanyCount	benchmarks/egen/CompanyFile.h	/^    TIdent GetActiveCompanyCount()$/;"	f	class:TPCE::CCompanyFile
GetActiveSecurityCount	benchmarks/egen/SecurityFile.h	/^    TIdent GetActiveSecurityCount()$/;"	f	class:TPCE::CSecurityFile
GetBrokerCount	benchmarks/egen/Brokers.h	/^    TIdent GetBrokerCount()$/;"	f	class:TPCE::CBrokersTable
GetBrokerRow	benchmarks/egen/TradeGen.h	/^    BROKER_ROW const *          GetBrokerRow() { return m_BrokerTable.GetRow(); }$/;"	f	class:TPCE::CTradeGen
GetCAPermsCount	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT GetCAPermsCount() {return m_iPermsForCA;}$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetCARow	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    PCUSTOMER_ACCOUNT_ROW   GetCARow() {return &m_row.m_ca;}$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetCIDsForPermissions	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void GetCIDsForPermissions(TIdent CA_ID, TIdent Owner_CID, TIdent *CID_1, TIdent *CID_2)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetC_TAX_ID	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::GetC_TAX_ID(TIdent C_ID, char *szOutput)$/;"	f	class:CCustomerTable
GetC_TIER	benchmarks/egen/CustomerTable.cpp	/^eCustomerTier CCustomerTable::GetC_TIER(TIdent C_ID)$/;"	f	class:CCustomerTable
GetCashTransactionRow	benchmarks/egen/TradeGen.h	/^    PCASH_TRANSACTION_ROW       GetCashTransactionRow() { return &m_TradeRow.m_CashTransaction; }$/;"	f	class:TPCE::CTradeGen
GetCashTransactionRowCount	benchmarks/egen/TradeGen.h	/^    int                         GetCashTransactionRowCount() { return m_iCashTransactionRowCount; }$/;"	f	class:TPCE::CTradeGen
GetCompanyCompetitorId	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent GetCompanyCompetitorId(TIdent iIndex)$/;"	f	class:TPCE::CCompanyCompetitorFile
GetCompanyId	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent GetCompanyId(TIdent iIndex)$/;"	f	class:TPCE::CCompanyCompetitorFile
GetCompanyId	benchmarks/egen/CompanyFile.h	/^    TIdent GetCompanyId(TIdent iIndex)$/;"	f	class:TPCE::CCompanyFile
GetCompanyId	benchmarks/egen/SecurityFile.h	/^    TIdent GetCompanyId(TIdent iIndex)$/;"	f	class:TPCE::CSecurityFile
GetCompanyIndex	benchmarks/egen/SecurityFile.h	/^    TIdent GetCompanyIndex( TIdent Index )$/;"	f	class:TPCE::CSecurityFile
GetCompanySPRateThreshold	benchmarks/egen/CompanyTable.h	/^    int GetCompanySPRateThreshold()$/;"	f	class:TPCE::CCompanyTable
GetCompletionTime	benchmarks/egen/MEEPriceBoard.cpp	/^double  CMEEPriceBoard::GetCompletionTime($/;"	f	class:CMEEPriceBoard
GetCompletionTime	benchmarks/egen/MEESecurity.cpp	/^double CMEESecurity::GetCompletionTime( TIdent      SecurityIndex,$/;"	f	class:CMEESecurity
GetConfiguredCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent GetConfiguredCompanyCompetitorCount()$/;"	f	class:TPCE::CCompanyCompetitorFile
GetConfiguredCompanyCount	benchmarks/egen/CompanyFile.h	/^    TIdent GetConfiguredCompanyCount()$/;"	f	class:TPCE::CCompanyFile
GetConfiguredSecurityCount	benchmarks/egen/SecurityFile.h	/^    TIdent GetConfiguredSecurityCount()$/;"	f	class:TPCE::CSecurityFile
GetCountryCode	benchmarks/egen/AddressTable.cpp	/^UINT CAddressTable::GetCountryCode( const char *szZipCode )$/;"	f	class:CAddressTable
GetCountryTaxRow	benchmarks/egen/CustomerTaxratesTable.h	/^        TTaxRateInputRow    GetCountryTaxRow(TIdent C_ID, UINT iCtryCode)$/;"	f	class:TPCE::CCustomerTaxratesTable
GetCurrentAccID	benchmarks/egen/TradeGen.h	/^    TIdent GetCurrentAccID() { return m_NewTrade.iCustomerAccount; }$/;"	f	class:TPCE::CTradeGen
GetCurrentBidPrice	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentBidPrice() { return m_NewTrade.fBidPrice; }$/;"	f	class:TPCE::CTradeGen
GetCurrentBrokerId	benchmarks/egen/TradeGen.h	/^    TIdent GetCurrentBrokerId() { return m_CompletedTradeInfo.iCurrentBrokerId; }$/;"	f	class:TPCE::CTradeGen
GetCurrentCO_ID	benchmarks/egen/CompanyTable.h	/^    TIdent GetCurrentCO_ID()$/;"	f	class:TPCE::CCompanyTable
GetCurrentC_ID	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent          GetCurrentC_ID() {return m_cust.GetCurrentC_ID();}$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetCurrentC_ID	benchmarks/egen/CustomerTable.cpp	/^TIdent CCustomerTable::GetCurrentC_ID() $/;"	f	class:CCustomerTable
GetCurrentC_TIER	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eCustomerTier   GetCurrentC_TIER() {return m_cust.GetC_TIER(m_cust.GetCurrentC_ID());}$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetCurrentCustID	benchmarks/egen/TradeGen.h	/^    TIdent GetCurrentCustID() { return m_NewTrade.iCustomer; }$/;"	f	class:TPCE::CTradeGen
GetCurrentCustTier	benchmarks/egen/TradeGen.h	/^    int GetCurrentCustTier() { return m_NewTrade.iCustomerTier; }$/;"	f	class:TPCE::CTradeGen
GetCurrentPrice	benchmarks/egen/MEEPriceBoard.cpp	/^CMoney  CMEEPriceBoard::GetCurrentPrice( TIdent SecurityIndex )$/;"	f	class:CMEEPriceBoard
GetCurrentPrice	benchmarks/egen/MEEPriceBoard.cpp	/^CMoney  CMEEPriceBoard::GetCurrentPrice( char* pSecuritySymbol )$/;"	f	class:CMEEPriceBoard
GetCurrentPrice	benchmarks/egen/MEESecurity.cpp	/^CMoney CMEESecurity::GetCurrentPrice( TIdent SecurityIndex )$/;"	f	class:CMEESecurity
GetCurrentSecurityAccountIndex	benchmarks/egen/TradeGen.h	/^    UINT GetCurrentSecurityAccountIndex() { return m_NewTrade.iSymbolIndexInAccount; }$/;"	f	class:TPCE::CTradeGen
GetCurrentSecurityIndex	benchmarks/egen/TradeGen.h	/^    TIdent GetCurrentSecurityIndex() { return m_NewTrade.iSymbolIndex; }$/;"	f	class:TPCE::CTradeGen
GetCurrentSettlementAmount	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentSettlementAmount() { return m_CompletedTradeInfo.SettlementAmount; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTaxStatus	benchmarks/egen/TradeGen.h	/^    eTaxStatus GetCurrentTaxStatus() { return m_CompletedTradeInfo.eAccountTaxStatus; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTimeMillis	benchmarks/tpcc.cc	/^  GetCurrentTimeMillis()$/;"	f	class:tpcc_worker_mixin
GetCurrentTimeMillis	benchmarks/tpce.cc	/^			GetCurrentTimeMillis()$/;"	f	class:tpce_worker_mixin
GetCurrentTradeBuyValue	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentTradeBuyValue() { return m_CompletedTradeInfo.fBuyValue; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeCharge	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentTradeCharge() { return m_CompletedTradeInfo.Charge; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeCommission	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentTradeCommission() { return m_CompletedTradeInfo.Commission; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeCompletionTime	benchmarks/egen/TradeGen.h	/^    CDateTime GetCurrentTradeCompletionTime() {$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeID	benchmarks/egen/TradeGen.h	/^    TTrade GetCurrentTradeID() { return m_NewTrade.iTradeId; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeIsCash	benchmarks/egen/TradeGen.h	/^    int GetCurrentTradeIsCash() { return m_TradeRow.m_Trade.T_IS_CASH; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeIsLifo	benchmarks/egen/TradeGen.h	/^    bool GetCurrentTradeIsLifo() { return m_NewTrade.bIsLifo; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradePendingTime	benchmarks/egen/TradeGen.h	/^    CDateTime GetCurrentTradePendingTime() {$/;"	f	class:TPCE::CTradeGen
GetCurrentTradePrice	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentTradePrice() { return m_NewTrade.fTradePrice; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeQty	benchmarks/egen/TradeGen.h	/^    int GetCurrentTradeQty() { return m_NewTrade.iTradeQty; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeSellValue	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentTradeSellValue() { return m_CompletedTradeInfo.fSellValue; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeStatus	benchmarks/egen/TradeGen.h	/^    eStatusTypeID GetCurrentTradeStatus() { return m_NewTrade.eTradeStatus; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeSubmissionTime	benchmarks/egen/TradeGen.h	/^    CDateTime GetCurrentTradeSubmissionTime() {$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeTax	benchmarks/egen/TradeGen.h	/^    CMoney GetCurrentTradeTax() { return m_CompletedTradeInfo.Tax; }$/;"	f	class:TPCE::CTradeGen
GetCurrentTradeType	benchmarks/egen/TradeGen.h	/^    eTradeTypeID GetCurrentTradeType() { return m_NewTrade.eTradeType; }$/;"	f	class:TPCE::CTradeGen
GetCustomerId	benchmarks/tpcc.cc	/^  GetCustomerId(fast_random &r)$/;"	f	class:tpcc_worker_mixin
GetCustomerLastName	benchmarks/tpcc.cc	/^  GetCustomerLastName(char *buf, fast_random &r, int num)$/;"	f	class:tpcc_worker_mixin
GetCustomerLastName	benchmarks/tpcc.cc	/^  GetCustomerLastName(fast_random &r, int num)$/;"	f	class:tpcc_worker_mixin
GetCustomerLastName	benchmarks/tpcc.cc	/^  GetCustomerLastName(uint8_t *buf, fast_random &r, int num)$/;"	f	class:tpcc_worker_mixin
GetDBDATETIME	benchmarks/egen/DateTime.cpp	/^void CDateTime::GetDBDATETIME(DBDATETIME* dt)$/;"	f	class:CDateTime
GetDivisionAndCountryCodes	benchmarks/egen/AddressTable.h	/^    void GetDivisionAndCountryCodes(UINT &iDivCode, UINT &iCtryCode)$/;"	f	class:TPCE::CAddressTable
GetDivisionAndCountryCodesForAddress	benchmarks/egen/AddressTable.cpp	/^void CAddressTable::GetDivisionAndCountryCodesForAddress(TIdent AD_ID, UINT &iDivCode, UINT &iCtryCode)$/;"	f	class:CAddressTable
GetDivisionAndCountryCodesForCurrentAccount	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void GetDivisionAndCountryCodesForCurrentAccount(UINT &iDivCode, UINT &iCtryCode)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetDivisionTaxRow	benchmarks/egen/CustomerTaxratesTable.h	/^        TTaxRateInputRow    GetDivisionTaxRow(TIdent C_ID, UINT iDivCode)$/;"	f	class:TPCE::CCustomerTaxratesTable
GetEGenVersion	benchmarks/egen/EGenVersion.cpp	/^void GetEGenVersion(INT32 &iMajorVersion, INT32 &iMinorVersion, INT32 &iRevisionNumber, INT32 &iBetaLevel)$/;"	f	namespace:TPCE
GetEGenVersionString	benchmarks/egen/EGenVersion.cpp	/^void GetEGenVersionString(char* szOutput, size_t iOutputBufferLen)$/;"	f	namespace:TPCE
GetEGenVersionString_C	benchmarks/egen/EGenVersion.cpp	/^void GetEGenVersionString_C(char* szOutput, size_t iOutputBufferLen)$/;"	f
GetEGenVersionUpdateTimestamp	benchmarks/egen/EGenVersion.cpp	/^void GetEGenVersionUpdateTimestamp(char* szOutput, size_t iOutputBufferLen)$/;"	f	namespace:TPCE
GetEGenVersionUpdateTimestamp_C	benchmarks/egen/EGenVersion.cpp	/^void GetEGenVersionUpdateTimestamp_C(char* szOutput, size_t iOutputBufferLen)$/;"	f
GetEGenVersion_C	benchmarks/egen/EGenVersion.cpp	/^void GetEGenVersion_C(INT32 &iMajorVersion, INT32 &iMinorVersion, INT32 &iRevisionNumber, INT32 &iBetaLevel)$/;"	f
GetElement	benchmarks/egen/FixedMap.h	/^    TData* GetElement(int iKey)$/;"	f	class:TPCE::CFixedMap
GetElementByPassKey	benchmarks/egen/FixedMap.h	/^    TData* GetElementByPassKey( UINT ElementID )$/;"	f	class:TPCE::CFixedMap
GetEndingCA_ID	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent GetEndingCA_ID(TIdent CID)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetExchangeIndex	benchmarks/egen/SecurityFile.h	/^    eExchangeID GetExchangeIndex( TIdent index )$/;"	f	class:TPCE::CSecurityFile
GetFirstLastAndTaxID	benchmarks/egen/Person.cpp	/^void CPerson::GetFirstLastAndTaxID(TIdent C_ID, char *szFirstName, char *szLastName, char *szTaxID)$/;"	f	class:CPerson
GetFirstName	benchmarks/egen/Person.cpp	/^char* CPerson::GetFirstName(TIdent CID)$/;"	f	class:CPerson
GetGender	benchmarks/egen/Person.cpp	/^char CPerson::GetGender(TIdent CID)$/;"	f	class:CPerson
GetGreatestKey	benchmarks/egen/InputFile.h	/^    int GetGreatestKey() { return m_list.GetHighestKey(); }$/;"	f	class:TPCE::CInputFile
GetHMS	benchmarks/egen/DateTime.cpp	/^void CDateTime::GetHMS(INT32* hour, INT32* minute, INT32* second, INT32* msec)$/;"	f	class:CDateTime
GetHighestKey	benchmarks/egen/FixedMap.h	/^    int GetHighestKey() {return m_iHighestKey;}$/;"	f	class:TPCE::CFixedMap
GetHoldingHistoryRow	benchmarks/egen/TradeGen.h	/^    PHOLDING_HISTORY_ROW        GetHoldingHistoryRow(int i) { return &m_TradeRow.m_HoldingHistory[i]; }$/;"	f	class:TPCE::CTradeGen
GetHoldingHistoryRowCount	benchmarks/egen/TradeGen.h	/^    int                         GetHoldingHistoryRowCount() { return m_iHoldingHistoryRowCount; }$/;"	f	class:TPCE::CTradeGen
GetHoldingListForCurrentTrade	benchmarks/egen/TradeGen.cpp	/^inline THoldingList*    CTradeGen::GetHoldingListForCurrentTrade()$/;"	f	class:CTradeGen
GetHoldingRow	benchmarks/egen/TradeGen.h	/^    HOLDING_ROW const          *GetHoldingRow() { return &m_HoldingRow; }$/;"	f	class:TPCE::CTradeGen
GetHoldingSummaryRow	benchmarks/egen/TradeGen.h	/^    HOLDING_SUMMARY_ROW const  *GetHoldingSummaryRow() { return &m_HoldingSummaryRow; }$/;"	f	class:TPCE::CTradeGen
GetHugepageSize	allocator.h	/^  GetHugepageSize()$/;"	f	class:allocator
GetHugepageSizeImpl	allocator.cc	/^allocator::GetHugepageSizeImpl()$/;"	f	class:allocator
GetId	benchmarks/egen/SecurityFile.h	/^    TIdent GetId( char* pSymbol )$/;"	f	class:TPCE::CSecurityFile
GetIndex	benchmarks/egen/SecurityFile.h	/^    TIdent GetIndex( char* pSymbol )$/;"	f	class:TPCE::CSecurityFile
GetIndustryId	benchmarks/egen/CompanyCompetitorFile.h	/^    char* GetIndustryId(TIdent iIndex)$/;"	f	class:TPCE::CCompanyCompetitorFile
GetInverseCID	benchmarks/egen/CustomerSelection.cpp	/^UINT CCustomerSelection::GetInverseCID(TIdent C_ID)$/;"	f	class:CCustomerSelection
GetItemId	benchmarks/tpcc.cc	/^  GetItemId(fast_random &r)$/;"	f	class:tpcc_worker_mixin
GetLastName	benchmarks/egen/Person.cpp	/^char* CPerson::GetLastName(TIdent CID)$/;"	f	class:CPerson
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CBrokerVolumeSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CCustomerPositionSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CDriverCEPartitionSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CDriverCESettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CDriverDMSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CDriverGlobalSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CDriverMEESettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CLoaderSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CMarketWatchSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CSecurityDetailSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CTradeLookupSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CTradeOrderSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CTradeUpdateSettings& parms)$/;"	f	class:CLogFormatTab
GetLogOutput	benchmarks/egen/EGenLogFormatterTab.cpp	/^string CLogFormatTab::GetLogOutput(CTxnMixGeneratorSettings& parms)$/;"	f	class:CLogFormatTab
GetMaxPrice	benchmarks/egen/MEEPriceBoard.cpp	/^CMoney  CMEEPriceBoard::GetMaxPrice()$/;"	f	class:CMEEPriceBoard
GetMaxPrice	benchmarks/egen/MEESecurity.cpp	/^CMoney CMEESecurity::GetMaxPrice( void )$/;"	f	class:CMEESecurity
GetMiddleName	benchmarks/egen/Person.cpp	/^char CPerson::GetMiddleName(TIdent CID)$/;"	f	class:CPerson
GetMinPrice	benchmarks/egen/MEEPriceBoard.cpp	/^CMoney  CMEEPriceBoard::GetMinPrice()$/;"	f	class:CMEEPriceBoard
GetMinPrice	benchmarks/egen/MEESecurity.cpp	/^CMoney CMEESecurity::GetMinPrice( void )$/;"	f	class:CMEESecurity
GetNewsItemRow	benchmarks/egen/NewsItemAndXRefTable.h	/^    PNEWS_ITEM_ROW GetNewsItemRow() { return &m_row.news_item; }$/;"	f	class:TPCE::CNewsItemAndXRefTable
GetNewsXRefRow	benchmarks/egen/NewsItemAndXRefTable.h	/^    PNEWS_XREF_ROW GetNewsXRefRow() { return &m_row.news_xref; }$/;"	f	class:TPCE::CNewsItemAndXRefTable
GetNonUniformCustomerLastNameLoad	benchmarks/tpcc.cc	/^  GetNonUniformCustomerLastNameLoad(fast_random &r)$/;"	f	class:tpcc_worker_mixin
GetNonUniformCustomerLastNameRun	benchmarks/tpcc.cc	/^  GetNonUniformCustomerLastNameRun(char *buf, fast_random &r)$/;"	f	class:tpcc_worker_mixin
GetNonUniformCustomerLastNameRun	benchmarks/tpcc.cc	/^  GetNonUniformCustomerLastNameRun(fast_random &r)$/;"	f	class:tpcc_worker_mixin
GetNonUniformCustomerLastNameRun	benchmarks/tpcc.cc	/^  GetNonUniformCustomerLastNameRun(uint8_t *buf, fast_random &r)$/;"	f	class:tpcc_worker_mixin
GetNumPermsForCA	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    int GetNumPermsForCA(TIdent CA_ID)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetNumberOfAccounts	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT GetNumberOfAccounts(TIdent CID, eCustomerTier iCustomerTier)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetNumberOfSecurities	benchmarks/egen/HoldingsAndTradesTable.h	/^    int GetNumberOfSecurities(TIdent iCA_ID, eCustomerTier iTier, int iAccountCount)$/;"	f	class:TPCE::CHoldingsAndTradesTable
GetRNGSeed	benchmarks/egen/CETxnInputGenerator.cpp	/^RNGSEED CCETxnInputGenerator::GetRNGSeed( void )$/;"	f	class:CCETxnInputGenerator
GetRNGSeed	benchmarks/egen/CETxnMixGenerator.cpp	/^RNGSEED CCETxnMixGenerator::GetRNGSeed( void )$/;"	f	class:CCETxnMixGenerator
GetRNGSeed	benchmarks/egen/DM.cpp	/^RNGSEED CDM::GetRNGSeed( void )$/;"	f	class:CDM
GetRNGSeed	benchmarks/egen/MEETickerTape.cpp	/^RNGSEED CMEETickerTape::GetRNGSeed( void )$/;"	f	class:CMEETickerTape
GetRNGSeed	benchmarks/egen/MEETradingFloor.cpp	/^RNGSEED CMEETradingFloor::GetRNGSeed( void )$/;"	f	class:CMEETradingFloor
GetRecord	benchmarks/egen/CompanyCompetitorFile.h	/^    TCompanyCompetitorInputRow* GetRecord(TIdent index) { return &m_list[(int)(index % m_list.size())]; };$/;"	f	class:TPCE::CCompanyCompetitorFile
GetRecord	benchmarks/egen/CompanyFile.h	/^    TCompanyInputRow*   GetRecord(TIdent index) { return &m_list[(int)(index % m_list.size())]; };$/;"	f	class:TPCE::CCompanyFile
GetRecord	benchmarks/egen/FlatFile.h	/^    T*  GetRecord(int index) { return &m_list[index]; };$/;"	f	class:TPCE::CFlatFile
GetRecord	benchmarks/egen/InputFile.h	/^    T*  GetRecord(int key) { return m_list.GetElement(key); }$/;"	f	class:TPCE::CInputFile
GetRecord	benchmarks/egen/InputFileNoWeight.h	/^    PVectorT    GetRecord(UINT index) { return m_list[index]; };$/;"	f	class:TPCE::CInputFileNoWeight
GetRecord	benchmarks/egen/SecurityFile.h	/^    TSecurityInputRow*  GetRecord(TIdent index) { return &m_list[(int)(index % m_list.size())]; };$/;"	f	class:TPCE::CSecurityFile
GetRecordByPassKey	benchmarks/egen/InputFile.h	/^    T* GetRecordByPassKey( UINT iElementID )$/;"	f	class:TPCE::CInputFile
GetRow	benchmarks/egen/DailyMarketTable.h	/^    PDAILY_MARKET_ROW GetRow()$/;"	f	class:TPCE::CDailyMarketTable
GetRow	benchmarks/egen/FinancialTable.h	/^    PFINANCIAL_ROW    GetRow()$/;"	f	class:TPCE::CFinancialTable
GetRow	benchmarks/egen/TableTemplate.h	/^    T const * GetRow() { return &m_row; }$/;"	f	class:TPCE::TableTemplate
GetRowByIndex	benchmarks/egen/CustomerTaxratesTable.h	/^        PCUSTOMER_TAXRATE_ROW   GetRowByIndex(UINT i) {$/;"	f	class:TPCE::CCustomerTaxratesTable
GetSecurityFlatFileIndex	benchmarks/egen/HoldingsAndTradesTable.h	/^    TIdent GetSecurityFlatFileIndex($/;"	f	class:TPCE::CHoldingsAndTradesTable
GetSeed	benchmarks/egen/Random.h	/^    inline RNGSEED GetSeed(void) { return m_seed; };$/;"	f	class:TPCE::CRandom
GetSettlementRow	benchmarks/egen/TradeGen.h	/^    PSETTLEMENT_ROW             GetSettlementRow() { return &m_TradeRow.m_Settlement; }$/;"	f	class:TPCE::CTradeGen
GetSettlementRowCount	benchmarks/egen/TradeGen.h	/^    int                         GetSettlementRowCount() { return m_iSettlementRowCount; }$/;"	f	class:TPCE::CTradeGen
GetSize	benchmarks/egen/CompanyFile.h	/^    TIdent GetSize()$/;"	f	class:TPCE::CCompanyFile
GetSize	benchmarks/egen/FlatFile.h	/^    UINT    GetSize()   {return (UINT)m_list.size();}$/;"	f	class:TPCE::CFlatFile
GetSize	benchmarks/egen/InputFileNoWeight.h	/^    UINT        GetSize() { return (UINT)m_list.size(); }$/;"	f	class:TPCE::CInputFileNoWeight
GetSize	benchmarks/egen/SecurityFile.h	/^    TIdent GetSize()$/;"	f	class:TPCE::CSecurityFile
GetStartingCA_ID	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent GetStartingCA_ID(TIdent CID)$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
GetStartingSecIDSeed	benchmarks/egen/HoldingsAndTradesTable.h	/^    RNGSEED GetStartingSecIDSeed(TIdent iCA_ID)$/;"	f	class:TPCE::CHoldingsAndTradesTable
GetSubmissionTime	benchmarks/egen/MEEPriceBoard.cpp	/^double  CMEEPriceBoard::GetSubmissionTime($/;"	f	class:CMEEPriceBoard
GetSubmissionTime	benchmarks/egen/MEESecurity.cpp	/^double CMEESecurity::GetSubmissionTime( TIdent          SecurityIndex,$/;"	f	class:CMEESecurity
GetSymbol	benchmarks/egen/MEEPriceBoard.cpp	/^void    CMEEPriceBoard::GetSymbol(  TIdent  SecurityIndex,$/;"	f	class:CMEEPriceBoard
GetTaxID	benchmarks/egen/Person.cpp	/^void CPerson::GetTaxID(TIdent CID, char *buf)$/;"	f	class:CPerson
GetTaxRatesCount	benchmarks/egen/CustomerTaxratesTable.h	/^        UINT GetTaxRatesCount() {return iTaxRatesPerCust;}   \/\/tax rates per customer$/;"	f	class:TPCE::CCustomerTaxratesTable
GetTaxRow	benchmarks/egen/CustomerTaxratesTable.h	/^    TTaxRateInputRow    GetTaxRow(TIdent C_ID, UINT iCode, bool bCtry)$/;"	f	class:TPCE::CCustomerTaxratesTable
GetTickerTapeRNGSeed	benchmarks/egen/MEE.cpp	/^RNGSEED CMEE::GetTickerTapeRNGSeed( void )$/;"	f	class:CMEE
GetTier	benchmarks/egen/CustomerSelection.cpp	/^eCustomerTier CCustomerSelection::GetTier(TIdent C_ID)$/;"	f	class:CCustomerSelection
GetTimeStamp	benchmarks/egen/DateTime.cpp	/^void CDateTime::GetTimeStamp(TPCE::TIMESTAMP_STRUCT* ts)$/;"	f	class:CDateTime
GetTownDivisionZipCodeThreshold	benchmarks/egen/AddressTable.cpp	/^int CAddressTable::GetTownDivisionZipCodeThreshold(TIdent ADID)$/;"	f	class:CAddressTable
GetTradeHistoryRow	benchmarks/egen/TradeGen.h	/^    PTRADE_HISTORY_ROW          GetTradeHistoryRow(int i) { return &m_TradeRow.m_TradeHistory[i]; }$/;"	f	class:TPCE::CTradeGen
GetTradeHistoryRowCount	benchmarks/egen/TradeGen.h	/^    int                         GetTradeHistoryRowCount() { return m_iTradeHistoryRowCount; }$/;"	f	class:TPCE::CTradeGen
GetTradeRow	benchmarks/egen/TradeGen.h	/^    PTRADE_ROW                  GetTradeRow() { return &m_TradeRow.m_Trade; }$/;"	f	class:TPCE::CTradeGen
GetTradingFloorRNGSeed	benchmarks/egen/MEE.cpp	/^RNGSEED CMEE::GetTradingFloorRNGSeed( void )$/;"	f	class:CMEE
GetTxnInputGeneratorRNGSeed	benchmarks/egen/CE.cpp	/^RNGSEED CCE::GetTxnInputGeneratorRNGSeed( void )$/;"	f	class:CCE
GetTxnMixGeneratorRNGSeed	benchmarks/egen/CE.cpp	/^RNGSEED CCE::GetTxnMixGeneratorRNGSeed( void )$/;"	f	class:CCE
GetWICount	benchmarks/egen/WatchListsAndItemsTable.h	/^    UINT GetWICount() {return m_iWICount;}$/;"	f	class:TPCE::CWatchListsAndItemsTable
GetWIRow	benchmarks/egen/WatchListsAndItemsTable.h	/^    PWATCH_ITEM_ROW GetWIRow(UINT i)$/;"	f	class:TPCE::CWatchListsAndItemsTable
GetWLRow	benchmarks/egen/WatchListsAndItemsTable.h	/^    PWATCH_LIST_ROW GetWLRow() {return &m_row.m_watch_list;}$/;"	f	class:TPCE::CWatchListsAndItemsTable
GetYMD	benchmarks/egen/DateTime.cpp	/^void CDateTime::GetYMD( INT32* year, INT32* month, INT32* day )$/;"	f	class:CDateTime
GetYMDHMS	benchmarks/egen/DateTime.cpp	/^void CDateTime::GetYMDHMS(INT32* year, INT32* month, INT32* day, INT32* hour, INT32* minute, INT32* second, INT32* msec)$/;"	f	class:CDateTime
HASHLOG	third-party/lz4/lz4_encoder.h	244;"	d
HASHLOG	third-party/lz4/lz4_encoder.h	56;"	d
HASHLOG	third-party/lz4/lz4_encoder.h	60;"	d
HASHTABLESIZE	third-party/lz4/lz4.c	209;"	d	file:
HASHTABLESIZE	third-party/lz4/lz4hc.c	192;"	d	file:
HASHTABLE_NBCELLS	third-party/lz4/lz4_encoder.h	245;"	d
HASHTABLE_NBCELLS	third-party/lz4/lz4_encoder.h	65;"	d
HASH_FUNCTION	third-party/lz4/lz4hc.c	264;"	d	file:
HASH_LOG	third-party/lz4/lz4hc.c	191;"	d	file:
HASH_MASK	third-party/lz4/lz4hc.c	193;"	d	file:
HASH_POINTER	third-party/lz4/lz4hc.c	266;"	d	file:
HASH_VALUE	third-party/lz4/lz4hc.c	265;"	d	file:
HAVE_CLOCK_GETTIME	masstree/config.h	23;"	d
HAVE_CXX_AUTO	masstree/config.h	26;"	d
HAVE_CXX_CONSTEXPR	masstree/config.h	29;"	d
HAVE_CXX_RVALUE_REFERENCES	masstree/config.h	32;"	d
HAVE_CXX_STATIC_ASSERT	masstree/config.h	35;"	d
HAVE_CXX_TEMPLATE_ALIAS	masstree/config.h	38;"	d
HAVE_DECL_CLOCK_GETTIME	masstree/config.h	42;"	d
HAVE_DECL_GETLINE	masstree/config.h	46;"	d
HAVE_INDIFFERENT_ALIGNMENT	masstree/compiler.hh	63;"	d
HAVE_INT64_T_IS_LONG	masstree/config.h	55;"	d
HAVE_INTTYPES_H	masstree/config.h	61;"	d
HAVE_LIBNUMA	masstree/config.h	67;"	d
HAVE_LONG_LONG	masstree/config.h	70;"	d
HAVE_MADV_HUGEPAGE	masstree/config.h	73;"	d
HAVE_MAP_HUGETLB	masstree/config.h	76;"	d
HAVE_MEMORY_H	masstree/config.h	82;"	d
HAVE_NUMA_H	masstree/config.h	85;"	d
HAVE_OFF_T_IS_LONG	masstree/config.h	88;"	d
HAVE_REVERSE_RANGE_SCANS	btree.cc	26;"	d	file:
HAVE_SIZE_T_IS_UNSIGNED_LONG	masstree/config.h	97;"	d
HAVE_STDINT_H	masstree/config.h	103;"	d
HAVE_STDLIB_H	masstree/config.h	106;"	d
HAVE_STD_HASH	masstree/config.h	109;"	d
HAVE_STD_IS_RVALUE_REFERENCE	masstree/config.h	112;"	d
HAVE_STRINGS_H	masstree/config.h	118;"	d
HAVE_STRING_H	masstree/config.h	121;"	d
HAVE_STRTOUL	masstree/clp.c	52;"	d	file:
HAVE_SUPERPAGE	masstree/config.h	124;"	d
HAVE_SYS_EPOLL_H	masstree/config.h	127;"	d
HAVE_SYS_STAT_H	masstree/config.h	130;"	d
HAVE_SYS_TYPES_H	masstree/config.h	133;"	d
HAVE_TCMALLOC	masstree/config.h	136;"	d
HAVE_TIME_H	masstree/config.h	139;"	d
HAVE_TYPE_TRAITS	masstree/config.h	142;"	d
HAVE_UNALIGNED_ACCESS	masstree/config.h	145;"	d
HAVE_UNISTD_H	masstree/config.h	148;"	d
HAVE___BUILTIN_CLZ	masstree/config.h	151;"	d
HAVE___BUILTIN_CLZL	masstree/config.h	154;"	d
HAVE___BUILTIN_CLZLL	masstree/config.h	157;"	d
HAVE___BUILTIN_CTZ	masstree/config.h	160;"	d
HAVE___BUILTIN_CTZL	masstree/config.h	163;"	d
HAVE___BUILTIN_CTZLL	masstree/config.h	166;"	d
HAVE___HAS_TRIVIAL_COPY	masstree/config.h	169;"	d
HAVE___SYNC_ADD_AND_FETCH	masstree/config.h	172;"	d
HAVE___SYNC_ADD_AND_FETCH_8	masstree/config.h	175;"	d
HAVE___SYNC_BOOL_COMPARE_AND_SWAP	masstree/config.h	178;"	d
HAVE___SYNC_BOOL_COMPARE_AND_SWAP_8	masstree/config.h	181;"	d
HAVE___SYNC_FETCH_AND_ADD	masstree/config.h	184;"	d
HAVE___SYNC_FETCH_AND_ADD_8	masstree/config.h	187;"	d
HAVE___SYNC_FETCH_AND_OR	masstree/config.h	190;"	d
HAVE___SYNC_FETCH_AND_OR_8	masstree/config.h	193;"	d
HAVE___SYNC_LOCK_RELEASE_SET	masstree/config.h	196;"	d
HAVE___SYNC_LOCK_TEST_AND_SET	masstree/config.h	199;"	d
HAVE___SYNC_LOCK_TEST_AND_SET_VAL	masstree/config.h	202;"	d
HAVE___SYNC_OR_AND_FETCH	masstree/config.h	205;"	d
HAVE___SYNC_OR_AND_FETCH_8	masstree/config.h	208;"	d
HAVE___SYNC_SYNCHRONIZE	masstree/config.h	211;"	d
HAVE___SYNC_VAL_COMPARE_AND_SWAP	masstree/config.h	214;"	d
HAVE___SYNC_VAL_COMPARE_AND_SWAP_8	masstree/config.h	217;"	d
HDR_DELETING_BITS	btree.h	/^  static const uint64_t HDR_DELETING_BITS = 1;$/;"	m	class:btree_version_manip
HDR_DELETING_MASK	btree.h	/^  static const uint64_t HDR_DELETING_MASK = LowMask(HDR_DELETING_BITS) << HDR_DELETING_SHIFT;$/;"	m	class:btree_version_manip
HDR_DELETING_SHIFT	btree.h	/^  static const uint64_t HDR_DELETING_SHIFT = HDR_MODIFYING_SHIFT + HDR_MODIFYING_BITS;$/;"	m	class:btree_version_manip
HDR_IS_ROOT_BITS	btree.h	/^  static const uint64_t HDR_IS_ROOT_BITS = 1;$/;"	m	class:btree_version_manip
HDR_IS_ROOT_MASK	btree.h	/^  static const uint64_t HDR_IS_ROOT_MASK = LowMask(HDR_IS_ROOT_BITS) << HDR_IS_ROOT_SHIFT;$/;"	m	class:btree_version_manip
HDR_IS_ROOT_SHIFT	btree.h	/^  static const uint64_t HDR_IS_ROOT_SHIFT = HDR_LOCKED_SHIFT + HDR_LOCKED_BITS;$/;"	m	class:btree_version_manip
HDR_KEY_SLOTS_BITS	btree.h	/^  static const uint64_t HDR_KEY_SLOTS_BITS = ceil_log2_const(NKeysPerNode);$/;"	m	class:btree_version_manip
HDR_KEY_SLOTS_MASK	btree.h	/^  static const uint64_t HDR_KEY_SLOTS_MASK = LowMask(HDR_KEY_SLOTS_BITS) << HDR_KEY_SLOTS_SHIFT;$/;"	m	class:btree_version_manip
HDR_KEY_SLOTS_SHIFT	btree.h	/^  static const uint64_t HDR_KEY_SLOTS_SHIFT = HDR_TYPE_BITS;$/;"	m	class:btree_version_manip
HDR_LOCKED_BITS	btree.h	/^  static const uint64_t HDR_LOCKED_BITS = 1;$/;"	m	class:btree_version_manip
HDR_LOCKED_MASK	btree.h	/^  static const uint64_t HDR_LOCKED_MASK = LowMask(HDR_LOCKED_BITS) << HDR_LOCKED_SHIFT;$/;"	m	class:btree_version_manip
HDR_LOCKED_SHIFT	btree.h	/^  static const uint64_t HDR_LOCKED_SHIFT = HDR_KEY_SLOTS_SHIFT + HDR_KEY_SLOTS_BITS;$/;"	m	class:btree_version_manip
HDR_MODIFYING_BITS	btree.h	/^  static const uint64_t HDR_MODIFYING_BITS = 1;$/;"	m	class:btree_version_manip
HDR_MODIFYING_MASK	btree.h	/^  static const uint64_t HDR_MODIFYING_MASK = LowMask(HDR_MODIFYING_BITS) << HDR_MODIFYING_SHIFT;$/;"	m	class:btree_version_manip
HDR_MODIFYING_SHIFT	btree.h	/^  static const uint64_t HDR_MODIFYING_SHIFT = HDR_IS_ROOT_SHIFT + HDR_IS_ROOT_BITS;$/;"	m	class:btree_version_manip
HDR_TYPE_BITS	btree.h	/^  static const uint64_t HDR_TYPE_BITS = 1;$/;"	m	class:btree_version_manip
HDR_TYPE_MASK	btree.h	/^  static const uint64_t HDR_TYPE_MASK = 0x1;$/;"	m	class:btree_version_manip
HDR_VERSION_MASK	btree.h	/^  static const uint64_t HDR_VERSION_MASK = ((uint64_t)-1) << HDR_VERSION_SHIFT;$/;"	m	class:btree_version_manip
HDR_VERSION_SHIFT	btree.h	/^  static const uint64_t HDR_VERSION_SHIFT = HDR_DELETING_SHIFT + HDR_DELETING_BITS;$/;"	m	class:btree_version_manip
HEAPMODE	third-party/lz4/lz4.c	53;"	d	file:
HH_AFTER_QTY	benchmarks/egen/Table_Defs.h	/^    int                     HH_AFTER_QTY;$/;"	m	struct:TPCE::HOLDING_HISTORY_ROW
HH_BEFORE_QTY	benchmarks/egen/Table_Defs.h	/^    int                     HH_BEFORE_QTY;$/;"	m	struct:TPCE::HOLDING_HISTORY_ROW
HH_H_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  HH_H_T_ID;$/;"	m	struct:TPCE::HOLDING_HISTORY_ROW
HH_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  HH_T_ID;$/;"	m	struct:TPCE::HOLDING_HISTORY_ROW
HINT_DEFAULT	benchmarks/abstract_db.h	/^    HINT_DEFAULT,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_KV_GET_PUT	benchmarks/abstract_db.h	/^    HINT_KV_GET_PUT, \/\/ KV workloads over a single key$/;"	e	enum:abstract_db::TxnProfileHint
HINT_KV_RMW	benchmarks/abstract_db.h	/^    HINT_KV_RMW, \/\/ get\/put over a single key$/;"	e	enum:abstract_db::TxnProfileHint
HINT_KV_SCAN	benchmarks/abstract_db.h	/^    HINT_KV_SCAN, \/\/ KV scan workloads (~100 keys)$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_CREDIT_CHECK	benchmarks/abstract_db.h	/^	HINT_TPCC_CREDIT_CHECK,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_DELIVERY	benchmarks/abstract_db.h	/^    HINT_TPCC_DELIVERY,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_NEW_ORDER	benchmarks/abstract_db.h	/^    HINT_TPCC_NEW_ORDER,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_ORDER_STATUS	benchmarks/abstract_db.h	/^    HINT_TPCC_ORDER_STATUS,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_ORDER_STATUS_READ_ONLY	benchmarks/abstract_db.h	/^    HINT_TPCC_ORDER_STATUS_READ_ONLY,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_PAYMENT	benchmarks/abstract_db.h	/^    HINT_TPCC_PAYMENT,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_STOCK_LEVEL	benchmarks/abstract_db.h	/^    HINT_TPCC_STOCK_LEVEL,$/;"	e	enum:abstract_db::TxnProfileHint
HINT_TPCC_STOCK_LEVEL_READ_ONLY	benchmarks/abstract_db.h	/^    HINT_TPCC_STOCK_LEVEL_READ_ONLY,$/;"	e	enum:abstract_db::TxnProfileHint
HISTORY_KEY_FIELDS	benchmarks/tpcc.h	57;"	d
HISTORY_VALUE_FIELDS	benchmarks/tpcc.h	64;"	d
HOLDINGS_AND_TRADES_TABLE_H	benchmarks/egen/HoldingsAndTradesTable.h	41;"	d
HOLDING_HISTORY_KEY_FIELDS	benchmarks/tpce.h	88;"	d
HOLDING_HISTORY_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct HOLDING_HISTORY_ROW$/;"	s	namespace:TPCE
HOLDING_HISTORY_VALUE_FIELDS	benchmarks/tpce.h	90;"	d
HOLDING_KEY_FIELDS	benchmarks/tpce.h	78;"	d
HOLDING_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct HOLDING_ROW$/;"	s	namespace:TPCE
HOLDING_SUMMARY_KEY_FIELDS	benchmarks/tpce.h	97;"	d
HOLDING_SUMMARY_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct HOLDING_SUMMARY_ROW$/;"	s	namespace:TPCE
HOLDING_SUMMARY_VALUE_FIELDS	benchmarks/tpce.h	100;"	d
HOLDING_VALUE_FIELDS	benchmarks/tpce.h	82;"	d
HOST_TO_BIG_TRANSFORM	record/encoder.h	83;"	d
HS_CA_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  HS_CA_ID;$/;"	m	struct:TPCE::HOLDING_SUMMARY_ROW
HS_QTY	benchmarks/egen/Table_Defs.h	/^    int                     HS_QTY;$/;"	m	struct:TPCE::HOLDING_SUMMARY_ROW
HS_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    HS_S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::HOLDING_SUMMARY_ROW
HTYPE	third-party/lz4/lz4.c	240;"	d	file:
HTYPE	third-party/lz4/lz4.c	249;"	d	file:
HTYPE	third-party/lz4/lz4hc.c	222;"	d	file:
HTYPE	third-party/lz4/lz4hc.c	232;"	d	file:
H_CA_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  H_CA_ID;$/;"	m	struct:TPCE::HOLDING_ROW
H_DTS	benchmarks/egen/Table_Defs.h	/^    CDateTime               H_DTS;$/;"	m	struct:TPCE::HOLDING_ROW
H_PRICE	benchmarks/egen/Table_Defs.h	/^    double                  H_PRICE;$/;"	m	struct:TPCE::HOLDING_ROW
H_QTY	benchmarks/egen/Table_Defs.h	/^    int                     H_QTY;$/;"	m	struct:TPCE::HOLDING_ROW
H_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    H_S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::HOLDING_ROW
H_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  H_T_ID;$/;"	m	struct:TPCE::HOLDING_ROW
HighestKey	benchmarks/egen/InputFlatFilesDeclarations.h	/^    int     HighestKey() {return m_iHighestKey;}$/;"	f	struct:TPCE::TBaseKeyElementsLimits
HoldingBuffer	benchmarks/egen/shore_tpce_egen.h	/^    HoldingBuffer(int c): EgenTupleContainer<HOLDING_ROW>(c){}$/;"	f	class:TPCE::HoldingBuffer
HoldingBuffer	benchmarks/egen/shore_tpce_egen.h	/^class HoldingBuffer: public EgenTupleContainer<HOLDING_ROW>{$/;"	c	namespace:TPCE
HoldingHistoryBuffer	benchmarks/egen/shore_tpce_egen.h	/^    HoldingHistoryBuffer(int c): EgenTupleContainer<HOLDING_HISTORY_ROW>(c){}$/;"	f	class:TPCE::HoldingHistoryBuffer
HoldingHistoryBuffer	benchmarks/egen/shore_tpce_egen.h	/^class HoldingHistoryBuffer: public EgenTupleContainer<HOLDING_HISTORY_ROW>{$/;"	c	namespace:TPCE
HoldingHistoryRowFmt	benchmarks/egen/Table_Defs.h	/^const char HoldingHistoryRowFmt[] = "%" PRId64 "|%" PRId64 "|%d|%d\\n";$/;"	m	namespace:TPCE
HoldingRowFmt	benchmarks/egen/Table_Defs.h	/^const char HoldingRowFmt[] = "%" PRId64 "|%" PRId64 "|%s|%s|%.2f|%d\\n";$/;"	m	namespace:TPCE
HoldingSummaryBuffer	benchmarks/egen/shore_tpce_egen.h	/^    HoldingSummaryBuffer(int c): EgenTupleContainer<HOLDING_SUMMARY_ROW>(c){}$/;"	f	class:TPCE::HoldingSummaryBuffer
HoldingSummaryBuffer	benchmarks/egen/shore_tpce_egen.h	/^class HoldingSummaryBuffer: public EgenTupleContainer<HOLDING_SUMMARY_ROW>{$/;"	c	namespace:TPCE
HoldingSummaryRowFmt	benchmarks/egen/Table_Defs.h	/^const char HoldingSummaryRowFmt[] = "%" PRId64 "|%s|%d\\n";$/;"	m	namespace:TPCE
HoursPerDay	benchmarks/egen/DateTime.h	/^const INT32     HoursPerDay             = 24;$/;"	m	namespace:TPCE
HoursPerWorkDay	benchmarks/egen/DateTime.h	/^const INT32     HoursPerWorkDay         = 8;$/;"	m	namespace:TPCE
IDENT_TRANSFORM	record/encoder.h	82;"	d
INDUSTRY_KEY_FIELDS	benchmarks/tpce.h	279;"	d
INDUSTRY_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct INDUSTRY_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
INDUSTRY_TABLE_H	benchmarks/egen/IndustryTable.h	41;"	d
INDUSTRY_VALUE_FIELDS	benchmarks/tpce.h	281;"	d
INITBASE	third-party/lz4/lz4.c	241;"	d	file:
INITBASE	third-party/lz4/lz4.c	250;"	d	file:
INITBASE	third-party/lz4/lz4hc.c	223;"	d	file:
INITBASE	third-party/lz4/lz4hc.c	233;"	d	file:
INPUT_FILE_H	benchmarks/egen/InputFile.h	42;"	d
INPUT_FILE_NO_WEIGHT_H	benchmarks/egen/InputFileNoWeight.h	42;"	d
INPUT_FLAT_FILE_DECLARATIONS_H	benchmarks/egen/InputFlatFilesDeclarations.h	42;"	d
INPUT_FLAT_FILE_STRUCTURE_H	benchmarks/egen/InputFlatFilesStructure.h	43;"	d
INT16	benchmarks/egen/EGenStandardTypes.h	/^typedef int16_t         INT16, *PINT16;$/;"	t
INT32	benchmarks/egen/EGenStandardTypes.h	/^typedef int32_t         INT32, *PINT32;$/;"	t
INT64	benchmarks/egen/EGenStandardTypes.h	/^typedef long long 		INT64, *PINT64;$/;"	t
INT64_CONST	benchmarks/egen/EGenStandardTypes.h	105;"	d
INT64_CONST	benchmarks/egen/EGenStandardTypes.h	149;"	d
INT8	benchmarks/egen/EGenStandardTypes.h	/^typedef int8_t          INT8, *PINT8;$/;"	t
INVALID_LSN	dbcore/sm-common.h	/^static LSN const INVALID_LSN = {0};$/;"	v
INVALID_SIZE	dbcore/size-encode.h	/^static size_t const INVALID_SIZE = -1;$/;"	v
INVALID_SIZE_CODE	dbcore/size-encode.h	/^static uint8_t const INVALID_SIZE_CODE = 0xff;$/;"	v
INVALID_TRANSACTION_TYPE	benchmarks/egen/CE.h	/^    static const INT32 INVALID_TRANSACTION_TYPE = CCETxnMixGenerator::INVALID_TRANSACTION_TYPE;$/;"	m	class:TPCE::CCE
INVALID_TRANSACTION_TYPE	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 INVALID_TRANSACTION_TYPE = -1;$/;"	m	class:TPCE::CCETxnMixGenerator
INVALID_XID	dbcore/sm-common.h	/^static XID const INVALID_XID = {fat_ptr::ASI_XID_FLAG};$/;"	v
INVARIANT	macros.h	71;"	d
INVARIANT	macros.h	73;"	d
INV_ERROR_CODE	benchmarks/egen/error.h	56;"	d
IN_ID	benchmarks/egen/Table_Defs.h	/^    char                    IN_ID[cIN_ID_len+1];$/;"	m	struct:TPCE::INDUSTRY_ROW
IN_NAME	benchmarks/egen/Table_Defs.h	/^    char                    IN_NAME[cIN_NAME_len+1];$/;"	m	struct:TPCE::INDUSTRY_ROW
IN_SC_ID	benchmarks/egen/Table_Defs.h	/^    char                    IN_SC_ID[cSC_ID_len+1];$/;"	m	struct:TPCE::INDUSTRY_ROW
IS_MOVABLE	dbcore/sc-hash.h	/^    bool IS_MOVABLE = (std::is_move_constructible<T>::value$/;"	v
ITEM_KEY_FIELDS	benchmarks/tpcc.h	69;"	d
ITEM_VALUE_FIELDS	benchmarks/tpcc.h	71;"	d
I_NONE_MOD	btree.h	/^    I_NONE_MOD, \/\/ no nodes split, but modified$/;"	e	enum:btree::insert_status
I_NONE_NOMOD	btree.h	/^    I_NONE_NOMOD, \/\/ no nodes split nor modified$/;"	e	enum:btree::insert_status
I_RETRY	btree.h	/^    I_RETRY,$/;"	e	enum:btree::insert_status
I_SPLIT	btree.h	/^    I_SPLIT, \/\/ node(s) split$/;"	e	enum:btree::insert_status
InFile	benchmarks/egen/ChargeTable.h	/^    ifstream    InFile;$/;"	m	class:TPCE::CChargeTable
InFile	benchmarks/egen/CommissionRateTable.h	/^    ifstream    InFile;$/;"	m	class:TPCE::CCommissionRateTable
InFile	benchmarks/egen/ExchangeTable.h	/^    ifstream            InFile;$/;"	m	class:TPCE::CExchangeTable
InFile	benchmarks/egen/IndustryTable.h	/^    ifstream    InFile;$/;"	m	class:TPCE::CIndustryTable
InFile	benchmarks/egen/SectorTable.h	/^    ifstream    InFile;$/;"	m	class:TPCE::CSectorTable
InFile	benchmarks/egen/StatusTypeTable.h	/^    ifstream    InFile;$/;"	m	class:TPCE::CStatusTypeTable
InFile	benchmarks/egen/TradeTypeTable.h	/^    ifstream    InFile;$/;"	m	class:TPCE::CTradeTypeTable
IncKeySlotsUsed	btree.h	/^  IncKeySlotsUsed(VersionType &v)$/;"	f	class:btree_version_manip
Index	benchmarks/egen/WheelTime.h	/^    inline INT32 Index( void ) { return m_Index; };$/;"	f	class:TPCE::CWheelTime
Industry	benchmarks/egen/InputFlatFilesStructure.h	/^    TIndustryFile               *Industry;$/;"	m	class:TPCE::CInputFiles
IndustryBuffer	benchmarks/egen/shore_tpce_egen.h	/^    IndustryBuffer(int c): EgenTupleContainer<INDUSTRY_ROW>(c){}$/;"	f	class:TPCE::IndustryBuffer
IndustryBuffer	benchmarks/egen/shore_tpce_egen.h	/^class IndustryBuffer: public EgenTupleContainer<INDUSTRY_ROW>{$/;"	c	namespace:TPCE
IndustryRowFmt	benchmarks/egen/Table_Defs.h	/^const char IndustryRowFmt[] = "%s|%s|%s\\n";$/;"	m	namespace:TPCE
Init	benchmarks/egen/BaseLoader.h	/^    virtual void Init() {};     \/\/ default implementation is empty$/;"	f	class:TPCE::CBaseLoader
Init	benchmarks/egen/MEESecurity.cpp	/^void CMEESecurity::Init($/;"	f	class:CMEESecurity
InitAddress	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitAddress(){$/;"	f	class:CGenerateAndLoad
InitCharge	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCharge()$/;"	f	class:CGenerateAndLoad
InitCommissionRate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCommissionRate()$/;"	f	class:CGenerateAndLoad
InitCompany	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCompany()$/;"	f	class:CGenerateAndLoad
InitCompanyCompetitor	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCompanyCompetitor()$/;"	f	class:CGenerateAndLoad
InitCustomer	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCustomer()$/;"	f	class:CGenerateAndLoad
InitCustomerAccountAndAccountPermission	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCustomerAccountAndAccountPermission(){$/;"	f	class:CGenerateAndLoad
InitCustomerTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitCustomerTaxrate()$/;"	f	class:CGenerateAndLoad
InitDailyMarket	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitDailyMarket()$/;"	f	class:CGenerateAndLoad
InitExchange	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitExchange()$/;"	f	class:CGenerateAndLoad
InitFinancial	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitFinancial()$/;"	f	class:CGenerateAndLoad
InitFixedTables	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitFixedTables()$/;"	f	class:CGenerateAndLoad
InitForGen	benchmarks/egen/Brokers.h	/^    void InitForGen(TIdent iCustomerCount, TIdent iStartFromCustomer)$/;"	f	class:TPCE::CBrokersTable
InitGC	txn_proto2_impl.cc	/^transaction_proto2_static::InitGC()$/;"	f	class:transaction_proto2_static
InitGrowingTables	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitGrowingTables()$/;"	f	class:CGenerateAndLoad
InitHoldingAndTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitHoldingAndTrade()$/;"	f	class:CGenerateAndLoad
InitIndustry	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitIndustry()$/;"	f	class:CGenerateAndLoad
InitLastTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitLastTrade()$/;"	f	class:CGenerateAndLoad
InitNewsItemAndNewsXRef	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitNewsItemAndNewsXRef()$/;"	f	class:CGenerateAndLoad
InitNextLoadUnit	benchmarks/egen/AddressTable.cpp	/^void CAddressTable::InitNextLoadUnit()$/;"	f	class:CAddressTable
InitNextLoadUnit	benchmarks/egen/CompanyCompetitorTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CCompanyCompetitorTable
InitNextLoadUnit	benchmarks/egen/CompanyTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CCompanyTable
InitNextLoadUnit	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
InitNextLoadUnit	benchmarks/egen/CustomerTable.cpp	/^void CCustomerTable::InitNextLoadUnit()$/;"	f	class:CCustomerTable
InitNextLoadUnit	benchmarks/egen/CustomerTaxratesTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CCustomerTaxratesTable
InitNextLoadUnit	benchmarks/egen/DailyMarketTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CDailyMarketTable
InitNextLoadUnit	benchmarks/egen/FinancialTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CFinancialTable
InitNextLoadUnit	benchmarks/egen/HoldingsAndTradesTable.h	/^    void InitNextLoadUnit(INT64 TradesToSkip, TIdent iStartingAccountID)$/;"	f	class:TPCE::CHoldingsAndTradesTable
InitNextLoadUnit	benchmarks/egen/LastTradeTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CLastTradeTable
InitNextLoadUnit	benchmarks/egen/NewsItemAndXRefTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CNewsItemAndXRefTable
InitNextLoadUnit	benchmarks/egen/Person.cpp	/^void CPerson::InitNextLoadUnit(TIdent iCacheOffsetIncrement)$/;"	f	class:CPerson
InitNextLoadUnit	benchmarks/egen/SecurityTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CSecurityTable
InitNextLoadUnit	benchmarks/egen/TradeGen.cpp	/^bool CTradeGen::InitNextLoadUnit()$/;"	f	class:CTradeGen
InitNextLoadUnit	benchmarks/egen/WatchListsAndItemsTable.h	/^    void InitNextLoadUnit()$/;"	f	class:TPCE::CWatchListsAndItemsTable
InitScalingTables	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitScalingTables()$/;"	f	class:CGenerateAndLoad
InitSector	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitSector()$/;"	f	class:CGenerateAndLoad
InitSecurity	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitSecurity()$/;"	f	class:CGenerateAndLoad
InitStatusType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitStatusType()$/;"	f	class:CGenerateAndLoad
InitTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitTaxrate(){$/;"	f	class:CGenerateAndLoad
InitTradeType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitTradeType()$/;"	f	class:CGenerateAndLoad
InitWatchListAndWatchItem	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitWatchListAndWatchItem()$/;"	f	class:CGenerateAndLoad
InitZipCode	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::InitZipCode()$/;"	f	class:CGenerateAndLoad
InitialTime	benchmarks/egen/MEESecurity.cpp	/^inline double CMEESecurity::InitialTime( TIdent SecurityIndex )$/;"	f	class:CMEESecurity
InitialTradePopulationBaseDay	benchmarks/egen/MiscConsts.h	/^const UINT16    InitialTradePopulationBaseDay       = 3;$/;"	m	namespace:TPCE
InitialTradePopulationBaseFraction	benchmarks/egen/MiscConsts.h	/^const UINT32    InitialTradePopulationBaseFraction  = 0;$/;"	m	namespace:TPCE
InitialTradePopulationBaseHour	benchmarks/egen/MiscConsts.h	/^const UINT16    InitialTradePopulationBaseHour      = 9;$/;"	m	namespace:TPCE
InitialTradePopulationBaseMinute	benchmarks/egen/MiscConsts.h	/^const UINT16    InitialTradePopulationBaseMinute    = 0;$/;"	m	namespace:TPCE
InitialTradePopulationBaseMonth	benchmarks/egen/MiscConsts.h	/^const UINT16    InitialTradePopulationBaseMonth     = 1;$/;"	m	namespace:TPCE
InitialTradePopulationBaseSecond	benchmarks/egen/MiscConsts.h	/^const UINT16    InitialTradePopulationBaseSecond    = 0;$/;"	m	namespace:TPCE
InitialTradePopulationBaseYear	benchmarks/egen/MiscConsts.h	/^const INT16     InitialTradePopulationBaseYear      = 2005;$/;"	m	namespace:TPCE
Initialize	benchmarks/egen/CE.cpp	/^void CCE::Initialize( PDriverCETxnSettings pTxnParamSettings )$/;"	f	class:CCE
Initialize	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::Initialize()$/;"	f	class:CCETxnInputGenerator
Initialize	benchmarks/egen/DM.cpp	/^void CDM::Initialize( void )$/;"	f	class:CDM
Initialize	benchmarks/egen/DriverParamSettings.h	/^    void Initialize(void)$/;"	f	class:TPCE::CParametersWithDefaults
Initialize	benchmarks/egen/InputFlatFilesStructure.cpp	/^bool CInputFiles::Initialize(eDriverType eType, TIdent iConfiguredCustomerCount, TIdent iActiveCustomerCount, const char *szPathName)$/;"	f	class:TPCE::CInputFiles
Initialize	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::Initialize( void )$/;"	f	class:CMEETickerTape
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    virtual void InitializeDefaults(void) {}$/;"	f	class:TPCE::CParametersWithDefaults
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CBrokerVolumeSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CCustomerPositionSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CDriverCEPartitionSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CDriverGlobalSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CLoaderSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CMarketWatchSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CSecurityDetailSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CTradeLookupSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CTradeOrderSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CTradeUpdateSettings
InitializeDefaults	benchmarks/egen/DriverParamSettings.h	/^    void InitializeDefaults(void)$/;"	f	class:TPCE::CTxnMixGeneratorSettings
InputBuffer	benchmarks/MEESUT.h	/^    InputBuffer():size(0), first(0), last(0)\/\/, flag(0)$/;"	f	class:TPCE::InputBuffer
InputBuffer	benchmarks/MEESUT.h	/^class InputBuffer $/;"	c	namespace:TPCE
Inserted	masstree/kvproto.hh	/^    Inserted,$/;"	e	enum:result_t
IntSet	benchmarks/egen/WatchListsAndItemsTable.h	/^typedef set<TIdent> IntSet; \/\/set of integers with 'less' comparison function$/;"	t	namespace:TPCE
InternalNodeAllocSize	btree.h	/^  static const size_t InternalNodeAllocSize = sizeof(internal_node);$/;"	m	class:btree
InternalNodeAllocSize	btree.h	/^  static const size_t InternalNodeAllocSize = util::round_up<size_t, LG_CACHELINE_SIZE>(sizeof(internal_node));$/;"	m	class:btree
InternalNodeSize	btree.h	/^  InternalNodeSize()$/;"	f	class:btree
InternalNodeSize	masstree_btree.h	/^  static inline size_t InternalNodeSize() {$/;"	f	class:mbtree
Invariants	masstree/doc/spec.tex	/^\\end{figure}$/;"	s
InversePermute	benchmarks/egen/CustomerSelection.cpp	/^TIdent CCustomerSelection::InversePermute(TIdent iLow, TIdent iHigh)$/;"	f	class:CCustomerSelection
IsAbortedTrade	benchmarks/egen/HoldingsAndTradesTable.h	/^    bool IsAbortedTrade(TIdent TradeId)$/;"	f	class:TPCE::CHoldingsAndTradesTable
IsAllFields	typed_txn_btree.h	/^  IsAllFields(uint64_t m)$/;"	f	struct:typed_txn_btree_
IsCompliant	benchmarks/egen/DriverParamSettings.h	/^    bool IsCompliant(void) {$/;"	f	class:TPCE::CParametersWithDefaults
IsCompliant	benchmarks/egen/DriverParamSettings.h	/^    bool IsCompliant(void) {$/;"	f	class:TPCE::CParametersWithoutDefaults
IsCompliant	benchmarks/egen/DriverParamSettings.h	/^    bool IsCompliant(void) {$/;"	f	struct:TPCE::TDriverCETxnSettings
IsDeleting	btree.h	/^  IsDeleting(LoadVersionType v)$/;"	f	class:btree_version_manip
IsInternalNode	btree.h	/^  IsInternalNode(LoadVersionType v)$/;"	f	class:btree_version_manip
IsLeafNode	btree.h	/^  IsLeafNode(LoadVersionType v)$/;"	f	class:btree_version_manip
IsLocked	btree.h	/^  IsLocked(LoadVersionType v)$/;"	f	class:btree_version_manip
IsMaleGender	benchmarks/egen/Person.cpp	/^bool CPerson::IsMaleGender(TIdent CID)$/;"	f	class:CPerson
IsModifying	btree.h	/^  IsModifying(LoadVersionType v)$/;"	f	class:btree_version_manip
IsRoot	btree.h	/^  IsRoot(LoadVersionType v)$/;"	f	class:btree_version_manip
IsSupportable	typed_txn_btree.h	/^  IsSupportable()$/;"	f	class:typed_txn_btree
IsTableAppendOnly	benchmarks/tpcc.cc	/^  IsTableAppendOnly(const char *name)$/;"	f	class:tpcc_bench_runner	file:
IsTableAppendOnly	benchmarks/tpce.cc	/^			IsTableAppendOnly(const char *name)$/;"	f	class:tpce_bench_runner	file:
IsTableReadOnly	benchmarks/tpcc.cc	/^  IsTableReadOnly(const char *name)$/;"	f	class:tpcc_bench_runner	file:
IsTableReadOnly	benchmarks/tpce.cc	/^			IsTableReadOnly(const char *name)$/;"	f	class:tpce_bench_runner	file:
IsValid	benchmarks/egen/DateTime.cpp	/^bool CDateTime::IsValid( INT32 year, INT32 month, INT32 day, INT32 hour, INT32 minute, INT32 second, INT32 msec )$/;"	f	class:CDateTime
IsValid	benchmarks/egen/DriverParamSettings.h	/^    bool IsValid(void) {$/;"	f	class:TPCE::CParametersWithDefaults
IsValid	benchmarks/egen/DriverParamSettings.h	/^    bool IsValid(void) {$/;"	f	class:TPCE::CParametersWithoutDefaults
IsValid	benchmarks/egen/DriverParamSettings.h	/^    bool IsValid(void) {$/;"	f	struct:TPCE::TDriverCETxnSettings
ItemsPerWatchList	benchmarks/egen/EGenGenerateAndLoad.cpp	/^int CGenerateAndLoad::ItemsPerWatchList(){$/;"	f	class:CGenerateAndLoad
JSON_HH	masstree/json.hh	18;"	d
Json	masstree/json.hh	/^class Json {$/;"	c	namespace:lcdf
Json	masstree/json.hh	/^inline Json::Json() {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(Json&& x)$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(Str x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(T first, T last) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(bool x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(const Json& x)$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(const String& x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(const char* x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(const null_t&) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(const std::vector<T> &x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(double x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(int x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(long long x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(long x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(unsigned long long x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(unsigned long x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^inline Json::Json(unsigned x) {$/;"	f	class:lcdf::Json
Json	masstree/json.hh	/^template <typename P> inline Json::Json(const Json_proxy_base<P>& x)$/;"	f	class:lcdf::Json
Json	masstree/kvrow.hh	/^    typedef lcdf::Json Json;$/;"	t	class:query
Json	masstree/value_array.hh	/^    typedef lcdf::Json Json;$/;"	t	class:value_array
Json	masstree/value_bag.hh	/^    typedef lcdf::Json Json;$/;"	t	class:value_bag
Json	masstree/value_string.hh	/^    typedef lcdf::Json Json;$/;"	t	class:value_string
Json	masstree/value_versioned_array.hh	/^    typedef lcdf::Json Json;$/;"	t	class:value_versioned_array
Json_array_proxy	masstree/json.hh	/^    Json_array_proxy(T& ref, int key)$/;"	f	class:lcdf::Json_array_proxy
Json_array_proxy	masstree/json.hh	/^class Json_array_proxy : public Json_proxy_base<Json_array_proxy<T> > {$/;"	c	namespace:lcdf
Json_get_proxy	masstree/json.hh	/^    Json_get_proxy(const Json& ref, bool status)$/;"	f	class:lcdf::Json_get_proxy
Json_get_proxy	masstree/json.hh	/^class Json_get_proxy : public Json_proxy_base<Json_get_proxy> {$/;"	c	namespace:lcdf
Json_iterator_initializer	masstree/json.hh	/^struct Json_iterator_initializer<std::pair<T, U> > {$/;"	s	namespace:lcdf
Json_iterator_initializer	masstree/json.hh	/^template <typename T> struct Json_iterator_initializer {$/;"	s	namespace:lcdf
Json_object_proxy	masstree/json.hh	/^    Json_object_proxy(T& ref, const String& key)$/;"	f	class:lcdf::Json_object_proxy
Json_object_proxy	masstree/json.hh	/^class Json_object_proxy : public Json_proxy_base<Json_object_proxy<T> > {$/;"	c	namespace:lcdf
Json_object_str_proxy	masstree/json.hh	/^    Json_object_str_proxy(T& ref, Str key)$/;"	f	class:lcdf::Json_object_str_proxy
Json_object_str_proxy	masstree/json.hh	/^class Json_object_str_proxy : public Json_proxy_base<Json_object_str_proxy<T> > {$/;"	c	namespace:lcdf
Json_proxy_base	masstree/json.hh	/^class Json_proxy_base {$/;"	c	namespace:lcdf
Json_rep_item	masstree/json.hh	/^template <typename T> struct Json_rep_item<T, 4> {$/;"	s	namespace:lcdf
Json_rep_item	masstree/json.hh	/^template <typename T> struct Json_rep_item<T, 8> {$/;"	s	namespace:lcdf
KB	third-party/lz4/lz4c.c	89;"	d	file:
KB	third-party/lz4/lz4hc.c	208;"	d	file:
KFormatter	benchmarks/results/make_graphs-3.py	/^    def KFormatter(x, p):$/;"	f
KFormatter	benchmarks/results/make_graphs-6.py	/^def KFormatter(x, p):$/;"	f
KILLABLE_REGION	scopedperf.hh	761;"	d
KNOB_ENABLE_TPCC_FACTOR_ANALYSIS	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_FACTOR_ANALYSIS=True$/;"	v
KNOB_ENABLE_TPCC_FACTOR_ANALYSIS_1	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_FACTOR_ANALYSIS_1=False$/;"	v
KNOB_ENABLE_TPCC_MULTIPART	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_MULTIPART=True$/;"	v
KNOB_ENABLE_TPCC_MULTIPART_SKEW	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_MULTIPART_SKEW=True$/;"	v
KNOB_ENABLE_TPCC_PERSIST_FACTOR_ANALYSIS	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_PERSIST_FACTOR_ANALYSIS=True$/;"	v
KNOB_ENABLE_TPCC_RO_SNAPSHOTS	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_RO_SNAPSHOTS=True$/;"	v
KNOB_ENABLE_TPCC_SCALE	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_SCALE=True$/;"	v
KNOB_ENABLE_TPCC_SCALE_ALLPERSIST	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_SCALE_ALLPERSIST=False$/;"	v
KNOB_ENABLE_TPCC_SCALE_ALLPERSIST_COMPRESS	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_SCALE_ALLPERSIST_COMPRESS=False$/;"	v
KNOB_ENABLE_TPCC_SCALE_ALLPERSIST_NOFSYNC	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_SCALE_ALLPERSIST_NOFSYNC=False$/;"	v
KNOB_ENABLE_TPCC_SCALE_FAKEWRITES	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_SCALE_FAKEWRITES=False$/;"	v
KNOB_ENABLE_TPCC_SCALE_GC	benchmarks/runner.py	/^KNOB_ENABLE_TPCC_SCALE_GC=False$/;"	v
KNOB_ENABLE_YCSB_SCALE	benchmarks/runner.py	/^KNOB_ENABLE_YCSB_SCALE=True$/;"	v
KNUTH	third-party/lz4/bench.c	101;"	d	file:
KNUTH	third-party/lz4/fullbench.c	107;"	d	file:
KPERMUTER_HH	masstree/kpermuter.hh	17;"	d
KSEARCH_HH	masstree/ksearch.hh	17;"	d
KVC_HH	masstree/mtclient.hh	17;"	d
KVConn	masstree/mtclient.hh	/^    KVConn(const char *server, int port, int target_core = -1)$/;"	f	class:KVConn
KVConn	masstree/mtclient.hh	/^    KVConn(int fd, bool tcp)$/;"	f	class:KVConn
KVConn	masstree/mtclient.hh	/^class KVConn {$/;"	c
KVDB_CIRCULAR_INT_HH	masstree/circular_int.hh	17;"	d
KVDB_FILE_HH	masstree/file.hh	17;"	d
KVIO_H	masstree/kvio.hh	17;"	d
KVPROTO_HH	masstree/kvproto.hh	17;"	d
KVRANDOM_HH	benchmarks/masstree/kvrandom.hh	17;"	d
KVRANDOM_HH	masstree/kvrandom.hh	17;"	d
KVROW_HH	masstree/kvrow.hh	17;"	d
KVSTATS_HH	masstree/kvstats.hh	17;"	d
KVTEST_HH	masstree/kvtest.hh	17;"	d
KVTHREAD_HH	masstree/kvthread.hh	17;"	d
KVTREES	masstree/GNUmakefile	/^KVTREES = query_masstree.o \\$/;"	m
KVTS_HIGHPART	masstree/timestamp.hh	30;"	d
KVTS_LOWPART	masstree/timestamp.hh	31;"	d
Key	txn_btree.h	/^  typedef std::string Key;$/;"	t	struct:txn_btree_
Key	typed_txn_btree.h	/^  typedef key_type Key;$/;"	t	struct:typed_txn_btree_
Key stability	masstree/doc/spec.tex	/^reachable node or \\NIL.$/;"	P
KeyReader	txn_btree.h	/^  typedef key_reader KeyReader;$/;"	t	struct:txn_btree_
KeySlotsUsed	btree.h	/^  KeySlotsUsed(LoadVersionType v)$/;"	f	class:btree_version_manip
KeyWriter	txn_btree.h	/^  typedef key_writer KeyWriter;$/;"	t	struct:txn_btree_
KeyWriter	typed_txn_btree.h	/^  typedef key_writer KeyWriter;$/;"	t	struct:typed_txn_btree_
Keys	masstree/doc/spec.tex	/^will see.$/;"	s
L1_CAPACITY	dbcore/sm-oid-alloc-impl.h	/^    static size_t const L1_CAPACITY = L1_CAPACITY_BYTES\/sizeof(OID);$/;"	m	struct:sm_allocator
L1_CAPACITY_BYTES	dbcore/sm-oid-alloc-impl.h	/^    static size_t const L1_CAPACITY_BYTES = ASSUMED_PAGE_SIZE - sizeof(head);$/;"	m	struct:sm_allocator
L2_CAPACITY	dbcore/sm-oid-alloc-impl.h	/^    static size_t const L2_CAPACITY = size_t(1) + UINT16_MAX;$/;"	m	struct:sm_allocator
L3_BITS_PER_WORD	dbcore/sm-oid-alloc-impl.h	/^    static size_t const L3_BITS_PER_WORD = 8*sizeof(uint64_t);$/;"	m	struct:sm_allocator
L3_MAX_WORDS	dbcore/sm-oid-alloc-impl.h	/^    static size_t const L3_MAX_WORDS = UINT32_MAX\/L3_BITS_PER_WORD + 1;$/;"	m	struct:sm_allocator
LASTLITERALS	third-party/lz4/lz4.c	214;"	d	file:
LASTLITERALS	third-party/lz4/lz4hc.c	203;"	d	file:
LAST_NAME	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    LAST_NAME[cL_NAME_len+1];$/;"	m	struct:TPCE::TLastNameInputRow
LAST_TRADE_KEY_FIELDS	benchmarks/tpce.h	286;"	d
LAST_TRADE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct LAST_TRADE_ROW$/;"	s	namespace:TPCE
LAST_TRADE_TABLE_H	benchmarks/egen/LastTradeTable.h	41;"	d
LAST_TRADE_VALUE_FIELDS	benchmarks/tpce.h	288;"	d
LATEX	masstree/doc/GNUmakefile	/^LATEX = latex$/;"	m
LCDF_CLP_H	masstree/clp.h	17;"	d
LCDF_CONSTANT_CSTR	masstree/string_base.hh	27;"	d
LCDF_MAKE_STRING_HASH	masstree/string_base.hh	426;"	d
LCDF_MAKE_STRING_HASH	masstree/string_base.hh	433;"	d
LCDF_SNPRINTF_ATTR	masstree/straccum.hh	/^    StringAccum &snprintf(int n, const char *format, ...) LCDF_SNPRINTF_ATTR;$/;"	m	class:lcdf::StringAccum
LCDF_SNPRINTF_ATTR	masstree/straccum.hh	23;"	d
LCDF_SNPRINTF_ATTR	masstree/straccum.hh	25;"	d
LCDF_SNPRINTF_ATTR	masstree/straccum.hh	735;"	d
LCDF_STRACCUM_HH	masstree/straccum.hh	17;"	d
LCDF_STRING_HH	masstree/string.hh	17;"	d
LDFLAGS	Makefile	/^	cd masstree; LDFLAGS=$(MASSTREE_LDFLAGS) .\/configure $(MASSTREE_CONFIG)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS := -lpthread -lnuma -lrt -static-libstdc++$/;"	m
LDFLAGS	masstree/GNUmakefile	/^LDFLAGS = -L \/home\/ipandis\/GITPROJECTS\/Impala\/thirdparty\/gperftools-2.0\/.libs\/ $/;"	m
LEGACY_BLOCKSIZE	third-party/lz4/lz4c.c	106;"	d	file:
LEGACY_MAGICNUMBER	third-party/lz4/lz4c.c	103;"	d	file:
LEN	third-party/lz4/fuzzer.c	46;"	d	file:
LEN_LEN_MASK	btree.h	/^    static const uint64_t LEN_LEN_MASK = 0xf;$/;"	m	struct:btree::leaf_node
LEN_TYPE_MASK	btree.h	/^    static const uint64_t LEN_TYPE_MASK = 0x1 << LEN_TYPE_SHIFT;$/;"	m	struct:btree::leaf_node
LEN_TYPE_SHIFT	btree.h	/^    static const uint64_t LEN_TYPE_SHIFT = 4;$/;"	m	struct:btree::leaf_node
LG_CACHELINE_SIZE	macros.h	34;"	d
LIBS	masstree/GNUmakefile	/^LIBS = -lnuma  -lpthread -lm$/;"	m
LIMITED_OUTPUT	third-party/lz4/lz4.c	369;"	d	file:
LIMITED_OUTPUT	third-party/lz4/lz4.c	405;"	d	file:
LIMITED_OUTPUT	third-party/lz4/lz4.c	453;"	d	file:
LIMITED_OUTPUT	third-party/lz4/lz4.c	493;"	d	file:
LIMITED_OUTPUT	third-party/lz4/lz4_encoder.h	253;"	d
LIMITED_OUTPUT	third-party/lz4/lz4hc.c	582;"	d	file:
LIMITED_OUTPUT	third-party/lz4/lz4hc_encoder.h	346;"	d
LIMIT_TRIGGER_TRADE_QTY	benchmarks/egen/MEETickerTape.cpp	/^const int CMEETickerTape::LIMIT_TRIGGER_TRADE_QTY = 375;$/;"	m	class:CMEETickerTape	file:
LIMIT_TRIGGER_TRADE_QTY	benchmarks/egen/MEETickerTape.h	/^    static const int    LIMIT_TRIGGER_TRADE_QTY;$/;"	m	class:TPCE::CMEETickerTape
LITTLE_ENDIAN_32	third-party/lz4/lz4c.c	120;"	d	file:
LOBAccessPercentage	benchmarks/egen/DriverParamSettings.h	/^    INT32   LOBAccessPercentage;$/;"	m	struct:TPCE::TSecurityDetailSettings
LOBAccessPercentage	benchmarks/egen/DriverParamSettings.h	/^    bool    LOBAccessPercentage;$/;"	m	struct:TPCE::TSecurityDetailSettingsState
LOCKING_H_INCLUDED	benchmarks/egen/locking.h	38;"	d
LOG	dbcore/test-cslist.cpp	6;"	d	file:
LOG	dbcore/test-epoch.cpp	7;"	d	file:
LOG	dbcore/test-sm-oid-alloc-impl.cpp	16;"	d	file:
LOG	dbcore/test-sm-oid.cpp	13;"	d	file:
LOGGERS	scripts/tester.py	/^    LOGGERS = [$/;"	v
LOGGER_UNSAFE_FAKE_COMPRESSION	config/config-factor-fake-compression.h	3;"	d
LOG_ALIGN	dbcore/sm-defs.h	25;"	d
LOG_ALIGN	dbcore/sm-defs.h	27;"	d
LOG_COMMENT	dbcore/sm-log-defs.h	/^    LOG_COMMENT = LOG_NOP | LOG_FLAG_HAS_PAYLOAD, $/;"	e	enum:uint8_t
LOG_DELETE	dbcore/sm-log-defs.h	/^    LOG_DELETE = 0x3,$/;"	e	enum:uint8_t
LOG_DELETE	dbcore/sm-log.h	/^    enum record_type { LOG_INSERT, LOG_UPDATE, LOG_RELOCATE, LOG_DELETE };$/;"	e	enum:sm_log_scan_mgr::record_type
LOG_FAT_SKIP	dbcore/sm-log-defs.h	/^    LOG_FAT_SKIP = LOG_SKIP | LOG_FLAG_HAS_PAYLOAD, $/;"	e	enum:uint8_t
LOG_FLAG_HAS_LSN	dbcore/sm-log-defs.h	/^    LOG_FLAG_HAS_LSN = 0x20,$/;"	e	enum:uint8_t
LOG_FLAG_HAS_PAYLOAD	dbcore/sm-log-defs.h	/^    LOG_FLAG_HAS_PAYLOAD = 0x80,$/;"	e	enum:uint8_t
LOG_FLAG_IS_EXT	dbcore/sm-log-defs.h	/^    LOG_FLAG_IS_EXT = 0x40,$/;"	e	enum:uint8_t
LOG_INSERT	dbcore/sm-log-defs.h	/^    LOG_INSERT = LOG_FLAG_HAS_PAYLOAD | 0x1,$/;"	e	enum:uint8_t
LOG_INSERT	dbcore/sm-log.h	/^    enum record_type { LOG_INSERT, LOG_UPDATE, LOG_RELOCATE, LOG_DELETE };$/;"	e	enum:sm_log_scan_mgr::record_type
LOG_INSERT_EXT	dbcore/sm-log-defs.h	/^    LOG_INSERT_EXT = LOG_FLAG_IS_EXT | LOG_INSERT,$/;"	e	enum:uint8_t
LOG_NOP	dbcore/sm-log-defs.h	/^    LOG_NOP = 0x0,$/;"	e	enum:uint8_t
LOG_OVERFLOW	dbcore/sm-log-defs.h	/^    LOG_OVERFLOW = LOG_FLAG_HAS_LSN | 0x5,$/;"	e	enum:uint8_t
LOG_RELOCATE	dbcore/sm-log-defs.h	/^    LOG_RELOCATE = LOG_FLAG_HAS_PAYLOAD | LOG_FLAG_IS_EXT | 0x4,$/;"	e	enum:uint8_t
LOG_RELOCATE	dbcore/sm-log.h	/^    enum record_type { LOG_INSERT, LOG_UPDATE, LOG_RELOCATE, LOG_DELETE };$/;"	e	enum:sm_log_scan_mgr::record_type
LOG_SEGMENT_ALIGN	dbcore/sm-log-file.cpp	/^static size_t const LOG_SEGMENT_ALIGN = 1024;$/;"	v	file:
LOG_SKIP	dbcore/sm-log-defs.h	/^    LOG_SKIP = LOG_FLAG_HAS_LSN | 0x6,$/;"	e	enum:uint8_t
LOG_UPDATE	dbcore/sm-log-defs.h	/^    LOG_UPDATE = LOG_FLAG_HAS_PAYLOAD | 0x2,$/;"	e	enum:uint8_t
LOG_UPDATE	dbcore/sm-log.h	/^    enum record_type { LOG_INSERT, LOG_UPDATE, LOG_RELOCATE, LOG_DELETE };$/;"	e	enum:sm_log_scan_mgr::record_type
LOG_UPDATE_EXT	dbcore/sm-log-defs.h	/^    LOG_UPDATE_EXT = LOG_FLAG_IS_EXT | LOG_UPDATE,$/;"	e	enum:uint8_t
LSN	dbcore/sm-common.h	/^struct LSN {$/;"	s
LT_DTS	benchmarks/egen/Table_Defs.h	/^    CDateTime               LT_DTS;$/;"	m	struct:TPCE::LAST_TRADE_ROW
LT_OPEN_PRICE	benchmarks/egen/Table_Defs.h	/^    double                  LT_OPEN_PRICE;$/;"	m	struct:TPCE::LAST_TRADE_ROW
LT_PRICE	benchmarks/egen/Table_Defs.h	/^    double                  LT_PRICE;$/;"	m	struct:TPCE::LAST_TRADE_ROW
LT_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    LT_S_SYMB[cSYMBOL_len+1];$/;"	m	struct:TPCE::LAST_TRADE_ROW
LT_VOL	benchmarks/egen/Table_Defs.h	/^    INT64                   LT_VOL;$/;"	m	struct:TPCE::LAST_TRADE_ROW
LZ4HC_CommonLength	third-party/lz4/lz4hc.c	/^static forceinline size_t LZ4HC_CommonLength (const BYTE* p1, const BYTE* p2, const BYTE* const matchlimit)$/;"	f	file:
LZ4HC_Data_Structure	third-party/lz4/lz4hc.c	/^} LZ4HC_Data_Structure;$/;"	t	typeref:struct:__anon7	file:
LZ4HC_Insert	third-party/lz4/lz4hc.c	/^static forceinline void LZ4HC_Insert (LZ4HC_Data_Structure* hc4, const BYTE* ip)$/;"	f	file:
LZ4HC_InsertAndFindBestMatch	third-party/lz4/lz4hc.c	/^static forceinline int LZ4HC_InsertAndFindBestMatch (LZ4HC_Data_Structure* hc4, const BYTE* ip, const BYTE* const matchlimit, const BYTE** matchpos)$/;"	f	file:
LZ4HC_InsertAndGetWiderMatch	third-party/lz4/lz4hc.c	/^static forceinline int LZ4HC_InsertAndGetWiderMatch (LZ4HC_Data_Structure* hc4, const BYTE* ip, const BYTE* startLimit, const BYTE* matchlimit, int longest, const BYTE** matchpos, const BYTE** startpos)$/;"	f	file:
LZ4LDFLAGS	Makefile	/^LZ4LDFLAGS := -Lthird-party\/lz4 -llz4 -Wl,-rpath,$(TOP)\/third-party\/lz4$/;"	m
LZ4S_BLOCKSIZEID_DEFAULT	third-party/lz4/lz4c.c	108;"	d	file:
LZ4S_CHECKSUM_SEED	third-party/lz4/lz4c.c	109;"	d	file:
LZ4S_EOS	third-party/lz4/lz4c.c	110;"	d	file:
LZ4S_GetBlockSize_FromBlockId	third-party/lz4/lz4c.c	/^static int          LZ4S_GetBlockSize_FromBlockId (int id) { return (1 << (8 + (2 * id))); }$/;"	f	file:
LZ4S_GetCheckBits_FromXXH	third-party/lz4/lz4c.c	/^static unsigned int LZ4S_GetCheckBits_FromXXH (unsigned int xxh) { return (xxh >> 8) & _8BITS; }$/;"	f	file:
LZ4S_MAGICNUMBER	third-party/lz4/lz4c.c	100;"	d	file:
LZ4S_MAXHEADERSIZE	third-party/lz4/lz4c.c	111;"	d	file:
LZ4S_SKIPPABLE0	third-party/lz4/lz4c.c	101;"	d	file:
LZ4S_SKIPPABLEMASK	third-party/lz4/lz4c.c	102;"	d	file:
LZ4S_isSkippableMagicNumber	third-party/lz4/lz4c.c	/^static int          LZ4S_isSkippableMagicNumber(unsigned int magic) { return (magic & LZ4S_SKIPPABLEMASK) == LZ4S_SKIPPABLE0; }$/;"	f	file:
LZ4_64KLIMIT	third-party/lz4/lz4.c	218;"	d	file:
LZ4_ARCH64	third-party/lz4/lz4.c	71;"	d	file:
LZ4_ARCH64	third-party/lz4/lz4.c	73;"	d	file:
LZ4_ARCH64	third-party/lz4/lz4hc.c	57;"	d	file:
LZ4_ARCH64	third-party/lz4/lz4hc.c	59;"	d	file:
LZ4_BIG_ENDIAN	third-party/lz4/lz4.c	81;"	d	file:
LZ4_BIG_ENDIAN	third-party/lz4/lz4.c	84;"	d	file:
LZ4_BIG_ENDIAN	third-party/lz4/lz4.c	89;"	d	file:
LZ4_BIG_ENDIAN	third-party/lz4/lz4hc.c	67;"	d	file:
LZ4_BIG_ENDIAN	third-party/lz4/lz4hc.c	70;"	d	file:
LZ4_BIG_ENDIAN	third-party/lz4/lz4hc.c	75;"	d	file:
LZ4_BLINDCOPY	third-party/lz4/lz4.c	266;"	d	file:
LZ4_BLINDCOPY	third-party/lz4/lz4hc.c	263;"	d	file:
LZ4_COMPRESSBOUND	third-party/lz4/lz4.h	79;"	d
LZ4_COPYPACKET	third-party/lz4/lz4.c	238;"	d	file:
LZ4_COPYPACKET	third-party/lz4/lz4.c	247;"	d	file:
LZ4_COPYPACKET	third-party/lz4/lz4hc.c	219;"	d	file:
LZ4_COPYPACKET	third-party/lz4/lz4hc.c	227;"	d	file:
LZ4_COPYSTEP	third-party/lz4/lz4.c	237;"	d	file:
LZ4_COPYSTEP	third-party/lz4/lz4.c	246;"	d	file:
LZ4_COPYSTEP	third-party/lz4/lz4hc.c	218;"	d	file:
LZ4_COPYSTEP	third-party/lz4/lz4hc.c	226;"	d	file:
LZ4_FORCE_SW_BITCOUNT	third-party/lz4/lz4.c	103;"	d	file:
LZ4_FORCE_SW_BITCOUNT	third-party/lz4/lz4hc.c	89;"	d	file:
LZ4_FORCE_UNALIGNED_ACCESS	third-party/lz4/lz4.c	98;"	d	file:
LZ4_FORCE_UNALIGNED_ACCESS	third-party/lz4/lz4hc.c	84;"	d	file:
LZ4_HASH	third-party/lz4/lz4_encoder.h	246;"	d
LZ4_HASH	third-party/lz4/lz4_encoder.h	66;"	d
LZ4_HASHVALUE	third-party/lz4/lz4_encoder.h	247;"	d
LZ4_HASHVALUE	third-party/lz4/lz4_encoder.h	67;"	d
LZ4_InitHC	third-party/lz4/lz4hc.c	/^static inline int LZ4_InitHC (LZ4HC_Data_Structure* hc4, const BYTE* base)$/;"	f	file:
LZ4_NbCommonBytes	third-party/lz4/lz4.c	/^forceinline int LZ4_NbCommonBytes (register U32 val)$/;"	f
LZ4_NbCommonBytes	third-party/lz4/lz4.c	/^forceinline int LZ4_NbCommonBytes (register U64 val)$/;"	f
LZ4_NbCommonBytes	third-party/lz4/lz4hc.c	/^inline static int LZ4_NbCommonBytes (register U32 val)$/;"	f	file:
LZ4_NbCommonBytes	third-party/lz4/lz4hc.c	/^inline static int LZ4_NbCommonBytes (register U64 val)$/;"	f	file:
LZ4_READ_LITTLEENDIAN_16	third-party/lz4/lz4.c	254;"	d	file:
LZ4_READ_LITTLEENDIAN_16	third-party/lz4/lz4.c	257;"	d	file:
LZ4_READ_LITTLEENDIAN_16	third-party/lz4/lz4hc.c	237;"	d	file:
LZ4_READ_LITTLEENDIAN_16	third-party/lz4/lz4hc.c	240;"	d	file:
LZ4_SECURECOPY	third-party/lz4/lz4.c	239;"	d	file:
LZ4_SECURECOPY	third-party/lz4/lz4.c	248;"	d	file:
LZ4_WILDCOPY	third-party/lz4/lz4.c	265;"	d	file:
LZ4_WILDCOPY	third-party/lz4/lz4hc.c	262;"	d	file:
LZ4_WRITE_LITTLEENDIAN_16	third-party/lz4/lz4.c	255;"	d	file:
LZ4_WRITE_LITTLEENDIAN_16	third-party/lz4/lz4.c	258;"	d	file:
LZ4_WRITE_LITTLEENDIAN_16	third-party/lz4/lz4hc.c	238;"	d	file:
LZ4_WRITE_LITTLEENDIAN_16	third-party/lz4/lz4hc.c	241;"	d	file:
LZ4_compress	third-party/lz4/lz4.c	/^int LZ4_compress(const char* source, char* dest, int inputSize)$/;"	f
LZ4_compressBound	third-party/lz4/lz4.h	/^static inline int LZ4_compressBound(int isize)   { return ((isize) + ((isize)\/255) + 16); }$/;"	f
LZ4_compressBoundInv	third-party/lz4/lz4.h	/^LZ4_compressBoundInv(int bound)$/;"	f
LZ4_compress_limitedOutput	third-party/lz4/lz4.c	/^int LZ4_compress_limitedOutput(const char* source, char* dest, int inputSize, int maxOutputSize)$/;"	f
LZ4_create	third-party/lz4/lz4.c	/^void*    LZ4_create() { return malloc(HASHTABLESIZE); }$/;"	f
LZ4_createHC	third-party/lz4/lz4hc.c	/^void* LZ4_createHC (const char* slidingInputBuffer)$/;"	f
LZ4_create_size	third-party/lz4/lz4.c	/^unsigned LZ4_create_size() { return HASHTABLESIZE; }$/;"	f
LZ4_decompress_fast	third-party/lz4/lz4.c	/^int LZ4_decompress_fast(const char* source, char* dest, int outputSize)$/;"	f
LZ4_decompress_fast_withPrefix64k	third-party/lz4/lz4.c	/^int LZ4_decompress_fast_withPrefix64k(const char* source, char* dest, int outputSize)$/;"	f
LZ4_decompress_generic	third-party/lz4/lz4.c	/^forceinline int LZ4_decompress_generic($/;"	f
LZ4_decompress_safe	third-party/lz4/lz4.c	/^int LZ4_decompress_safe(const char* source, char* dest, int inputSize, int maxOutputSize)$/;"	f
LZ4_decompress_safe_partial	third-party/lz4/lz4.c	/^int LZ4_decompress_safe_partial(const char* source, char* dest, int inputSize, int targetOutputSize, int maxOutputSize)$/;"	f
LZ4_decompress_safe_withPrefix64k	third-party/lz4/lz4.c	/^int LZ4_decompress_safe_withPrefix64k(const char* source, char* dest, int inputSize, int maxOutputSize)$/;"	f
LZ4_free	third-party/lz4/lz4.c	/^int      LZ4_free(void* ctx) { free(ctx); return 0; }$/;"	f
LZ4_freeHC	third-party/lz4/lz4hc.c	/^int LZ4_freeHC (void* LZ4HC_Data)$/;"	f
LZ4_slideInputBufferHC	third-party/lz4/lz4hc.c	/^char* LZ4_slideInputBufferHC(void* LZ4HC_Data)$/;"	f
LZ4_uncompress	third-party/lz4/lz4.h	/^static inline int LZ4_uncompress (const char* source, char* dest, int outputSize) { return LZ4_decompress_fast(source, dest, outputSize); }$/;"	f
LZ4_uncompress_unknownOutputSize	third-party/lz4/lz4.h	/^static inline int LZ4_uncompress_unknownOutputSize (const char* source, char* dest, int isize, int maxOutputSize) { return LZ4_decompress_safe(source, dest, isize, maxOutputSize); }$/;"	f
LastNames	benchmarks/egen/InputFlatFilesStructure.h	/^    TLastNamesFile              *LastNames;$/;"	m	class:TPCE::CInputFiles
LastTradeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    LastTradeBuffer(int c): EgenTupleContainer<LAST_TRADE_ROW>(c){}$/;"	f	class:TPCE::LastTradeBuffer
LastTradeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class LastTradeBuffer: public EgenTupleContainer<LAST_TRADE_ROW>{$/;"	c	namespace:TPCE
LastTradeRowFmt	benchmarks/egen/Table_Defs.h	/^const char LastTradeRowFmt[] = "%s|%s|%.2f|%.2f|%" PRId64 "\\n";$/;"	m	namespace:TPCE
LeafNodeAllocSize	btree.h	/^  static const size_t LeafNodeAllocSize = sizeof(leaf_node);$/;"	m	class:btree
LeafNodeAllocSize	btree.h	/^  static const size_t LeafNodeAllocSize = util::round_up<size_t, LG_CACHELINE_SIZE>(sizeof(leaf_node));$/;"	m	class:btree
LeafNodeSize	btree.h	/^  LeafNodeSize()$/;"	f	class:btree
LeafNodeSize	masstree_btree.h	/^  static inline size_t LeafNodeSize() {$/;"	f	class:mbtree
LgAllocAlignment	allocator.h	/^  static const size_t LgAllocAlignment = 4; \/\/ all allocations aligned to 2^4 = 16$/;"	m	class:allocator
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void CHARGE_ROW::Load(istream &file)$/;"	f	class:CHARGE_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void COMMISSION_RATE_ROW::Load(istream &file)$/;"	f	class:COMMISSION_RATE_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void EXCHANGE_ROW::Load(istream &file)$/;"	f	class:EXCHANGE_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void INDUSTRY_ROW::Load(istream &file)$/;"	f	class:INDUSTRY_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void SECTOR_ROW::Load(istream &file)$/;"	f	class:SECTOR_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void STATUS_TYPE_ROW::Load(istream &file)$/;"	f	class:STATUS_TYPE_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TAccountNameInputRow::Load(istream &file)$/;"	f	class:TAccountNameInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TAreaCodeInputRow::Load(istream &file)$/;"	f	class:TAreaCodeInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TCompanyCompetitorInputRow::Load(istream &file)$/;"	f	class:TCompanyCompetitorInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TCompanyInputRow::Load(istream &file)$/;"	f	class:TCompanyInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TCompanySPRateInputRow::Load(istream &file)$/;"	f	class:TCompanySPRateInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TFirstNameInputRow::Load(istream &file)$/;"	f	class:TFirstNameInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TLastNameInputRow::Load(istream &file)$/;"	f	class:TLastNameInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TNewsInputRow::Load(istream &file)$/;"	f	class:TNewsInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TRADE_TYPE_ROW::Load(istream &file)$/;"	f	class:TRADE_TYPE_ROW
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TSecurityInputRow::Load(istream &file)$/;"	f	class:TSecurityInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TStreetNameInputRow::Load(istream &file)$/;"	f	class:TStreetNameInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TStreetSuffixInputRow::Load(istream &file)$/;"	f	class:TStreetSuffixInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TTaxRateInputRow::Load(istream &file)$/;"	f	class:TTaxRateInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void TZipCodeInputRow::Load(istream &file)$/;"	f	class:TZipCodeInputRow
Load	benchmarks/egen/ReadRowFunctions_istream.cpp	/^void ZIP_CODE_ROW::Load(istream &file)$/;"	f	class:ZIP_CODE_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void CHARGE_ROW::Load(istream &file)$/;"	f	class:CHARGE_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void COMMISSION_RATE_ROW::Load(istream &file)$/;"	f	class:COMMISSION_RATE_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void EXCHANGE_ROW::Load(istream &file)$/;"	f	class:EXCHANGE_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void INDUSTRY_ROW::Load(istream &file)$/;"	f	class:INDUSTRY_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void SECTOR_ROW::Load(istream &file)$/;"	f	class:SECTOR_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void STATUS_TYPE_ROW::Load(istream &file)$/;"	f	class:STATUS_TYPE_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TAccountNameInputRow::Load(istream &file)$/;"	f	class:TAccountNameInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TAreaCodeInputRow::Load(istream &file)$/;"	f	class:TAreaCodeInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TCompanyCompetitorInputRow::Load(istream &file)$/;"	f	class:TCompanyCompetitorInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TCompanyInputRow::Load(istream &file)$/;"	f	class:TCompanyInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TCompanySPRateInputRow::Load(istream &file)$/;"	f	class:TCompanySPRateInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TFirstNameInputRow::Load(istream &file)$/;"	f	class:TFirstNameInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TLastNameInputRow::Load(istream &file)$/;"	f	class:TLastNameInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TNewsInputRow::Load(istream &file)$/;"	f	class:TNewsInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TRADE_TYPE_ROW::Load(istream &file)$/;"	f	class:TRADE_TYPE_ROW
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TSecurityInputRow::Load(istream &file)$/;"	f	class:TSecurityInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TStreetNameInputRow::Load(istream &file)$/;"	f	class:TStreetNameInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TStreetSuffixInputRow::Load(istream &file)$/;"	f	class:TStreetSuffixInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TTaxRateInputRow::Load(istream &file)$/;"	f	class:TTaxRateInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void TZipCodeInputRow::Load(istream &file)$/;"	f	class:TZipCodeInputRow
Load	benchmarks/egen/ReadRowFunctions_sscanf.cpp	/^void ZIP_CODE_ROW::Load(istream &file)$/;"	f	class:ZIP_CODE_ROW
Load	btree.h	/^    Load(const std::atomic<uint64_t> &t)$/;"	f	struct:private_::u64manip
Load	btree.h	/^    static inline uint64_t Load(uint64_t t) { return t; }$/;"	f	struct:private_::u64manip
Load	btree.h	/^  Load(LoadVersionType v)$/;"	f	class:btree_version_manip
LoadSymbolToIdMap	benchmarks/egen/SecurityFile.h	/^    bool LoadSymbolToIdMap( void )$/;"	f	class:TPCE::CSecurityFile
LoadType	benchmarks/egen/EGenLoader.cpp	/^eLoadImplementation LoadType = CUSTOM_LOAD;$/;"	v
LoadType	benchmarks/egen/EGenLoader.cpp	/^eLoadImplementation LoadType = DEFAULT_LOAD_TYPE;$/;"	v
LoadType	benchmarks/egen/EGenLoader.cpp	/^eLoadImplementation LoadType = FLAT_FILE_LOAD;$/;"	v
LoadType	benchmarks/egen/EGenLoader.cpp	/^eLoadImplementation LoadType = NULL_LOAD;$/;"	v
LoadType	benchmarks/egen/EGenLoader.cpp	/^eLoadImplementation LoadType = ODBC_LOAD;$/;"	v
LoadVersionType	btree.h	/^    LoadVersionType;$/;"	t	class:btree_version_manip
Lock	btree.h	/^    Lock(std::atomic<uint64_t> &t)$/;"	f	struct:private_::u64manip
Lock	btree.h	/^    Lock(uint64_t &t)$/;"	f	struct:private_::u64manip
Lock	btree.h	/^  Lock(VersionType &v)$/;"	f	class:btree_version_manip
LockForPartition	benchmarks/tpcc.cc	/^LockForPartition(unsigned int wid)$/;"	f	file:
LockWithSpinCount	btree.h	/^    LockWithSpinCount(std::atomic<uint64_t> &t, unsigned &spins)$/;"	f	struct:private_::u64manip
LockWithSpinCount	btree.h	/^    LockWithSpinCount(uint64_t &t, unsigned &spins)$/;"	f	struct:private_::u64manip
LockWithSpinCount	btree.h	/^  LockWithSpinCount(VersionType &v, unsigned &spins)$/;"	f	class:btree_version_manip
Locker	benchmarks/egen/locking.h	/^        explicit Locker<T>(T& mutex)$/;"	f	class:TPCE::Locker
Locker	benchmarks/egen/locking.h	/^class Locker$/;"	c	namespace:TPCE
Locker	benchmarks/egen/threading_pthread.h	/^        explicit Locker<T>(T& mutex)$/;"	f	class:TPCE::Locker
Locker	benchmarks/egen/threading_pthread.h	/^class Locker$/;"	c	namespace:TPCE
Locker	benchmarks/egen/threading_single.h	/^        explicit Locker<T>(T& mutex)$/;"	f	class:TPCE::Locker
Locker	benchmarks/egen/threading_single.h	/^class Locker$/;"	c	namespace:TPCE
LowBitsMask	marked_ptr.h	/^  static const uintptr_t LowBitsMask = 0x7;$/;"	m	class:marked_ptr
LowMask	btree.h	/^  LowMask(uint64_t nbits)$/;"	f	class:btree_version_manip
LowerCaseLetters	benchmarks/egen/MiscConsts.h	/^const char      LowerCaseLetters[]  =   "abcdefghijklmnopqrstuvwxyz";$/;"	m	namespace:TPCE
M	dbcore/size-encode.cpp	17;"	d	file:
M	dbcore/size-encode.cpp	20;"	d	file:
MACHINE_CONFIG	benchmarks/runner.py	/^MACHINE_CONFIG = {$/;"	v
MADD	dbcore/adler.cpp	182;"	d	file:
MAGICNUMBER_SIZE	third-party/lz4/lz4c.c	99;"	d	file:
MAIN	masstree/doc/GNUmakefile	/^MAIN = spec.tex$/;"	m
MAKE_ALIASABLE	masstree/compiler.hh	894;"	d
MAKE_ALIASABLE	masstree/compiler.hh	908;"	d
MAKE_TESTRUNNER	masstree/testrunner.hh	51;"	d
MARKET_FEED	benchmarks/egen/CE.h	/^    static const INT32 MARKET_FEED              = CCETxnMixGenerator::MARKET_FEED;$/;"	m	class:TPCE::CCE
MARKET_FEED	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 MARKET_FEED              =  8;$/;"	m	class:TPCE::CCETxnMixGenerator
MARKET_WATCH	benchmarks/egen/CE.h	/^    static const INT32 MARKET_WATCH             = CCETxnMixGenerator::MARKET_WATCH;$/;"	m	class:TPCE::CCE
MARKET_WATCH	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 MARKET_WATCH             =  3;$/;"	m	class:TPCE::CCETxnMixGenerator
MASK32	benchmarks/egen/BigMath.h	48;"	d
MASSTREE	Makefile	/^MASSTREE ?= 1$/;"	m
MASSTREE_CHECKPOINT_HH	masstree/checkpoint.hh	17;"	d
MASSTREE_COMPILER_HH	masstree/compiler.hh	17;"	d
MASSTREE_CONFIG	Makefile	/^MASSTREE_CONFIG:=--enable-max-key-len=1024$/;"	m
MASSTREE_CONFIG_H_INCLUDED	masstree/config.h	5;"	d
MASSTREE_GET_HH	masstree/masstree_get.hh	17;"	d
MASSTREE_HH	masstree/masstree.hh	17;"	d
MASSTREE_INSERT_HH	masstree/masstree_insert.hh	17;"	d
MASSTREE_KEY_HH	masstree/masstree_key.hh	17;"	d
MASSTREE_LDFLAGS	Makefile	/^	MASSTREE_LDFLAGS="-L$(GPERFTOOLS)\/.libs\/ "$/;"	m
MASSTREE_LDFLAGS	Makefile	/^MASSTREE_LDFLAGS:=$/;"	m
MASSTREE_LOG_HH	masstree/log.hh	17;"	d
MASSTREE_MAXKEYLEN	masstree/config.h	220;"	d
MASSTREE_NODEVERSION_HH	masstree/nodeversion.hh	17;"	d
MASSTREE_OBJFILES	Makefile	/^MASSTREE_OBJFILES := $(patsubst masstree\/%.cc, $(O)\/%.o, $(MASSTREE_SRCFILES))$/;"	m
MASSTREE_PRINT_HH	masstree/masstree_print.hh	17;"	d
MASSTREE_REMOVE_HH	masstree/masstree_remove.hh	17;"	d
MASSTREE_ROW_TYPE_BAG	masstree/config.h	229;"	d
MASSTREE_S	Makefile	/^MASSTREE_S=$(strip $(MASSTREE))$/;"	m
MASSTREE_SCAN_HH	masstree/masstree_scan.hh	17;"	d
MASSTREE_SPLIT_HH	masstree/masstree_split.hh	17;"	d
MASSTREE_SRCFILES	Makefile	/^MASSTREE_SRCFILES = masstree\/compiler.cc \\$/;"	m
MASSTREE_STRUCT_HH	masstree/masstree_struct.hh	17;"	d
MASSTREE_TCURSOR_HH	masstree/masstree_tcursor.hh	17;"	d
MASSTREE_TESTRUNNER_HH	masstree/testrunner.hh	2;"	d
MAXD	third-party/lz4/lz4hc.c	187;"	d	file:
MAXD_LOG	third-party/lz4/lz4.c	221;"	d	file:
MAXD_MASK	third-party/lz4/lz4hc.c	188;"	d	file:
MAXWINDOW	masstree/mtclient.cc	67;"	d	file:
MAX_AMBIGUOUS_VALUES	masstree/clp.c	161;"	d	file:
MAX_BLOCK_RECORDS	dbcore/sm-log-recover.h	/^    static size_t const MAX_BLOCK_RECORDS = 254;$/;"	m	struct:sm_log_recover_mgr
MAX_BLOCK_SIZE	dbcore/sm-log-recover.h	/^    static size_t const MAX_BLOCK_SIZE = 512*1024;$/;"	m	struct:sm_log_recover_mgr
MAX_CAPACITY_MARK	dbcore/sm-oid-alloc-impl.h	/^    static size_t const MAX_CAPACITY_MARK = OID(~OID(0)) - 1;$/;"	m	struct:sm_allocator
MAX_DATA	stats_common.h	/^  static const size_t MAX_DATA = 0xFFFF - 4;$/;"	m	class:stats_command::packet
MAX_DISTANCE	third-party/lz4/lz4.c	222;"	d	file:
MAX_DISTANCE	third-party/lz4/lz4hc.c	189;"	d	file:
MAX_ENCODABLE_SIZE	dbcore/size-encode.h	/^static size_t const MAX_ENCODABLE_SIZE = 950272;$/;"	v
MAX_ENTRIES	dbcore/sm-oid-impl.h	/^        static OID const MAX_ENTRIES = (size_t(1) << 32) - sizeof(dynarray)\/sizeof(fat_ptr);$/;"	m	struct:sm_oid_mgr_impl::oid_array
MAX_MEM	third-party/lz4/bench.c	102;"	d	file:
MAX_MEM	third-party/lz4/fullbench.c	108;"	d	file:
MAX_NB_ATTEMPTS	third-party/lz4/lz4hc.c	195;"	d	file:
MAX_NEWCONN	masstree/mtd.cc	1124;"	d	file:
MAX_SIZE	dbcore/sm-oid-impl.h	/^              == sm_oid_mgr_impl::oid_array::MAX_SIZE,$/;"	m	class:sm_oid_mgr_impl::oid_array
MAX_SIZE	dbcore/sm-oid-impl.h	/^        static size_t const MAX_SIZE = sizeof(fat_ptr) << 32;$/;"	m	struct:sm_oid_mgr_impl::oid_array
MB	third-party/lz4/lz4c.c	90;"	d	file:
MB	third-party/lz4/lz4hc.c	209;"	d	file:
MEE_H	benchmarks/egen/MEE.h	88;"	d
MEE_PRICE_BOARD_H	benchmarks/egen/MEEPriceBoard.h	44;"	d
MEE_SECURITY_H	benchmarks/egen/MEESecurity.h	49;"	d
MEE_SUT_H	benchmarks/MEESUT.h	33;"	d
MEE_SUT_INTERFACE_H	benchmarks/egen/MEESUTInterface.h	49;"	d
MEE_TICKER_TAPE_H	benchmarks/egen/MEETickerTape.h	47;"	d
MEE_TRADE_REQUEST_ACTIONS_H	benchmarks/egen/MEETradeRequestActions.h	43;"	d
MEE_TRADING_FLOOR_H	benchmarks/egen/MEETradingFloor.h	47;"	d
MEMMGR	masstree/GNUmakefile	/^  MEMMGR = -ltcmalloc_minimal$/;"	m
MEMORY_USAGE	third-party/lz4/lz4.c	46;"	d	file:
MEMO_INITIALIZER_TAIL	masstree/string.cc	109;"	d	file:
MEMO_INITIALIZER_TAIL	masstree/string.cc	111;"	d	file:
MEMO_SPACE	masstree/string.hh	/^        MEMO_SPACE = sizeof(memo_type) - 8 \/* == sizeof(memo_type::real_data) *\/$/;"	e	enum:lcdf::String::__anon48
MEM_INIT	third-party/lz4/lz4hc.c	46;"	d	file:
METADATA_FID	dbcore/sm-oid-impl.h	/^    static FID const METADATA_FID = 2;$/;"	m	struct:sm_oid_mgr_impl
METADATA_FID	dbcore/sm-oid.h	/^    static FID const METADATA_FID = 2;$/;"	m	struct:sm_oid_mgr
METAPOST	masstree/doc/GNUmakefile	/^METAPOST = mpost$/;"	m
MFBuffer	benchmarks/MEESUT.h	/^class MFBuffer: public InputBuffer<TPCE::TMarketFeedTxnInput>{$/;"	c	namespace:TPCE
MFF1_ERROR1	benchmarks/egen/error.h	/^        MFF1_ERROR1 = -311,     \/\/ num_updated < unique symbols$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
MFLIMIT	third-party/lz4/lz4.c	215;"	d	file:
MFLIMIT	third-party/lz4/lz4hc.c	204;"	d	file:
MFQueue	benchmarks/MEESUT.h	/^    MFBuffer* MFQueue;$/;"	m	class:TPCE::CMEESUT
MFormatter	benchmarks/results/make_graphs-3.py	/^    def MFormatter(x, p):$/;"	f
MFormatter	benchmarks/results/make_graphs-6.py	/^def MFormatter(x, p):$/;"	f
MINLENGTH	third-party/lz4/lz4.c	216;"	d	file:
MINLENGTH	third-party/lz4/lz4hc.c	205;"	d	file:
MINMATCH	third-party/lz4/lz4.c	211;"	d	file:
MINMATCH	third-party/lz4/lz4hc.c	184;"	d	file:
MIN_BLOCK_FETCH	dbcore/sm-log-recover.h	/^        static size_t const MIN_BLOCK_FETCH = log_block::size(MAX_BLOCK_RECORDS, 0);$/;"	m	struct:sm_log_recover_mgr::block_scanner
MIN_LOG_BLOCK_SIZE	dbcore/sm-log-defs.h	/^static size_t const MIN_LOG_BLOCK_SIZE = log_block::size(0, 0);$/;"	v
MIN_PAYLOAD_SIZE	dbcore/test-sm-log.cpp	/^static size_t const MIN_PAYLOAD_SIZE = sizeof(" f:0x01234567 o:0x01234567 v:0x0123456789abcdef s:0x01234567");$/;"	v	file:
MIN_STREAM_BUFSIZE	third-party/lz4/lz4c.c	107;"	d	file:
MISC_CONSTS_H	benchmarks/egen/MiscConsts.h	41;"	d
MISC_HH	masstree/misc.hh	17;"	d
ML_BITS	third-party/lz4/lz4.c	224;"	d	file:
ML_BITS	third-party/lz4/lz4hc.c	197;"	d	file:
ML_MASK	third-party/lz4/lz4.c	225;"	d	file:
ML_MASK	third-party/lz4/lz4hc.c	198;"	d	file:
MODE	Makefile	/^MODE ?= perf$/;"	m
MODE_S	Makefile	/^MODE_S=$(strip $(MODE))$/;"	m
MOD_ADLER	dbcore/adler.cpp	/^static uint64_t const MOD_ADLER = 65521;$/;"	v	file:
MOD_SEQ	third-party/lz4/fuzzer.c	50;"	d	file:
MONEY_H	benchmarks/egen/Money.h	44;"	d
MPFIGBASE	masstree/doc/GNUmakefile	/^MPFIGBASE = examples_1 \\$/;"	m
MSec	benchmarks/egen/DateTime.h	/^    inline UINT32 MSec(void) { return (UINT32)m_msec; };$/;"	f	class:TPCE::CDateTime
MTCOUNTERS_HH	masstree/mtcounters.hh	17;"	d
MUTEX_COUNT	dbcore/sm-oid-impl.h	/^    static size_t const MUTEX_COUNT = 256;$/;"	m	struct:sm_oid_mgr_impl
MWF1_ERROR1	benchmarks/egen/error.h	/^        MWF1_ERROR1 = -411,     \/\/ invalid input$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
MW_settings	benchmarks/egen/DriverParamSettings.h	/^    CMarketWatchSettings        MW_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
MYSQL	Makefile	/^MYSQL ?= 1$/;"	m
MYSQL_SHARE_DIR	Makefile	/^MYSQL_SHARE_DIR ?= \/x\/stephentu\/mysql-5.5.29\/build\/sql\/share$/;"	m
MY_OP_X	benchmarks/ndb_wrapper_impl.h	164;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	168;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	185;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	194;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	212;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	229;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	237;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	250;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	258;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	270;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	309;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	322;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	343;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	355;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	371;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	383;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	401;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	413;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	429;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	441;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	479;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	491;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	509;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	521;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	535;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	547;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	559;"	d
MY_OP_X	benchmarks/ndb_wrapper_impl.h	571;"	d
MakeRange	util.h	/^MakeRange(T start, T end)$/;"	f	namespace:util
MakeTid	persist_test.cc	/^  uint64_t MakeTid(uint64_t core_id, uint64_t num_id, uint64_t epoch_id)$/;"	f	struct:tidhelpers
MaleFirstNames	benchmarks/egen/InputFlatFilesStructure.h	/^    TMaleFirstNamesFile         *MaleFirstNames;$/;"	m	class:TPCE::CInputFiles
MarkDeleting	btree.h	/^  MarkDeleting(VersionType &v)$/;"	f	class:btree_version_manip
MarkModifying	btree.h	/^  MarkModifying(VersionType &v)$/;"	f	class:btree_version_manip
MarketFeed	benchmarks/MEESUT.h	/^    bool MarketFeed( TPCE::PMarketFeedTxnInput pTxnInput ){$/;"	f	class:TPCE::CMEESUT
MarketFeed	benchmarks/tpce.cc	/^		static txn_result MarketFeed(bench_worker *w)$/;"	f	class:tpce_worker
MarketFeedInputBuffer	benchmarks/tpce.cc	/^MFBuffer* 					MarketFeedInputBuffer;$/;"	v
MarketFeedMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   MarketFeedMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
MarketWatch	benchmarks/tpce.cc	/^		static txn_result MarketWatch(bench_worker *w)$/;"	f	class:tpce_worker
MarketWatchMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   MarketWatchMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
MarketWatchMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    MarketWatchMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
Masstree	masstree/masstree.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_get.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_insert.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_key.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_print.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_remove.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_scan.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_split.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_struct.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/masstree_tcursor.hh	/^namespace Masstree {$/;"	n
Masstree	masstree/query_masstree.cc	/^namespace Masstree {$/;"	n	file:
Masstree	masstree/query_masstree.hh	/^namespace Masstree {$/;"	n
MaxCores	masstree/perfstat.cc	/^enum { MaxCores = 48 };   \/\/ Maximum number of cores kvdb statistics support$/;"	e	enum:__anon51	file:
MaxLowerCaseLetters	benchmarks/egen/MiscConsts.h	/^const int       MaxLowerCaseLetters =   sizeof(LowerCaseLetters) - 1;$/;"	m	namespace:TPCE
MaxNumaNode	masstree/perfstat.cc	/^enum { MaxNumaNode = 8 }; \/\/ Maximum number of Numa node kvdb statistics support$/;"	e	enum:__anon52	file:
MaxRowsFrame1	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame1;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeLookupSettings
MaxRowsFrame1	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame1;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeUpdateSettings
MaxRowsFrame1	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame1;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeLookupSettingsState
MaxRowsFrame1	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame1;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeUpdateSettingsState
MaxRowsFrame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame2;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeLookupSettings
MaxRowsFrame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame2;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeUpdateSettings
MaxRowsFrame2	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame2;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeLookupSettingsState
MaxRowsFrame2	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame2;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeUpdateSettingsState
MaxRowsFrame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame3;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeLookupSettings
MaxRowsFrame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame3;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeUpdateSettings
MaxRowsFrame3	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame3;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeLookupSettingsState
MaxRowsFrame3	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame3;                  \/\/ Max number of trades for frame$/;"	m	struct:TPCE::TTradeUpdateSettingsState
MaxRowsFrame4	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsFrame4;                  \/\/ Max number of rows for frame$/;"	m	struct:TPCE::TTradeLookupSettings
MaxRowsFrame4	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsFrame4;                  \/\/ Max number of rows for frame$/;"	m	struct:TPCE::TTradeLookupSettingsState
MaxRowsToUpdateFrame1	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsToUpdateFrame1;          \/\/ Max number of rows to update$/;"	m	struct:TPCE::TTradeUpdateSettings
MaxRowsToUpdateFrame1	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsToUpdateFrame1;          \/\/ Max number of rows to update$/;"	m	struct:TPCE::TTradeUpdateSettingsState
MaxRowsToUpdateFrame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsToUpdateFrame2;          \/\/ Max number of rows to update$/;"	m	struct:TPCE::TTradeUpdateSettings
MaxRowsToUpdateFrame2	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsToUpdateFrame2;          \/\/ Max number of rows to update$/;"	m	struct:TPCE::TTradeUpdateSettingsState
MaxRowsToUpdateFrame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   MaxRowsToUpdateFrame3;          \/\/ Max number of rows to update$/;"	m	struct:TPCE::TTradeUpdateSettings
MaxRowsToUpdateFrame3	benchmarks/egen/DriverParamSettings.h	/^    bool    MaxRowsToUpdateFrame3;          \/\/ Max number of rows to update$/;"	m	struct:TPCE::TTradeUpdateSettingsState
MaxWheelCycles	benchmarks/egen/Wheel.h	/^const INT32 MaxWheelCycles = 999999999;$/;"	m	namespace:TPCE
MinStrReserveLength	str_arena.h	/^  static const size_t MinStrReserveLength = 2 * CACHELINE_SIZE;$/;"	m	class:str_arena
MinutesPerHour	benchmarks/egen/DateTime.h	/^const INT32     MinutesPerHour          = 60;$/;"	m	namespace:TPCE
MoreRecords	benchmarks/egen/TableTemplate.h	/^    bool MoreRecords() {return m_bMoreRecords;}$/;"	f	class:TPCE::TableTemplate
MsPerDay	benchmarks/egen/DateTime.h	/^const INT32     MsPerDay            = SecondsPerDay * MsPerSecond;$/;"	m	namespace:TPCE
MsPerSecond	benchmarks/egen/DateTime.h	/^const INT32     MsPerSecond             = 1000;$/;"	m	namespace:TPCE
MsPerSecondDivisor	benchmarks/egen/DateTime.h	/^const double    MsPerSecondDivisor      = 1000.000;$/;"	m	namespace:TPCE
MsPerWorkDay	benchmarks/egen/DateTime.h	/^const INT32     MsPerWorkDay        = SecondsPerWorkDay * MsPerSecond;$/;"	m	namespace:TPCE
Msg	benchmarks/egen/EGenError.h	/^    string Msg( void )$/;"	f	class:TPCE::CEGenErrorException
Mul6432WithShiftRight64	benchmarks/egen/BigMath.h	/^inline UINT Mul6432WithShiftRight64(UINT64 seed, UINT range)$/;"	f	namespace:TPCE
Mul6464WithShiftRight64	benchmarks/egen/BigMath.h	/^inline UINT64 Mul6464WithShiftRight64(UINT64 seed, UINT64 range)$/;"	f	namespace:TPCE
MyLockedNodes	ownership_checker.h	/^  MyLockedNodes(bool create)$/;"	f	class:ownership_checker
N	benchmarks/results/make_graphs-5.py	/^def N(x):$/;"	f
NAME	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    NAME[ cCA_NAME_len+1 ];$/;"	m	struct:TPCE::TAccountNameInputRow
NAMEPAT	benchmarks/results/make_graphs-5.py	/^NAMEPAT='istc3-8-1-13%s.py'$/;"	v
NBITMAPS	dbcore/xid.cpp	/^static size_t const NBITMAPS = 4;$/;"	m	namespace:TXN	file:
NBLOOPS	third-party/lz4/bench.c	98;"	d	file:
NBLOOPS	third-party/lz4/fullbench.c	104;"	d	file:
NB_ATTEMPTS	third-party/lz4/fuzzer.c	45;"	d	file:
NB_COMPRESSION_ALGORITHMS	third-party/lz4/fullbench.c	283;"	d	file:
NB_DECOMPRESSION_ALGORITHMS	third-party/lz4/fullbench.c	287;"	d	file:
NBitsNumber	persist_test.cc	/^  static const uint64_t NBitsNumber = 24;$/;"	m	struct:tidhelpers	file:
NCONTEXTS	dbcore/xid.cpp	/^static uint16_t const NCONTEXTS = 2048;$/;"	m	namespace:TXN	file:
NCORES	scripts/tester.py	/^  NCORES = [1, 2, 4, 8, 16, 24, 32]$/;"	v
NCPUS	benchmarks/runner.py	/^NCPUS = mp.cpu_count()$/;"	v
NDB_MEMCPY	macros.h	100;"	d
NDB_MEMCPY	macros.h	97;"	d
NDB_MEMSET	macros.h	101;"	d
NDB_MEMSET	macros.h	98;"	d
NDB_UNIMPLEMENTED	macros.h	90;"	d
NDEBUG	masstree/config.h	286;"	d
NDEBUG	masstree/test_atomics.cc	17;"	d	file:
NENTRIES	dbcore/sm-oid.cpp	/^    static size_t const NENTRIES = 64;$/;"	m	struct:__anon93::thread_data	file:
NEVER_INLINE	macros.h	50;"	d
NEWBENCH_OBJFILES	Makefile	/^NEWBENCH_OBJFILES := $(patsubst %.cc, $(O)\/%.o, $(NEWBENCH_SRCFILES))$/;"	m
NEWBENCH_SRCFILES	Makefile	/^NEWBENCH_SRCFILES = new-benchmarks\/bench.cc \\$/;"	m
NEWS_ITEM_AND_XREF_ROW	benchmarks/egen/NewsItemAndXRefTable.h	/^typedef struct NEWS_ITEM_AND_XREF_ROW$/;"	s	namespace:TPCE
NEWS_ITEM_AND_XREG_TABLE_H	benchmarks/egen/NewsItemAndXRefTable.h	41;"	d
NEWS_ITEM_KEY_FIELDS	benchmarks/tpce.h	295;"	d
NEWS_ITEM_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct NEWS_ITEM_ROW$/;"	s	namespace:TPCE
NEWS_ITEM_VALUE_FIELDS	benchmarks/tpce.h	299;"	d
NEWS_XREF_KEY_FIELDS	benchmarks/tpce.h	308;"	d
NEWS_XREF_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct NEWS_XREF_ROW$/;"	s	namespace:TPCE
NEWS_XREF_VALUE_FIELDS	benchmarks/tpce.h	311;"	d
NEW_ORDER_KEY_FIELDS	benchmarks/tpcc.h	78;"	d
NEW_ORDER_RGX	benchmarks/results/make_graphs-6.py	/^NEW_ORDER_RGX = re.compile(r'--new-order-remote-item-pct (\\d+)')$/;"	v
NEW_ORDER_VALUE_FIELDS	benchmarks/tpcc.h	84;"	d
NEW_SEQ	third-party/lz4/fuzzer.c	51;"	d	file:
NI_AUTHOR	benchmarks/egen/Table_Defs.h	/^    char                    NI_AUTHOR[cNI_AUTHOR_len+1];$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NI_DTS	benchmarks/egen/Table_Defs.h	/^    CDateTime               NI_DTS;$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NI_HEADLINE	benchmarks/egen/Table_Defs.h	/^    char                    NI_HEADLINE[cNI_HEADLINE_len+1];$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NI_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  NI_ID;$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NI_ITEM	benchmarks/egen/Table_Defs.h	/^    char                    NI_ITEM[cNI_ITEM_len+1];$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NI_SOURCE	benchmarks/egen/Table_Defs.h	/^    char                    NI_SOURCE[cNI_SOURCE_len+1];$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NI_SUMMARY	benchmarks/egen/Table_Defs.h	/^    char                    NI_SUMMARY[cNI_SUMMARY_len+1];$/;"	m	struct:TPCE::NEWS_ITEM_ROW
NKeysPerNode	btree.h	/^  static const unsigned int NKeysPerNode    = P::NKeysPerNode;$/;"	m	class:btree
NKeysPerNode	btree.h	/^  static const unsigned int NKeysPerNode = 15;$/;"	m	struct:base_btree_config
NKeysPerNode	masstree_btree.h	/^  static const unsigned int NKeysPerNode    = P::leaf_width;$/;"	m	class:mbtree
NLongParts	masstree/kvtest.hh	/^enum { NLongParts = 16 };$/;"	e	enum:__anon26
NMAXCOREBITS	macros.h	38;"	d
NMAXCORES	macros.h	39;"	d
NMaxCores	core.h	/^  static const unsigned NMaxCores = NMAXCORES;$/;"	m	class:coreid
NMaxCores	persist_test.cc	/^  static const size_t NMaxCores = NMAXCORES;$/;"	m	struct:tidhelpers	file:
NMaxCustomerIdxScanElems	benchmarks/tpcc.cc	/^  static const size_t NMaxCustomerIdxScanElems = 512;$/;"	m	class:tpcc_worker	file:
NMinKeysPerNode	btree.h	/^  static const unsigned int NMinKeysPerNode = P::NKeysPerNode \/ 2;$/;"	m	class:btree
NMinKeysPerNode	masstree_btree.h	/^  static const unsigned int NMinKeysPerNode = P::leaf_width \/ 2;$/;"	m	class:mbtree
NO_OUTSTANDING_TIMERS	benchmarks/egen/TimerWheel.h	/^    static const INT32  NO_OUTSTANDING_TIMERS = -1;$/;"	m	class:TPCE::CTimerWheel
NO_OUTSTANDING_TRADES	benchmarks/egen/MEE.h	/^    static const INT32  NO_OUTSTANDING_TRADES = CMEETradingFloor::NO_OUTSTANDING_TRADES;$/;"	m	class:TPCE::CMEE
NO_OUTSTANDING_TRADES	benchmarks/egen/MEETradingFloor.h	/^    static const INT32  NO_OUTSTANDING_TRADES = CTimerWheel< TTradeRequest, CMEETradingFloor, 5, 1 >::NO_OUTSTANDING_TIMERS;$/;"	m	class:TPCE::CMEETradingFloor
NO_PAYLOAD	dbcore/sm-log.h	/^    static size_t const NO_PAYLOAD = -1;$/;"	m	struct:sm_log_scan_mgr
NPhases	benchmarks/masstree/kvtest.cc	/^  static const size_t NPhases = 2;$/;"	m	struct:kvtest_rw1	file:
NR_SOCKETS	object.h	15;"	d
NStrs	str_arena.h	/^  static const size_t NStrs = 32768;$/;"	m	class:str_arena
NTABLES	dbcore/test-sm-oid.cpp	/^static int const NTABLES = 100;$/;"	v	file:
NTRIALS	benchmarks/runner.py	/^NTRIALS = 1 if DRYRUN else 3$/;"	v
NULL_INPUT	third-party/lz4/lz4c.c	132;"	d	file:
NULL_LOAD	benchmarks/egen/EGenLoader.cpp	/^    NULL_LOAD = 0,  \/\/ no load - generate data only$/;"	e	enum:eLoadImplementation	file:
NULL_LOADER_FACTORY_H	benchmarks/egen/NullLoaderFactory.h	42;"	d
NULL_LOADER_H	benchmarks/egen/NullLoader.h	43;"	d
NULL_PTR	dbcore/sm-common.h	/^static fat_ptr const NULL_PTR = {0};$/;"	v
NUM_LOG_SEGMENTS	dbcore/sm-common.h	/^static size_t const NUM_LOG_SEGMENTS = 1 << NUM_LOG_SEGMENT_BITS;$/;"	v
NUM_LOG_SEGMENT_BITS	dbcore/sm-common.h	/^static size_t const NUM_LOG_SEGMENT_BITS = 4;$/;"	v
NUM_SEQ	third-party/lz4/fuzzer.c	48;"	d	file:
NURnd	benchmarks/egen/Random.cpp	/^INT64 CRandom::NURnd( INT64 P, INT64 Q, INT32 A, INT32 s )$/;"	f	class:CRandom
NWORDS	dbcore/xid.cpp	/^    static size_t const constexpr NWORDS = NCONTEXTS\/2\/BITS_PER_WORD;$/;"	m	struct:TXN::bitmap	file:
NXT_SEG_FILE_NAME_BUFSZ	dbcore/sm-log-file.cpp	25;"	d	file:
NXT_SEG_FILE_NAME_FMT	dbcore/sm-log-file.cpp	24;"	d	file:
NX_CO_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  NX_CO_ID;$/;"	m	struct:TPCE::NEWS_XREF_ROW
NX_NI_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  NX_NI_ID;$/;"	m	struct:TPCE::NEWS_XREF_ROW
NameTokens	benchmarks/tpcc.cc	/^  static string NameTokens[];$/;"	m	class:tpcc_worker_mixin	file:
NameTokens	benchmarks/tpcc.cc	/^string tpcc_worker_mixin::NameTokens[] =$/;"	m	class:tpcc_worker_mixin	file:
NegExp	benchmarks/egen/MEESecurity.cpp	/^inline double CMEESecurity::NegExp(double fMean)$/;"	f	class:CMEESecurity
NewOrderIdHolder	benchmarks/tpcc.cc	/^NewOrderIdHolder(unsigned warehouse, unsigned district)$/;"	f	file:
NewRecord	dbcore/test-sm-log.cpp	/^typedef std::pair<db_record*, uint8_t> NewRecord;$/;"	t	file:
News	benchmarks/egen/InputFlatFilesStructure.h	/^    TNewsFile                   *News;$/;"	m	class:TPCE::CInputFiles
NewsItemBuffer	benchmarks/egen/shore_tpce_egen.h	/^    NewsItemBuffer(int c): EgenTupleContainer<NEWS_ITEM_ROW>(c){}$/;"	f	class:TPCE::NewsItemBuffer
NewsItemBuffer	benchmarks/egen/shore_tpce_egen.h	/^class NewsItemBuffer: public EgenTupleContainer<NEWS_ITEM_ROW>{$/;"	c	namespace:TPCE
NewsItemRowFmt	benchmarks/egen/Table_Defs.h	/^const char NewsItemRowFmt[] = "%" PRId64 "|%s|%s|%s|%s|%s|%s\\n";$/;"	m	namespace:TPCE
NewsXRefBuffer	benchmarks/egen/shore_tpce_egen.h	/^    NewsXRefBuffer(int c): EgenTupleContainer<NEWS_XREF_ROW>(c){}$/;"	f	class:TPCE::NewsXRefBuffer
NewsXRefBuffer	benchmarks/egen/shore_tpce_egen.h	/^class NewsXRefBuffer: public EgenTupleContainer<NEWS_XREF_ROW>{$/;"	c	namespace:TPCE
NewsXRefRowFmt	benchmarks/egen/Table_Defs.h	/^const char NewsXRefRowFmt[] = "%" PRId64 "|%" PRId64 "\\n";$/;"	m	namespace:TPCE
Node	dbcore/cslist.h	/^    typedef T Node;$/;"	t	struct:cslist
NodeLockRegionBegin	btree.h	/^  NodeLockRegionBegin()$/;"	f	class:btree
NodeLockRegionBegin	masstree_btree.h	/^  NodeLockRegionBegin()$/;"	f	class:mbtree
NodeLockRegionBegin	ownership_checker.h	/^  NodeLockRegionBegin()$/;"	f	class:ownership_checker
NodeStringify	btree_impl.h	/^btree<P>::NodeStringify(const node_opaque_t *n)$/;"	f	class:btree
NodeStringify	masstree_btree.h	/^std::string mbtree<P>::NodeStringify(const node_opaque_t *n)$/;"	f	class:mbtree
NonTaxableAccountName	benchmarks/egen/InputFlatFilesStructure.h	/^    TNonTaxableAccountNameFile  *NonTaxableAccountName;$/;"	m	class:TPCE::CInputFiles
NonUniformRandom	benchmarks/tpcc.cc	/^  NonUniformRandom(fast_random &r, int A, int C, int min, int max)$/;"	f	class:tpcc_worker_mixin
NonUniformRandom	benchmarks/tpce.cc	/^			NonUniformRandom(fast_random &r, int A, int C, int min, int max)$/;"	f	class:tpce_worker_mixin
NotFound	masstree/kvproto.hh	/^    NotFound = -2,$/;"	e	enum:result_t
NsPerSecond	benchmarks/egen/DateTime.h	/^const INT32     NsPerSecond             = 1000000000;$/;"	m	namespace:TPCE
NsPerSecondDivisor	benchmarks/egen/DateTime.h	/^const double    NsPerSecondDivisor      = 1000000000.0;$/;"	m	namespace:TPCE
NumCustomersPerDistrict	benchmarks/tpcc.cc	/^NumCustomersPerDistrict()$/;"	f	file:
NumDistrictsPerWarehouse	benchmarks/tpcc.cc	/^NumDistrictsPerWarehouse()$/;"	f	file:
NumId	persist_test.cc	/^  uint64_t NumId(uint64_t v)$/;"	f	struct:tidhelpers
NumIdMask	persist_test.cc	/^  static const uint64_t NumIdMask = ((((uint64_t)1) << NBitsNumber) - 1) << NumIdShift;$/;"	m	struct:tidhelpers	file:
NumIdShift	persist_test.cc	/^  static const uint64_t NumIdShift = CoreBits;$/;"	m	struct:tidhelpers	file:
NumItems	benchmarks/tpcc.cc	/^NumItems()$/;"	f	file:
NumOrderLinesPerCustomer	benchmarks/tpcc.cc	/^  NumOrderLinesPerCustomer()$/;"	f	class:tpcc_order_loader
NumOrderLinesPerCustomer	benchmarks/tpce.cc	/^			NumOrderLinesPerCustomer()$/;"	f	class:tpce_sector_loader
NumOrderLinesPerCustomer	benchmarks/tpce.cc	/^			NumOrderLinesPerCustomer()$/;"	f	class:tpce_status_type_loader
NumOrderLinesPerCustomer	benchmarks/tpce.cc	/^			NumOrderLinesPerCustomer()$/;"	f	class:tpce_tax_rate_loader
NumOrderLinesPerCustomer	benchmarks/tpce.cc	/^			NumOrderLinesPerCustomer()$/;"	f	class:tpce_trade_type_loader
NumPartitions	benchmarks/tpce.cc	/^static inline ALWAYS_INLINE size_t NumPartitions()$/;"	f	file:
NumWarehouses	benchmarks/tpcc.cc	/^NumWarehouses()$/;"	f	file:
Numerals	benchmarks/egen/MiscConsts.h	/^const char      Numerals[]          =   "0123456789";$/;"	m	namespace:TPCE
O	Makefile	/^	O := $(O).masstree$/;"	m
O	Makefile	/^	O := $(O).silotree$/;"	m
O	Makefile	/^	O := out-backoff$(OSUFFIX)$/;"	m
O	Makefile	/^	O := out-factor-fake-compression$(OSUFFIX)$/;"	m
O	Makefile	/^	O := out-factor-gc$(OSUFFIX)$/;"	m
O	Makefile	/^	O := out-factor-gc-nowriteinplace$(OSUFFIX)$/;"	m
O	Makefile	/^	O := out-perf$(OSUFFIX)$/;"	m
O	Makefile	/^	O := out-sandbox$(OSUFFIX)$/;"	m
OBJARRAY_FID	dbcore/sm-oid-impl.h	/^    static FID const OBJARRAY_FID = 0;$/;"	m	struct:sm_oid_mgr_impl
OBJFILES	Makefile	/^OBJFILES := $(patsubst %.cc, $(O)\/%.o, $(SRCFILES))$/;"	m
ODBC_LOAD	benchmarks/egen/EGenLoader.cpp	/^    ODBC_LOAD,$/;"	e	enum:eLoadImplementation	file:
OFFSETOF	dbcore/sm-defs.h	258;"	d
OFFSETOF	dbcore/sm-defs.h	260;"	d
OID	dbcore/sm-common.h	/^typedef uint32_t OID;$/;"	t
OID_EXT_SIZE	object.h	17;"	d
OLD_VERSION_THRESHOLD	txn_impl.h	/^static int64_t constexpr OLD_VERSION_THRESHOLD = 0xffffffffll;$/;"	v
ONE	dbcore/adler.cpp	/^static v8hi const ONE = {1,1,1,1,1,1,1,1};$/;"	v	file:
ONE_SECOND_NS	macros.h	118;"	d
OORDER_C_ID_IDX_KEY_FIELDS	benchmarks/tpcc.h	100;"	d
OORDER_C_ID_IDX_VALUE_FIELDS	benchmarks/tpcc.h	105;"	d
OORDER_KEY_FIELDS	benchmarks/tpcc.h	88;"	d
OORDER_VALUE_FIELDS	benchmarks/tpcc.h	92;"	d
OPEN_TABLESPACE_X	benchmarks/tpcc.cc	2601;"	d	file:
OPEN_TABLESPACE_X	benchmarks/tpcc.cc	2606;"	d	file:
OPEN_TABLESPACE_X	benchmarks/tpce.cc	2513;"	d	file:
OPEN_TABLESPACE_X	benchmarks/tpce.cc	2518;"	d	file:
OPTIMAL_ML	third-party/lz4/lz4hc.c	206;"	d	file:
OR	benchmarks/results/make_graphs-6.py	/^    def OR(*extractors):$/;"	f
ORDER_LINE_KEY_FIELDS	benchmarks/tpcc.h	109;"	d
ORDER_LINE_VALUE_FIELDS	benchmarks/tpcc.h	114;"	d
OS	third-party/lz4/Makefile	/^OS := $(shell uname)$/;"	m
OSUFFIX	Makefile	/^OSUFFIX=$(OSUFFIX_D)$(OSUFFIX_S)$(OSUFFIX_E)$/;"	m
OSUFFIX_D	Makefile	/^	OSUFFIX_D=.debug$/;"	m
OSUFFIX_E	Makefile	/^	OSUFFIX_E=.ectrs$/;"	m
OSUFFIX_S	Makefile	/^	OSUFFIX_S=.check$/;"	m
OVERRIDE	macros.h	112;"	d
OVERRIDE	macros.h	114;"	d
OWNER_DEAD	dbcore/rcu-slist.h	/^        OWNER_DEAD = 0x1$/;"	e	enum:_rcu_slist::owner_status
OWNER_LIVE	dbcore/rcu-slist.h	/^        OWNER_LIVE = 0x0,$/;"	e	enum:_rcu_slist::owner_status
ObjectItem	masstree/json.hh	/^    explicit ObjectItem(const String &key, const Json& value, int next)$/;"	f	struct:lcdf::Json::ObjectItem
ObjectItem	masstree/json.hh	/^struct Json::ObjectItem {$/;"	s	class:lcdf::Json
ObjectJson	masstree/json.cc	/^Json::ObjectJson::ObjectJson(const ObjectJson &x)$/;"	f	class:lcdf::Json::ObjectJson
ObjectJson	masstree/json.hh	/^    ObjectJson()$/;"	f	struct:lcdf::Json::ObjectJson
ObjectJson	masstree/json.hh	/^struct Json::ObjectJson : public ComplexJson {$/;"	s	class:lcdf::Json
Offset	benchmarks/egen/WheelTime.cpp	/^INT32 CWheelTime::Offset( const CWheelTime& Time )$/;"	f	class:CWheelTime
OpenTablesForTablespace	benchmarks/tpcc.cc	/^  OpenTablesForTablespace(abstract_db *db, const char *name, size_t expected_size)$/;"	f	class:tpcc_bench_runner	file:
OpenTablesForTablespace	benchmarks/tpce.cc	/^			OpenTablesForTablespace(abstract_db *db, const char *name, size_t expected_size)$/;"	f	class:tpce_bench_runner	file:
OutOfDate	masstree/kvproto.hh	/^    OutOfDate,$/;"	e	enum:result_t
Output	benchmarks/egen/EGenLoader.cpp	/^CGenerateAndLoadStandardOutput*		Output;$/;"	v
OutputComplete	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	/^    void OutputComplete(string szMsg)$/;"	f	class:TPCE::CGenerateAndLoadStandardOutput
OutputNewline	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	/^    void OutputNewline()$/;"	f	class:TPCE::CGenerateAndLoadStandardOutput
OutputProgress	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	/^    void OutputProgress(string szMsg)$/;"	f	class:TPCE::CGenerateAndLoadStandardOutput
OutputStart	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	/^    void OutputStart(string szMsg)$/;"	f	class:TPCE::CGenerateAndLoadStandardOutput
P	dbcore/test-sm-log-offset.cpp	23;"	d	file:
P	dbcore/test-sm-log-segments.cpp	19;"	d	file:
PACCOUNT_PERMISSION_ROW	benchmarks/egen/Table_Defs.h	/^} *PACCOUNT_PERMISSION_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::ACCOUNT_PERMISSION_ROW
PACKAGE_BUGREPORT	masstree/config.h	235;"	d
PACKAGE_NAME	masstree/config.h	238;"	d
PACKAGE_STRING	masstree/config.h	241;"	d
PACKAGE_TARNAME	masstree/config.h	244;"	d
PACKAGE_URL	masstree/config.h	247;"	d
PACKAGE_VERSION	masstree/config.h	250;"	d
PACKED	benchmarks/ndb_wrapper.h	/^  } PACKED;$/;"	m	namespace:private_	typeref:struct:private_::ndbtxn
PACKED	btree.h	/^  } PACKED;$/;"	m	class:btree	typeref:struct:btree::internal_node
PACKED	imstring.h	/^} PACKED;$/;"	v	typeref:class:base_imstring
PACKED	macros.h	48;"	d
PACKED	persist_test.cc	/^} PACKED;$/;"	v	typeref:struct:logbuf_header
PACKED	record/inline_str.h	/^} PACKED;$/;"	v	typeref:class:inline_str_16
PACKED	record/inline_str.h	/^} PACKED;$/;"	v	typeref:class:inline_str_8
PACKED	record/inline_str.h	/^} PACKED;$/;"	v	typeref:class:inline_str_base
PACKED	record/inline_str.h	/^} PACKED;$/;"	v	typeref:class:inline_str_fixed
PACKED	util.h	/^} PACKED;$/;"	v	typeref:class:unmanaged
PADDRESS_ROW	benchmarks/egen/Table_Defs.h	/^} *PADDRESS_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::ADDRESS_ROW
PAGE_SIZE	third-party/lz4/fuzzer.c	52;"	d	file:
PALMN	masstree/kvtest.hh	829;"	d
PALM_DEBUG	masstree/kvtest.hh	831;"	d
PAYLOAD_FMT	dbcore/test-sm-log.cpp	25;"	d	file:
PAccountNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PAccountNameInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TAccountNameInputRow
PAdditionalTradeInfo	benchmarks/egen/TradeGen.h	/^} *PAdditionalTradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TAdditionalTradeInfo
PAreaCodeInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PAreaCodeInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TAreaCodeInputRow
PAreaCodesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PAreaCodesLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TAreaCodesLimits
PBROKER_ROW	benchmarks/egen/Table_Defs.h	/^} *PBROKER_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::BROKER_ROW
PBaseElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PBaseElementsLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBaseElementsLimits
PBaseInputRow	benchmarks/egen/Table_Defs.h	/^} *PBaseInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBaseInputRow
PBaseKeyElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PBaseKeyElementsLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBaseKeyElementsLimits
PBrokerVolumeFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^    *PBrokerVolumeFrame1Input;  \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBrokerVolumeTxnInput
PBrokerVolumeFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^}   *PBrokerVolumeFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBrokerVolumeFrame1Output
PBrokerVolumeSettings	benchmarks/egen/DriverParamSettings.h	/^} *PBrokerVolumeSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBrokerVolumeSettings
PBrokerVolumeTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PBrokerVolumeTxnInput,$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBrokerVolumeTxnInput
PBrokerVolumeTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PBrokerVolumeTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBrokerVolumeTxnOutput
PCASH_TRANSACTION_ROW	benchmarks/egen/Table_Defs.h	/^} *PCASH_TRANSACTION_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CASH_TRANSACTION_ROW
PCHARGE_ROW	benchmarks/egen/Table_Defs.h	/^} *PCHARGE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CHARGE_ROW
PCOMMISSION_RATE_ROW	benchmarks/egen/Table_Defs.h	/^} *PCOMMISSION_RATE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::COMMISSION_RATE_ROW
PCOMPANY_COMPETITOR_ROW	benchmarks/egen/Table_Defs.h	/^} *PCOMPANY_COMPETITOR_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::COMPANY_COMPETITOR_ROW
PCOMPANY_ROW	benchmarks/egen/Table_Defs.h	/^} *PCOMPANY_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::COMPANY_ROW
PCUSTOMER_ACCOUNT_AND_PERMISSION_ROW	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^} *PCUSTOMER_ACCOUNT_AND_PERMISSION_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CUSTOMER_ACCOUNT_AND_PERMISSION_ROW
PCUSTOMER_ACCOUNT_ROW	benchmarks/egen/Table_Defs.h	/^} *PCUSTOMER_ACCOUNT_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CUSTOMER_ACCOUNT_ROW
PCUSTOMER_ROW	benchmarks/egen/Table_Defs.h	/^} *PCUSTOMER_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CUSTOMER_ROW
PCUSTOMER_TAXRATE_ROW	benchmarks/egen/Table_Defs.h	/^} *PCUSTOMER_TAXRATE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CUSTOMER_TAXRATE_ROW
PCUSTOMER_TAXRATE_ROWS	benchmarks/egen/CustomerTaxratesTable.h	/^} *PCUSTOMER_TAXRATE_ROWS;$/;"	t	namespace:TPCE	typeref:struct:TPCE::CUSTOMER_TAXRATE_ROWS
PChargeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PChargeLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TChargeLimits
PCommissionRateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCommissionRateLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCommissionRateLimits
PCompanyCompetitorInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCompanyCompetitorInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCompanyCompetitorInputRow
PCompanyCompetitorLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCompanyCompetitorLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCompanyCompetitorLimits
PCompanyInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCompanyInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCompanyInputRow
PCompanyLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCompanyLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCompanyLimits
PCompanySPRateInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCompanySPRateInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCompanySPRateInputRow
PCompanySPRateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PCompanySPRateLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCompanySPRateLimits
PCustomerPositionFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PCustomerPositionFrame1Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionFrame1Input
PCustomerPositionFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PCustomerPositionFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionFrame1Output
PCustomerPositionFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PCustomerPositionFrame2Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionFrame2Input
PCustomerPositionFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PCustomerPositionFrame2Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionFrame2Output
PCustomerPositionSettings	benchmarks/egen/DriverParamSettings.h	/^} *PCustomerPositionSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionSettings
PCustomerPositionTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^} *PCustomerPositionTxnInput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionTxnInput
PCustomerPositionTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^} *PCustomerPositionTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TCustomerPositionTxnOutput
PDAILY_MARKET_GEN_ROW	benchmarks/egen/DailyMarketTable.h	/^} *PDAILY_MARKET_GEN_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::DAILY_MARKET_GEN_ROW
PDAILY_MARKET_ROW	benchmarks/egen/Table_Defs.h	/^} *PDAILY_MARKET_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::DAILY_MARKET_ROW
PDF2PS	masstree/doc/GNUmakefile	/^PDF2PS := $(shell (which acroread >\/dev\/null 2>&1 && echo acroread -toPostScript) || echo pdf2ps)$/;"	m
PDFLATEX	masstree/doc/GNUmakefile	/^PDFLATEX = pdflatex$/;"	m
PDailyHistory	benchmarks/egen/TxnHarnessStructs.h	/^} *PDailyHistory;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDailyHistory
PData	benchmarks/egen/FixedArray.h	/^    typedef TData*  PData;      \/\/pointer to a data element$/;"	t	class:TPCE::CFixedArray
PData	benchmarks/egen/FixedMap.h	/^    typedef TData*  PData;      \/\/pointer to a data element$/;"	t	class:TPCE::CFixedMap
PDataMaintenanceFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^    *PDataMaintenanceFrame1Input;   \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDataMaintenanceTxnInput
PDataMaintenanceTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PDataMaintenanceTxnInput,$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDataMaintenanceTxnInput
PDataMaintenanceTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PDataMaintenanceTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDataMaintenanceTxnOutput
PDriverCEPartitionSettings	benchmarks/egen/DriverParamSettings.h	/^} *PDriverCEPartitionSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDriverCEPartitionSettings
PDriverCESettings	benchmarks/egen/DriverParamSettings.h	/^} *PDriverCESettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDriverCESettings
PDriverCETxnSettings	benchmarks/egen/DriverParamSettings.h	/^} *PDriverCETxnSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDriverCETxnSettings
PDriverDMSettings	benchmarks/egen/DriverParamSettings.h	/^} *PDriverDMSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDriverDMSettings
PDriverGlobalSettings	benchmarks/egen/DriverParamSettings.h	/^} *PDriverGlobalSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDriverGlobalSettings
PDriverMEESettings	benchmarks/egen/DriverParamSettings.h	/^} *PDriverMEESettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDriverMEESettings
PERF_DECL	scopedperf.hh	768;"	d
PERF_EXPR	scopedperf.hh	767;"	d
PERF_REGION	scopedperf.hh	759;"	d
PERF_STAT_HH	masstree/perfstat.hh	17;"	d
PERSIST_NONE	benchmarks/results/make_graphs-6.py	/^PERSIST_NONE='persist-none'$/;"	v
PERSIST_NONE	benchmarks/runner.py	/^PERSIST_NONE='persist-none'$/;"	v
PERSIST_REAL	benchmarks/results/make_graphs-6.py	/^PERSIST_REAL='persist-real'$/;"	v
PERSIST_REAL	benchmarks/runner.py	/^PERSIST_REAL='persist-real'$/;"	v
PERSIST_TEMP	benchmarks/results/make_graphs-6.py	/^PERSIST_TEMP='persist-temp'$/;"	v
PERSIST_TEMP	benchmarks/runner.py	/^PERSIST_TEMP='persist-temp'$/;"	v
PERSON_H	benchmarks/egen/Person.h	41;"	d
PEXCHANGE_ROW	benchmarks/egen/Table_Defs.h	/^} *PEXCHANGE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::EXCHANGE_ROW
PExchangeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PExchangeLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TExchangeLimits
PFINANCIAL_GEN_ROW	benchmarks/egen/FinancialTable.h	/^} *PFINANCIAL_GEN_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::FINANCIAL_GEN_ROW
PFINANCIAL_ROW	benchmarks/egen/Table_Defs.h	/^} *PFINANCIAL_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::FINANCIAL_ROW
PFemaleFirstNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PFemaleFirstNamesLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TFemaleFirstNamesLimits
PFinInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PFinInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TFinInfo
PFirstNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PFirstNameInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TFirstNameInputRow
PHOLDING_HISTORY_ROW	benchmarks/egen/Table_Defs.h	/^} *PHOLDING_HISTORY_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::HOLDING_HISTORY_ROW
PHOLDING_ROW	benchmarks/egen/Table_Defs.h	/^} *PHOLDING_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::HOLDING_ROW
PHOLDING_SUMMARY_ROW	benchmarks/egen/Table_Defs.h	/^} *PHOLDING_SUMMARY_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::HOLDING_SUMMARY_ROW
PHoldingInfo	benchmarks/egen/TradeGen.h	/^} *PHoldingInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::THoldingInfo
PINDUSTRY_ROW	benchmarks/egen/Table_Defs.h	/^} *PINDUSTRY_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::INDUSTRY_ROW
PINT16	benchmarks/egen/EGenStandardTypes.h	/^typedef int16_t         INT16, *PINT16;$/;"	t
PINT32	benchmarks/egen/EGenStandardTypes.h	/^typedef int32_t         INT32, *PINT32;$/;"	t
PINT64	benchmarks/egen/EGenStandardTypes.h	/^typedef long long 		INT64, *PINT64;$/;"	t
PINT8	benchmarks/egen/EGenStandardTypes.h	/^typedef int8_t          INT8, *PINT8;$/;"	t
PIndustryLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PIndustryLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TIndustryLimits
PLAST_TRADE_ROW	benchmarks/egen/Table_Defs.h	/^} *PLAST_TRADE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::LAST_TRADE_ROW
PLastNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PLastNameInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TLastNameInputRow
PLastNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PLastNamesLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TLastNamesLimits
PMaleFirstNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PMaleFirstNamesLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMaleFirstNamesLimits
PMarketFeedFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketFeedFrame1Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketFeedFrame1Input
PMarketFeedFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketFeedFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketFeedFrame1Output
PMarketFeedTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketFeedTxnInput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketFeedTxnInput
PMarketFeedTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketFeedTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketFeedTxnOutput
PMarketWatchFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^    *PMarketWatchFrame1Input;   \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketWatchTxnInput
PMarketWatchFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketWatchFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketWatchFrame1Output
PMarketWatchSettings	benchmarks/egen/DriverParamSettings.h	/^} *PMarketWatchSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketWatchSettings
PMarketWatchTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketWatchTxnInput,$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketWatchTxnInput
PMarketWatchTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PMarketWatchTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketWatchTxnOutput
PNEWS_ITEM_AND_XREF_ROW	benchmarks/egen/NewsItemAndXRefTable.h	/^} *PNEWS_ITEM_AND_XREF_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::NEWS_ITEM_AND_XREF_ROW
PNEWS_ITEM_ROW	benchmarks/egen/Table_Defs.h	/^} *PNEWS_ITEM_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::NEWS_ITEM_ROW
PNEWS_XREF_ROW	benchmarks/egen/Table_Defs.h	/^} *PNEWS_XREF_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::NEWS_XREF_ROW
PNews	benchmarks/egen/TxnHarnessStructs.h	/^} *PNews;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TNews
PNewsInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PNewsInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TNewsInputRow
PNewsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PNewsLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TNewsLimits
PNonTaxableAccountNameLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PNonTaxableAccountNameLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TNonTaxableAccountNameLimits
PREFER_X86	masstree/compiler.hh	59;"	d
PREFETCH_DEFINED	prefetch.h	17;"	d
PRIKVTSPARTS	masstree/timestamp.hh	28;"	d
PRIME1	third-party/lz4/fuzzer.c	54;"	d	file:
PRIME2	third-party/lz4/fuzzer.c	55;"	d	file:
PRIME3	third-party/lz4/fuzzer.c	56;"	d	file:
PRIME32_1	third-party/lz4/xxhash.c	178;"	d	file:
PRIME32_2	third-party/lz4/xxhash.c	179;"	d	file:
PRIME32_3	third-party/lz4/xxhash.c	180;"	d	file:
PRIME32_4	third-party/lz4/xxhash.c	181;"	d	file:
PRIME32_5	third-party/lz4/xxhash.c	182;"	d	file:
PRId64	benchmarks/egen/EGenStandardTypes.h	100;"	d
PRId64	benchmarks/egen/EGenStandardTypes.h	143;"	d
PRId64	benchmarks/egen/EGenStandardTypes.h	144;"	d
PRIdOFF_T	masstree/compiler.hh	40;"	d
PRIdOFF_T	masstree/compiler.hh	42;"	d
PRIdSIZE_T	masstree/compiler.hh	46;"	d
PRIdSIZE_T	masstree/compiler.hh	49;"	d
PRIdSIZE_T	masstree/compiler.hh	52;"	d
PRIdSSIZE_T	masstree/compiler.hh	47;"	d
PRIdSSIZE_T	masstree/compiler.hh	50;"	d
PRIdSSIZE_T	masstree/compiler.hh	53;"	d
PRIuKVTS	masstree/timestamp.hh	24;"	d
PRIuKVTS	masstree/timestamp.hh	26;"	d
PROGRESSMETERINTERFACE_H_INCLUDED	benchmarks/egen/progressmeterinterface.h	38;"	d
PROGRESSMETER_H_INCLUDED	benchmarks/egen/progressmeter.h	42;"	d
PROTO2_CAN_DISABLE_GC	config/config-factor-gc-nowriteinplace.h	3;"	d
PROTO2_CAN_DISABLE_GC	config/config-factor-gc.h	3;"	d
PROTO2_CAN_DISABLE_SNAPSHOTS	config/config-factor-gc-nowriteinplace.h	4;"	d
PROTO2_CAN_DISABLE_SNAPSHOTS	config/config-factor-gc.h	4;"	d
PS2PDF	masstree/doc/GNUmakefile	/^PS2PDF := ps2pdf$/;"	m
PS2PDF_LETTER	masstree/doc/GNUmakefile	/^PS2PDF_LETTER := GS_OPTIONS=-sPAPERSIZE=letter $(PS2PDF) -sPAPERSIZE=letter$/;"	m
PSECTOR_ROW	benchmarks/egen/Table_Defs.h	/^} *PSECTOR_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::SECTOR_ROW
PSECURITY_ROW	benchmarks/egen/Table_Defs.h	/^}   *PSECURITY_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::SECURITY_ROW
PSETTLEMENT_ROW	benchmarks/egen/Table_Defs.h	/^} *PSETTLEMENT_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::SETTLEMENT_ROW
PSTATUS_TYPE_ROW	benchmarks/egen/Table_Defs.h	/^} *PSTATUS_TYPE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::STATUS_TYPE_ROW
PSectorLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PSectorLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSectorLimits
PSecuritiesInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PSecuritiesInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityInputRow
PSecurityDetailFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^    *PSecurityDetailFrame1Input;    \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityDetailTxnInput
PSecurityDetailFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^}   *PSecurityDetailFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityDetailFrame1Output
PSecurityDetailSettings	benchmarks/egen/DriverParamSettings.h	/^} *PSecurityDetailSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityDetailSettings
PSecurityDetailTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PSecurityDetailTxnInput,$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityDetailTxnInput
PSecurityDetailTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PSecurityDetailTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityDetailTxnOutput
PSecurityLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PSecurityLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityLimits
PStatusTypeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PStatusTypeLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TStatusTypeLimits
PStreetNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PStreetNameInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TStreetNameInputRow
PStreetNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PStreetNamesLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TStreetNamesLimits
PStreetSuffixInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PStreetSuffixInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TStreetSuffixInputRow
PStreetSuffixLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PStreetSuffixLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TStreetSuffixLimits
PT	benchmarks/egen/BaseLoader.h	/^    typedef const T*    PT;     \/\/pointer to the table row$/;"	t	class:TPCE::CBaseLoader
PT	benchmarks/egen/NullLoader.h	/^    typedef const T*    PT;     \/\/pointer to the table row$/;"	t	class:TPCE::CNullLoader
PTAXRATE_ROW	benchmarks/egen/Table_Defs.h	/^} *PTAXRATE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TAXRATE_ROW
PTRADE_HISTORY_ROW	benchmarks/egen/Table_Defs.h	/^} *PTRADE_HISTORY_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TRADE_HISTORY_ROW
PTRADE_REQUEST_ROW	benchmarks/egen/Table_Defs.h	/^} *PTRADE_REQUEST_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TRADE_REQUEST_ROW
PTRADE_ROW	benchmarks/egen/Table_Defs.h	/^} *PTRADE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TRADE_ROW
PTRADE_TYPE_ROW	benchmarks/egen/Table_Defs.h	/^} *PTRADE_TYPE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TRADE_TYPE_ROW
PTStatusAndTradeType	benchmarks/egen/TxnHarnessStructs.h	/^} *PTStatusAndTradeType;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TStatusAndTradeType
PTaxRateInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PTaxRateInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTaxRateInputRow
PTaxableAccountNameLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PTaxableAccountNameLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTaxableAccountNameLimits
PTaxrateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PTaxrateLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTaxrateLimits
PTickerEntry	benchmarks/egen/TxnHarnessStructs.h	/^} *PTickerEntry;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTickerEntry
PTradeCleanupFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^    *PTradeCleanupFrame1Input;  \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeCleanupTxnInput
PTradeCleanupTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PTradeCleanupTxnInput,$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeCleanupTxnInput
PTradeCleanupTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PTradeCleanupTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeCleanupTxnOutput
PTradeInfo	benchmarks/egen/TradeGen.h	/^} *PTradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeInfo
PTradeLookupFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame1Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame1Input
PTradeLookupFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame1Output
PTradeLookupFrame1TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame1TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame1TradeInfo
PTradeLookupFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame2Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame2Input
PTradeLookupFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame2Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame2Output
PTradeLookupFrame2TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame2TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame2TradeInfo
PTradeLookupFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame3Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame3Input
PTradeLookupFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame3Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame3Output
PTradeLookupFrame3TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame3TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame3TradeInfo
PTradeLookupFrame4Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame4Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame4Input
PTradeLookupFrame4Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame4Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame4Output
PTradeLookupFrame4TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupFrame4TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupFrame4TradeInfo
PTradeLookupSettings	benchmarks/egen/DriverParamSettings.h	/^} *PTradeLookupSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupSettings
PTradeLookupTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupTxnInput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupTxnInput
PTradeLookupTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeLookupTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeLookupTxnOutput
PTradeOrderFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame1Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame1Input
PTradeOrderFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame1Output
PTradeOrderFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame2Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame2Input
PTradeOrderFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame2Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame2Output
PTradeOrderFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame3Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame3Input
PTradeOrderFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame3Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame3Output
PTradeOrderFrame4Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame4Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame4Input
PTradeOrderFrame4Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderFrame4Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderFrame4Output
PTradeOrderSettings	benchmarks/egen/DriverParamSettings.h	/^} *PTradeOrderSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderSettings
PTradeOrderTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderTxnInput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderTxnInput
PTradeOrderTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeOrderTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeOrderTxnOutput
PTradeRequest	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeRequest;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeRequest
PTradeResultFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame1Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame1Input
PTradeResultFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame1Output
PTradeResultFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame2Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame2Input
PTradeResultFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame2Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame2Output
PTradeResultFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame3Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame3Input
PTradeResultFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame3Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame3Output
PTradeResultFrame4Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame4Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame4Input
PTradeResultFrame4Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame4Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame4Output
PTradeResultFrame5Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame5Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame5Input
PTradeResultFrame6Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame6Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame6Input
PTradeResultFrame6Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultFrame6Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultFrame6Output
PTradeResultTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultTxnInput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultTxnInput
PTradeResultTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeResultTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeResultTxnOutput
PTradeRow	benchmarks/egen/TradeGen.h	/^} *PTradeRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeRow
PTradeStatusFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^    *PTradeStatusFrame1Input;   \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeStatusTxnInput
PTradeStatusFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^}   *PTradeStatusFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeStatusFrame1Output
PTradeStatusTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PTradeStatusTxnInput,$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeStatusTxnInput
PTradeStatusTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^}   *PTradeStatusTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeStatusTxnOutput
PTradeTypeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PTradeTypeLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeTypeLimits
PTradeUpdateFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame1Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame1Input
PTradeUpdateFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame1Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame1Output
PTradeUpdateFrame1TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame1TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame1TradeInfo
PTradeUpdateFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame2Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame2Input
PTradeUpdateFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame2Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame2Output
PTradeUpdateFrame2TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame2TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame2TradeInfo
PTradeUpdateFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame3Input;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame3Input
PTradeUpdateFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame3Output;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame3Output
PTradeUpdateFrame3TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateFrame3TradeInfo;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateFrame3TradeInfo
PTradeUpdateSettings	benchmarks/egen/DriverParamSettings.h	/^} *PTradeUpdateSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateSettings
PTradeUpdateTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateTxnInput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateTxnInput
PTradeUpdateTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^} *PTradeUpdateTxnOutput;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeUpdateTxnOutput
PTxnMixGeneratorSettings	benchmarks/egen/DriverParamSettings.h	/^} *PTxnMixGeneratorSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTxnMixGeneratorSettings
PUINT16	benchmarks/egen/EGenStandardTypes.h	/^typedef uint16_t        UINT16, *PUINT16;$/;"	t
PUINT32	benchmarks/egen/EGenStandardTypes.h	/^typedef uint32_t        UINT32, *PUINT32;$/;"	t
PUINT64	benchmarks/egen/EGenStandardTypes.h	/^typedef unsigned long long UINT64, *PUINT64;$/;"	t
PUINT8	benchmarks/egen/EGenStandardTypes.h	/^typedef uint8_t         UINT8,  *PUINT8;$/;"	t
PVectorT	benchmarks/egen/InputFileNoWeight.h	/^    typedef vector<T>*  PVectorT;$/;"	t	class:TPCE::CInputFileNoWeight
PWATCH_ITEM_ROW	benchmarks/egen/Table_Defs.h	/^} *PWATCH_ITEM_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::WATCH_ITEM_ROW
PWATCH_LIST_AND_ITEM_ROW	benchmarks/egen/WatchListsAndItemsTable.h	/^} *PWATCH_LIST_AND_ITEM_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::WATCH_LIST_AND_ITEM_ROW
PWATCH_LIST_ROW	benchmarks/egen/Table_Defs.h	/^} *PWATCH_LIST_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::WATCH_LIST_ROW
PWheelConfig	benchmarks/egen/Wheel.h	/^} *PWheelConfig;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TWheelConfig
PZIP_CODE_ROW	benchmarks/egen/Table_Defs.h	/^} *PZIP_CODE_ROW;$/;"	t	namespace:TPCE	typeref:struct:TPCE::ZIP_CODE_ROW
PZipCodeInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PZipCodeInputRow;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TZipCodeInputRow
PZipCodeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^} *PZipCodeLimits;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TZipCodeLimits
PalmBatch	masstree/kvtest.hh	/^enum { PalmBatch = 8192 \/ 24 };$/;"	e	enum:__anon25
Parent validity	masstree/doc/spec.tex	/^of \\V{parent} pointers.$/;"	P
ParseCSVString	util.h	/^ParseCSVString(const std::string &s, Parser p = Parser())$/;"	f	namespace:util
ParseCommandLine	benchmarks/egen/EGenLoader.cpp	/^void ParseCommandLine( int argc, char *args[] )$/;"	f
ParseSuffix	benchmarks/egen/SecurityFile.h	/^    INT64 ParseSuffix( const char* pSymbol )$/;"	f	class:TPCE::CSecurityFile
PartitionId	benchmarks/tpcc.cc	/^PartitionId(unsigned int wid)$/;"	f	file:
PendingTime	benchmarks/egen/TradeGen.h	/^    double          PendingTime;    \/\/ seconds from StartTime; only for limit orders$/;"	m	struct:TPCE::TTradeInfo
Perf	masstree/perfstat.cc	/^namespace Perf {$/;"	n	file:
Perf	masstree/perfstat.hh	/^namespace Perf {$/;"	n
PermissionsPerCustomer	benchmarks/egen/EGenGenerateAndLoad.cpp	/^int CGenerateAndLoad::PermissionsPerCustomer()$/;"	f	class:CGenerateAndLoad
Permute	benchmarks/egen/CustomerSelection.cpp	/^TIdent CCustomerSelection::Permute(TIdent iLow, TIdent iHigh)$/;"	f	class:CCustomerSelection
PhaseRuntimes	benchmarks/masstree/kvtest.cc	/^  static const unsigned long PhaseRuntimes[NPhases];$/;"	m	struct:kvtest_rw1	file:
PhaseRuntimes	benchmarks/masstree/kvtest.cc	/^const unsigned long kvtest_rw1::PhaseRuntimes[NPhases] = { 10, 10 }; \/\/ seconds$/;"	m	class:kvtest_rw1	file:
PinToPartition	benchmarks/tpce.cc	/^			PinToPartition(unsigned int pid)$/;"	f	class:tpce_worker_mixin
PinToWarehouseId	benchmarks/tpcc.cc	/^  PinToWarehouseId(unsigned int wid)$/;"	f	class:tpcc_worker_mixin
PositionAtHoldingList	benchmarks/egen/TradeGen.cpp	/^list<THoldingInfo>::iterator CTradeGen::PositionAtHoldingList($/;"	f	class:CTradeGen
PostLimitOrder	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::PostLimitOrder( PTradeRequest pTradeRequest )$/;"	f	class:CMEETickerTape
Power26	benchmarks/egen/SecurityFile.h	/^static const UINT  Power26[] = { 1, 26, 676, 17576, 456976, 11881376, 308915776 };$/;"	m	namespace:TPCE
Power26Sum	benchmarks/egen/SecurityFile.h	/^static const UINT64  Power26Sum[] = { 0, 1, 27, 703, 18279, 475255, 12356631, 321272407, UINT64_CONST(8353082583) };$/;"	m	namespace:TPCE
PreAllocBufSize	str_arena.h	/^  static const size_t PreAllocBufSize = 32678;$/;"	m	class:str_arena
PrefixDecode	record/encoder.h	/^PrefixDecode(const char *buf, T &obj, size_t prefix)$/;"	f
PrefixDecode	record/encoder.h	/^PrefixDecode(const std::string &buf, T &obj, size_t prefix)$/;"	f
PrintEGenVersion	benchmarks/egen/EGenVersion.cpp	/^void PrintEGenVersion()$/;"	f	namespace:TPCE
PrintEGenVersion_C	benchmarks/egen/EGenVersion.cpp	/^void PrintEGenVersion_C()$/;"	f
ProcessExpiredTimers	benchmarks/egen/TimerWheel.h	/^INT32 CTimerWheel< T,  T2, Period, Resolution >::ProcessExpiredTimers( void )$/;"	f	class:TPCE::CTimerWheel
ProcessTimerList	benchmarks/egen/TimerWheel.h	/^void CTimerWheel< T,  T2, Period, Resolution >::ProcessTimerList( list< CTimerWheelTimer<T,T2>* >* pList )$/;"	f	class:TPCE::CTimerWheel
ProgressMeter	benchmarks/egen/progressmeter.cpp	/^ProgressMeter::ProgressMeter(int total_in, int verbosity, std::ostream* output)$/;"	f	class:TPCE::ProgressMeter
ProgressMeter	benchmarks/egen/progressmeter.h	/^class ProgressMeter : public ProgressMeterInterface$/;"	c	namespace:TPCE
ProgressMeterInterface	benchmarks/egen/progressmeterinterface.h	/^class ProgressMeterInterface$/;"	c	namespace:TPCE
QUERY_MASSTREE_HH	masstree/query_masstree.hh	17;"	d
R	dbcore/w_rand.h	/^    static size_t const R = 16;$/;"	m	struct:w_rand
R128	scopedperf.hh	179;"	d
R128	scopedperf.hh	187;"	d
R16	scopedperf.hh	176;"	d
R16	scopedperf.hh	184;"	d
R2	scopedperf.hh	173;"	d
R2	scopedperf.hh	181;"	d
R32	scopedperf.hh	177;"	d
R32	scopedperf.hh	185;"	d
R4	scopedperf.hh	174;"	d
R4	scopedperf.hh	182;"	d
R64	scopedperf.hh	178;"	d
R64	scopedperf.hh	186;"	d
R8	scopedperf.hh	175;"	d
R8	scopedperf.hh	183;"	d
RA	dbcore/sm-alloc.cpp	/^namespace RA {$/;"	n	file:
RA	dbcore/sm-alloc.h	/^namespace RA {$/;"	n
RANDOM_H	benchmarks/egen/Random.h	38;"	d
RANDOM_TRADE_QTY_1	benchmarks/egen/MEETickerTape.cpp	/^const int CMEETickerTape::RANDOM_TRADE_QTY_1 = 325;$/;"	m	class:CMEETickerTape	file:
RANDOM_TRADE_QTY_1	benchmarks/egen/MEETickerTape.h	/^    static const int    RANDOM_TRADE_QTY_1;$/;"	m	class:TPCE::CMEETickerTape
RANDOM_TRADE_QTY_2	benchmarks/egen/MEETickerTape.cpp	/^const int CMEETickerTape::RANDOM_TRADE_QTY_2 = 425;$/;"	m	class:CMEETickerTape	file:
RANDOM_TRADE_QTY_2	benchmarks/egen/MEETickerTape.h	/^    static const int    RANDOM_TRADE_QTY_2;$/;"	m	class:TPCE::CMEETickerTape
RCU	dbcore/rcu.cpp	/^namespace RCU {$/;"	n	file:
RCU	dbcore/rcu.h	/^namespace RCU {$/;"	n
RCU	rcu-wrapper.h	/^namespace RCU {$/;"	n
RCU_LOG	dbcore/rcu.cpp	25;"	d	file:
RCU_READ	dbcore/rcu.h	311;"	d
RCU_READ	dbcore/rcu.h	313;"	d
RCU_THREAD_GC_THRESHOLD_NBYTES	dbcore/rcu.cpp	/^static size_t const RCU_THREAD_GC_THRESHOLD_NBYTES = 10*1024*1024;$/;"	m	namespace:RCU	file:
RCU_THREAD_GC_THRESHOLD_NOBJ	dbcore/rcu.cpp	/^static size_t const RCU_THREAD_GC_THRESHOLD_NOBJ = 1000;$/;"	m	namespace:RCU	file:
RCU_UNWIND	dbcore/rcu.h	11;"	d
READ_EMPTY	tuple.h	/^    READ_EMPTY,$/;"	e	enum:dbtuple::ReadStatus
READ_FAILED	tuple.h	/^    READ_FAILED,$/;"	e	enum:dbtuple::ReadStatus
READ_RECORD	tuple.h	/^    READ_RECORD,$/;"	e	enum:dbtuple::ReadStatus
REC_CKP	masstree/log.hh	/^enum { REC_NONE, REC_CKP, REC_LOG_TS, REC_LOG_ANALYZE_WAKE,$/;"	e	enum:__anon81
REC_DONE	masstree/log.hh	/^       REC_LOG_REPLAY, REC_DONE };$/;"	e	enum:__anon81
REC_LOG_ANALYZE_WAKE	masstree/log.hh	/^enum { REC_NONE, REC_CKP, REC_LOG_TS, REC_LOG_ANALYZE_WAKE,$/;"	e	enum:__anon81
REC_LOG_REPLAY	masstree/log.hh	/^       REC_LOG_REPLAY, REC_DONE };$/;"	e	enum:__anon81
REC_LOG_TS	masstree/log.hh	/^enum { REC_NONE, REC_CKP, REC_LOG_TS, REC_LOG_ANALYZE_WAKE,$/;"	e	enum:__anon81
REC_NONE	masstree/log.hh	/^enum { REC_NONE, REC_CKP, REC_LOG_TS, REC_LOG_ANALYZE_WAKE,$/;"	e	enum:__anon81
REPEAT_OPTIMIZATION	third-party/lz4/lz4hc.c	438;"	d	file:
RERUN	masstree/doc/GNUmakefile	/^RERUN = egrep -q '(^LaTeX Warning:|\\(natbib\\)).* Rerun'$/;"	m
RERUNLATEX	masstree/doc/GNUmakefile	/^RERUNLATEX = if test ! -f $(2).bbl || $(RERUN) $(2).log || $(UNDEFINED) $(2).log; then \\$/;"	m
RESULTS	benchmarks/results/ben-3-8-13.py	/^RESULTS = [({'scale_factor': 80, 'threads': 80, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (232976.0, 3.76111)), ({'scale_factor': 72, 'threads': 72, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (254892.0, 3.73888)), ({'scale_factor': 64, 'threads': 64, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (242310.0, 3.46666)), ({'scale_factor': 56, 'threads': 56, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (237052.0, 3.57222)), ({'scale_factor': 48, 'threads': 48, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (230557.0, 3.74444)), ({'scale_factor': 40, 'threads': 40, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (234613.0, 3.87222)), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (224310.0, 3.7)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (190809.0, 2.90555)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (142130.0, 2.01667)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (76759.6, 1.21667)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (38735.2, 0.533333)), ({'scale_factor': 2, 'threads': 2, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (20094.2, 0.305555)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (10286.7, 0.0))]$/;"	v
RESULTS	benchmarks/results/ben-4-10-13.py	/^RESULTS = [({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '2G', 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(35595.2, 0.0), (35134.1, 0.0), (35668.9, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 10, 'name': 'scale_tpcc', 'numa_memory': '20G', 'threads': 10, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(293841.0, 12.4664), (294454.0, 11.8998), (295441.0, 13.7664)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '40G', 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(573735.0, 26.2659), (571127.0, 24.2994), (572429.0, 25.0326)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 30, 'name': 'scale_tpcc', 'numa_memory': '60G', 'threads': 30, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(842923.0, 37.6319), (841078.0, 37.3323), (848000.0, 39.3986)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 40, 'name': 'scale_tpcc', 'numa_memory': '80G', 'threads': 40, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(1117960.0, 47.8294), (1117570.0, 49.1965), (1117690.0, 47.7618)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 50, 'name': 'scale_tpcc', 'numa_memory': '100G', 'threads': 50, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(1377360.0, 63.2581), (1375480.0, 60.6967), (1380110.0, 58.1962)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 60, 'name': 'scale_tpcc', 'numa_memory': '120G', 'threads': 60, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(1606770.0, 68.7615), (1625400.0, 68.9893), (1578890.0, 65.9616)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 70, 'name': 'scale_tpcc', 'numa_memory': '140G', 'threads': 70, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(1788150.0, 74.5197), (1770310.0, 75.1934), (1779690.0, 73.7555)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 80, 'name': 'scale_tpcc', 'numa_memory': '160G', 'threads': 80, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(1743840.0, 69.416), (1838940.0, 76.984), (1749190.0, 71.3892)]),({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 75, 'name': 'scale_tpcc', 'numa_memory': '150G', 'threads': 75, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(1823040.0, 75.6186), (1826750.0, 77.4802), (1821720.0, 74.7569)])]$/;"	v
RESULTS	benchmarks/results/istc11-3-13-13.py	/^RESULTS = [({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (446207.0, 0.0)), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (238640.0, 3.41666)), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (382193.0, 0.0)), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (256238.0, 3.48332)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (341648.0, 0.0)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (225791.0, 3.16666)), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (299640.0, 0.0)), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (194373.0, 2.46666)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (243529.0, 0.0)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (159408.0, 2.16666)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (185722.0, 0.0)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (121866.0, 1.94999)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (135299.0, 0.0)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (85131.2, 0.966664)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (73284.6, 0.0)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (42715.4, 0.683332)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (23663.7, 0.0)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (11229.9, 0.0))]$/;"	v
RESULTS	benchmarks/results/istc11-3-14-13.py	/^RESULTS = [({'scale_factor': 1000, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (559456.0, 0.0)), ({'scale_factor': 1000, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (208605.0, 0.0)), ({'scale_factor': 4000, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (1772190.0, 0.0)), ({'scale_factor': 4000, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (869710.0, 0.0)), ({'scale_factor': 8000, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (3070970.0, 0.0)), ({'scale_factor': 8000, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (1703070.0, 0.0)), ({'scale_factor': 12000, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (3899520.0, 0.0)), ({'scale_factor': 12000, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (2412830.0, 0.0)), ({'scale_factor': 16000, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4281320.0, 0.0)), ({'scale_factor': 16000, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (2834350.0, 0.0)), ({'scale_factor': 20000, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4407900.0, 0.0)), ({'scale_factor': 20000, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3180140.0, 0.0)), ({'scale_factor': 24000, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4469700.0, 0.0)), ({'scale_factor': 24000, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3413230.0, 0.0)), ({'scale_factor': 28000, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4511650.0, 0.0)), ({'scale_factor': 28000, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (4222430.0, 0.0)), ({'scale_factor': 32000, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4969290.0, 0.0)), ({'scale_factor': 32000, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3812400.0, 0.0166666)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (28786.0, 0.0)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (11423.1, 0.0)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (101236.0, 0.0)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (43745.5, 0.583332)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (200612.0, 0.0)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (88838.5, 1.24999)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (287726.0, 0.0)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (124150.0, 1.63333)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (373223.0, 0.0)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (165641.0, 2.25)), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (469325.0, 0.0)), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (203462.0, 2.63333)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (542229.0, 0.0)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (237899.0, 2.84999)), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (604902.0, 0.0)), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (268282.0, 3.06666)), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (649687.0, 0.0)), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (245272.0, 2.76666))]$/;"	v
RESULTS	benchmarks/results/istc11-3-16-13.py	/^RESULTS = [({'scale_factor': 1000, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (455923.0, 0.0)), ({'scale_factor': 1000, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (392189.0, 0.0)), ({'scale_factor': 4000, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (1837830.0, 0.0)), ({'scale_factor': 4000, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (1386150.0, 0.0)), ({'scale_factor': 8000, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (3117300.0, 0.0)), ({'scale_factor': 8000, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (2378310.0, 0.0)), ({'scale_factor': 12000, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (3941100.0, 0.0)), ({'scale_factor': 12000, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3129000.0, 0.0)), ({'scale_factor': 16000, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4299420.0, 0.0)), ({'scale_factor': 16000, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3477480.0, 0.0)), ({'scale_factor': 20000, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4436690.0, 0.0)), ({'scale_factor': 20000, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3591450.0, 0.0)), ({'scale_factor': 24000, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4492090.0, 0.0)), ({'scale_factor': 24000, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3583380.0, 0.0)), ({'scale_factor': 28000, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4523280.0, 0.0)), ({'scale_factor': 28000, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (3737430.0, 0.0)), ({'scale_factor': 32000, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, (4557360.0, 0.0)), ({'scale_factor': 32000, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, (4139190.0, 0.0)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (28194.3, 0.0)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (15643.4, 0.0)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (103030.0, 0.0)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (58260.7, 0.866664)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (199311.0, 0.0)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (115993.0, 1.83333)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (288046.0, 0.0)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (161253.0, 2.68333)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (369982.0, 0.0)), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (214555.0, 3.24999)), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (458774.0, 0.0)), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (260806.0, 3.78332)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (544124.0, 0.0)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (296078.0, 4.59998)), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (616619.0, 0.0)), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (320886.0, 5.46665)), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, (646355.0, 0.0)), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (295248.0, 4.09999))]$/;"	v
RESULTS	benchmarks/results/istc11-3-18-13.py	/^RESULTS = [({'scale_factor': 1000, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(436120.0, 0.0), (418455.0, 0.0), (450830.0, 0.0)]), ({'scale_factor': 1000, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(278658.0, 0.0), (358839.0, 0.0), (326228.0, 0.0)]), ({'scale_factor': 4000, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(1830520.0, 0.0), (1811250.0, 0.0), (1811350.0, 0.0)]), ({'scale_factor': 4000, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(1155860.0, 0.0), (1131700.0, 0.0), (1180550.0, 0.0)]), ({'scale_factor': 8000, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(3094700.0, 0.0), (3015630.0, 0.0), (3017340.0, 0.0)]), ({'scale_factor': 8000, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(2166540.0, 0.0), (2206350.0, 0.0), (2134760.0, 0.0)]), ({'scale_factor': 12000, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(3916050.0, 0.0), (3915280.0, 0.0), (3921000.0, 0.0)]), ({'scale_factor': 12000, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(2957350.0, 0.0), (2979110.0, 0.0), (2964590.0, 0.0)]), ({'scale_factor': 16000, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(4322820.0, 0.0), (4304250.0, 0.0), (4326410.0, 0.0)]), ({'scale_factor': 16000, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(3465220.0, 0.0), (3494080.0, 0.0), (3851230.0, 0.0)]), ({'scale_factor': 20000, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(4448970.0, 0.0), (4432920.0, 0.0), (4451670.0, 0.0)]), ({'scale_factor': 20000, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(4660560.0, 0.0), (3694510.0, 0.0), (3621290.0, 0.0)]), ({'scale_factor': 24000, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(4504350.0, 0.0), (6451530.0, 0.0), (4504910.0, 0.0)]), ({'scale_factor': 24000, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(3701890.0, 0.0), (4056880.0, 0.0), (5237840.0, 0.0)]), ({'scale_factor': 28000, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(4549070.0, 0.0), (4551480.0, 0.0), (7400250.0, 0.0)]), ({'scale_factor': 28000, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(3981770.0, 0.0), (3546130.0, 0.0), (3529950.0, 0.0)]), ({'scale_factor': 32000, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(7948560.0, 0.0), (7945880.0, 0.0), (4566300.0, 0.0)]), ({'scale_factor': 32000, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(3898920.0, 0.0166666), (3907880.0, 0.0), (3321670.0, 0.0)]), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(30405.5, 0.0), (30499.0, 0.0), (30028.5, 0.0)]), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(16356.8, 0.433332), (15986.1, 0.283333), (16439.4, 0.399999)]), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(111137.0, 0.0), (108277.0, 0.0), (109730.0, 0.0)]), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(66322.5, 1.75), (66222.7, 2.03333), (63792.9, 1.64999)]), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(214859.0, 0.0), (214484.0, 0.0), (215524.0, 0.0)]), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(128448.0, 3.14999), (129981.0, 3.06666), (129171.0, 3.04999)]), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(300235.0, 0.0), (306062.0, 0.0), (307826.0, 0.0)]), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(187376.0, 4.38332), (188755.0, 4.48332), (187961.0, 4.49999)]), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(404846.0, 0.0), (396609.0, 0.0), (407262.0, 0.0)]), ({'scale_factor': 16, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(249271.0, 5.71665), (246597.0, 4.98331), (243792.0, 5.83332)]), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(496558.0, 0.0), (503799.0, 0.0), (503256.0, 0.0)]), ({'scale_factor': 20, 'threads': 20, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(304026.0, 6.29998), (304226.0, 6.81666), (295475.0, 5.99998)]), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(587429.0, 0.0), (584843.0, 0.0), (590804.0, 0.0)]), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(351511.0, 6.81664), (361679.0, 8.11663), (358653.0, 7.74997)]), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(670600.0, 0.0), (662400.0, 0.0), (668818.0, 0.0)]), ({'scale_factor': 28, 'threads': 28, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(409829.0, 8.28332), (408729.0, 8.54998), (406639.0, 7.51665)]), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'kvdb', 'bench': 'tpcc'}, [(694132.0, 0.0), (701495.0, 0.0), (707058.0, 0.0)]), ({'scale_factor': 32, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(390649.0, 5.61666), (390995.0, 6.08332), (387345.0, 5.94999)])]$/;"	v
RESULTS	benchmarks/results/istc11-3-21-13.py	/^RESULTS = [({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 1}, [(341977.0, 0.0), (367991.0, 0.0), (342608.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 4}, [(1565190.0, 0.0), (1565550.0, 0.0), (1563210.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 8}, [(3193760.0, 0.0), (3182240.0, 0.0), (3188560.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 12}, [(4780000.0, 0.0), (4767620.0, 0.0), (4771070.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 16}, [(6332840.0, 0.0), (6328970.0, 0.0), (6334500.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 20}, [(7872050.0, 0.0), (7871110.0, 0.0), (7845550.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 24}, [(9363600.0, 0.0), (9368290.0, 0.0), (9366990.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 28}, [(10832500.0, 0.0), (10770300.0, 0.0), (10818600.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 32}, [(11856400.0, 0.0), (11855900.0, 0.0), (11865400.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 1}, [(323784.0, 0.0), (321806.0, 0.0), (322916.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 4}, [(1385090.0, 0.0), (1391820.0, 0.0), (1344820.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 8}, [(2827340.0, 0.0), (2732100.0, 0.0), (2758880.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 12}, [(4209050.0, 0.0), (4182500.0, 0.0), (4193630.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 16}, [(5485600.0, 0.0), (5500570.0, 0.0333328), (5532810.0, 0.0166665)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 20}, [(6959520.0, 0.0), (6969320.0, 0.0166664), (6948200.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 24}, [(8319120.0, 0.0), (8340050.0, 0.0333328), (8297860.0, 0.0333328)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 28}, [(9631680.0, 0.0), (9588000.0, 0.0333328), (9622120.0, 0.0333327)]), ({'bench_opts': '', 'scale_factor': 320000, 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 32}, [(10263300.0, 0.0166629), (10300700.0, 0.0333262), (10163800.0, 0.0499888)]), ({'bench_opts': '--new-order-remote-item-pct 0', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(440703.0, 0.0), (435462.0, 0.0), (449485.0, 0.0)]), ({'bench_opts': '--new-order-remote-item-pct 1', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(434779.0, 68.3486), (438273.0, 69.6653), (442467.0, 69.2987)]), ({'bench_opts': '--new-order-remote-item-pct 2', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(445738.0, 142.23), (435539.0, 136.43), (430208.0, 135.364)]), ({'bench_opts': '--new-order-remote-item-pct 3', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(435363.0, 202.596), (431492.0, 204.33), (447837.0, 213.629)]), ({'bench_opts': '--new-order-remote-item-pct 4', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(430948.0, 266.161), (441064.0, 273.478), (431624.0, 272.662)]), ({'bench_opts': '--new-order-remote-item-pct 5', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(436018.0, 340.293), (438748.0, 339.76), (438044.0, 338.56)]), ({'bench_opts': '--new-order-remote-item-pct 6', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(431446.0, 400.741), (434324.0, 402.438), (436072.0, 405.976)]), ({'bench_opts': '--new-order-remote-item-pct 7', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(429735.0, 463.173), (440026.0, 472.789), (426122.0, 457.674)]), ({'bench_opts': '--new-order-remote-item-pct 8', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(425216.0, 521.456), (438042.0, 535.771), (430484.0, 529.554)]), ({'bench_opts': '--new-order-remote-item-pct 9', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(439448.0, 602.687), (436484.0, 596.338), (442301.0, 608.353)]), ({'bench_opts': '--new-order-remote-item-pct 10', 'scale_factor': 28, 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(434582.0, 661.104), (424904.0, 634.071), (434322.0, 665.07)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(758259.0, 0.0), (771913.0, 0.0), (763892.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(645656.0, 0.0), (650949.0, 0.0), (627824.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(536405.0, 0.0), (531694.0, 0.0), (537912.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(443490.0, 0.0), (432826.0, 0.0), (441318.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(368602.0, 0.0), (352058.0, 0.0), (368116.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(306356.0, 0.0), (308941.0, 0.0), (310371.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(263430.0, 0.0), (250817.0, 0.0), (263369.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(227992.0, 0.0), (216511.0, 0.0), (226312.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(197707.0, 0.0), (196394.0, 0.0), (197256.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(177286.0, 0.0), (177743.0, 0.0), (175348.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'scale_factor': 28, 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(157529.0, 0.0), (159431.0, 0.0), (158633.0, 0.0)])]$/;"	v
RESULTS	benchmarks/results/istc11-3-22-13.py	/^RESULTS = [({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 1}, [(344319.0, 0.0), (354514.0, 0.0), (342661.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 4}, [(1572150.0, 0.0), (1562970.0, 0.0), (1565110.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 8}, [(3194780.0, 0.0), (3192960.0, 0.0), (3188600.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 12}, [(4782170.0, 0.0), (4773360.0, 0.0), (4767710.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 16}, [(6333480.0, 0.0), (6326960.0, 0.0), (6349480.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 20}, [(7879620.0, 0.0), (7876960.0, 0.0), (7868610.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 24}, [(9375300.0, 0.0), (9369260.0, 0.0), (9355660.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 28}, [(10824800.0, 0.0), (10814600.0, 0.0), (10805100.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 32}, [(11893900.0, 0.0), (11970300.0, 0.0), (11848300.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 1}, [(344057.0, 0.0), (330148.0, 0.0), (333267.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 4}, [(1501350.0, 0.0), (1481720.0, 0.0), (1491190.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 8}, [(3041380.0, 0.0), (3022010.0, 0.0), (3054820.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 12}, [(4566850.0, 0.0), (4575880.0, 0.0), (4575180.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 16}, [(6081740.0, 0.0), (6057220.0, 0.0166665), (6088750.0, 0.0166665)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 20}, [(7521460.0, 0.0), (7519680.0, 0.0), (7541440.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 24}, [(8985640.0, 0.0), (8971310.0, 0.0), (8973110.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 28}, [(10429500.0, 0.0833324), (10437100.0, 0.0), (10428400.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 32}, [(11046300.0, 0.0), (11080000.0, 0.0166646), (11123100.0, 0.016663)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(505953.0, 0.0), (508367.0, 0.0), (531330.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(539975.0, 83.5486), (539597.0, 83.1168), (530897.0, 84.1982)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(529145.0, 163.396), (537027.0, 169.68), (531671.0, 165.198)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(526006.0, 243.896), (531250.0, 245.114), (515408.0, 241.297)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(526523.0, 326.51), (519784.0, 320.029), (534266.0, 329.362)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(533564.0, 408.844), (530472.0, 406.311), (532288.0, 407.412)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(525542.0, 479.861), (533309.0, 491.876), (536782.0, 486.96)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(531937.0, 564.39), (518706.0, 553.174), (526912.0, 561.458)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(523326.0, 631.139), (521117.0, 626.808), (519460.0, 629.224)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(531315.0, 720.686), (518967.0, 704.337), (518784.0, 696.975)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(525105.0, 781.123), (517552.0, 777.807), (527545.0, 785.624)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(832667.0, 0.0), (812928.0, 0.0), (828543.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(664056.0, 0.0), (671050.0, 0.0), (700404.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(562333.0, 0.0), (586266.0, 0.0), (560772.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(484997.0, 0.0), (458707.0, 0.0), (482848.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(383788.0, 0.0), (385848.0, 0.0), (383601.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(318259.0, 0.0), (318550.0, 0.0), (320540.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(274341.0, 0.0), (284535.0, 0.0), (266393.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(243409.0, 0.0), (235239.0, 0.0), (245459.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(212585.0, 0.0), (206563.0, 0.0), (202268.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(191315.0, 0.0), (191117.0, 0.0), (183958.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(171544.0, 0.0), (161109.0, 0.0), (161529.0, 0.0)]), ({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 8}, [(222715.0, 0.0), (232206.0, 0.0), (223868.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(193922.0, 9.41657), (192451.0, 9.36656), (194744.0, 9.98324)]), ({'bench_opts': '', 'scale_factor': 12, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(190925.0, 5.73328), (190402.0, 5.54995), (184899.0, 5.91661)]), ({'bench_opts': '', 'scale_factor': 16, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(186043.0, 4.2333), (191044.0, 4.29997), (193370.0, 4.98329)]), ({'bench_opts': '', 'scale_factor': 20, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(192382.0, 3.21664), (193473.0, 3.53331), (188681.0, 3.49997)]), ({'bench_opts': '', 'scale_factor': 24, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(194884.0, 2.89997), (192628.0, 3.09996), (190728.0, 3.04998)]), ({'bench_opts': '', 'scale_factor': 28, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(188494.0, 2.39998), (190250.0, 2.21664), (188596.0, 2.66664)]), ({'bench_opts': '', 'scale_factor': 32, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(187125.0, 2.14998), (190069.0, 2.14998), (182439.0, 2.01665)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(171620.0, 2134.06), (173529.0, 2186.03), (173225.0, 2138.29)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(169040.0, 2289.85), (171705.0, 2262.18), (170010.0, 2311.37)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(171233.0, 2310.86), (169888.0, 2288.3), (169092.0, 2317.81)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(167489.0, 2295.77), (168658.0, 2328.69), (167674.0, 2283.77)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(166622.0, 2321.01), (168422.0, 2335.13), (167353.0, 2352.83)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(166810.0, 2291.52), (167038.0, 2285.16), (167169.0, 2331.86)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(150297.0, 13787.1), (150142.0, 13767.5), (150083.0, 13777.7)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(148402.0, 15224.0), (147885.0, 15174.4), (147474.0, 15163.6)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(146138.0, 16536.9), (147086.0, 16641.2), (146483.0, 16522.5)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(144554.0, 17776.3), (142998.0, 17571.6), (144150.0, 17711.9)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(142847.0, 18846.9), (141997.0, 18745.8), (142227.0, 18762.5)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(140923.0, 19884.2), (140449.0, 19816.0), (140712.0, 19868.4)])]$/;"	v
RESULTS	benchmarks/results/istc11-3-23-13.py	/^RESULTS = [({'bench_opts': '--enable-separate-tree-per-partition --enable-partition-locks', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'kvdb', 'bench': 'tpcc', 'par_load': True, 'threads': 8}, [(222921.0, 0.0), (227359.0, 0.0), (229843.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 8}, [(195168.0, 9.73322), (194644.0, 9.84993), (194702.0, 9.44992)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 12}, [(237444.0, 37277.3), (234301.0, 36610.4), (236327.0, 36780.5)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(284964.0, 73789.8), (290414.0, 74756.3), (276865.0, 71355.9)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 20}, [(301047.0, 123422.0), (282959.0, 115540.0), (287034.0, 115244.0)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 24}, [(296876.0, 159299.0), (298336.0, 159218.0), (302464.0, 162004.0)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(246765.0, 157871.0), (270421.0, 171978.0), (254094.0, 160962.0)]), ({'bench_opts': '', 'scale_factor': 8, 'name': 'multipart:cpu', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 32}, [(230114.0, 167878.0), (226383.0, 165009.0), (227876.0, 165982.0)])]$/;"	v
RESULTS	benchmarks/results/istc11-3-26-13.py	/^RESULTS = [({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 1}, [(368896.0, 0.0), (370812.0, 0.0), (340529.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 4}, [(1557670.0, 0.0), (1557680.0, 0.0), (1558510.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 8}, [(3182470.0, 0.0), (3181050.0, 0.0), (3177240.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 12}, [(4754210.0, 0.0), (4758890.0, 0.0), (4768010.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 16}, [(6327650.0, 0.0), (6335970.0, 0.0), (6323000.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 20}, [(7651490.0, 0.0), (7859290.0, 0.0), (7851350.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 24}, [(9338320.0, 0.0), (9334100.0, 0.0), (9337990.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 28}, [(10809400.0, 0.0), (10762300.0, 0.0), (10782400.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'threads': 32}, [(11635500.0, 0.0), (11909600.0, 0.0), (11829800.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 1}, [(362783.0, 0.0), (362939.0, 0.0), (362555.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 4}, [(1530310.0, 0.0), (1547110.0, 0.0), (1562350.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 8}, [(3147020.0, 0.0), (3154120.0, 0.0), (3156800.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 12}, [(4703160.0, 0.0), (4718940.0, 0.0), (4615850.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 16}, [(6252960.0, 0.0), (6272330.0, 0.0), (6262620.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 20}, [(7775340.0, 0.033333), (7805900.0, 0.0), (7790730.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 24}, [(9292160.0, 0.0), (9296380.0, 0.0), (9289300.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 28}, [(10734600.0, 0.0), (10742600.0, 0.0), (10724200.0, 0.0)]), ({'bench_opts': '', 'scale_factor': 320000, 'name': 'scale', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'threads': 32}, [(11442700.0, 0.0), (11409800.0, 0.0), (11418000.0, 0.0166631)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(559985.0, 0.0), (554159.0, 0.0), (560124.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(563669.0, 86.8307), (550329.0, 81.4322), (558763.0, 83.9809)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(552469.0, 168.415), (560887.0, 171.246), (558669.0, 169.694)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(536695.0, 248.114), (559353.0, 256.428), (549388.0, 252.111)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(551636.0, 332.724), (557507.0, 332.662), (554321.0, 331.291)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(553094.0, 415.344), (553564.0, 411.806), (556768.0, 413.706)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(539732.0, 483.26), (551578.0, 493.237), (523114.0, 471.342)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(550531.0, 569.523), (539723.0, 562.572), (551360.0, 572.741)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(542719.0, 643.342), (549563.0, 643.558), (546139.0, 648.14)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(548901.0, 730.787), (540353.0, 715.709), (542625.0, 724.837)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 28}, [(547367.0, 796.404), (550785.0, 803.884), (539808.0, 785.229)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(842114.0, 0.0), (838839.0, 0.0), (845235.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(667442.0, 0.0), (665713.0, 0.0), (675465.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(536509.0, 0.0), (539068.0, 0.0), (546692.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(437646.0, 0.0), (437500.0, 0.0), (444910.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(342401.0, 0.0), (348083.0, 0.0), (351640.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(307548.0, 0.0), (311420.0, 0.0), (308924.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(255155.0, 0.0), (265231.0, 0.0), (264143.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(232640.0, 0.0), (230824.0, 0.0), (228088.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(204345.0, 0.0), (206614.0, 0.0), (192869.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(180656.0, 0.0), (185980.0, 0.0), (184886.0, 0.0)]), ({'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'scale_factor': 28, 'name': 'multipart:pct', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': True, 'threads': 28}, [(166456.0, 0.0), (160836.0, 0.0), (161666.0, 0.0)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(178026.0, 2137.24), (178581.0, 2116.92), (177426.0, 2175.65)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(176774.0, 2222.03), (176332.0, 2189.11), (176691.0, 2223.81)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(174556.0, 2272.04), (175010.0, 2263.7), (172122.0, 2313.65)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(172754.0, 2280.72), (173202.0, 2300.94), (173661.0, 2303.13)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(173194.0, 2308.66), (171923.0, 2312.56), (172893.0, 2318.47)]), ({'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(172705.0, 2295.76), (171586.0, 2302.47), (172432.0, 2308.46)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(155424.0, 14688.1), (154900.0, 14657.8), (153882.0, 14555.3)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(152169.0, 16301.0), (151600.0, 16152.8), (153404.0, 16359.3)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(151897.0, 17950.7), (150753.0, 17881.1), (148796.0, 17610.6)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(146694.0, 18958.8), (146309.0, 18870.3), (146731.0, 18757.5)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(146141.0, 20348.6), (145702.0, 20284.8), (146323.0, 20411.8)]), ({'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'scale_factor': 8, 'name': 'readonly', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'threads': 16}, [(142882.0, 21250.3), (144235.0, 21529.0), (143130.0, 21315.2)])]$/;"	v
RESULTS	benchmarks/results/istc11-4-10-13.py	/^RESULTS = [({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(804585.0, 0.0), (801148.0, 0.0), (807541.0, 0.0)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(801033.0, 122.895), (799989.0, 122.113), (803801.0, 122.846)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(799259.0, 242.918), (797091.0, 242.774), (794599.0, 242.152)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(790597.0, 357.701), (790143.0, 361.526), (789851.0, 355.109)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(784611.0, 470.576), (785424.0, 475.99), (784797.0, 475.866)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(776102.0, 578.822), (782605.0, 587.097), (784011.0, 591.513)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(775516.0, 695.638), (777636.0, 694.746), (774385.0, 692.662)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(776174.0, 812.69), (769456.0, 800.863), (769434.0, 798.308)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(772895.0, 918.994), (772724.0, 916.723), (775404.0, 916.713)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(766380.0, 1014.59), (772520.0, 1021.4), (769013.0, 1013.95)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(764523.0, 1123.01), (769060.0, 1128.28), (762434.0, 1117.84)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(1094020.0, 0.0), (1110840.0, 0.0), (1075520.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(826353.0, 0.0), (852781.0, 0.0), (845913.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(671993.0, 0.0), (706678.0, 0.0), (656195.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(550780.0, 0.0), (554407.0, 0.0), (536970.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(440937.0, 0.0), (458112.0, 0.0), (460816.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(389108.0, 0.0), (391405.0, 0.0), (390824.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(337935.0, 0.0), (336006.0, 0.0), (342643.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(300376.0, 0.0), (288345.0, 0.0), (305941.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(261991.0, 0.0), (269196.0, 0.0), (261985.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(237309.0, 0.0), (235877.0, 0.0), (231598.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(214308.0, 0.0), (221298.0, 0.0), (213673.0, 0.0)])]$/;"	v
RESULTS	benchmarks/results/istc11-5-18-13.py	/^RESULTS = [({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '101G', 'threads': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(620600.0, 0.0), (621420.0, 0.0), (622727.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '101G', 'threads': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(605937.0, 0.0), (606707.0, 0.0), (615925.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '101G', 'threads': 1, 'db': 'kvdb', 'bench': 'ycsb'}, [(518197.0, 0.0), (518351.0, 0.0), (517762.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '101G', 'threads': 1, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(516004.0, 0.0), (515056.0, 0.0), (515394.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '105G', 'threads': 4, 'db': 'kvdb', 'bench': 'ycsb'}, [(2507000.0, 0.0), (2515440.0, 0.0), (2515880.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '105G', 'threads': 4, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(2440110.0, 0.0), (2438170.0, 0.0), (2444660.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '105G', 'threads': 4, 'db': 'kvdb', 'bench': 'ycsb'}, [(2103950.0, 0.0), (2108650.0, 0.0), (2101390.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '105G', 'threads': 4, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(2021630.0, 0.0), (2051260.0, 0.0), (2062360.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '111G', 'threads': 8, 'db': 'kvdb', 'bench': 'ycsb'}, [(4698460.0, 0.0), (4701020.0, 0.0), (4697040.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '111G', 'threads': 8, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(4594410.0, 0.0), (4585480.0, 0.0), (4585570.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '111G', 'threads': 8, 'db': 'kvdb', 'bench': 'ycsb'}, [(3953090.0, 0.0), (3952270.0, 0.0), (3956260.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '111G', 'threads': 8, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(3893480.0, 0.0166664), (3832850.0, 0.0), (3888720.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '116G', 'threads': 12, 'db': 'kvdb', 'bench': 'ycsb'}, [(6420760.0, 0.0), (6438670.0, 0.0), (6433960.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '116G', 'threads': 12, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(6363770.0, 0.0), (6379600.0, 0.0), (6389300.0, 0.0166661)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '116G', 'threads': 12, 'db': 'kvdb', 'bench': 'ycsb'}, [(5401450.0, 0.0), (5407930.0, 0.0), (5392230.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '116G', 'threads': 12, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(5402250.0, 0.0333321), (5376760.0, 0.0166661), (5390240.0, 0.0333322)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '122G', 'threads': 16, 'db': 'kvdb', 'bench': 'ycsb'}, [(8338980.0, 0.0), (8334610.0, 0.0), (8328680.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '122G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(8257480.0, 0.0), (8226600.0, 0.0), (8277980.0, 0.0333317)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '122G', 'threads': 16, 'db': 'kvdb', 'bench': 'ycsb'}, [(6984660.0, 0.0), (6980250.0, 0.0), (6980670.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '122G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(6999110.0, 0.0166657), (6994190.0, 0.0166658), (6998980.0, 0.0166659)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '128G', 'threads': 20, 'db': 'kvdb', 'bench': 'ycsb'}, [(10199100.0, 0.0), (10189900.0, 0.0), (10186000.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '128G', 'threads': 20, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(10127800.0, 0.0), (10161500.0, 0.0), (10109000.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '128G', 'threads': 20, 'db': 'kvdb', 'bench': 'ycsb'}, [(8543690.0, 0.0), (8551340.0, 0.0), (8535590.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '128G', 'threads': 20, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(8579520.0, 0.049996), (8561890.0, 0.0333303), (8576020.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '133G', 'threads': 24, 'db': 'kvdb', 'bench': 'ycsb'}, [(11904400.0, 0.0), (11904800.0, 0.0), (11895800.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '133G', 'threads': 24, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(11820400.0, 0.0), (11836000.0, 0.0166648), (11816400.0, 0.0166651)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '133G', 'threads': 24, 'db': 'kvdb', 'bench': 'ycsb'}, [(9960240.0, 0.0), (9946770.0, 0.0), (9967100.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '133G', 'threads': 24, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(10030400.0, 0.0999886), (10022700.0, 0.0499943), (10023500.0, 0.0166643)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '139G', 'threads': 28, 'db': 'kvdb', 'bench': 'ycsb'}, [(14055700.0, 0.0), (14064700.0, 0.0), (14048200.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '139G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(13991000.0, 0.0), (13987400.0, 0.0), (13974900.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '139G', 'threads': 28, 'db': 'kvdb', 'bench': 'ycsb'}, [(11775200.0, 0.0), (11773500.0, 0.0), (11763400.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '139G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(11841300.0, 0.0333278), (11859000.0, 0.099985), (11843500.0, 0.0499928)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '144G', 'threads': 32, 'db': 'kvdb', 'bench': 'ycsb'}, [(15886600.0, 0.0), (15883900.0, 0.0), (15914600.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '144G', 'threads': 32, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(15709800.0, 0.0166588), (15721400.0, 0.0166599), (15791500.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '144G', 'threads': 32, 'db': 'kvdb', 'bench': 'ycsb'}, [(13298200.0, 0.0), (13284200.0, 0.0), (13316600.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '144G', 'threads': 32, 'db': 'ndb-proto2', 'bench': 'ycsb'}, [(13258000.0, 0.133309), (13318500.0, 0.116649), (13318900.0, 0.14997)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30985.9, 0.0), (29673.8, 0.0166664), (32070.4, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112760.0, 5.03329), (112690.0, 5.29995), (113504.0, 4.89996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(208462.0, 8.96661), (212875.0, 10.0832), (212539.0, 9.33326)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(325661.0, 14.4332), (328256.0, 13.6332), (327681.0, 14.5498)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(430089.0, 19.7165), (421372.0, 18.4498), (432434.0, 17.8832)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(543340.0, 23.1331), (545883.0, 23.9497), (546608.0, 23.5831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(648722.0, 29.233), (633469.0, 26.3663), (644658.0, 27.2329)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(750691.0, 34.5494), (743953.0, 32.9328), (741685.0, 32.2494)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(810975.0, 35.2974), (813899.0, 36.0823), (803711.0, 35.4822)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(787305.0, 0.0), (783427.0, 0.0), (787891.0, 0.0)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(757735.0, 114.1), (773002.0, 118.563), (772284.0, 117.997)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(765908.0, 233.027), (766292.0, 235.925), (772907.0, 233.54)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(767204.0, 348.752), (757182.0, 345.413), (762173.0, 347.066)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(762240.0, 465.634), (766427.0, 461.286), (764470.0, 463.978)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(758053.0, 569.597), (755356.0, 568.032), (749486.0, 562.348)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(750449.0, 675.393), (760504.0, 671.979), (753789.0, 676.568)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(757352.0, 795.228), (754869.0, 782.752), (733751.0, 770.558)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(750816.0, 890.491), (733219.0, 858.385), (753169.0, 902.858)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(744790.0, 988.435), (748771.0, 990.238), (745841.0, 975.928)]), ({'par_load': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(745825.0, 1092.56), (743188.0, 1079.22), (749344.0, 1090.5)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(1098950.0, 0.0), (1119710.0, 0.0), (1072420.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(889236.0, 0.0), (898120.0, 0.0), (900607.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(722596.0, 0.0), (711485.0, 0.0), (712563.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(582426.0, 0.0), (578095.0, 0.0), (583767.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(482736.0, 0.0), (483404.0, 0.0), (487373.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(414524.0, 0.0), (415143.0, 0.0), (415969.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(350162.0, 0.0), (352123.0, 0.0), (352476.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(311676.0, 0.0), (311529.0, 0.0), (307683.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(274936.0, 0.0), (274880.0, 0.0), (269893.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(240224.0, 0.0), (244346.0, 0.0), (244626.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'numa_memory': '112G', 'threads': 28, 'db': 'kvdb-st', 'bench': 'tpcc'}, [(220897.0, 0.0), (224565.0, 0.0), (224131.0, 0.0)]), ({'par_load': False, 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(200114.0, 2302.91), (199003.0, 2297.07), (200227.0, 2319.16)]), ({'par_load': False, 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(194843.0, 2323.13), (186419.0, 2159.79), (194520.0, 2306.21)]), ({'par_load': False, 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(192514.0, 2365.37), (193027.0, 2379.28), (193225.0, 2340.44)]), ({'par_load': False, 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(191380.0, 2385.91), (191342.0, 2390.18), (190192.0, 2357.07)]), ({'par_load': False, 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(191257.0, 2400.22), (180790.0, 2180.2), (190691.0, 2383.46)]), ({'par_load': False, 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(189927.0, 2360.62), (180441.0, 2180.87), (190903.0, 2394.66)]), ({'par_load': False, 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(162328.0, 14288.5), (165077.0, 14635.6), (165270.0, 14658.5)]), ({'par_load': False, 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(158432.0, 15909.9), (158501.0, 15990.8), (156767.0, 15640.1)]), ({'par_load': False, 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(153417.0, 17102.2), (154920.0, 17297.1), (153161.0, 16958.5)]), ({'par_load': False, 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(150880.0, 18313.4), (143189.0, 17586.6), (152049.0, 18577.0)]), ({'par_load': False, 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(149056.0, 19671.2), (150192.0, 19849.1), (150495.0, 19815.7)]), ({'par_load': False, 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'numa_memory': '64G', 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(147858.0, 20842.0), (146716.0, 20584.7), (147927.0, 20903.4)])] + [({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(32240.8, 0.0), (31026.7, 0.0), (30438.4, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 4, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(112148.0, 4.91663), (113832.0, 5.29995), (113486.0, 5.19994)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 8, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(212410.0, 8.81654), (212020.0, 9.64986), (213780.0, 8.94986)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 12, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(320426.0, 13.3998), (327475.0, 14.4498), (321080.0, 14.6498)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 16, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(431773.0, 18.8163), (432635.0, 18.3997), (430719.0, 18.383)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 20, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(542721.0, 23.7831), (529936.0, 21.7331), (538936.0, 23.8329)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 24, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(642353.0, 28.483), (643512.0, 28.7329), (643497.0, 29.6495)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 28, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(743009.0, 32.7986), (729192.0, 32.7657), (728048.0, 31.4827)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '112G', 'threads': 32, 'db': 'ndb-proto1', 'bench': 'tpcc'}, [(790212.0, 34.2826), (805566.0, 35.166), (804736.0, 34.3825)])] + [({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '101G', 'threads': 1, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(614240.0, 0.0), (616696.0, 0.0), (616061.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '101G', 'threads': 1, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(521324.0, 0.0), (519604.0, 0.0), (516847.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '105G', 'threads': 4, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(2463990.0, 0.0), (2465270.0, 0.0), (2467840.0, 0.0166664)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '105G', 'threads': 4, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(2064040.0, 0.0), (2035160.0, 0.0), (2014690.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '111G', 'threads': 8, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(4632640.0, 0.0), (4628850.0, 0.0), (4642110.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '111G', 'threads': 8, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(3917340.0, 0.0), (3918600.0, 0.0166663), (3906720.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '116G', 'threads': 12, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(6392020.0, 0.0), (6261500.0, 0.0166661), (6373530.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '116G', 'threads': 12, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(5383630.0, 0.0), (5386750.0, 0.0), (5349580.0, 0.0166662)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '122G', 'threads': 16, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(8197750.0, 0.0), (8202670.0, 0.0166657), (8212610.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '122G', 'threads': 16, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(6964480.0, 0.0), (6962350.0, 0.0), (6964480.0, 0.0333319)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '128G', 'threads': 20, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(9569340.0, 0.0), (9545470.0, 0.0), (9525760.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '128G', 'threads': 20, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(8327020.0, 0.016665), (8351850.0, 0.0666599), (8327510.0, 0.0499968)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '133G', 'threads': 24, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(9695090.0, 0.0), (9715240.0, 0.0), (9725800.0, 0.0166652)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '133G', 'threads': 24, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(9238990.0, 0.0333301), (9226620.0, 0.0666602), (9170780.0, 0.0999898)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '139G', 'threads': 28, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(8925020.0, 0.0166638), (8880120.0, 0.0), (9184000.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '139G', 'threads': 28, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(9286140.0, 0.0666553), (8793640.0, 0.049994), (9385870.0, 0.11665)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,20,0,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale', 'numa_memory': '144G', 'threads': 32, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(5234880.0, 0.0), (8694640.0, 0.0), (8797910.0, 0.0)]), ({'par_load': True, 'bench_opts': '--workload-mix 80,0,20,0', 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'numa_memory': '144G', 'threads': 32, 'db': 'ndb-proto1', 'bench': 'ycsb'}, [(8860080.0, 0.0666507), (8879010.0, 0.0833041), (8945930.0, 0.0)])]$/;"	v
RESULTS	benchmarks/results/istc11-8-28-13_cameraready.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(38179.9, 38179.9, 0.0261386, 0.0, 0.0), (38455.4, 38455.4, 0.0259527, 0.0, 0.0), (38349.3, 38349.3, 0.0260178, 0.0, 0.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(27279.2, 27279.2, 0.0365973, 0.0, 0.0), (27155.6, 27155.6, 0.0367648, 0.0, 0.0), (26796.8, 26796.8, 0.037253, 0.0, 0.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(26321.0, 26321.0, 0.0379286, 0.0, 0.0), (26569.2, 26569.2, 0.037573, 0.0, 0.0), (27140.4, 27140.4, 0.0367824, 0.0, 0.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(26820.0, 26820.0, 0.0372239, 0.0, 0.0), (26198.6, 26198.6, 0.0381046, 0.0, 0.0), (26721.0, 26721.0, 0.0373651, 0.0, 0.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(27636.2, 27636.2, 0.0361241, 0.0, 0.0), (27896.6, 27896.6, 0.0357849, 0.0, 0.0), (27195.4, 27195.4, 0.0367132, 0.0, 0.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(53665.2, 53665.2, 0.0371825, 0.0, 2.33332), (55335.5, 55335.5, 0.0360387, 0.0, 2.99998), (55456.1, 55456.1, 0.0359656, 0.0, 2.44999)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(54570.7, 54570.7, 0.0365389, 0.0, 2.76665), (55027.4, 55027.4, 0.0362424, 0.0, 2.64998), (52970.9, 52970.9, 0.0376617, 0.0, 2.29999)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(54740.4, 54740.4, 0.0364358, 0.0, 2.51665), (53974.4, 53974.4, 0.0369523, 0.0, 2.79998), (53956.9, 53956.9, 0.0369649, 0.0, 2.66665)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(55583.4, 55583.4, 0.0358752, 0.0, 2.74998), (55511.9, 55511.9, 0.0359357, 0.0, 2.81665), (55076.5, 55076.5, 0.0362123, 0.0, 2.83332)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(102115.0, 102115.0, 0.0389772, 0.0, 14.9832), (102483.0, 102483.0, 0.0388438, 0.0, 15.1499), (99394.2, 99394.2, 0.0400376, 0.0, 15.4666)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(99742.6, 99742.6, 0.0399078, 0.0, 14.7833), (99686.9, 99686.9, 0.0399313, 0.0, 15.0999), (98806.6, 98806.6, 0.0402783, 0.0, 15.0666)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(101562.0, 101562.0, 0.0391926, 0.0, 14.7999), (101148.0, 101148.0, 0.03935, 0.0, 14.8499), (100588.0, 100588.0, 0.0395722, 0.0, 14.3666)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(101855.0, 101855.0, 0.0390631, 0.0, 16.1166), (103506.0, 103506.0, 0.0384577, 0.0, 15.6666), (104612.0, 104612.0, 0.0380519, 0.0, 14.6166)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(105894.0, 105894.0, 0.0402846, 0.0, 1781.74), (106271.0, 106271.0, 0.0401367, 0.0, 1796.52), (103814.0, 103814.0, 0.0411498, 0.0, 1772.05)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(103324.0, 103324.0, 0.0413357, 0.0, 1784.36), (107888.0, 107888.0, 0.0394036, 0.0, 1793.97), (105044.0, 105044.0, 0.0406493, 0.0, 1787.03)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(104675.0, 104675.0, 0.0407454, 0.0, 1819.53), (103649.0, 103649.0, 0.0411788, 0.0, 1792.34), (105401.0, 105401.0, 0.0404608, 0.0, 1828.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(118134.0, 118134.0, 0.0462966, 0.0, 459.179), (116671.0, 116671.0, 0.0467614, 0.0, 451.031), (120292.0, 120292.0, 0.0458435, 0.0, 503.747)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(110164.0, 110164.0, 0.0415078, 0.0, 3593.76), (109447.0, 109447.0, 0.0417149, 0.0, 3590.73), (109431.0, 109431.0, 0.0418349, 0.0, 3584.31)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(107558.0, 107558.0, 0.0427503, 0.0, 3538.26), (108211.0, 108211.0, 0.042309, 0.0, 3571.77), (108623.0, 108623.0, 0.0421955, 0.0, 3573.84)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(103702.0, 103702.0, 0.0444855, 0.0, 3527.93), (107269.0, 107269.0, 0.0427647, 0.0, 3571.43), (110737.0, 110737.0, 0.041177, 0.0, 3588.79)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(142348.0, 142348.0, 0.0479053, 0.0, 939.884), (137373.0, 137373.0, 0.0501871, 0.0, 917.892), (138177.0, 138177.0, 0.0498929, 0.0, 916.069)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(109780.0, 109780.0, 0.0442741, 0.0, 5086.42), (107663.0, 107663.0, 0.0452148, 0.0, 5028.67), (108948.0, 108948.0, 0.0446894, 0.0, 5072.1)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(109759.0, 109759.0, 0.0442411, 0.0, 5083.12), (108137.0, 108137.0, 0.0450479, 0.0, 5057.78), (108815.0, 108815.0, 0.04471, 0.0, 5038.11)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(106691.0, 106691.0, 0.0458682, 0.0, 5043.55), (108021.0, 108021.0, 0.0450373, 0.0, 5041.45), (110638.0, 110638.0, 0.0437823, 0.0, 5068.65)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(129149.0, 129149.0, 0.0540999, 0.0, 1050.48), (109476.0, 109476.0, 0.0503589, 0.0, 924.406), (142261.0, 142261.0, 0.0537856, 0.0, 1222.93)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(112102.0, 112102.0, 0.045725, 0.0, 6523.81), (112269.0, 112269.0, 0.0455701, 0.0, 6531.66), (111602.0, 111602.0, 0.0459453, 0.0, 6530.73)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(109293.0, 109293.0, 0.0469943, 0.0, 6478.34), (111680.0, 111680.0, 0.0460389, 0.0, 6533.16), (110390.0, 110390.0, 0.0465508, 0.0, 6495.78)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(107479.0, 107479.0, 0.0480774, 0.0, 6462.35), (111586.0, 111586.0, 0.0459079, 0.0, 6531.83), (110096.0, 110096.0, 0.0466755, 0.0, 6489.14)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(151740.0, 151740.0, 0.056124, 0.0, 1667.71), (102389.0, 102389.0, 0.0534389, 0.0, 1073.26), (147175.0, 147175.0, 0.0557127, 0.0, 1616.25)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(112078.0, 112078.0, 0.0503686, 0.0, 9258.67), (110439.0, 110439.0, 0.0512938, 0.0, 9228.7), (112589.0, 112589.0, 0.0498881, 0.0, 9275.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(110793.0, 110793.0, 0.0509917, 0.0, 9266.3), (111479.0, 111479.0, 0.050596, 0.0, 9230.4), (113947.0, 113947.0, 0.0492867, 0.0, 9307.76)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(114086.0, 114086.0, 0.0490479, 0.0, 9354.82), (112389.0, 112389.0, 0.0500887, 0.0, 9263.79), (112203.0, 112203.0, 0.0501601, 0.0, 9268.97)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(96140.3, 96140.3, 0.0602456, 0.0, 1317.04), (123833.0, 123833.0, 0.0586249, 0.0, 1612.86), (91066.7, 91066.7, 0.0622132, 0.0, 1227.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(113260.0, 113260.0, 0.053017, 0.0, 11754.7), (112459.0, 112459.0, 0.053476, 0.0, 11714.3), (112940.0, 112940.0, 0.0533785, 0.0, 11758.2)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(112123.0, 112123.0, 0.0534119, 0.0, 11666.5), (115343.0, 115343.0, 0.0518274, 0.0, 11819.3), (110106.0, 110106.0, 0.0551375, 0.0, 11655.7)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(111807.0, 111807.0, 0.0539485, 0.0, 11719.9), (112420.0, 112420.0, 0.0538304, 0.0, 11787.5), (113152.0, 113152.0, 0.052745, 0.0, 11688.3)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(129850.0, 129850.0, 0.0655325, 0.0, 1906.86), (113485.0, 113485.0, 0.0637675, 0.0, 1613.24), (129069.0, 129069.0, 0.0640064, 0.0, 1774.91)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(112045.0, 112045.0, 0.0562702, 0.0, 13864.4), (112644.0, 112644.0, 0.0561196, 0.0, 13896.3), (109792.0, 109792.0, 0.0558557, 0.0, 13456.0)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(112941.0, 112941.0, 0.0558932, 0.0, 13915.8), (113446.0, 113446.0, 0.0542462, 0.0, 13645.3), (112769.0, 112769.0, 0.0559335, 0.0, 13895.2)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(112793.0, 112793.0, 0.0559056, 0.0, 13849.6), (112508.0, 112508.0, 0.0558038, 0.0, 13815.1), (111499.0, 111499.0, 0.0569646, 0.0, 13887.4)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(120387.0, 120387.0, 0.064223, 0.0, 1863.88), (92974.0, 92974.0, 0.0662328, 0.0, 1458.06), (142175.0, 142175.0, 0.0656398, 0.0, 2178.4)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(111017.0, 111017.0, 0.0584187, 0.0, 15620.5), (115832.0, 115832.0, 0.056032, 0.0, 16005.3), (109617.0, 109617.0, 0.0594124, 0.0, 15484.4)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(96515.9, 96515.9, 0.0568733, 0.0, 13313.0), (111291.0, 111291.0, 0.057934, 0.0, 15575.5), (112729.0, 112729.0, 0.0574871, 0.0, 15752.4)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(111314.0, 111314.0, 0.0587607, 0.0, 15708.9), (102549.0, 102549.0, 0.0573524, 0.0, 14308.9), (112734.0, 112734.0, 0.0576216, 0.0, 15792.8)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(125184.0, 125184.0, 0.0663509, 0.0, 1955.04), (94220.5, 94220.5, 0.0677441, 0.0, 1598.4), (105873.0, 105873.0, 0.0695081, 0.0, 1697.33)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(93351.6, 93351.6, 0.060823, 0.0, 13923.2), (107609.0, 107609.0, 0.0615199, 0.0, 16512.1), (102195.0, 102195.0, 0.0653834, 0.0, 15340.9)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(103391.0, 103391.0, 0.0650066, 0.0, 15606.9), (90638.3, 90638.3, 0.0607784, 0.0, 13671.9), (106724.0, 106724.0, 0.0613764, 0.0, 16335.3)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(106892.0, 106892.0, 0.0621241, 0.0, 16275.5), (102397.0, 102397.0, 0.0621106, 0.0, 15317.1), (107323.0, 107323.0, 0.0606884, 0.0, 16274.8)]), ({'binary': '..\/out-backoff\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(95339.6, 95339.6, 0.0722419, 0.0, 1606.52), (132200.0, 132200.0, 0.074819, 0.0, 2214.72), (89102.4, 89102.4, 0.0709545, 0.0, 1390.29)])]$/;"	v
RESULTS	benchmarks/results/istc12-8-30-13_cameraready.py	/^RESULTS = [({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10 --disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(398905.0, 398905.0, 0.0700164, 0.0, 69.9142), (402620.0, 402620.0, 0.069386, 0.0, 70.782), (401382.0, 401382.0, 0.0695872, 0.0, 71.7488)]), ({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10 --disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(453830.0, 453830.0, 0.0615368, 0.0, 86.2485), (451226.0, 451226.0, 0.0618907, 0.0, 84.082), (450126.0, 450126.0, 0.0620415, 0.0, 85.2653)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10 --disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(596865.0, 596865.0, 0.0467633, 0.0, 110.447), (604516.0, 604516.0, 0.0461746, 0.0, 113.597), (600628.0, 600628.0, 0.0464617, 0.0, 112.809)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(566476.0, 566476.0, 0.0493026, 0.0, 15.8496), (563466.0, 563466.0, 0.0495645, 0.0, 15.9314), (566009.0, 566009.0, 0.0493417, 0.0, 15.7497)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': True, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(589524.0, 589524.0, 0.0473696, 0.0, 16.4164), (596908.0, 596908.0, 0.0467816, 0.0, 17.8163), (591850.0, 591850.0, 0.047182, 0.0, 17.0831)])]$/;"	v
RESULTS	benchmarks/results/istc3-10-23-13.py	/^RESULTS = [({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(665194.0, 665194.0, 0.00145799, 0.0, 0.0), (664321.0, 664321.0, 0.00145999, 0.0, 0.0), (659362.0, 659362.0, 0.00147133, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(627665.0, 627665.0, 0.00154717, 0.0, 0.0), (638707.0, 638707.0, 0.00151958, 0.0, 0.0), (630758.0, 630758.0, 0.00153936, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(632883.0, 632883.0, 0.00153415, 0.0, 0.0), (633225.0, 633225.0, 0.00153232, 0.0, 0.0), (616378.0, 616378.0, 0.00157641, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(2672640.0, 2672640.0, 0.00144922, 0.0, 0.0), (2675660.0, 2675660.0, 0.00144759, 0.0, 0.0), (2673970.0, 2673970.0, 0.00144849, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(2527320.0, 2527320.0, 0.00153448, 0.0, 0.0166666), (2513740.0, 2513740.0, 0.0015435, 0.0, 0.0), (2517120.0, 2517120.0, 0.00154078, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(2524500.0, 2524500.0, 0.00153619, 0.0, 0.0), (2517640.0, 2517640.0, 0.00154114, 0.0, 0.0), (2525360.0, 2525360.0, 0.0015354, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(5064130.0, 5064130.0, 0.00153162, 0.0, 0.0), (5062450.0, 5062450.0, 0.00153251, 0.0, 0.0), (5073880.0, 5073880.0, 0.00152869, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(4745030.0, 4745030.0, 0.00163794, 0.0, 0.0), (4746190.0, 4746190.0, 0.00163751, 0.0, 0.033333), (4758670.0, 4758670.0, 0.00163252, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(4743920.0, 4743920.0, 0.00163778, 0.0, 0.033333), (4782210.0, 4782210.0, 0.00162426, 0.0, 0.0333331), (4760970.0, 4760970.0, 0.00163172, 0.0, 0.0166665)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(7086380.0, 7086380.0, 0.00164577, 0.0, 0.0), (7042810.0, 7042810.0, 0.00165601, 0.0, 0.0), (7082990.0, 7082990.0, 0.00164658, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(6686180.0, 6686180.0, 0.00174688, 0.0, 0.0166665), (6692920.0, 6692920.0, 0.00174363, 0.0, 0.0), (6713280.0, 6713280.0, 0.00173967, 0.0, 0.0166665)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(6762270.0, 6762270.0, 0.00172609, 0.0, 0.0), (6782020.0, 6782020.0, 0.00172096, 0.0, 0.0), (6786750.0, 6786750.0, 0.00172036, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(9181960.0, 9181960.0, 0.0016948, 0.0, 0.0), (9168390.0, 9168390.0, 0.00169683, 0.0, 0.0), (9171090.0, 9171090.0, 0.00169678, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8634840.0, 8634840.0, 0.00180441, 0.0, 0.033333), (8622440.0, 8622440.0, 0.0018062, 0.0, 0.0), (8564850.0, 8564850.0, 0.0018196, 0.0, 0.0166665)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8795810.0, 8795810.0, 0.00176914, 0.0, 0.033333), (8803920.0, 8803920.0, 0.00176931, 0.0, 0.0), (8799200.0, 8799200.0, 0.00176973, 0.0, 0.0333329)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(11387900.0, 11387900.0, 0.00170838, 0.0, 0.0), (11496800.0, 11496800.0, 0.00169184, 0.0, 0.0), (11488500.0, 11488500.0, 0.00169307, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(9738990.0, 9738990.0, 0.00200578, 0.0, 0.0333329), (9760700.0, 9760700.0, 0.00200063, 0.0, 0.0666657), (9651980.0, 9651980.0, 0.0020237, 0.0, 0.0166665)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(10726600.0, 10726600.0, 0.00181605, 0.0, 0.0333329), (10946000.0, 10946000.0, 0.00177867, 0.0, 0.0166665), (11034900.0, 11034900.0, 0.00176453, 0.0, 0.0166664)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(13516700.0, 13516700.0, 0.00172772, 0.0, 0.0), (13501900.0, 13501900.0, 0.00172956, 0.0, 0.0), (13495600.0, 13495600.0, 0.00173061, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(9087760.0, 9087760.0, 0.00259311, 0.0, 0.0166664), (9163000.0, 9163000.0, 0.00257069, 0.0, 0.0), (9060470.0, 9060470.0, 0.00260104, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(12933300.0, 12933300.0, 0.00180766, 0.0, 0.0), (12992900.0, 12992900.0, 0.00179912, 0.0, 0.0666659), (12976100.0, 12976100.0, 0.00180094, 0.0, 0.0166663)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(15893600.0, 15893600.0, 0.00171395, 0.0, 0.0), (15900000.0, 15900000.0, 0.00171336, 0.0, 0.0), (15939600.0, 15939600.0, 0.0017089, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8755330.0, 8755330.0, 0.00315022, 0.0, 0.0), (8801710.0, 8801710.0, 0.0031334, 0.0, 0.0), (8809090.0, 8809090.0, 0.00312979, 0.0, 0.0166662)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(15263600.0, 15263600.0, 0.00178589, 0.0, 0.0666651), (15260000.0, 15260000.0, 0.00178694, 0.0, 0.0333326), (15193000.0, 15193000.0, 0.00179443, 0.0, 0.0499989)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(17624800.0, 17624800.0, 0.00176737, 0.0, 0.0), (17596700.0, 17596700.0, 0.00177021, 0.0, 0.0), (17591600.0, 17591600.0, 0.00177088, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8651780.0, 8651780.0, 0.00364947, 0.0, 0.0166665), (8609210.0, 8609210.0, 0.00366802, 0.0, 0.0499984), (8626100.0, 8626100.0, 0.00366151, 0.0, 0.0166658)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(16785800.0, 16785800.0, 0.00185811, 0.0, 0.0833316), (16885600.0, 16885600.0, 0.00184669, 0.0, 0.0999984), (16856700.0, 16856700.0, 0.0018493, 0.0, 0.0499987)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(33646.5, 33646.5, 0.029612, 80.1205, 0.0), (34026.1, 34026.1, 0.0292766, 84.0236, 0.0), (33634.0, 33634.0, 0.0296285, 81.7065, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(33999.7, 33999.7, 0.0292969, 79.9259, 0.0), (33163.8, 33163.8, 0.0300449, 79.375, 0.0), (33467.8, 33467.8, 0.0297745, 80.003, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(36249.2, 36249.2, 0.0275061, 0.0, 0.0), (36970.8, 36970.8, 0.0269678, 0.0, 0.0), (36277.1, 36277.1, 0.0274837, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(121583.0, 121583.0, 0.0327675, 106.508, 4.52726), (121542.0, 121542.0, 0.0327998, 94.6702, 4.01465), (121066.0, 121066.0, 0.0329226, 96.6235, 4.6125)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(124093.0, 124093.0, 0.0321134, 94.2461, 4.76184), (123089.0, 123089.0, 0.032393, 90.4293, 4.79816), (122826.0, 122826.0, 0.0324568, 92.4991, 4.92956)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(130342.0, 130342.0, 0.0306012, 0.0, 5.96663), (134389.0, 134389.0, 0.0296727, 0.0, 5.03329), (133669.0, 133669.0, 0.0298368, 0.0, 5.59994)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(233347.0, 233347.0, 0.0341563, 140.331, 9.35607), (232957.0, 232957.0, 0.0342152, 176.826, 8.90821), (231095.0, 231095.0, 0.0345125, 154.034, 8.71245)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(230754.0, 230754.0, 0.0345627, 101.877, 9.39432), (228740.0, 228740.0, 0.0348503, 95.3754, 9.69039), (230134.0, 230134.0, 0.034648, 106.236, 9.50989)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(249296.0, 249296.0, 0.0320019, 0.0, 10.1333), (251357.0, 251357.0, 0.0317386, 0.0, 11.1499), (252833.0, 252833.0, 0.0315527, 0.0, 10.5499)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(345270.0, 345270.0, 0.0346358, 181.773, 12.6565), (347677.0, 347677.0, 0.0343883, 225.347, 13.6364), (349664.0, 349664.0, 0.0341994, 163.489, 13.8387)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(344102.0, 344102.0, 0.0347278, 110.551, 13.299), (349593.0, 349593.0, 0.0342056, 96.7936, 13.938), (350814.0, 350814.0, 0.0340899, 96.8305, 13.6586)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(372815.0, 372815.0, 0.0320968, 0.0, 15.6164), (376173.0, 376173.0, 0.0318084, 0.0, 15.8997), (371302.0, 371302.0, 0.0322255, 0.0, 15.8997)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(455586.0, 455586.0, 0.034978, 278.733, 17.9587), (452241.0, 452241.0, 0.0351256, 255.779, 17.7525), (454454.0, 454454.0, 0.0350775, 267.553, 17.7474)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(453779.0, 453779.0, 0.0351553, 99.9213, 18.1767), (455583.0, 455583.0, 0.0350079, 103.563, 17.54), (454717.0, 454717.0, 0.0350833, 99.4235, 18.2768)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(488973.0, 488973.0, 0.0326302, 0.0, 21.2665), (490321.0, 490321.0, 0.0325391, 0.0, 22.3792), (497241.0, 497241.0, 0.0320882, 0.0, 21.0299)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(567455.0, 567455.0, 0.0348778, 257.245, 21.2503), (562582.0, 562582.0, 0.0353522, 400.975, 22.9508), (566166.0, 566166.0, 0.0352049, 300.27, 22.463)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(577258.0, 577258.0, 0.0345186, 100.998, 22.4772), (569533.0, 569533.0, 0.0349996, 99.6071, 21.4014), (573197.0, 573197.0, 0.0347675, 101.362, 22.0443)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(623848.0, 623848.0, 0.031967, 0.0, 26.345), (621572.0, 621572.0, 0.0320872, 0.0, 26.4496), (625838.0, 625838.0, 0.0318558, 0.0, 25.4792)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(666369.0, 666369.0, 0.0354124, 335.548, 25.9776), (675336.0, 675336.0, 0.0353886, 244.572, 27.0097), (665293.0, 665293.0, 0.0359331, 408.702, 25.9481)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(674851.0, 674851.0, 0.0354423, 102.418, 26.6617), (683970.0, 683970.0, 0.034972, 100.681, 26.3128), (682250.0, 682250.0, 0.0350574, 100.38, 27.5601)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(740028.0, 740028.0, 0.0323347, 0.0, 30.3467), (741882.0, 741882.0, 0.0322591, 0.0, 30.6996), (740927.0, 740927.0, 0.0323014, 0.0, 31.5828)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(755412.0, 755412.0, 0.0363388, 968.997, 29.208), (749625.0, 749625.0, 0.0361973, 1614.41, 29.1154), (752208.0, 752208.0, 0.0361689, 1596.16, 28.6564)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(779616.0, 779616.0, 0.0357905, 104.391, 30.8379), (779070.0, 779070.0, 0.0358176, 104.903, 29.8733), (786200.0, 786200.0, 0.0354812, 105.349, 31.0659)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(864650.0, 864650.0, 0.0322888, 0.0, 34.4092), (859099.0, 859099.0, 0.0325006, 0.0, 35.8661), (858676.0, 858676.0, 0.0325163, 0.0, 35.9827)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(794606.0, 794606.0, 0.0381952, 8686.11, 30.5177), (792937.0, 792937.0, 0.0383354, 5444.97, 30.1904), (766209.0, 766209.0, 0.0382494, 17857.9, 28.0529)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(841285.0, 841285.0, 0.0378647, 340.501, 33.3706), (872640.0, 872640.0, 0.036514, 466.928, 33.3543), (871260.0, 871260.0, 0.0365663, 527.723, 33.5256)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(991642.0, 991642.0, 0.0321701, 0.0, 41.6824), (994802.0, 994802.0, 0.0320704, 0.0, 39.5654), (993671.0, 993671.0, 0.0321026, 0.0, 39.7486)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1033030.0, 1033030.0, 0.0270392, 0.0, 0.0), (1033550.0, 1033550.0, 0.0270258, 0.0, 0.0), (1036600.0, 1036600.0, 0.0269456, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1021410.0, 1021410.0, 0.0273416, 0.0, 147.513), (1021190.0, 1021190.0, 0.0273543, 0.0, 149.014), (1008930.0, 1008930.0, 0.0276875, 0.0, 148.564)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(981914.0, 981914.0, 0.028443, 0.0, 286.642), (1012990.0, 1012990.0, 0.0275678, 0.0, 299.629), (1003260.0, 1003260.0, 0.0278304, 0.0, 293.704)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1001810.0, 1001810.0, 0.0278721, 0.0, 435.229), (992926.0, 992926.0, 0.0281152, 0.0, 428.495), (1005500.0, 1005500.0, 0.0277683, 0.0, 438.603)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(997260.0, 997260.0, 0.0279922, 0.0, 582.686), (1001110.0, 1001110.0, 0.0278849, 0.0, 584.443), (983651.0, 983651.0, 0.028374, 0.0, 570.248)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(988359.0, 988359.0, 0.0282336, 0.0, 711.884), (992980.0, 992980.0, 0.0281087, 0.0, 715.669), (979124.0, 979124.0, 0.0285054, 0.0, 714.291)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(981990.0, 981990.0, 0.0284105, 0.0, 840.281), (979172.0, 979172.0, 0.0284929, 0.0, 835.256), (990452.0, 990452.0, 0.0281752, 0.0, 855.436)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(980409.0, 980409.0, 0.0284507, 0.0, 975.658), (958352.0, 958352.0, 0.0291135, 0.0, 961.153), (958207.0, 958207.0, 0.0291182, 0.0, 963.485)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(972633.0, 972633.0, 0.0286723, 0.0, 1099.53), (982107.0, 982107.0, 0.0284022, 0.0, 1123.94), (952070.0, 952070.0, 0.0293025, 0.0, 1086.55)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(978183.0, 978183.0, 0.0285034, 0.0, 1238.53), (977567.0, 977567.0, 0.0285293, 0.0, 1254.63), (977362.0, 977362.0, 0.0285355, 0.0, 1242.97)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(973667.0, 973667.0, 0.0286368, 0.0, 1368.57), (977250.0, 977250.0, 0.0285327, 0.0, 1388.81), (971705.0, 971705.0, 0.0286909, 0.0, 1359.39)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1075290.0, 1075290.0, 0.0259774, 0.0, 0.0), (1078920.0, 1078920.0, 0.0258894, 0.0, 0.0), (1071830.0, 1071830.0, 0.026064, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1053780.0, 1053780.0, 0.0265098, 0.0, 158.632), (1061900.0, 1061900.0, 0.0263005, 0.0, 158.312), (1037270.0, 1037270.0, 0.02694, 0.0, 155.341)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1056410.0, 1056410.0, 0.0264268, 0.0, 315.825), (1060370.0, 1060370.0, 0.0263327, 0.0, 316.946), (1060400.0, 1060400.0, 0.0263329, 0.0, 312.18)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1013930.0, 1013930.0, 0.0275357, 0.0, 449.123), (1047410.0, 1047410.0, 0.0266544, 0.0, 459.988), (1054260.0, 1054260.0, 0.0264945, 0.0, 463.285)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1048140.0, 1048140.0, 0.0266425, 0.0, 609.624), (1013100.0, 1013100.0, 0.0275677, 0.0, 600.51), (1040210.0, 1040210.0, 0.026832, 0.0, 609.559)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1024670.0, 1024670.0, 0.0272472, 0.0, 740.583), (1019610.0, 1019610.0, 0.0273839, 0.0, 754.886), (1025300.0, 1025300.0, 0.027226, 0.0, 747.172)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1004510.0, 1004510.0, 0.0277897, 0.0, 884.956), (1031020.0, 1031020.0, 0.0270751, 0.0, 908.855), (1018950.0, 1018950.0, 0.0273968, 0.0, 888.021)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1008650.0, 1008650.0, 0.027665, 0.0, 1022.02), (1033230.0, 1033230.0, 0.0269973, 0.0, 1048.82), (1038160.0, 1038160.0, 0.0268679, 0.0, 1057.27)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1030810.0, 1030810.0, 0.0270679, 0.0, 1187.97), (999149.0, 999149.0, 0.0279264, 0.0, 1152.75), (1019760.0, 1019760.0, 0.0273473, 0.0, 1174.73)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1013880.0, 1013880.0, 0.0275101, 0.0, 1313.72), (1014470.0, 1014470.0, 0.0275005, 0.0, 1310.09), (983344.0, 983344.0, 0.0283589, 0.0, 1269.04)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1021650.0, 1021650.0, 0.0272973, 0.0, 1458.36), (1001840.0, 1001840.0, 0.0278367, 0.0, 1429.79), (1022540.0, 1022540.0, 0.0272602, 0.0, 1451.32)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1163900.0, 1163900.0, 0.0239978, 0.0, 0.0), (1148930.0, 1148930.0, 0.0243111, 0.0, 0.0), (1149080.0, 1149080.0, 0.0243212, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1112200.0, 1112200.0, 0.0251234, 0.0, 164.363), (1139350.0, 1139350.0, 0.0245084, 0.0, 169.774), (1148990.0, 1148990.0, 0.0243014, 0.0, 169.225)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1132420.0, 1132420.0, 0.0246486, 0.0, 334.76), (1109160.0, 1109160.0, 0.0251866, 0.0, 327.961), (1108940.0, 1108940.0, 0.0251917, 0.0, 328.695)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1128540.0, 1128540.0, 0.024732, 0.0, 499.074), (1117360.0, 1117360.0, 0.0249961, 0.0, 496.675), (1095090.0, 1095090.0, 0.0255044, 0.0, 488.786)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1121500.0, 1121500.0, 0.0248837, 0.0, 660.428), (1106540.0, 1106540.0, 0.0252348, 0.0, 651.928), (1087730.0, 1087730.0, 0.0256723, 0.0, 642.205)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1100670.0, 1100670.0, 0.0253634, 0.0, 813.24), (1101470.0, 1101470.0, 0.0253323, 0.0, 802.889), (1094350.0, 1094350.0, 0.0255111, 0.0, 802.264)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1106510.0, 1106510.0, 0.0252107, 0.0, 966.833), (1091550.0, 1091550.0, 0.0255719, 0.0, 952.553), (1104750.0, 1104750.0, 0.0252476, 0.0, 968.01)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1088350.0, 1088350.0, 0.025641, 0.0, 1110.1), (1091850.0, 1091850.0, 0.0255452, 0.0, 1102.11), (1097620.0, 1097620.0, 0.025409, 0.0, 1120.19)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1072080.0, 1072080.0, 0.0260266, 0.0, 1237.24), (1088360.0, 1088360.0, 0.0256359, 0.0, 1255.33), (1089940.0, 1089940.0, 0.0255857, 0.0, 1259.93)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1085940.0, 1085940.0, 0.0256873, 0.0, 1410.5), (1075360.0, 1075360.0, 0.025935, 0.0, 1390.09), (1097310.0, 1097310.0, 0.0254081, 0.0, 1425.44)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1081110.0, 1081110.0, 0.025798, 0.0, 1554.79), (1090140.0, 1090140.0, 0.0255701, 0.0, 1552.01), (1064400.0, 1064400.0, 0.0261977, 0.0, 1516.22)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1533810.0, 1533810.0, 0.0182077, 0.0, 0.0), (1521750.0, 1521750.0, 0.0183467, 0.0, 0.0), (1520430.0, 1520430.0, 0.0183701, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1258850.0, 1258850.0, 0.0221954, 0.0, 0.0), (1263730.0, 1263730.0, 0.0221042, 0.0, 0.0), (1218520.0, 1218520.0, 0.0229307, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1014680.0, 1014680.0, 0.0275423, 0.0, 0.0), (1010200.0, 1010200.0, 0.0276688, 0.0, 0.0), (1030290.0, 1030290.0, 0.0271247, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(831370.0, 831370.0, 0.0336317, 0.0, 0.0), (853830.0, 853830.0, 0.0327386, 0.0, 0.0), (850073.0, 850073.0, 0.0328919, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(694986.0, 694986.0, 0.0402413, 0.0, 0.0), (679188.0, 679188.0, 0.0411693, 0.0, 0.0), (690933.0, 690933.0, 0.0404774, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(579706.0, 579706.0, 0.048252, 0.0, 0.0), (577753.0, 577753.0, 0.0484129, 0.0, 0.0), (588444.0, 588444.0, 0.0475357, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(479047.0, 479047.0, 0.0583913, 0.0, 0.0), (493020.0, 493020.0, 0.0567452, 0.0, 0.0), (487196.0, 487196.0, 0.0574239, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(427406.0, 427406.0, 0.0654586, 0.0, 0.0), (417453.0, 417453.0, 0.0670204, 0.0, 0.0), (433210.0, 433210.0, 0.0645865, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(378740.0, 378740.0, 0.0738743, 0.0, 0.0), (374003.0, 374003.0, 0.0748143, 0.0, 0.0), (378535.0, 378535.0, 0.0739133, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(327063.0, 327063.0, 0.0855549, 0.0, 0.0), (337879.0, 337879.0, 0.0828181, 0.0, 0.0), (332812.0, 332812.0, 0.0840759, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(303470.0, 303470.0, 0.0922156, 0.0, 0.0), (299072.0, 299072.0, 0.0935658, 0.0, 0.0), (301654.0, 301654.0, 0.0927694, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(53892.3, 53892.3, 0.0185116, 0.0, 0.0), (54073.5, 54073.5, 0.0184473, 0.0, 0.0), (54042.1, 54042.1, 0.0184532, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(40341.0, 40341.0, 0.0247351, 0.0, 0.0), (40044.9, 40044.9, 0.0249105, 0.0, 0.0), (40133.2, 40133.2, 0.0248571, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(40750.0, 40750.0, 0.0244782, 0.0, 0.0), (40465.1, 40465.1, 0.0246588, 0.0, 0.0), (40489.3, 40489.3, 0.0246355, 0.0, 0.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(78726.1, 78726.1, 0.0253487, 0.0, 4.03331), (77342.3, 77342.3, 0.0257943, 0.0, 4.01664), (79023.8, 79023.8, 0.0252515, 0.0, 3.83331)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(80741.4, 80741.4, 0.0247134, 0.0, 4.0833), (81440.0, 81440.0, 0.0244944, 0.0, 4.04997), (81540.6, 81540.6, 0.0244643, 0.0, 4.13331)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(153914.0, 153914.0, 0.0259219, 0.0, 22.6998), (152730.0, 152730.0, 0.0261246, 0.0, 22.5165), (151860.0, 151860.0, 0.026269, 0.0, 21.8498)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(156155.0, 156155.0, 0.0255505, 0.0, 24.7998), (158082.0, 158082.0, 0.0252382, 0.0, 23.3498), (158245.0, 158245.0, 0.0252073, 0.0, 24.7498)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(217577.0, 217577.0, 0.0255571, 0.0, 14879.1), (214895.0, 214895.0, 0.0259024, 0.0, 14679.5), (213137.0, 213137.0, 0.0261356, 0.0, 14392.7)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(235037.0, 235037.0, 0.0252876, 0.0, 1217.14), (235615.0, 235615.0, 0.0252247, 0.0, 1216.66), (234097.0, 234097.0, 0.0253872, 0.0, 1210.04)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(279114.0, 279114.0, 0.0255675, 0.0, 29261.0), (275275.0, 275275.0, 0.0259244, 0.0, 28946.1), (275986.0, 275986.0, 0.0258717, 0.0, 28924.6)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(307719.0, 307719.0, 0.0256558, 0.0, 2363.34), (307989.0, 307989.0, 0.0256363, 0.0, 2359.81), (308379.0, 308379.0, 0.0255978, 0.0, 2367.41)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(320095.0, 320095.0, 0.025741, 0.0, 56559.7), (321325.0, 321325.0, 0.0256287, 0.0, 56446.6), (320318.0, 320318.0, 0.0257409, 0.0, 56502.7)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(382666.0, 382666.0, 0.0256374, 0.0, 4616.02), (378430.0, 378430.0, 0.0259206, 0.0, 4550.77), (383246.0, 383246.0, 0.025599, 0.0, 4613.83)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(356794.0, 356794.0, 0.0262698, 0.0, 81898.3), (354872.0, 354872.0, 0.0263922, 0.0, 82007.5), (355081.0, 355081.0, 0.0263984, 0.0, 81775.1)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(439016.0, 439016.0, 0.0267091, 0.0, 6607.12), (437660.0, 437660.0, 0.0267958, 0.0, 6612.46), (428831.0, 428831.0, 0.0273472, 0.0, 6474.98)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(409664.0, 409664.0, 0.0268756, 0.0, 145023.0), (407734.0, 407734.0, 0.0271094, 0.0, 143304.0), (410884.0, 410884.0, 0.0267275, 0.0, 145959.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(568960.0, 568960.0, 0.0272104, 0.0, 12840.8), (573271.0, 573271.0, 0.0270059, 0.0, 12901.6), (564518.0, 564518.0, 0.0274254, 0.0, 12756.5)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(414427.0, 414427.0, 0.0275793, 0.0, 199563.0), (417098.0, 417098.0, 0.0274794, 0.0, 199845.0), (414689.0, 414689.0, 0.02759, 0.0, 198661.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(687870.0, 687870.0, 0.0278629, 0.0, 20634.1), (683714.0, 683714.0, 0.0280316, 0.0, 20566.7), (680910.0, 680910.0, 0.0281516, 0.0, 20434.8)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(398938.0, 398938.0, 0.0290732, 0.0, 232084.0), (405759.0, 405759.0, 0.0279203, 0.0, 236090.0), (405847.0, 405847.0, 0.027864, 0.0, 236646.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(795489.0, 795489.0, 0.0286313, 0.0, 29819.7), (804561.0, 804561.0, 0.028297, 0.0, 30394.9), (804037.0, 804037.0, 0.0283039, 0.0, 30359.5)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(326437.0, 326437.0, 0.0283589, 0.0, 218991.0), (328130.0, 328130.0, 0.0282548, 0.0, 218805.0), (325996.0, 325996.0, 0.0285465, 0.0, 218760.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(907256.0, 907256.0, 0.028978, 0.0, 41208.1), (903835.0, 903835.0, 0.0291006, 0.0, 40772.9), (898291.0, 898291.0, 0.0292702, 0.0, 40843.9)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(286045.0, 286045.0, 0.0294122, 0.0, 202010.0), (285447.0, 285447.0, 0.0286748, 0.0, 199200.0), (286838.0, 286838.0, 0.0288154, 0.0, 202265.0)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(965868.0, 965868.0, 0.0303036, 0.0, 50604.5), (973013.0, 973013.0, 0.0301178, 0.0, 50643.1), (974751.0, 974751.0, 0.0300955, 0.0, 50867.0)]), ({'binary': '..\/out-factor-gc-nowriteinplace.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(539316.0, 539316.0, 0.0518045, 0.0, 28.2828), (540671.0, 540671.0, 0.0516787, 0.0, 26.8329), (542829.0, 542829.0, 0.0514702, 0.0, 28.2661)]), ({'binary': '..\/out-factor-gc-nowriteinplace.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(648180.0, 648180.0, 0.0430938, 0.0, 33.0161), (645082.0, 645082.0, 0.0433076, 0.0, 33.6994), (644681.0, 644681.0, 0.0433314, 0.0, 33.1494)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(861963.0, 861963.0, 0.0323939, 0.0, 35.8494), (863284.0, 863284.0, 0.0323445, 0.0, 36.0827), (860851.0, 860851.0, 0.0324312, 0.0, 35.1661)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(951699.0, 951699.0, 0.0293136, 0.0, 125.143), (931985.0, 931985.0, 0.0299406, 0.0, 121.942), (938140.0, 938140.0, 0.0297451, 0.0, 123.59)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': True, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(970053.0, 970053.0, 0.0287609, 0.0, 130.1), (968778.0, 968778.0, 0.0287986, 0.0, 129.871), (970676.0, 970676.0, 0.028742, 0.0, 131.372)]), ({'binary': '..\/out-factor-fake-compression.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(842443.0, 842443.0, 0.0331075, 97.3666, 35.4747), (843675.0, 843675.0, 0.0330794, 106.84, 35.1617), (846982.0, 846982.0, 0.0329294, 96.814, 34.1455)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': True, 'disable_madv_willneed': True}, [(721700.0, 721700.0, 0.0386586, 129.016, 25.3493), (718373.0, 718373.0, 0.0388376, 147.253, 25.8169), (724009.0, 724009.0, 0.0385333, 144.936, 25.484)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(255470.0, 255470.0, 0.0620555, 0.0, 3708.87), (254435.0, 254435.0, 0.0622975, 0.0, 3734.98), (257718.0, 257718.0, 0.0615015, 0.0, 3811.68)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(235383.0, 235383.0, 0.0673883, 0.0, 3421.55), (243195.0, 243195.0, 0.0651853, 0.0, 3660.02), (244964.0, 244964.0, 0.0647064, 0.0, 3729.13)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(245842.0, 245842.0, 0.0644727, 0.0, 3754.5), (243161.0, 243161.0, 0.0651775, 0.0, 3708.75), (245002.0, 245002.0, 0.0646901, 0.0, 3717.77)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(243715.0, 243715.0, 0.0650215, 0.0, 3805.53), (242694.0, 242694.0, 0.0652814, 0.0, 3839.5), (229482.0, 229482.0, 0.069083, 0.0, 3376.49)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(244305.0, 244305.0, 0.0648529, 0.0, 3873.37), (240537.0, 240537.0, 0.0658617, 0.0, 3800.32), (243395.0, 243395.0, 0.0651118, 0.0, 3797.1)]), ({'binary': '..\/out-perf.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(241649.0, 241649.0, 0.065564, 0.0, 3732.48), (242059.0, 242059.0, 0.065461, 0.0, 3789.36), (240808.0, 240808.0, 0.0658073, 0.0, 3731.09)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(204858.0, 204858.0, 0.0690839, 0.0, 19714.1), (205259.0, 205259.0, 0.0689556, 0.0, 19749.3), (205786.0, 205786.0, 0.0687412, 0.0, 19757.4)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(197188.0, 197188.0, 0.0705438, 0.0, 21442.2), (198972.0, 198972.0, 0.0699698, 0.0, 21664.0), (196096.0, 196096.0, 0.0709659, 0.0, 21213.4)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(196745.0, 196745.0, 0.0696571, 0.0, 23796.8), (194573.0, 194573.0, 0.070444, 0.0, 23573.4), (194135.0, 194135.0, 0.070552, 0.0, 23533.0)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(192016.0, 192016.0, 0.0703985, 0.0, 25279.3), (192908.0, 192908.0, 0.0700513, 0.0, 25443.5), (192155.0, 192155.0, 0.0702697, 0.0, 25437.7)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(187791.0, 187791.0, 0.0711075, 0.0, 26725.5), (187687.0, 187687.0, 0.0711262, 0.0, 26712.9), (187170.0, 187170.0, 0.0711972, 0.0, 26658.4)]), ({'binary': '..\/out-factor-gc.masstree\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(186841.0, 186841.0, 0.0704994, 0.0, 28420.0), (181821.0, 181821.0, 0.0724888, 0.0, 27485.4), (188836.0, 188836.0, 0.0697673, 0.0, 28708.5)])]$/;"	v
RESULTS	benchmarks/results/istc3-7-27-13.py	/^RESULTS = [({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': True, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(27932.9, 25707.6, 0.0357025, 43.6693, 0.0), (27225.1, 25056.8, 0.0366308, 44.4688, 0.0), (26066.5, 23989.5, 0.038259, 51.7758, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30559.4, 0.0, 0.0326457, 0.0, 0.0), (30975.7, 0.0, 0.0322002, 0.0, 0.0), (30263.2, 0.0, 0.0329574, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': True, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(104089.0, 95747.0, 0.0383247, 52.3198, 4.4979), (103967.0, 95633.5, 0.0383704, 65.3959, 4.14833), (104624.0, 96239.2, 0.0381277, 52.0013, 4.71454)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112168.0, 0.0, 0.0355806, 0.0, 5.63329), (111897.0, 0.0, 0.0356603, 0.0, 4.69996), (112498.0, 0.0, 0.0354715, 0.0, 4.73329)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': True, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(187507.0, 172508.0, 0.042552, 153.726, 7.24524), (193159.0, 177704.0, 0.0413084, 94.652, 8.22911), (186911.0, 171962.0, 0.042691, 127.489, 7.61311)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(215159.0, 0.0, 0.0371015, 0.0, 9.03326), (215075.0, 0.0, 0.0371126, 0.0, 9.09989), (215787.0, 0.0, 0.0369858, 0.0, 9.3166)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': True, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(274235.0, 252266.0, 0.0436398, 166.333, 11.3754), (273407.0, 251499.0, 0.0437674, 201.409, 10.809), (269463.0, 247877.0, 0.0444047, 248.662, 11.0905)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(319060.0, 0.0, 0.0375294, 0.0, 13.3831), (313453.0, 0.0, 0.0381976, 0.0, 13.5831), (314425.0, 0.0, 0.0380777, 0.0, 13.5998)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': True, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(331782.0, 305201.0, 0.0477054, 859.518, 12.9499), (325504.0, 299429.0, 0.0486297, 898.045, 12.6247), (330611.0, 304123.0, 0.0479017, 897.195, 12.4785)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(412063.0, 0.0, 0.0387433, 0.0, 17.3998), (412653.0, 0.0, 0.0386915, 0.0, 17.7665), (414960.0, 0.0, 0.0384705, 0.0, 18.1831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': True, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(351266.0, 323144.0, 0.0562856, 1207.4, 12.566), (358881.0, 330150.0, 0.054982, 1246.28, 12.3676), (356129.0, 327621.0, 0.055508, 1230.4, 11.84)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(503789.0, 0.0, 0.0396117, 0.0, 23.033), (502896.0, 0.0, 0.0396838, 0.0, 22.1998), (491385.0, 0.0, 0.0406139, 0.0, 22.6164)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': True, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(377349.0, 347108.0, 0.0623337, 1848.23, 12.2314), (384724.0, 353894.0, 0.0610587, 2023.77, 12.5417), (380727.0, 350213.0, 0.0620179, 1863.16, 11.978)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(572058.0, 0.0, 0.0418715, 0.0, 25.5163), (595977.0, 0.0, 0.0401823, 0.0, 25.7497), (570526.0, 0.0, 0.0419793, 0.0, 24.783)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': True, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(392417.0, 360987.0, 0.0696299, 2461.2, 12.0009), (391837.0, 360453.0, 0.0695999, 2344.58, 12.6564), (390281.0, 359022.0, 0.069838, 2547.39, 11.9206)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(649335.0, 0.0, 0.0430346, 0.0, 28.4162), (652786.0, 0.0, 0.0428061, 0.0, 28.8829), (646301.0, 0.0, 0.0432359, 0.0, 29.3662)]),({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': True, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(380778.0, 350266.0, 0.0815702, 5329.71, 11.6806), (381149.0, 350607.0, 0.0806715, 4643.52, 12.0704), (380764.0, 350254.0, 0.080364, 5234.89, 11.7478)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(714670.0, 0.0, 0.0446695, 0.0, 32.466), (731601.0, 0.0, 0.0436383, 0.0, 32.7657), (717230.0, 0.0, 0.0445168, 0.0, 31.9157)])]$/;"	v
RESULTS	benchmarks/results/istc3-7-31-13.py	/^RESULTS = [({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': True, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(29172.5, 29172.5, 0.0341824, 43.0112, 0.0), (29398.3, 29398.3, 0.0339165, 42.9486, 0.0), (28847.7, 28847.7, 0.0345633, 42.8973, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30468.6, 30468.6, 0.0327431, 0.0, 0.0), (29992.4, 29992.4, 0.0332567, 0.0, 0.0), (31170.2, 31170.2, 0.0320002, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': True, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(103422.0, 103422.0, 0.0385643, 85.2116, 4.06392), (105666.0, 105666.0, 0.0377509, 60.8138, 3.93148), (104045.0, 104045.0, 0.0383381, 69.674, 4.63118)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(113136.0, 113136.0, 0.0352708, 0.0, 4.78329), (114626.0, 114626.0, 0.0348127, 0.0, 4.7333), (114772.0, 114772.0, 0.0347643, 0.0, 5.1833)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': True, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(197185.0, 197185.0, 0.0404586, 94.891, 8.41167), (197842.0, 197842.0, 0.0403221, 115.439, 7.94573), (197553.0, 197553.0, 0.0402832, 145.298, 8.4924)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(216956.0, 216956.0, 0.0367886, 0.0, 9.64994), (216944.0, 216944.0, 0.0367856, 0.0, 9.98321), (215150.0, 215150.0, 0.0370956, 0.0, 9.59995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': True, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(296988.0, 296988.0, 0.0402945, 167.935, 12.127), (297616.0, 297616.0, 0.0402009, 213.303, 12.1242), (295502.0, 295502.0, 0.0404885, 258.694, 12.6107)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(316547.0, 316547.0, 0.0377822, 0.0, 13.4998), (321822.0, 321822.0, 0.0371894, 0.0, 13.4833), (318126.0, 318126.0, 0.037625, 0.0, 13.4665)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': True, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(391746.0, 391746.0, 0.0407244, 169.879, 16.0217), (386561.0, 386561.0, 0.041277, 181.483, 15.2751), (389939.0, 389939.0, 0.0409258, 162.949, 15.6935)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(423632.0, 423632.0, 0.0376798, 0.0, 18.3165), (425391.0, 425391.0, 0.0375244, 0.0, 18.3499), (422392.0, 422392.0, 0.0377958, 0.0, 17.9999)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': True, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(477401.0, 477401.0, 0.0417748, 99.8102, 18.5246), (484175.0, 484175.0, 0.0411903, 195.776, 19.9578), (485011.0, 485011.0, 0.0411185, 265.607, 20.8213)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(536948.0, 536948.0, 0.0371455, 0.0, 22.483), (538513.0, 538513.0, 0.0370509, 0.0, 23.383), (532447.0, 532447.0, 0.0374746, 0.0, 22.3997)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': True, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(573385.0, 573385.0, 0.0413281, 431.492, 23.0567), (570228.0, 570228.0, 0.041975, 220.776, 22.7373), (573395.0, 573395.0, 0.0417394, 145.422, 23.4863)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(632495.0, 632495.0, 0.0378555, 0.0, 27.383), (638658.0, 638658.0, 0.0374896, 0.0, 26.983), (631381.0, 631381.0, 0.0379224, 0.0, 26.5997)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': True, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(644206.0, 644206.0, 0.0427002, 1196.09, 26.5088), (635368.0, 635368.0, 0.0431587, 940.665, 26.4838), (645459.0, 645459.0, 0.0421841, 1584.15, 25.8248)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728954.0, 728954.0, 0.0383087, 0.0, 31.2495), (730546.0, 730546.0, 0.0382386, 0.0, 30.0829), (731333.0, 731333.0, 0.0381883, 0.0, 32.0495)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': True, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(681638.0, 681638.0, 0.0464162, 935.341, 28.1929), (683559.0, 683559.0, 0.0464315, 731.81, 29.2552), (678029.0, 678029.0, 0.0468788, 612.582, 27.1238)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(799321.0, 799321.0, 0.0399277, 0.0, 34.0809), (799648.0, 799648.0, 0.0399073, 0.0, 35.415), (803230.0, 803230.0, 0.0397377, 0.0, 34.6826)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13.py	/^RESULTS = [({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': True, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(29381.4, 29381.4, 0.0339166, 83.9258, 0.0), (28600.6, 28600.6, 0.0348584, 82.6534, 0.0), (28147.4, 28147.4, 0.0354085, 85.7701, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30286.9, 30286.9, 0.0329245, 0.0, 0.0), (30753.4, 30753.4, 0.0324305, 0.0, 0.0), (31151.2, 31151.2, 0.0320159, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': True, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(104443.0, 104443.0, 0.0381788, 96.0151, 4.16338), (105184.0, 105184.0, 0.0379089, 107.722, 4.34632), (101418.0, 101418.0, 0.0393277, 97.5319, 4.39737)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112481.0, 112481.0, 0.0354717, 0.0, 5.06663), (111014.0, 111014.0, 0.0359431, 0.0, 5.14995), (112559.0, 112559.0, 0.035451, 0.0, 4.39996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': True, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(195183.0, 195183.0, 0.0408511, 165.482, 8.40715), (195429.0, 195429.0, 0.0407978, 116.612, 7.95758), (198778.0, 198778.0, 0.040128, 141.342, 8.44383)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(209400.0, 209400.0, 0.0381135, 0.0, 9.3166), (209405.0, 209405.0, 0.0381132, 0.0, 9.03321), (214395.0, 214395.0, 0.0372271, 0.0, 9.49995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': True, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(295485.0, 295485.0, 0.0404785, 160.172, 11.622), (294952.0, 294952.0, 0.040542, 137.536, 12.9175), (298367.0, 298367.0, 0.0400908, 152.179, 11.6397)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(317759.0, 317759.0, 0.0376752, 0.0, 13.5665), (319487.0, 319487.0, 0.0374694, 0.0, 13.5165), (323316.0, 323316.0, 0.0370279, 0.0, 13.9331)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': True, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(392681.0, 392681.0, 0.0406083, 178.028, 16.3166), (390808.0, 390808.0, 0.0408062, 134.08, 15.9497), (392443.0, 392443.0, 0.0406377, 143.774, 15.5671)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(420957.0, 420957.0, 0.0379212, 0.0, 18.2664), (419207.0, 419207.0, 0.0380766, 0.0, 18.8332), (421561.0, 421561.0, 0.0378607, 0.0, 17.6499)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': True, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(487133.0, 487133.0, 0.040897, 182.749, 20.3996), (482100.0, 482100.0, 0.0413421, 149.776, 19.9923), (482364.0, 482364.0, 0.0413235, 147.405, 18.6297)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(526460.0, 526460.0, 0.0378989, 0.0, 22.0331), (529197.0, 529197.0, 0.0377043, 0.0, 23.7497), (533214.0, 533214.0, 0.0374174, 0.0, 22.3831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': True, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(576874.0, 576874.0, 0.0414611, 190.94, 23.9386), (568120.0, 568120.0, 0.0420953, 199.285, 22.8701), (580741.0, 580741.0, 0.0411825, 255.775, 23.1551)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(625632.0, 625632.0, 0.0382689, 0.0, 26.5161), (631692.0, 631692.0, 0.0378988, 0.0, 26.8828), (622284.0, 622284.0, 0.038478, 0.0, 26.9162)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': True, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(666090.0, 666090.0, 0.0418768, 120.662, 27.6226), (652526.0, 652526.0, 0.0427807, 184.736, 27.5441), (664060.0, 664060.0, 0.0420135, 121.436, 26.78)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728676.0, 728676.0, 0.0383326, 0.0, 30.5828), (731237.0, 731237.0, 0.0382001, 0.0, 32.2995), (724542.0, 724542.0, 0.0385532, 0.0, 32.4161)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': True, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(675819.0, 675819.0, 0.0471086, 385.01, 27.8739), (681825.0, 681825.0, 0.0466471, 564.667, 28.1586), (677843.0, 677843.0, 0.0469547, 344.102, 27.9294)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(783983.0, 783983.0, 0.0407091, 0.0, 35.0656), (782308.0, 782308.0, 0.040797, 0.0, 33.7652), (715915.0, 715915.0, 0.0445905, 0.0, 31.1658)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_compress.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(26529.8, 26529.8, 0.0375845, 86.9875, 0.0), (26590.3, 26590.3, 0.0374976, 96.7505, 0.0), (25907.2, 25907.2, 0.0384877, 89.7372, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(94923.0, 94923.0, 0.0420244, 118.105, 3.9137), (96772.3, 96772.3, 0.0412222, 99.4943, 3.66408), (97558.4, 97558.4, 0.040879, 98.773, 3.61314)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(180752.0, 180752.0, 0.0441143, 155.911, 7.25652), (183287.0, 183287.0, 0.0435169, 135.895, 7.32585), (183258.0, 183258.0, 0.0435234, 196.72, 7.24199)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(277963.0, 277963.0, 0.0430299, 165.512, 10.3201), (275547.0, 275547.0, 0.0434273, 155.312, 11.0243), (275690.0, 275690.0, 0.0434118, 117.571, 10.8426)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(363296.0, 363296.0, 0.0439195, 139.954, 13.9389), (365580.0, 365580.0, 0.0436271, 124.046, 14.7982), (367573.0, 367573.0, 0.0433953, 124.731, 14.1017)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(454856.0, 454856.0, 0.0438369, 148.817, 17.5135), (457039.0, 457039.0, 0.0436352, 164.887, 18.0665), (458381.0, 458381.0, 0.0435093, 111.431, 17.9343)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(543068.0, 543068.0, 0.0440688, 135.805, 19.8644), (547803.0, 547803.0, 0.0436806, 225.355, 21.0608), (547088.0, 547088.0, 0.043648, 175.741, 21.4165)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(627272.0, 627272.0, 0.0445038, 143.691, 25.3725), (627820.0, 627820.0, 0.0444822, 115.447, 24.7481), (626374.0, 626374.0, 0.0445666, 139.218, 23.8384)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': True, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(668864.0, 668864.0, 0.0476782, 298.516, 24.8858), (659859.0, 659859.0, 0.0483394, 298.576, 24.3908), (654704.0, 654704.0, 0.0487128, 326.656, 25.9193)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_fake_compress.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(30760.5, 30760.5, 0.0324276, 82.5433, 0.0), (30830.7, 30830.7, 0.0323362, 82.3814, 0.0), (29312.7, 29312.7, 0.0340088, 82.4001, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(110352.0, 110352.0, 0.0361334, 91.0361, 4.8453), (111290.0, 111290.0, 0.0358331, 96.3705, 4.52919), (110907.0, 110907.0, 0.0359571, 94.8387, 4.3793)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(207763.0, 207763.0, 0.0383983, 93.3717, 8.80995), (209884.0, 209884.0, 0.0380069, 98.4276, 9.32508), (209859.0, 209859.0, 0.037999, 98.5817, 8.65653)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(315501.0, 315501.0, 0.0379128, 96.7681, 14.1495), (295676.0, 295676.0, 0.0404589, 98.5001, 12.9538), (315340.0, 315340.0, 0.0379286, 96.5519, 14.0337)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(413379.0, 413379.0, 0.0385963, 98.742, 17.3198), (414454.0, 414454.0, 0.0384963, 98.645, 17.3375), (414772.0, 414772.0, 0.0384444, 100.227, 19.1244)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(517698.0, 517698.0, 0.0385251, 101.462, 22.7332), (513117.0, 513117.0, 0.0388595, 100.966, 21.6614), (521825.0, 521825.0, 0.0382079, 96.0045, 21.361)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(605309.0, 605309.0, 0.0395329, 97.6194, 25.9271), (616914.0, 616914.0, 0.0388073, 100.143, 26.5247), (612067.0, 612067.0, 0.0390815, 111.008, 25.9332)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(715009.0, 715009.0, 0.0390486, 98.5921, 31.4732), (717122.0, 717122.0, 0.0389269, 98.6476, 32.4048), (710089.0, 710089.0, 0.0393021, 96.557, 31.5093)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(780150.0, 780150.0, 0.0408795, 373.399, 34.0451), (780928.0, 780928.0, 0.0408545, 760.954, 33.7256), (773479.0, 773479.0, 0.0412565, 437.326, 33.7992)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_fake_writes.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(29412.6, 29412.6, 0.033882, 81.7596, 0.0), (28554.8, 28554.8, 0.0349042, 81.5329, 0.0), (28620.5, 28620.5, 0.0348216, 81.6942, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(104242.0, 104242.0, 0.0382459, 93.481, 4.3291), (103901.0, 103901.0, 0.0383728, 92.4471, 4.32914), (105468.0, 105468.0, 0.0378021, 92.8918, 4.47911)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(197567.0, 197567.0, 0.0403659, 97.7048, 8.17584), (198024.0, 198024.0, 0.0402751, 98.1746, 8.15999), (196321.0, 196321.0, 0.0406066, 100.727, 8.45577)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(301970.0, 301970.0, 0.0396107, 95.9425, 13.1208), (296951.0, 296951.0, 0.0402707, 101.857, 12.3516), (300682.0, 300682.0, 0.0397723, 100.84, 13.501)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(390917.0, 390917.0, 0.0407861, 100.397, 16.1469), (390454.0, 390454.0, 0.0408575, 102.181, 15.0578), (393603.0, 393603.0, 0.0405154, 94.5263, 16.8823)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(487936.0, 487936.0, 0.0408634, 101.266, 19.8535), (489413.0, 489413.0, 0.0407335, 97.2174, 20.2291), (487987.0, 487987.0, 0.0408372, 97.1397, 20.5744)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(584191.0, 584191.0, 0.0409526, 103.392, 23.4635), (587157.0, 587157.0, 0.0407409, 102.503, 24.2748), (586074.0, 586074.0, 0.0408189, 104.875, 25.1599)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(678667.0, 678667.0, 0.0411235, 99.0795, 27.6891), (677039.0, 677039.0, 0.0412212, 99.8785, 27.4051), (670260.0, 670260.0, 0.0416408, 105.28, 27.4072)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(722906.0, 722906.0, 0.0441231, 225.342, 28.614), (724204.0, 724204.0, 0.0440198, 236.26, 29.4157), (728319.0, 728319.0, 0.0437896, 237.912, 29.5433)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30286.9, 30286.9, 0.0329245, 0.0, 0.0), (30753.4, 30753.4, 0.0324305, 0.0, 0.0), (31151.2, 31151.2, 0.0320159, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112481.0, 112481.0, 0.0354717, 0.0, 5.06663), (111014.0, 111014.0, 0.0359431, 0.0, 5.14995), (112559.0, 112559.0, 0.035451, 0.0, 4.39996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(209400.0, 209400.0, 0.0381135, 0.0, 9.3166), (209405.0, 209405.0, 0.0381132, 0.0, 9.03321), (214395.0, 214395.0, 0.0372271, 0.0, 9.49995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(317759.0, 317759.0, 0.0376752, 0.0, 13.5665), (319487.0, 319487.0, 0.0374694, 0.0, 13.5165), (323316.0, 323316.0, 0.0370279, 0.0, 13.9331)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(420957.0, 420957.0, 0.0379212, 0.0, 18.2664), (419207.0, 419207.0, 0.0380766, 0.0, 18.8332), (421561.0, 421561.0, 0.0378607, 0.0, 17.6499)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(526460.0, 526460.0, 0.0378989, 0.0, 22.0331), (529197.0, 529197.0, 0.0377043, 0.0, 23.7497), (533214.0, 533214.0, 0.0374174, 0.0, 22.3831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(625632.0, 625632.0, 0.0382689, 0.0, 26.5161), (631692.0, 631692.0, 0.0378988, 0.0, 26.8828), (622284.0, 622284.0, 0.038478, 0.0, 26.9162)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728676.0, 728676.0, 0.0383326, 0.0, 30.5828), (731237.0, 731237.0, 0.0382001, 0.0, 32.2995), (724542.0, 724542.0, 0.0385532, 0.0, 32.4161)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(783983.0, 783983.0, 0.0407091, 0.0, 35.0656), (782308.0, 782308.0, 0.040797, 0.0, 33.7652), (715915.0, 715915.0, 0.0445905, 0.0, 31.1658)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_fake_writes_stride.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(28307.9, 28307.9, 0.0351975, 79.8686, 0.0), (29468.8, 29468.8, 0.0338098, 79.6989, 0.0), (28633.6, 28633.6, 0.0348038, 79.6323, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(104982.0, 104982.0, 0.0379605, 93.4454, 3.94635), (105986.0, 105986.0, 0.0375971, 91.3793, 4.42884), (105113.0, 105113.0, 0.0379221, 92.7033, 4.24529)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(199243.0, 199243.0, 0.0400266, 94.1939, 7.99375), (201042.0, 201042.0, 0.0396748, 94.4927, 8.71124), (200883.0, 200883.0, 0.0396838, 97.8034, 8.74218)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(295769.0, 295769.0, 0.0404389, 104.279, 12.0241), (299185.0, 299185.0, 0.0399775, 102.402, 11.5576), (297104.0, 297104.0, 0.0402344, 101.553, 13.0691)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(390716.0, 390716.0, 0.0408101, 103.202, 16.7986), (388866.0, 388866.0, 0.0409949, 97.7126, 15.7795), (389102.0, 389102.0, 0.0409839, 102.555, 16.0022)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(487630.0, 487630.0, 0.0408567, 100.113, 20.5283), (486838.0, 486838.0, 0.0409294, 101.562, 20.4595), (485790.0, 485790.0, 0.0410379, 105.509, 19.7705)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(588835.0, 588835.0, 0.0406064, 99.1126, 23.9914), (586711.0, 586711.0, 0.0407728, 101.417, 23.647), (582473.0, 582473.0, 0.0410752, 102.085, 24.7148)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(675848.0, 675848.0, 0.0412852, 101.447, 28.2844), (677514.0, 677514.0, 0.041175, 98.7786, 30.5281), (676236.0, 676236.0, 0.0412817, 99.7915, 28.8308)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(723982.0, 723982.0, 0.044027, 236.204, 29.7214), (722847.0, 722847.0, 0.0441212, 307.379, 29.3968), (728086.0, 728086.0, 0.0437917, 235.66, 31.3378)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30286.9, 30286.9, 0.0329245, 0.0, 0.0), (30753.4, 30753.4, 0.0324305, 0.0, 0.0), (31151.2, 31151.2, 0.0320159, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112481.0, 112481.0, 0.0354717, 0.0, 5.06663), (111014.0, 111014.0, 0.0359431, 0.0, 5.14995), (112559.0, 112559.0, 0.035451, 0.0, 4.39996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(209400.0, 209400.0, 0.0381135, 0.0, 9.3166), (209405.0, 209405.0, 0.0381132, 0.0, 9.03321), (214395.0, 214395.0, 0.0372271, 0.0, 9.49995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(317759.0, 317759.0, 0.0376752, 0.0, 13.5665), (319487.0, 319487.0, 0.0374694, 0.0, 13.5165), (323316.0, 323316.0, 0.0370279, 0.0, 13.9331)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(420957.0, 420957.0, 0.0379212, 0.0, 18.2664), (419207.0, 419207.0, 0.0380766, 0.0, 18.8332), (421561.0, 421561.0, 0.0378607, 0.0, 17.6499)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(526460.0, 526460.0, 0.0378989, 0.0, 22.0331), (529197.0, 529197.0, 0.0377043, 0.0, 23.7497), (533214.0, 533214.0, 0.0374174, 0.0, 22.3831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(625632.0, 625632.0, 0.0382689, 0.0, 26.5161), (631692.0, 631692.0, 0.0378988, 0.0, 26.8828), (622284.0, 622284.0, 0.038478, 0.0, 26.9162)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728676.0, 728676.0, 0.0383326, 0.0, 30.5828), (731237.0, 731237.0, 0.0382001, 0.0, 32.2995), (724542.0, 724542.0, 0.0385532, 0.0, 32.4161)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(783983.0, 783983.0, 0.0407091, 0.0, 35.0656), (782308.0, 782308.0, 0.040797, 0.0, 33.7652), (715915.0, 715915.0, 0.0445905, 0.0, 31.1658)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_fake_writes_stride1.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(29161.1, 29161.1, 0.0341828, 79.6502, 0.0), (29596.2, 29596.2, 0.033672, 78.2933, 0.0), (30294.6, 30294.6, 0.0328931, 80.0015, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(104680.0, 104680.0, 0.0380678, 93.543, 4.26127), (105357.0, 105357.0, 0.037833, 93.479, 4.24594), (105311.0, 105311.0, 0.0378461, 92.8869, 4.39667)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(199130.0, 199130.0, 0.040013, 100.575, 8.08887), (200940.0, 200940.0, 0.0396728, 100.988, 8.22472), (200066.0, 200066.0, 0.0398625, 100.844, 8.84284)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(300183.0, 300183.0, 0.0398305, 104.51, 14.0334), (302015.0, 302015.0, 0.0396003, 105.269, 12.0563), (301133.0, 301133.0, 0.0397071, 105.661, 12.3025)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(394222.0, 394222.0, 0.0404486, 110.365, 16.5004), (396748.0, 396748.0, 0.0401852, 106.095, 15.9532), (394091.0, 394091.0, 0.0404697, 107.902, 16.0202)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(492902.0, 492902.0, 0.0404255, 110.144, 20.2965), (493765.0, 493765.0, 0.0403417, 112.555, 19.5578), (492462.0, 492462.0, 0.0404569, 108.249, 19.24)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(588773.0, 588773.0, 0.0406194, 111.398, 24.3063), (590348.0, 590348.0, 0.0404954, 112.12, 25.0197), (583694.0, 583694.0, 0.0409702, 112.481, 23.4229)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(680396.0, 680396.0, 0.0410039, 112.546, 28.3629), (679657.0, 679657.0, 0.0410506, 114.858, 27.5391), (680564.0, 680564.0, 0.0410109, 115.396, 27.794)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': True, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(652861.0, 652861.0, 0.048789, 276.402, 27.5094), (651525.0, 651525.0, 0.0488993, 279.703, 27.6233), (654939.0, 654939.0, 0.0485726, 289.37, 27.9035)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30286.9, 30286.9, 0.0329245, 0.0, 0.0), (30753.4, 30753.4, 0.0324305, 0.0, 0.0), (31151.2, 31151.2, 0.0320159, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112481.0, 112481.0, 0.0354717, 0.0, 5.06663), (111014.0, 111014.0, 0.0359431, 0.0, 5.14995), (112559.0, 112559.0, 0.035451, 0.0, 4.39996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(209400.0, 209400.0, 0.0381135, 0.0, 9.3166), (209405.0, 209405.0, 0.0381132, 0.0, 9.03321), (214395.0, 214395.0, 0.0372271, 0.0, 9.49995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(317759.0, 317759.0, 0.0376752, 0.0, 13.5665), (319487.0, 319487.0, 0.0374694, 0.0, 13.5165), (323316.0, 323316.0, 0.0370279, 0.0, 13.9331)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(420957.0, 420957.0, 0.0379212, 0.0, 18.2664), (419207.0, 419207.0, 0.0380766, 0.0, 18.8332), (421561.0, 421561.0, 0.0378607, 0.0, 17.6499)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(526460.0, 526460.0, 0.0378989, 0.0, 22.0331), (529197.0, 529197.0, 0.0377043, 0.0, 23.7497), (533214.0, 533214.0, 0.0374174, 0.0, 22.3831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(625632.0, 625632.0, 0.0382689, 0.0, 26.5161), (631692.0, 631692.0, 0.0378988, 0.0, 26.8828), (622284.0, 622284.0, 0.038478, 0.0, 26.9162)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728676.0, 728676.0, 0.0383326, 0.0, 30.5828), (731237.0, 731237.0, 0.0382001, 0.0, 32.2995), (724542.0, 724542.0, 0.0385532, 0.0, 32.4161)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(783983.0, 783983.0, 0.0407091, 0.0, 35.0656), (782308.0, 782308.0, 0.040797, 0.0, 33.7652), (715915.0, 715915.0, 0.0445905, 0.0, 31.1658)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_log_reduce_size.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(28037.0, 28037.0, 0.0355513, 80.7772, 0.0), (28591.2, 28591.2, 0.0348332, 83.3726, 0.0), (28174.9, 28174.9, 0.0353661, 80.9923, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(101575.0, 101575.0, 0.0392489, 100.616, 4.06351), (104315.0, 104315.0, 0.0382123, 92.747, 4.44552), (103600.0, 103600.0, 0.0384777, 104.11, 4.54582)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(198630.0, 198630.0, 0.0401546, 114.32, 8.11104), (201243.0, 201243.0, 0.039627, 156.711, 7.31041), (199076.0, 199076.0, 0.0400534, 119.783, 8.10939)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(298566.0, 298566.0, 0.0400453, 133.356, 12.1187), (298133.0, 298133.0, 0.040098, 99.2246, 13.4485), (296903.0, 296903.0, 0.0402781, 124.433, 12.3886)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(391792.0, 391792.0, 0.0407065, 118.188, 17.0175), (391965.0, 391965.0, 0.0406917, 111.37, 16.8899), (390145.0, 390145.0, 0.0408607, 110.049, 15.7134)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(490782.0, 490782.0, 0.0406097, 118.621, 19.6794), (491448.0, 491448.0, 0.0405582, 117.648, 19.7812), (490189.0, 490189.0, 0.0406614, 146.335, 19.8124)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(579773.0, 579773.0, 0.0412569, 163.993, 23.5593), (582446.0, 582446.0, 0.0410567, 105.998, 25.318), (576929.0, 576929.0, 0.0414494, 104.131, 23.6849)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(670070.0, 670070.0, 0.041655, 103.69, 27.1961), (669347.0, 669347.0, 0.0416867, 141.835, 27.8873), (669634.0, 669634.0, 0.0416696, 102.389, 26.9551)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(712434.0, 712434.0, 0.0447644, 214.95, 29.8936), (700382.0, 700382.0, 0.0455139, 240.664, 27.8856), (712480.0, 712480.0, 0.0447631, 234.26, 28.4791)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30286.9, 30286.9, 0.0329245, 0.0, 0.0), (30753.4, 30753.4, 0.0324305, 0.0, 0.0), (31151.2, 31151.2, 0.0320159, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112481.0, 112481.0, 0.0354717, 0.0, 5.06663), (111014.0, 111014.0, 0.0359431, 0.0, 5.14995), (112559.0, 112559.0, 0.035451, 0.0, 4.39996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(209400.0, 209400.0, 0.0381135, 0.0, 9.3166), (209405.0, 209405.0, 0.0381132, 0.0, 9.03321), (214395.0, 214395.0, 0.0372271, 0.0, 9.49995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(317759.0, 317759.0, 0.0376752, 0.0, 13.5665), (319487.0, 319487.0, 0.0374694, 0.0, 13.5165), (323316.0, 323316.0, 0.0370279, 0.0, 13.9331)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(420957.0, 420957.0, 0.0379212, 0.0, 18.2664), (419207.0, 419207.0, 0.0380766, 0.0, 18.8332), (421561.0, 421561.0, 0.0378607, 0.0, 17.6499)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(526460.0, 526460.0, 0.0378989, 0.0, 22.0331), (529197.0, 529197.0, 0.0377043, 0.0, 23.7497), (533214.0, 533214.0, 0.0374174, 0.0, 22.3831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(625632.0, 625632.0, 0.0382689, 0.0, 26.5161), (631692.0, 631692.0, 0.0378988, 0.0, 26.8828), (622284.0, 622284.0, 0.038478, 0.0, 26.9162)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728676.0, 728676.0, 0.0383326, 0.0, 30.5828), (731237.0, 731237.0, 0.0382001, 0.0, 32.2995), (724542.0, 724542.0, 0.0385532, 0.0, 32.4161)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(783983.0, 783983.0, 0.0407091, 0.0, 35.0656), (782308.0, 782308.0, 0.040797, 0.0, 33.7652), (715915.0, 715915.0, 0.0445905, 0.0, 31.1658)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_log_reduce_size_1.py	/^RESULTS = [({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(670070.0, 670070.0, 0.041655, 103.69, 27.1961), (669347.0, 669347.0, 0.0416867, 141.835, 27.8873), (669634.0, 669634.0, 0.0416696, 102.389, 26.9551)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(712434.0, 712434.0, 0.0447644, 214.95, 29.8936), (700382.0, 700382.0, 0.0455139, 240.664, 27.8856), (712480.0, 712480.0, 0.0447631, 234.26, 28.4791)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_log_reduce_size_nofsync.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(27871.4, 27871.4, 0.0357607, 81.8997, 0.0), (29390.7, 29390.7, 0.0338998, 82.0619, 0.0), (28280.2, 28280.2, 0.0352519, 82.0879, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(107300.0, 107300.0, 0.0371596, 96.2916, 4.61302), (106620.0, 106620.0, 0.037399, 95.1791, 4.31287), (104450.0, 104450.0, 0.0381691, 94.9936, 4.39564)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(198942.0, 198942.0, 0.0400843, 110.726, 8.97438), (199131.0, 199131.0, 0.0400565, 105.12, 8.5101), (200443.0, 200443.0, 0.0397906, 103.181, 7.71011)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(299454.0, 299454.0, 0.0399389, 109.416, 12.6518), (299527.0, 299527.0, 0.0399373, 115.718, 12.2231), (300443.0, 300443.0, 0.0398378, 106.138, 12.145)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(391388.0, 391388.0, 0.0407652, 124.563, 15.2232), (394657.0, 394657.0, 0.0404256, 130.43, 15.0728), (396611.0, 396611.0, 0.0402169, 136.605, 16.1692)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(498099.0, 498099.0, 0.0400256, 134.432, 21.216), (488264.0, 488264.0, 0.0408347, 133.72, 20.5144), (495505.0, 495505.0, 0.0402241, 150.323, 21.0244)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(584701.0, 584701.0, 0.0409133, 102.95, 23.1438), (586412.0, 586412.0, 0.0407895, 99.3766, 22.822), (589676.0, 589676.0, 0.0405919, 99.7467, 22.6878)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(675436.0, 675436.0, 0.0413229, 105.453, 28.0404), (660534.0, 660534.0, 0.0422653, 103.337, 27.3102), (679870.0, 679870.0, 0.0410626, 101.341, 28.1444)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': True, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(711674.0, 711674.0, 0.0448229, 216.884, 28.8772), (715904.0, 715904.0, 0.0445292, 279.838, 29.7625), (725241.0, 725241.0, 0.0439786, 315.067, 29.7777)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'numa_memory': '4G', 'persist': False, 'threads': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(30286.9, 30286.9, 0.0329245, 0.0, 0.0), (30753.4, 30753.4, 0.0324305, 0.0, 0.0), (31151.2, 31151.2, 0.0320159, 0.0, 0.0)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'numa_memory': '16G', 'persist': False, 'threads': 4, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(112481.0, 112481.0, 0.0354717, 0.0, 5.06663), (111014.0, 111014.0, 0.0359431, 0.0, 5.14995), (112559.0, 112559.0, 0.035451, 0.0, 4.39996)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'numa_memory': '32G', 'persist': False, 'threads': 8, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(209400.0, 209400.0, 0.0381135, 0.0, 9.3166), (209405.0, 209405.0, 0.0381132, 0.0, 9.03321), (214395.0, 214395.0, 0.0372271, 0.0, 9.49995)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'numa_memory': '48G', 'persist': False, 'threads': 12, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(317759.0, 317759.0, 0.0376752, 0.0, 13.5665), (319487.0, 319487.0, 0.0374694, 0.0, 13.5165), (323316.0, 323316.0, 0.0370279, 0.0, 13.9331)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'numa_memory': '64G', 'persist': False, 'threads': 16, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(420957.0, 420957.0, 0.0379212, 0.0, 18.2664), (419207.0, 419207.0, 0.0380766, 0.0, 18.8332), (421561.0, 421561.0, 0.0378607, 0.0, 17.6499)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'numa_memory': '80G', 'persist': False, 'threads': 20, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(526460.0, 526460.0, 0.0378989, 0.0, 22.0331), (529197.0, 529197.0, 0.0377043, 0.0, 23.7497), (533214.0, 533214.0, 0.0374174, 0.0, 22.3831)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'numa_memory': '96G', 'persist': False, 'threads': 24, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(625632.0, 625632.0, 0.0382689, 0.0, 26.5161), (631692.0, 631692.0, 0.0378988, 0.0, 26.8828), (622284.0, 622284.0, 0.038478, 0.0, 26.9162)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'numa_memory': '112G', 'persist': False, 'threads': 28, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(728676.0, 728676.0, 0.0383326, 0.0, 30.5828), (731237.0, 731237.0, 0.0382001, 0.0, 32.2995), (724542.0, 724542.0, 0.0385532, 0.0, 32.4161)]), ({'par_load': False, 'bench_opts': '', 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'numa_memory': '128G', 'persist': False, 'threads': 32, 'db': 'ndb-proto2', 'bench': 'tpcc'}, [(783983.0, 783983.0, 0.0407091, 0.0, 35.0656), (782308.0, 782308.0, 0.040797, 0.0, 33.7652), (715915.0, 715915.0, 0.0445905, 0.0, 31.1658)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-1-13_newbench.py	/^RESULTS = [({'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': True}, [(28105.9, 28105.9, 0.0354625, 85.3912, 0.0), (27718.0, 27718.0, 0.0359689, 82.7861, 0.0), (27949.1, 27949.1, 0.0356488, 83.5573, 0.0)]), ({'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': True}, [(104873.0, 104873.0, 0.0380279, 94.162, 3.51415), (102970.0, 102970.0, 0.0387283, 97.7687, 3.7135), (103883.0, 103883.0, 0.0383696, 97.6079, 3.54536)]), ({'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': True}, [(198633.0, 198633.0, 0.040137, 133.583, 6.62501), (197752.0, 197752.0, 0.0403254, 164.783, 7.04287), (197610.0, 197610.0, 0.0403784, 112.569, 7.03025)]), ({'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': True}, [(293988.0, 293988.0, 0.0406976, 149.569, 11.0425), (297583.0, 297583.0, 0.0401963, 159.338, 10.6732), (296544.0, 296544.0, 0.0403402, 144.554, 11.2229)]), ({'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': True}, [(394394.0, 394394.0, 0.0404466, 134.949, 14.3219), (390208.0, 390208.0, 0.0408714, 141.003, 14.5685), (384651.0, 384651.0, 0.0408262, 156.101, 13.5742)]), ({'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': True}, [(494616.0, 494616.0, 0.0402946, 237.19, 19.4914), (492169.0, 492169.0, 0.0404922, 154.481, 18.2076), (490409.0, 490409.0, 0.0406409, 174.401, 17.9603)]), ({'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': True}, [(581661.0, 581661.0, 0.0411126, 267.669, 21.6865), (583849.0, 583849.0, 0.0409649, 210.809, 21.5225), (588341.0, 588341.0, 0.0406641, 216.731, 22.2954)]), ({'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': True}, [(675474.0, 675474.0, 0.0413055, 117.162, 25.3652), (673212.0, 673212.0, 0.0414435, 155.92, 25.0156), (675001.0, 675001.0, 0.0413424, 152.043, 25.6195)]), ({'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': True}, [(703933.0, 703933.0, 0.0452991, 310.755, 27.3752), (616223.0, 616223.0, 0.0517334, 174.221, 21.4519), (700472.0, 700472.0, 0.0455173, 274.073, 26.4876)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-12-13.py	/^RESULTS = [({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(754498.0, 754498.0, 0.0370564, 0.0, 0.0), (746465.0, 746465.0, 0.0374603, 0.0, 0.0), (756534.0, 756534.0, 0.0369612, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(745609.0, 745609.0, 0.0374916, 0.0, 112.679), (744485.0, 744485.0, 0.0375438, 0.0, 114.331), (733110.0, 733110.0, 0.0381287, 0.0, 112.065)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(739070.0, 739070.0, 0.0378141, 0.0, 228.162), (738579.0, 738579.0, 0.0378392, 0.0, 220.711), (737564.0, 737564.0, 0.037888, 0.0, 227.395)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(735042.0, 735042.0, 0.038007, 0.0, 341.076), (734844.0, 734844.0, 0.0380208, 0.0, 332.127), (730155.0, 730155.0, 0.0382601, 0.0, 332.409)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(720893.0, 720893.0, 0.0387456, 0.0, 440.57), (731112.0, 731112.0, 0.0382058, 0.0, 441.189), (723148.0, 723148.0, 0.0386235, 0.0, 437.64)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(725284.0, 725284.0, 0.0385056, 0.0, 545.773), (726488.0, 726488.0, 0.038434, 0.0, 546.673), (725655.0, 725655.0, 0.0384744, 0.0, 545.304)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(723624.0, 723624.0, 0.0385806, 0.0, 646.588), (717315.0, 717315.0, 0.0389208, 0.0, 645.355), (717324.0, 717324.0, 0.0389211, 0.0, 646.07)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(718913.0, 718913.0, 0.0388216, 0.0, 751.371), (721175.0, 721175.0, 0.0386679, 0.0, 750.104), (721843.0, 721843.0, 0.0386718, 0.0, 752.353)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(721156.0, 721156.0, 0.0386928, 0.0, 861.668), (719578.0, 719578.0, 0.038781, 0.0, 849.779), (718361.0, 718361.0, 0.0388418, 0.0, 852.768)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(710609.0, 710609.0, 0.0392614, 0.0, 934.032), (717574.0, 717574.0, 0.0388821, 0.0, 949.949), (712622.0, 712622.0, 0.0391449, 0.0, 953.965)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(710516.0, 710516.0, 0.0392554, 0.0, 1034.8), (712859.0, 712859.0, 0.0391243, 0.0, 1047.85), (708679.0, 708679.0, 0.0393565, 0.0, 1043.46)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(899626.0, 899626.0, 0.0310747, 0.0, 0.0), (895546.0, 895546.0, 0.0312123, 0.0, 0.0), (899906.0, 899906.0, 0.0310638, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(884888.0, 884888.0, 0.0315844, 0.0, 131.431), (879121.0, 879121.0, 0.0317911, 0.0, 132.332), (882563.0, 882563.0, 0.0316622, 0.0, 134.131)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(864166.0, 864166.0, 0.0323348, 0.0, 256.629), (872042.0, 872042.0, 0.0320403, 0.0, 264.247), (875714.0, 875714.0, 0.0319054, 0.0, 265.612)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(865869.0, 865869.0, 0.0322577, 0.0, 391.429), (864799.0, 864799.0, 0.0322997, 0.0, 386.328), (860334.0, 860334.0, 0.0324662, 0.0, 385.975)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(860756.0, 860756.0, 0.0324453, 0.0, 510.692), (856401.0, 856401.0, 0.0326079, 0.0, 510.534), (856528.0, 856528.0, 0.0326045, 0.0, 510.741)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(857631.0, 857631.0, 0.0325564, 0.0, 630.224), (858923.0, 858923.0, 0.0325077, 0.0, 639.97), (859701.0, 859701.0, 0.0324736, 0.0, 637.432)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(854499.0, 854499.0, 0.0326659, 0.0, 753.373), (852208.0, 852208.0, 0.0327554, 0.0, 749.117), (855464.0, 855464.0, 0.032631, 0.0, 757.053)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(851898.0, 851898.0, 0.0327619, 0.0, 872.706), (845040.0, 845040.0, 0.033023, 0.0, 861.454), (844817.0, 844817.0, 0.0330335, 0.0, 871.272)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(843353.0, 843353.0, 0.0330803, 0.0, 980.98), (845069.0, 845069.0, 0.0330161, 0.0, 989.201), (841800.0, 841800.0, 0.0331458, 0.0, 982.938)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(840927.0, 840927.0, 0.0331699, 0.0, 1100.41), (845239.0, 845239.0, 0.0330054, 0.0, 1107.34), (836095.0, 836095.0, 0.0333309, 0.0, 1098.12)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(841338.0, 841338.0, 0.033152, 0.0, 1215.96), (840821.0, 840821.0, 0.0331683, 0.0, 1206.83), (839294.0, 839294.0, 0.0332273, 0.0, 1213.6)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(1213330.0, 1213330.0, 0.0230298, 0.0, 0.0), (1211230.0, 1211230.0, 0.023069, 0.0, 0.0), (1220470.0, 1220470.0, 0.0228953, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(1005770.0, 1005770.0, 0.027792, 0.0, 0.0), (1001880.0, 1001880.0, 0.0279012, 0.0, 0.0), (1000700.0, 1000700.0, 0.0279315, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(817871.0, 817871.0, 0.0341885, 0.0, 0.0), (832547.0, 832547.0, 0.0335844, 0.0, 0.0), (836308.0, 836308.0, 0.033433, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(685744.0, 685744.0, 0.0407839, 0.0, 0.0), (684120.0, 684120.0, 0.0408809, 0.0, 0.0), (679728.0, 679728.0, 0.0411451, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(562817.0, 562817.0, 0.0497014, 0.0, 0.0), (567602.0, 567602.0, 0.0492832, 0.0, 0.0), (557515.0, 557515.0, 0.0501742, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(475962.0, 475962.0, 0.0587792, 0.0, 0.0), (472583.0, 472583.0, 0.059199, 0.0, 0.0), (476018.0, 476018.0, 0.0587738, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(403760.0, 403760.0, 0.069299, 0.0, 0.0), (400413.0, 400413.0, 0.0698799, 0.0, 0.0), (403829.0, 403829.0, 0.0692871, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(350825.0, 350825.0, 0.0797634, 0.0, 0.0), (350289.0, 350289.0, 0.0798824, 0.0, 0.0), (346730.0, 346730.0, 0.0807037, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(308843.0, 308843.0, 0.0906093, 0.0, 0.0), (308218.0, 308218.0, 0.0907937, 0.0, 0.0), (307750.0, 307750.0, 0.090932, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(274893.0, 274893.0, 0.10181, 0.0, 0.0), (272930.0, 272930.0, 0.10254, 0.0, 0.0), (274165.0, 274165.0, 0.10208, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False}, [(242222.0, 242222.0, 0.115546, 0.0, 0.0), (246739.0, 246739.0, 0.113429, 0.0, 0.0), (243165.0, 243165.0, 0.115092, 0.0, 0.0)])] + [({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(933397.0, 933397.0, 0.0299485, 0.0, 0.0), (922014.0, 922014.0, 0.0303183, 0.0, 0.0), (930032.0, 930032.0, 0.0300562, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(921479.0, 921479.0, 0.0303282, 0.0, 139.547), (903039.0, 903039.0, 0.0309376, 0.0, 136.881), (926122.0, 926122.0, 0.0301663, 0.0, 141.646)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(910507.0, 910507.0, 0.0306879, 0.0, 278.213), (903208.0, 903208.0, 0.0309307, 0.0, 271.713), (913367.0, 913367.0, 0.0305799, 0.0, 276.696)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(908978.0, 908978.0, 0.0307281, 0.0, 415.544), (903596.0, 903596.0, 0.0309138, 0.0, 402.826), (896308.0, 896308.0, 0.0311641, 0.0, 400.592)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(906015.0, 906015.0, 0.0308213, 0.0, 539.525), (890827.0, 890827.0, 0.0313515, 0.0, 534.407), (890353.0, 890353.0, 0.0313647, 0.0, 532.776)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(891560.0, 891560.0, 0.0313047, 0.0, 662.078), (899829.0, 899829.0, 0.0310291, 0.0, 672.666), (897151.0, 897151.0, 0.0311158, 0.0, 665.573)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(895414.0, 895414.0, 0.031172, 0.0, 793.657), (892797.0, 892797.0, 0.0312603, 0.0, 793.273), (890886.0, 890886.0, 0.0313334, 0.0, 788.389)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(890289.0, 890289.0, 0.0313428, 0.0, 919.319), (888221.0, 888221.0, 0.031416, 0.0, 919.954), (889383.0, 889383.0, 0.0313763, 0.0, 921.856)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(884959.0, 884959.0, 0.0315292, 0.0, 1046.7), (876849.0, 876849.0, 0.0318198, 0.0, 1029.4), (885991.0, 885991.0, 0.0314921, 0.0, 1039.24)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(882921.0, 882921.0, 0.0315894, 0.0, 1159.72), (885280.0, 885280.0, 0.0314986, 0.0, 1168.1), (873920.0, 873920.0, 0.0319168, 0.0, 1151.48)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': True}, [(882499.0, 882499.0, 0.0315999, 0.0, 1280.98), (881339.0, 881339.0, 0.0316445, 0.0, 1279.68), (880616.0, 880616.0, 0.03166, 0.0, 1281.3)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-16-13_multipart_skew.py	/^RESULTS = [({'disable_gc': False, 'scale_factor': 4, 'db': 'kvdb-st', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks ', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': False, 'disable_snapshots': False}, [(43468.0, 43468.0, 0.0229553, 0.0, 0.0), (42505.9, 42505.9, 0.0234737, 0.0, 0.0), (43154.0, 43154.0, 0.0231245, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': False, 'disable_snapshots': False}, [(30754.7, 30754.7, 0.0324678, 0.0, 0.0), (30117.4, 30117.4, 0.0331507, 0.0, 0.0), (29800.0, 29800.0, 0.0335089, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 2, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '8G', 'persist': False, 'disable_snapshots': False}, [(61867.5, 61867.5, 0.0322773, 0.0, 3.19998), (62408.2, 62408.2, 0.0319925, 0.0, 3.06664), (61668.9, 61668.9, 0.0323773, 0.0, 2.96665)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': False, 'disable_snapshots': False}, [(116912.0, 116912.0, 0.0341545, 0.0, 17.1332), (113059.0, 113059.0, 0.0353051, 0.0, 17.3165), (115758.0, 115758.0, 0.0344966, 0.0, 17.2999)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 6, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '24G', 'persist': False, 'disable_snapshots': False}, [(159447.0, 159447.0, 0.0350288, 0.0, 9514.06), (159379.0, 159379.0, 0.0350259, 0.0, 9480.49), (159677.0, 159677.0, 0.0349627, 0.0, 9492.04)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': False, 'disable_snapshots': False}, [(199853.0, 199853.0, 0.0359222, 0.0, 18743.0), (198260.0, 198260.0, 0.0362176, 0.0, 18613.7), (197791.0, 197791.0, 0.0362914, 0.0, 18554.3)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 10, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '40G', 'persist': False, 'disable_snapshots': False}, [(179239.0, 179239.0, 0.0465518, 0.0, 27440.2), (175376.0, 175376.0, 0.0474159, 0.0, 27047.5), (179595.0, 179595.0, 0.0464574, 0.0, 27482.7)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': False, 'disable_snapshots': False}, [(137867.0, 137867.0, 0.0666319, 0.0, 28550.1), (137801.0, 137801.0, 0.0662968, 0.0, 28607.6), (140053.0, 140053.0, 0.0655534, 0.0, 29200.2)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': False, 'disable_snapshots': False}, [(110439.0, 110439.0, 0.0982468, 0.0, 35981.9), (110248.0, 110248.0, 0.0982313, 0.0, 35980.5), (111519.0, 111519.0, 0.0973957, 0.0, 36321.1)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': False, 'disable_snapshots': False}, [(58960.5, 58960.5, 0.189055, 0.0, 29293.0), (58409.4, 58409.4, 0.18975, 0.0, 28755.0), (56021.4, 56021.4, 0.199431, 0.0, 27870.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': False, 'disable_snapshots': False}, [(48373.0, 48373.0, 0.249847, 0.0, 30793.9), (48672.1, 48672.1, 0.2476, 0.0, 31244.2), (48770.2, 48770.2, 0.246519, 0.0, 31328.5)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': False}, [(27698.3, 27698.3, 0.429631, 0.0, 22725.1), (28482.3, 28482.3, 0.417004, 0.0, 23111.7), (27963.0, 27963.0, 0.427409, 0.0, 22980.8)])] + [({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': False, 'disable_snapshots': False}, [(30943.9, 30943.9, 0.0322558, 0.0, 0.0), (31465.1, 31465.1, 0.0317251, 0.0, 0.0), (31357.4, 31357.4, 0.0318378, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 2, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '8G', 'persist': False, 'disable_snapshots': False}, [(62177.6, 62177.6, 0.0321066, 0.0, 2.89999), (62432.7, 62432.7, 0.0319747, 0.0, 2.94999), (62648.0, 62648.0, 0.0318621, 0.0, 3.38331)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': False, 'disable_snapshots': False}, [(118895.0, 118895.0, 0.0335782, 0.0, 17.9332), (117912.0, 117912.0, 0.0338585, 0.0, 17.7666), (118688.0, 118688.0, 0.0336305, 0.0, 17.6999)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 6, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '24G', 'persist': False, 'disable_snapshots': False}, [(171283.0, 171283.0, 0.0346632, 0.0, 890.859), (170433.0, 170433.0, 0.0348388, 0.0, 873.825), (171277.0, 171277.0, 0.0346634, 0.0, 892.642)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': False, 'disable_snapshots': False}, [(219415.0, 219415.0, 0.0359304, 0.0, 1712.53), (219942.0, 219942.0, 0.0358451, 0.0, 1716.32), (218084.0, 218084.0, 0.0361459, 0.0, 1706.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 10, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '40G', 'persist': False, 'disable_snapshots': False}, [(206212.0, 206212.0, 0.0472844, 0.0, 2656.74), (205616.0, 205616.0, 0.047406, 0.0, 2657.5), (206888.0, 206888.0, 0.0471279, 0.0, 2660.49)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': False, 'disable_snapshots': False}, [(169345.0, 169345.0, 0.0685426, 0.0, 2789.03), (170003.0, 170003.0, 0.0683121, 0.0, 2803.62), (169983.0, 169983.0, 0.0683306, 0.0, 2804.06)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': False, 'disable_snapshots': False}, [(149677.0, 149677.0, 0.10188, 0.0, 3785.16), (145768.0, 145768.0, 0.104591, 0.0, 3691.9), (149610.0, 149610.0, 0.101906, 0.0, 3791.05)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': False, 'disable_snapshots': False}, [(83235.8, 83235.8, 0.22186, 0.0, 2809.16), (85806.4, 85806.4, 0.216144, 0.0, 2920.95), (88497.0, 88497.0, 0.209852, 0.0, 3036.64)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': False, 'disable_snapshots': False}, [(75410.7, 75410.7, 0.29186, 0.0, 3327.34), (81033.5, 81033.5, 0.271947, 0.0, 3516.03), (80770.0, 80770.0, 0.27314, 0.0, 3443.05)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': False, 'disable_snapshots': False}, [(52767.3, 52767.3, 0.47619, 0.0, 2730.02), (51759.0, 51759.0, 0.483218, 0.0, 2647.96), (51844.8, 51844.8, 0.483051, 0.0, 2664.81)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-19-13_cameraready.py	/^RESULTS = [({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '101G', 'persist': 'persist-none', 'disable_snapshots': False}, [(551002.0, 551002.0, 0.00176653, 0.0, 0.0), (538955.0, 538955.0, 0.00180647, 0.0, 0.0), (536552.0, 536552.0, 0.00181532, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '101G', 'persist': 'persist-none', 'disable_snapshots': False}, [(538072.0, 538072.0, 0.00181022, 0.0, 0.0), (528201.0, 528201.0, 0.00184491, 0.0, 0.0), (537755.0, 537755.0, 0.00181127, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '101G', 'persist': 'persist-none', 'disable_snapshots': False}, [(527898.0, 527898.0, 0.00184594, 0.0, 0.0), (528276.0, 528276.0, 0.00184426, 0.0, 0.0), (529182.0, 529182.0, 0.00184091, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '105G', 'persist': 'persist-none', 'disable_snapshots': False}, [(2127010.0, 2127010.0, 0.00183115, 0.0, 0.0), (2117550.0, 2117550.0, 0.00183946, 0.0, 0.0), (2122640.0, 2122640.0, 0.00183503, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '105G', 'persist': 'persist-none', 'disable_snapshots': False}, [(2150000.0, 2150000.0, 0.00181072, 0.0, 0.0), (2150330.0, 2150330.0, 0.00181084, 0.0, 0.0), (2136830.0, 2136830.0, 0.00182216, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '105G', 'persist': 'persist-none', 'disable_snapshots': False}, [(2159790.0, 2159790.0, 0.00180276, 0.0, 0.0), (2158170.0, 2158170.0, 0.00180382, 0.0, 0.0), (2157110.0, 2157110.0, 0.00180512, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '111G', 'persist': 'persist-none', 'disable_snapshots': False}, [(4072380.0, 4072380.0, 0.0019148, 0.0, 0.0), (4067130.0, 4067130.0, 0.00191734, 0.0, 0.0), (4074560.0, 4074560.0, 0.00191381, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '111G', 'persist': 'persist-none', 'disable_snapshots': False}, [(4062340.0, 4062340.0, 0.00191927, 0.0, 0.0166665), (4070010.0, 4070010.0, 0.00191618, 0.0, 0.0), (4028190.0, 4028190.0, 0.00193597, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '111G', 'persist': 'persist-none', 'disable_snapshots': False}, [(4086490.0, 4086490.0, 0.00190773, 0.0, 0.0), (4080470.0, 4080470.0, 0.00191071, 0.0, 0.0), (4090320.0, 4090320.0, 0.00190628, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '116G', 'persist': 'persist-none', 'disable_snapshots': False}, [(5110180.0, 5110180.0, 0.00229887, 0.0, 0.0), (5123020.0, 5123020.0, 0.00229284, 0.0, 0.0), (5133000.0, 5133000.0, 0.00228837, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '116G', 'persist': 'persist-none', 'disable_snapshots': False}, [(5664800.0, 5664800.0, 0.00206917, 0.0, 0.0), (5663160.0, 5663160.0, 0.00206965, 0.0, 0.0), (5682830.0, 5682830.0, 0.0020621, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '116G', 'persist': 'persist-none', 'disable_snapshots': False}, [(5718550.0, 5718550.0, 0.00204884, 0.0, 0.0), (5709720.0, 5709720.0, 0.00205213, 0.0, 0.0), (5699190.0, 5699190.0, 0.002056, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '122G', 'persist': 'persist-none', 'disable_snapshots': False}, [(7173310.0, 7173310.0, 0.002181, 0.0, 0.0), (7176260.0, 7176260.0, 0.00218017, 0.0, 0.0), (7178980.0, 7178980.0, 0.00217931, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '122G', 'persist': 'persist-none', 'disable_snapshots': False}, [(7355090.0, 7355090.0, 0.0021259, 0.0, 0.0166666), (7342800.0, 7342800.0, 0.00212933, 0.0, 0.0), (7370260.0, 7370260.0, 0.00212146, 0.0, 0.0166665)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '122G', 'persist': 'persist-none', 'disable_snapshots': False}, [(7310960.0, 7310960.0, 0.00213415, 0.0, 0.0666662), (7429730.0, 7429730.0, 0.00210372, 0.0, 0.0), (7439340.0, 7439340.0, 0.002101, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(7914540.0, 7914540.0, 0.00247778, 0.0, 0.0), (7873670.0, 7873670.0, 0.00249085, 0.0, 0.0), (7903400.0, 7903400.0, 0.00248125, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(8696710.0, 8696710.0, 0.00225026, 0.0, 0.0333329), (8874400.0, 8874400.0, 0.0022044, 0.0, 0.0), (8814210.0, 8814210.0, 0.00221945, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(9114630.0, 9114630.0, 0.00214478, 0.0, 0.0), (9120540.0, 9120540.0, 0.00214307, 0.0, 0.0166664), (9043650.0, 9043650.0, 0.00216185, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '133G', 'persist': 'persist-none', 'disable_snapshots': False}, [(10138600.0, 10138600.0, 0.00231762, 0.0, 0.0), (10079000.0, 10079000.0, 0.0023317, 0.0, 0.0), (9903590.0, 9903590.0, 0.00237389, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '133G', 'persist': 'persist-none', 'disable_snapshots': False}, [(9765880.0, 9765880.0, 0.00240776, 0.0, 0.016665), (9783800.0, 9783800.0, 0.00240327, 0.0, 0.0499995), (9327830.0, 9327830.0, 0.0025234, 0.0, 0.0166651)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '133G', 'persist': 'persist-none', 'disable_snapshots': False}, [(10717100.0, 10717100.0, 0.00218978, 0.0, 0.0166665), (10722600.0, 10722600.0, 0.00218861, 0.0, 0.033333), (10716100.0, 10716100.0, 0.0021899, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '139G', 'persist': 'persist-none', 'disable_snapshots': False}, [(11481300.0, 11481300.0, 0.00238929, 0.0, 0.0), (11399400.0, 11399400.0, 0.00240691, 0.0, 0.0), (11768400.0, 11768400.0, 0.00232986, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '139G', 'persist': 'persist-none', 'disable_snapshots': False}, [(9261960.0, 9261960.0, 0.00297322, 0.0, 0.0333329), (9226630.0, 9226630.0, 0.0029854, 0.0, 0.0166665), (9192360.0, 9192360.0, 0.00299657, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '139G', 'persist': 'persist-none', 'disable_snapshots': False}, [(12582400.0, 12582400.0, 0.00217553, 0.0, 0.0333329), (12499400.0, 12499400.0, 0.0021904, 0.0, 0.0499991), (12644200.0, 12644200.0, 0.00216484, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'kvdb', 'par_load': True, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '144G', 'persist': 'persist-none', 'disable_snapshots': False}, [(12645000.0, 12645000.0, 0.00248101, 0.0, 0.0), (13109200.0, 13109200.0, 0.0023914, 0.0, 0.0), (13058700.0, 13058700.0, 0.0024009, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto1', 'par_load': True, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '144G', 'persist': 'persist-none', 'disable_snapshots': False}, [(8865800.0, 8865800.0, 0.00355934, 0.0, 0.0166654), (8824900.0, 8824900.0, 0.00357681, 0.0, 0.0), (8834190.0, 8834190.0, 0.00357249, 0.0, 0.0166664)]), ({'disable_gc': False, 'scale_factor': 320000, 'db': 'ndb-proto2', 'par_load': True, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 80,0,20,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_rmw', 'bench': 'ycsb', 'numa_memory': '144G', 'persist': 'persist-none', 'disable_snapshots': False}, [(14121400.0, 14121400.0, 0.00221659, 0.0, 0.0499989), (14173900.0, 14173900.0, 0.00220789, 0.0, 0.0166664), (14136400.0, 14136400.0, 0.00221364, 0.0, 0.0166661)]), ({'disable_gc': False, 'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-real', 'disable_snapshots': False}, [(28225.8, 28225.8, 0.0353219, 85.0473, 0.0), (27996.8, 27996.8, 0.0355963, 81.6838, 0.0), (27607.9, 27607.9, 0.0361074, 82.335, 0.0)]), ({'disable_gc': False, 'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(27926.2, 27926.2, 0.0356962, 90.5297, 0.0), (27510.4, 27510.4, 0.0362395, 87.2284, 0.0), (27872.8, 27872.8, 0.0357699, 86.3002, 0.0)]), ({'disable_gc': False, 'scale_factor': 1, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False}, [(29999.3, 29999.3, 0.0332548, 0.0, 0.0), (30322.2, 30322.2, 0.0328975, 0.0, 0.0), (30161.6, 30161.6, 0.0330703, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-real', 'disable_snapshots': False}, [(100910.0, 100910.0, 0.0395189, 108.936, 4.16333), (100559.0, 100559.0, 0.0396542, 129.162, 4.1629), (100600.0, 100600.0, 0.0396374, 97.8462, 3.92957)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(101538.0, 101538.0, 0.0392561, 108.948, 3.92817), (101177.0, 101177.0, 0.0394068, 103.502, 4.54524), (102354.0, 102354.0, 0.0389583, 106.842, 3.82977)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False}, [(109899.0, 109899.0, 0.036313, 0.0, 4.99994), (107896.0, 107896.0, 0.0369815, 0.0, 4.86663), (109172.0, 109172.0, 0.0365549, 0.0, 4.61663)]), ({'disable_gc': False, 'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-real', 'disable_snapshots': False}, [(189826.0, 189826.0, 0.042021, 125.662, 7.76003), (185841.0, 185841.0, 0.0429076, 142.749, 7.2577), (188559.0, 188559.0, 0.0422831, 156.151, 7.62363)]), ({'disable_gc': False, 'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(179857.0, 179857.0, 0.0428203, 1943.32, 7.73359), (179443.0, 179443.0, 0.0427535, 2660.23, 7.41542), (179219.0, 179219.0, 0.0428436, 2620.55, 7.51875)]), ({'disable_gc': False, 'scale_factor': 8, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False}, [(205444.0, 205444.0, 0.0388523, 0.0, 9.24991), (205071.0, 205071.0, 0.0389223, 0.0, 9.49993), (205272.0, 205272.0, 0.0388865, 0.0, 8.86657)]), ({'disable_gc': False, 'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-real', 'disable_snapshots': False}, [(275112.0, 275112.0, 0.0434859, 188.465, 10.0563), (274888.0, 274888.0, 0.0435201, 136.944, 10.7392), (277746.0, 277746.0, 0.0430842, 155.892, 11.5585)]), ({'disable_gc': False, 'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(184218.0, 184218.0, 0.0604978, 7802.75, 5.94474), (186948.0, 186948.0, 0.0592447, 8218.08, 6.06701), (186407.0, 186407.0, 0.0595752, 7497.37, 7.06313)]), ({'disable_gc': False, 'scale_factor': 12, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False}, [(302915.0, 302915.0, 0.0395281, 0.0, 13.2995), (301651.0, 301651.0, 0.039695, 0.0, 13.8499), (300453.0, 300453.0, 0.0398527, 0.0, 13.2489)]), ({'disable_gc': False, 'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-real', 'disable_snapshots': False}, [(371737.0, 371737.0, 0.0428917, 247.802, 14.2299), (364991.0, 364991.0, 0.0437131, 293.695, 14.8887), (370023.0, 370023.0, 0.0431254, 163.949, 15.4243)]), ({'disable_gc': False, 'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(187739.0, 187739.0, 0.0723913, 11632.9, 6.8071), (186315.0, 186315.0, 0.0792256, 10270.6, 6.54093), (187679.0, 187679.0, 0.0746198, 9838.45, 5.98721)]), ({'disable_gc': False, 'scale_factor': 16, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False}, [(401610.0, 401610.0, 0.0397526, 0.0, 17.1163), (402042.0, 402042.0, 0.0397092, 0.0, 17.4998), (399975.0, 399975.0, 0.0399107, 0.0, 17.63)]), ({'disable_gc': False, 'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-real', 'disable_snapshots': False}, [(444169.0, 444169.0, 0.0448953, 151.388, 17.449), (444065.0, 444065.0, 0.0449003, 148.806, 18.0961), (440532.0, 440532.0, 0.0449769, 169.238, 18.0831)]), ({'disable_gc': False, 'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(188552.0, 188552.0, 0.0946188, 11424.7, 6.79256), (185737.0, 185737.0, 0.0834558, 22108.5, 6.27152), (187872.0, 187872.0, 0.0922701, 11929.8, 6.62238)]), ({'disable_gc': False, 'scale_factor': 20, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False}, [(485609.0, 485609.0, 0.0410983, 0.0, 20.483), (488427.0, 488427.0, 0.0408604, 0.0, 20.4812), (488673.0, 488673.0, 0.0408392, 0.0, 21.4497)]), ({'disable_gc': False, 'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-real', 'disable_snapshots': False}, [(531895.0, 531895.0, 0.0449565, 392.421, 20.8648), (519911.0, 519911.0, 0.0453662, 427.594, 20.9243), (532396.0, 532396.0, 0.0449219, 414.072, 20.3021)]), ({'disable_gc': False, 'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(189167.0, 189167.0, 0.0995511, 25374.6, 6.19028), (190403.0, 190403.0, 0.113274, 30230.3, 7.28327), (191628.0, 191628.0, 0.112405, 28540.7, 6.66101)]), ({'disable_gc': False, 'scale_factor': 24, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False}, [(578584.0, 578584.0, 0.0413895, 0.0, 24.89), (576649.0, 576649.0, 0.0415336, 0.0, 25.0663), (573606.0, 573606.0, 0.0417509, 0.0, 24.8613)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False}, [(614343.0, 614343.0, 0.0454167, 128.291, 24.9615), (614416.0, 614416.0, 0.045434, 129.705, 24.4744), (610425.0, 610425.0, 0.0457182, 119.286, 25.4812)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(194751.0, 194751.0, 0.118667, 26223.6, 6.37576), (192813.0, 192813.0, 0.112795, 34142.6, 6.37018), (190514.0, 190514.0, 0.113389, 36029.3, 5.79154)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(660947.0, 660947.0, 0.0422742, 0.0, 27.3494), (672976.0, 672976.0, 0.0415164, 0.0, 28.3322), (668866.0, 668866.0, 0.0417719, 0.0, 26.9708)]), ({'disable_gc': False, 'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-real', 'disable_snapshots': False}, [(677187.0, 677187.0, 0.0468518, 985.0, 26.8883), (675340.0, 675340.0, 0.04693, 1063.74, 27.0104), (667633.0, 667633.0, 0.0473975, 946.623, 26.3616)]), ({'disable_gc': False, 'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-temp', 'disable_snapshots': False}, [(190389.0, 190389.0, 0.133702, 59431.5, 6.21439), (189099.0, 189099.0, 0.139139, 59091.3, 6.38332), (188621.0, 188621.0, 0.138977, 55855.2, 6.12984)]), ({'disable_gc': False, 'scale_factor': 32, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'scale_tpcc', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(799555.0, 799555.0, 0.0399245, 0.0, 35.9474), (789040.0, 789040.0, 0.0404528, 0.0, 36.0426), (802551.0, 802551.0, 0.0397774, 0.0, 35.266)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(744818.0, 744818.0, 0.0375421, 0.0, 0.0), (729245.0, 729245.0, 0.0383431, 0.0, 0.0), (744176.0, 744176.0, 0.0375721, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(722201.0, 722201.0, 0.0387092, 0.0, 109.097), (725699.0, 725699.0, 0.0385213, 0.0, 109.148), (731531.0, 731531.0, 0.0382124, 0.0, 112.411)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(718327.0, 718327.0, 0.0389068, 0.0, 215.074), (724478.0, 724478.0, 0.0385769, 0.0, 218.096), (723477.0, 723477.0, 0.0386306, 0.0, 217.329)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(720978.0, 720978.0, 0.0387546, 0.0, 321.378), (717441.0, 717441.0, 0.038947, 0.0, 326.11), (716146.0, 716146.0, 0.0390174, 0.0, 322.794)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(710948.0, 710948.0, 0.039292, 0.0, 426.372), (711679.0, 711679.0, 0.0392517, 0.0, 429.325), (712859.0, 712859.0, 0.0391863, 0.0, 419.673)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(716067.0, 716067.0, 0.0390019, 0.0, 537.117), (709727.0, 709727.0, 0.0393509, 0.0, 524.4), (712776.0, 712776.0, 0.0391784, 0.0, 532.62)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(698942.0, 698942.0, 0.03994, 0.0, 624.089), (707212.0, 707212.0, 0.0394828, 0.0, 622.304), (706480.0, 706480.0, 0.0395227, 0.0, 626.878)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(713453.0, 713453.0, 0.0391257, 0.0, 737.55), (698711.0, 698711.0, 0.0399528, 0.0, 716.737), (707546.0, 707546.0, 0.0394551, 0.0, 733.136)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(686513.0, 686513.0, 0.0406552, 0.0, 795.383), (701446.0, 701446.0, 0.0397873, 0.0, 817.033), (696570.0, 696570.0, 0.0400673, 0.0, 817.334)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(704394.0, 704394.0, 0.0396135, 0.0, 920.414), (684835.0, 684835.0, 0.0407456, 0.0, 901.231), (703963.0, 703963.0, 0.0396379, 0.0, 926.467)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(698642.0, 698642.0, 0.0399317, 0.0, 1015.81), (704281.0, 704281.0, 0.0396104, 0.0, 1014.66), (705923.0, 705923.0, 0.0395182, 0.0, 1027.02)])] + [({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(745168.0, 745168.0, 0.0375228, 0.0, 0.0), (718617.0, 718617.0, 0.0389127, 0.0, 0.0), (734465.0, 734465.0, 0.0380727, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(718176.0, 718176.0, 0.0389247, 0.0, 107.765), (732056.0, 732056.0, 0.038187, 0.0, 111.181), (725086.0, 725086.0, 0.0385547, 0.0, 112.148)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(718581.0, 718581.0, 0.0388926, 0.0, 216.729), (720240.0, 720240.0, 0.0388036, 0.0, 219.128), (724160.0, 724160.0, 0.0385882, 0.0, 219.179)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(723001.0, 723001.0, 0.0386457, 0.0, 323.577), (716546.0, 716546.0, 0.038994, 0.0, 321.71), (715844.0, 715844.0, 0.0390336, 0.0, 323.227)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(718339.0, 718339.0, 0.0388866, 0.0, 430.723), (718861.0, 718861.0, 0.0388588, 0.0, 430.825), (701943.0, 701943.0, 0.0397957, 0.0, 419.025)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(713035.0, 713035.0, 0.0391695, 0.0, 521.974), (714125.0, 714125.0, 0.0391062, 0.0, 528.383), (702524.0, 702524.0, 0.0397539, 0.0, 521.807)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(705886.0, 705886.0, 0.0395548, 0.0, 630.086), (712365.0, 712365.0, 0.0391934, 0.0, 634.904), (705125.0, 705125.0, 0.0395977, 0.0, 628.239)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(708353.0, 708353.0, 0.0394067, 0.0, 728.587), (703863.0, 703863.0, 0.0396599, 0.0, 733.37), (701791.0, 701791.0, 0.039778, 0.0, 726.171)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(696696.0, 696696.0, 0.0400605, 0.0, 811.101), (698641.0, 698641.0, 0.0399471, 0.0, 812.769), (700486.0, 700486.0, 0.0398438, 0.0, 818.919)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(698854.0, 698854.0, 0.0399254, 0.0, 918.434), (694037.0, 694037.0, 0.0402035, 0.0, 910.21), (699151.0, 699151.0, 0.039914, 0.0, 905.744)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(694882.0, 694882.0, 0.0401454, 0.0, 1013.35), (702246.0, 702246.0, 0.0397262, 0.0, 1012.1), (698722.0, 698722.0, 0.039925, 0.0, 1008.45)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(880123.0, 880123.0, 0.0317634, 0.0, 0.0), (882710.0, 882710.0, 0.03167, 0.0, 0.0), (881295.0, 881295.0, 0.0317214, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(853692.0, 853692.0, 0.0327402, 0.0, 125.698), (857504.0, 857504.0, 0.0325954, 0.0, 123.048), (869947.0, 869947.0, 0.032129, 0.0, 125.998)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(868889.0, 868889.0, 0.0321596, 0.0, 249.879), (857076.0, 857076.0, 0.0326019, 0.0, 252.13), (851537.0, 851537.0, 0.0328151, 0.0, 253.88)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(855104.0, 855104.0, 0.0326696, 0.0, 372.811), (843555.0, 843555.0, 0.0331169, 0.0, 366.711), (855979.0, 855979.0, 0.032636, 0.0, 377.682)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(854892.0, 854892.0, 0.0326699, 0.0, 501.168), (848600.0, 848600.0, 0.0329129, 0.0, 506.259), (833309.0, 833309.0, 0.0335183, 0.0, 492.258)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(842414.0, 842414.0, 0.033148, 0.0, 614.09), (839501.0, 839501.0, 0.0332639, 0.0, 607.718), (853846.0, 853846.0, 0.032703, 0.0, 626.258)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(835522.0, 835522.0, 0.0334136, 0.0, 719.842), (839114.0, 839114.0, 0.0332686, 0.0, 733.639), (837311.0, 837311.0, 0.0333425, 0.0, 729.656)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(837669.0, 837669.0, 0.0333211, 0.0, 846.921), (825053.0, 825053.0, 0.0338307, 0.0, 829.035), (840314.0, 840314.0, 0.0332143, 0.0, 846.671)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(832251.0, 832251.0, 0.0335296, 0.0, 956.086), (821790.0, 821790.0, 0.0339582, 0.0, 941.503), (816758.0, 816758.0, 0.0341685, 0.0, 935.368)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(839997.0, 839997.0, 0.0332133, 0.0, 1078.94), (829126.0, 829126.0, 0.0336504, 0.0, 1064.35), (824268.0, 824268.0, 0.0338495, 0.0, 1068.24)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(823633.0, 823633.0, 0.0338678, 0.0, 1167.56), (827944.0, 827944.0, 0.0336917, 0.0, 1165.97), (817099.0, 817099.0, 0.034139, 0.0, 1164.33)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(1236310.0, 1236310.0, 0.0226018, 0.0, 0.0), (1244240.0, 1244240.0, 0.0224582, 0.0, 0.0), (1245850.0, 1245850.0, 0.0224283, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(1045020.0, 1045020.0, 0.026748, 0.0, 0.0), (1036090.0, 1036090.0, 0.0269785, 0.0, 0.0), (1039220.0, 1039220.0, 0.0268971, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(865856.0, 865856.0, 0.0322923, 0.0, 0.0), (861881.0, 861881.0, 0.0324414, 0.0, 0.0), (844881.0, 844881.0, 0.0330947, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(705044.0, 705044.0, 0.0396666, 0.0, 0.0), (703775.0, 703775.0, 0.0397393, 0.0, 0.0), (708846.0, 708846.0, 0.0394545, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(591404.0, 591404.0, 0.0472985, 0.0, 0.0), (584303.0, 584303.0, 0.0478737, 0.0, 0.0), (575244.0, 575244.0, 0.048627, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(484320.0, 484320.0, 0.0577639, 0.0, 0.0), (494191.0, 494191.0, 0.0566106, 0.0, 0.0), (495974.0, 495974.0, 0.0564078, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(419854.0, 419854.0, 0.0666428, 0.0, 0.0), (413765.0, 413765.0, 0.0676235, 0.0, 0.0), (415404.0, 415404.0, 0.0673568, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(358433.0, 358433.0, 0.0780522, 0.0, 0.0), (358356.0, 358356.0, 0.0780874, 0.0, 0.0), (361831.0, 361831.0, 0.0773367, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(318298.0, 318298.0, 0.0879168, 0.0, 0.0), (316568.0, 316568.0, 0.0883999, 0.0, 0.0), (317404.0, 317404.0, 0.0881668, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(280795.0, 280795.0, 0.0996671, 0.0, 0.0), (280361.0, 280361.0, 0.0998229, 0.0, 0.0), (282226.0, 282226.0, 0.0991631, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 28, 'db': 'kvdb-st', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:pct', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(256166.0, 256166.0, 0.109255, 0.0, 0.0), (252953.0, 252953.0, 0.110645, 0.0, 0.0), (255144.0, 255144.0, 0.109693, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'kvdb-st', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False}, [(43855.1, 43855.1, 0.0227563, 0.0, 0.0), (43888.4, 43888.4, 0.0227407, 0.0, 0.0), (44572.7, 44572.7, 0.0223913, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False}, [(30605.7, 30605.7, 0.0326234, 0.0, 0.0), (31320.7, 31320.7, 0.0318794, 0.0, 0.0), (31041.7, 31041.7, 0.0321648, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False}, [(31066.6, 31066.6, 0.0321422, 0.0, 0.0), (30482.7, 30482.7, 0.032754, 0.0, 0.0), (30725.5, 30725.5, 0.0324976, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False}, [(31560.3, 31560.3, 0.0316371, 0.0, 0.0), (30490.8, 30490.8, 0.0327463, 0.0, 0.0), (31364.5, 31364.5, 0.0318347, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 1, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False}, [(32179.5, 32179.5, 0.0310248, 0.0, 0.0), (31418.1, 31418.1, 0.0317786, 0.0, 0.0), (31469.4, 31469.4, 0.0317263, 0.0, 0.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 2, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False}, [(62847.1, 62847.1, 0.0317729, 0.0, 3.08331), (60534.9, 60534.9, 0.0329676, 0.0, 2.93331), (62151.0, 62151.0, 0.0321257, 0.0, 2.78332)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 2, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False}, [(61213.8, 61213.8, 0.03262, 0.0, 3.26664), (61263.6, 61263.6, 0.0325946, 0.0, 3.21665), (62314.0, 62314.0, 0.0320424, 0.0, 2.99998)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 2, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False}, [(61973.1, 61973.1, 0.0322061, 0.0, 3.03332), (62583.3, 62583.3, 0.0319036, 0.0, 3.08332), (61742.0, 61742.0, 0.0323412, 0.0, 3.19998)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 2, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False}, [(63072.2, 63072.2, 0.0316574, 0.0, 3.61665), (63271.7, 63271.7, 0.0315533, 0.0, 2.91665), (63570.4, 63570.4, 0.0314084, 0.0, 2.99999)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False}, [(118405.0, 118405.0, 0.0337239, 0.0, 18.0832), (117069.0, 117069.0, 0.0341063, 0.0, 18.5832), (117203.0, 117203.0, 0.0340672, 0.0, 18.5832)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False}, [(118274.0, 118274.0, 0.0337591, 0.0, 17.9999), (117501.0, 117501.0, 0.0339807, 0.0, 17.1999), (119067.0, 119067.0, 0.0335348, 0.0, 17.7832)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False}, [(116340.0, 116340.0, 0.0343207, 0.0, 16.7665), (116166.0, 116166.0, 0.0343719, 0.0, 17.6332), (118098.0, 118098.0, 0.033811, 0.0, 17.8332)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 4, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False}, [(119795.0, 119795.0, 0.0333284, 0.0, 18.3165), (119479.0, 119479.0, 0.0334195, 0.0, 18.7832), (120864.0, 120864.0, 0.0330335, 0.0, 19.1998)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 6, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False}, [(156516.0, 156516.0, 0.0356539, 0.0, 9296.25), (160001.0, 160001.0, 0.0348753, 0.0, 9580.05), (159009.0, 159009.0, 0.0351108, 0.0, 9510.0)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 6, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False}, [(158802.0, 158802.0, 0.0351452, 0.0, 9504.12), (159279.0, 159279.0, 0.0350251, 0.0, 9550.32), (154746.0, 154746.0, 0.0360781, 0.0, 9252.64)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 6, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False}, [(158237.0, 158237.0, 0.0352603, 0.0, 9476.15), (159893.0, 159893.0, 0.0348924, 0.0, 9519.93), (158347.0, 158347.0, 0.0352528, 0.0, 9471.68)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 6, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False}, [(170417.0, 170417.0, 0.034849, 0.0, 871.275), (172535.0, 172535.0, 0.0344206, 0.0, 881.622), (170994.0, 170994.0, 0.0347308, 0.0, 876.925)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False}, [(196955.0, 196955.0, 0.0364097, 0.0, 18501.5), (198523.0, 198523.0, 0.0361219, 0.0, 18628.1), (197126.0, 197126.0, 0.0363815, 0.0, 18481.3)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False}, [(198100.0, 198100.0, 0.0362044, 0.0, 18554.2), (199049.0, 199049.0, 0.0360214, 0.0, 18700.2), (201121.0, 201121.0, 0.0356409, 0.0, 18909.3)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False}, [(198105.0, 198105.0, 0.0362002, 0.0, 18588.4), (198277.0, 198277.0, 0.0361677, 0.0, 18605.8), (199991.0, 199991.0, 0.0358402, 0.0, 18767.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 8, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False}, [(224949.0, 224949.0, 0.0350481, 0.0, 1744.53), (221430.0, 221430.0, 0.0356075, 0.0, 1730.5), (220522.0, 220522.0, 0.0357496, 0.0, 1721.03)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 10, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False}, [(176106.0, 176106.0, 0.0472443, 0.0, 27087.2), (179962.0, 179962.0, 0.0463343, 0.0, 27664.6), (176850.0, 176850.0, 0.047126, 0.0, 27107.9)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 10, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False}, [(176422.0, 176422.0, 0.0471608, 0.0, 27095.6), (179979.0, 179979.0, 0.0463294, 0.0, 27597.4), (178972.0, 178972.0, 0.0466128, 0.0, 27417.4)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 10, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False}, [(180200.0, 180200.0, 0.046302, 0.0, 27573.9), (176131.0, 176131.0, 0.0472636, 0.0, 27066.9), (177472.0, 177472.0, 0.0468588, 0.0, 27390.7)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 10, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False}, [(209124.0, 209124.0, 0.0466375, 0.0, 2680.76), (209849.0, 209849.0, 0.0464893, 0.0, 2666.57), (205378.0, 205378.0, 0.0474777, 0.0, 2636.59)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False}, [(139588.0, 139588.0, 0.0659393, 0.0, 28819.5), (140095.0, 140095.0, 0.0657099, 0.0, 28952.9), (139966.0, 139966.0, 0.0656314, 0.0, 28976.9)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False}, [(140820.0, 140820.0, 0.0653365, 0.0, 29218.2), (136922.0, 136922.0, 0.0669741, 0.0, 28417.5), (137839.0, 137839.0, 0.0665611, 0.0, 28531.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False}, [(140798.0, 140798.0, 0.0654683, 0.0, 29213.5), (137944.0, 137944.0, 0.0665734, 0.0, 28517.1), (138015.0, 138015.0, 0.0664668, 0.0, 28568.3)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 12, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False}, [(171605.0, 171605.0, 0.0677162, 0.0, 2794.55), (169985.0, 169985.0, 0.0683708, 0.0, 2778.57), (170709.0, 170709.0, 0.0680968, 0.0, 2803.46)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False}, [(115870.0, 115870.0, 0.0937046, 0.0, 37720.7), (114680.0, 114680.0, 0.0946853, 0.0, 37366.4), (117800.0, 117800.0, 0.0926635, 0.0, 38320.1)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False}, [(116384.0, 116384.0, 0.0934684, 0.0, 37934.7), (115993.0, 115993.0, 0.0936669, 0.0, 37713.0), (114983.0, 114983.0, 0.0943386, 0.0, 37406.5)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False}, [(114252.0, 114252.0, 0.094901, 0.0, 37231.7), (116929.0, 116929.0, 0.093139, 0.0, 38047.8), (114836.0, 114836.0, 0.0945289, 0.0, 37429.7)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 16, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False}, [(155493.0, 155493.0, 0.0981295, 0.0, 3883.07), (155426.0, 155426.0, 0.098211, 0.0, 3876.51), (153428.0, 153428.0, 0.0994932, 0.0, 3832.03)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False}, [(60475.2, 60475.2, 0.182445, 0.0, 29488.2), (60107.8, 60107.8, 0.182948, 0.0, 29348.9), (61280.1, 61280.1, 0.18006, 0.0, 29705.9)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False}, [(60457.2, 60457.2, 0.182212, 0.0, 29363.5), (59668.9, 59668.9, 0.184091, 0.0, 29139.5), (60189.9, 60189.9, 0.184746, 0.0, 29619.2)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False}, [(60690.5, 60690.5, 0.181272, 0.0, 29316.2), (60653.1, 60653.1, 0.18253, 0.0, 29726.2), (60324.7, 60324.7, 0.182389, 0.0, 29379.7)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 20, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False}, [(93175.0, 93175.0, 0.199149, 0.0, 3175.85), (93062.2, 93062.2, 0.199089, 0.0, 3126.64), (92847.4, 92847.4, 0.199474, 0.0, 3119.26)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False}, [(49744.9, 49744.9, 0.241377, 0.0, 31513.3), (47512.1, 47512.1, 0.254183, 0.0, 30747.1), (50122.0, 50122.0, 0.241101, 0.0, 32188.8)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False}, [(49325.6, 49325.6, 0.24355, 0.0, 31058.0), (50315.1, 50315.1, 0.240308, 0.0, 32304.2), (49780.8, 49780.8, 0.242475, 0.0, 32178.8)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False}, [(49702.4, 49702.4, 0.241583, 0.0, 31700.6), (50319.8, 50319.8, 0.23972, 0.0, 32107.6), (49576.4, 49576.4, 0.242742, 0.0, 31283.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 24, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False}, [(84953.5, 84953.5, 0.259721, 0.0, 3600.62), (84818.5, 84818.5, 0.260264, 0.0, 3643.95), (84363.5, 84363.5, 0.26163, 0.0, 3578.91)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(28735.5, 28735.5, 0.416581, 0.0, 23273.6), (29008.3, 29008.3, 0.419257, 0.0, 23993.0), (29544.0, 29544.0, 0.407269, 0.0, 24158.4)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(28835.9, 28835.9, 0.415777, 0.0, 23612.4), (29283.3, 29283.3, 0.412591, 0.0, 24090.3), (29287.1, 29287.1, 0.406696, 0.0, 23664.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(29758.3, 29758.3, 0.409433, 0.0, 24554.2), (28236.7, 28236.7, 0.419801, 0.0, 22938.4), (29144.5, 29144.5, 0.411853, 0.0, 23565.5)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 28, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False}, [(55879.1, 55879.1, 0.447132, 0.0, 2865.33), (54264.9, 54264.9, 0.462334, 0.0, 2796.55), (56233.5, 56233.5, 0.446034, 0.0, 2898.39)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(23768.9, 23768.9, 0.537222, 0.0, 23606.3), (24678.7, 24678.7, 0.512726, 0.0, 24112.1), (25735.6, 25735.6, 0.499694, 0.0, 25295.3)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(25904.7, 25904.7, 0.495937, 0.0, 25535.5), (25071.9, 25071.9, 0.510231, 0.0, 24728.7), (25014.4, 25014.4, 0.511266, 0.0, 24456.1)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(25331.1, 25331.1, 0.503081, 0.0, 24647.1), (25277.4, 25277.4, 0.507604, 0.0, 24967.8), (24860.0, 24860.0, 0.514896, 0.0, 24465.6)]), ({'disable_gc': False, 'scale_factor': 4, 'db': 'ndb-proto2', 'par_load': False, 'threads': 32, 'log_compress': False, 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'log_fake_writes': False, 'retry': False, 'log_nofsync': False, 'name': 'multipart:skew', 'bench': 'tpcc', 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False}, [(51318.9, 51318.9, 0.553087, 0.0, 3080.28), (51523.8, 51523.8, 0.550038, 0.0, 3105.77), (51377.4, 51377.4, 0.551486, 0.0, 3071.04)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-21-13_cameraready-1.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(575616.0, 575616.0, 0.00168949, 0.0, 0.0), (578536.0, 578536.0, 0.00168159, 0.0, 0.0), (580221.0, 580221.0, 0.00167668, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(558921.0, 558921.0, 0.00174234, 0.0, 0.0), (556947.0, 556947.0, 0.00174774, 0.0, 0.0), (553586.0, 553586.0, 0.00175766, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(560097.0, 560097.0, 0.00173837, 0.0, 0.0), (563833.0, 563833.0, 0.00172632, 0.0, 0.0), (557317.0, 557317.0, 0.00174698, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(2395410.0, 2395410.0, 0.00162179, 0.0, 0.0), (2412890.0, 2412890.0, 0.00160991, 0.0, 0.0), (2414120.0, 2414120.0, 0.00160909, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(2248410.0, 2248410.0, 0.00173062, 0.0, 0.0), (2256550.0, 2256550.0, 0.0017243, 0.0, 0.0), (2263440.0, 2263440.0, 0.00171894, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(2257040.0, 2257040.0, 0.00172376, 0.0, 0.0), (2262650.0, 2262650.0, 0.00171955, 0.0, 0.0), (2261210.0, 2261210.0, 0.00172048, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(4597760.0, 4597760.0, 0.00169162, 0.0, 0.0), (4616010.0, 4616010.0, 0.00168483, 0.0, 0.0), (4608240.0, 4608240.0, 0.00168781, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(4314570.0, 4314570.0, 0.00180563, 0.0, 0.0166665), (4333450.0, 4333450.0, 0.00179756, 0.0, 0.0), (4331200.0, 4331200.0, 0.00179853, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(4348940.0, 4348940.0, 0.00179096, 0.0, 0.0), (4329300.0, 4329300.0, 0.00179932, 0.0, 0.0), (4334450.0, 4334450.0, 0.00179716, 0.0, 0.0166665)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(6367420.0, 6367420.0, 0.00183657, 0.0, 0.0), (6293770.0, 6293770.0, 0.00185356, 0.0, 0.0), (6342450.0, 6342450.0, 0.00184406, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(5999830.0, 5999830.0, 0.00195169, 0.0, 0.0), (6001700.0, 6001700.0, 0.00195111, 0.0, 0.0166666), (5999440.0, 5999440.0, 0.00195188, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(6045620.0, 6045620.0, 0.00193648, 0.0, 0.0), (6064630.0, 6064630.0, 0.00193036, 0.0, 0.0166665), (6040860.0, 6040860.0, 0.00193817, 0.0, 0.0166666)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(8307300.0, 8307300.0, 0.001878, 0.0, 0.0), (8297700.0, 8297700.0, 0.00188009, 0.0, 0.0), (8280920.0, 8280920.0, 0.00188402, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(7817290.0, 7817290.0, 0.00199833, 0.0, 0.0166665), (7802520.0, 7802520.0, 0.00200201, 0.0, 0.0), (7811460.0, 7811460.0, 0.00199984, 0.0, 0.0833322)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(7928420.0, 7928420.0, 0.00196961, 0.0, 0.0166666), (7919210.0, 7919210.0, 0.00197197, 0.0, 0.0166665), (7917390.0, 7917390.0, 0.00197234, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(10267500.0, 10267500.0, 0.00189997, 0.0, 0.0), (10270900.0, 10270900.0, 0.00189931, 0.0, 0.0), (10265500.0, 10265500.0, 0.00190017, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9449810.0, 9449810.0, 0.00206788, 0.0, 0.0333329), (9448340.0, 9448340.0, 0.00206841, 0.0, 0.0), (9440770.0, 9440770.0, 0.00207008, 0.0, 0.0166664)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9799650.0, 9799650.0, 0.00199244, 0.0, 0.0166665), (9806870.0, 9806870.0, 0.00199089, 0.0, 0.0), (9789250.0, 9789250.0, 0.0019947, 0.0, 0.066666)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(12162600.0, 12162600.0, 0.00192521, 0.0, 0.0), (12172800.0, 12172800.0, 0.00192338, 0.0, 0.0), (12166500.0, 12166500.0, 0.00192455, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(10423900.0, 10423900.0, 0.00225399, 0.0, 0.0499992), (10411800.0, 10411800.0, 0.00225661, 0.0, 0.0166664), (10389100.0, 10389100.0, 0.00226165, 0.0, 0.0499992)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(11600200.0, 11600200.0, 0.0020204, 0.0, 0.0), (11551200.0, 11551200.0, 0.00202914, 0.0, 0.0499993), (11572700.0, 11572700.0, 0.0020253, 0.0, 0.0499994)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(14168000.0, 14168000.0, 0.00192825, 0.0, 0.0), (14211200.0, 14211200.0, 0.00192234, 0.0, 0.0), (14190700.0, 14190700.0, 0.00192516, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9381700.0, 9381700.0, 0.00293617, 0.0, 0.0166662), (9488990.0, 9488990.0, 0.00290237, 0.0, 0.0666645), (9500500.0, 9500500.0, 0.00289888, 0.0, 0.0499995)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(13522500.0, 13522500.0, 0.00202218, 0.0, 0.0333326), (13534900.0, 13534900.0, 0.00202034, 0.0, 0.0333327), (13306400.0, 13306400.0, 0.00205582, 0.0, 0.0333326)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(15798400.0, 15798400.0, 0.00197723, 0.0, 0.0), (15856800.0, 15856800.0, 0.00196982, 0.0, 0.0), (15840300.0, 15840300.0, 0.00197191, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(8744460.0, 8744460.0, 0.00361026, 0.0, 0.0166632), (8731700.0, 8731700.0, 0.00361618, 0.0, 0.0), (8736010.0, 8736010.0, 0.00361437, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(15105200.0, 15105200.0, 0.00206949, 0.0, 0.0833162), (15055600.0, 15055600.0, 0.00207672, 0.0, 0.116665), (15043800.0, 15043800.0, 0.00207845, 0.0, 0.0833309)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-21-13_cameraready.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '101G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(525615.0, 525615.0, 0.00185516, 0.0, 0.0), (515410.0, 515410.0, 0.00189345, 0.0, 0.0), (520312.0, 520312.0, 0.00187489, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '101G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(497195.0, 497195.0, 0.00196389, 0.0, 0.0), (491779.0, 491779.0, 0.00198601, 0.0, 0.0), (494453.0, 494453.0, 0.00197536, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '101G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(495989.0, 495989.0, 0.00196928, 0.0, 0.0), (496430.0, 496430.0, 0.00196703, 0.0, 0.0), (496666.0, 496666.0, 0.0019662, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '105G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(2169280.0, 2169280.0, 0.00179469, 0.0, 0.0), (2157320.0, 2157320.0, 0.00180592, 0.0, 0.0), (2157930.0, 2157930.0, 0.00180571, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '105G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(2005710.0, 2005710.0, 0.00194654, 0.0, 0.0166666), (2006780.0, 2006780.0, 0.00194519, 0.0, 0.0), (2002000.0, 2002000.0, 0.00195016, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '105G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(1977830.0, 1977830.0, 0.00197388, 0.0, 0.0), (2010380.0, 2010380.0, 0.00194187, 0.0, 0.0), (1992090.0, 1992090.0, 0.0019602, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '111G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(4232030.0, 4232030.0, 0.00184175, 0.0, 0.0), (4240500.0, 4240500.0, 0.00183809, 0.0, 0.0), (4221930.0, 4221930.0, 0.00184649, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '111G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(3924390.0, 3924390.0, 0.0019905, 0.0, 0.0), (3930880.0, 3930880.0, 0.00198678, 0.0, 0.0), (3935780.0, 3935780.0, 0.00198435, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '111G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(3958040.0, 3958040.0, 0.00197312, 0.0, 0.0), (3888130.0, 3888130.0, 0.00200616, 0.0, 0.0166665), (3960540.0, 3960540.0, 0.00197191, 0.0, 0.0166665)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '116G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(5956440.0, 5956440.0, 0.00196661, 0.0, 0.0), (5930870.0, 5930870.0, 0.0019753, 0.0, 0.0), (5963950.0, 5963950.0, 0.00196407, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '116G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(5514320.0, 5514320.0, 0.00212806, 0.0, 0.0), (5624140.0, 5624140.0, 0.00208577, 0.0, 0.0), (5637120.0, 5637120.0, 0.00208013, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '116G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(5689030.0, 5689030.0, 0.0020614, 0.0, 0.0), (5701160.0, 5701160.0, 0.00205693, 0.0, 0.0), (5690470.0, 5690470.0, 0.0020607, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '122G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(7731590.0, 7731590.0, 0.00202149, 0.0, 0.0), (7724800.0, 7724800.0, 0.00202305, 0.0, 0.0), (7739500.0, 7739500.0, 0.00201935, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '122G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(7318690.0, 7318690.0, 0.00213825, 0.0, 0.0166666), (7332020.0, 7332020.0, 0.00213407, 0.0, 0.0), (7324860.0, 7324860.0, 0.00213609, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '122G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(7411250.0, 7411250.0, 0.00211038, 0.0, 0.0166665), (7421290.0, 7421290.0, 0.00210778, 0.0, 0.0), (7406560.0, 7406560.0, 0.00211225, 0.0, 0.0333329)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '128G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9489010.0, 9489010.0, 0.00205971, 0.0, 0.0), (9434600.0, 9434600.0, 0.00207199, 0.0, 0.0), (9479070.0, 9479070.0, 0.00206207, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '128G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(8842230.0, 8842230.0, 0.00221404, 0.0, 0.0166664), (8831230.0, 8831230.0, 0.00221663, 0.0, 0.0), (8828560.0, 8828560.0, 0.00221729, 0.0, 0.0333329)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '128G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9132950.0, 9132950.0, 0.002142, 0.0, 0.0333327), (9067670.0, 9067670.0, 0.00215753, 0.0, 0.0166665), (9110610.0, 9110610.0, 0.00214738, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '133G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(11138600.0, 11138600.0, 0.00210667, 0.0, 0.0), (11086900.0, 11086900.0, 0.00211596, 0.0, 0.0), (11034700.0, 11034700.0, 0.00212673, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '133G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9980690.0, 9980690.0, 0.00235595, 0.0, 0.0), (10055300.0, 10055300.0, 0.00233887, 0.0, 0.0166665), (10016900.0, 10016900.0, 0.00234774, 0.0, 0.0333326)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '133G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(10661500.0, 10661500.0, 0.00220307, 0.0, 0.0), (10694500.0, 10694500.0, 0.00219619, 0.0, 0.033333), (10674900.0, 10674900.0, 0.0022003, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '139G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(13132600.0, 13132600.0, 0.00208421, 0.0, 0.0), (13061100.0, 13061100.0, 0.00209564, 0.0, 0.0), (13131600.0, 13131600.0, 0.00208361, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '139G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(9574580.0, 9574580.0, 0.00287661, 0.0, 0.0166664), (9575250.0, 9575250.0, 0.00287639, 0.0, 0.0166664), (9678110.0, 9678110.0, 0.00284494, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '139G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(12592400.0, 12592400.0, 0.00217546, 0.0, 0.0333329), (12568800.0, 12568800.0, 0.00217985, 0.0, 0.0333325), (12316600.0, 12316600.0, 0.00222484, 0.0, 0.0166664)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '144G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(14762500.0, 14762500.0, 0.00211941, 0.0, 0.0), (14779900.0, 14779900.0, 0.00211705, 0.0, 0.0), (14757300.0, 14757300.0, 0.00212033, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '144G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(8929980.0, 8929980.0, 0.0035352, 0.0, 0.0), (8895050.0, 8895050.0, 0.00354928, 0.0, 0.0166664), (8940840.0, 8940840.0, 0.00353037, 0.0, 0.0166664)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 320000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '144G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(14090400.0, 14090400.0, 0.00222263, 0.0, 0.0166632), (14107400.0, 14107400.0, 0.00221994, 0.0, 0.0333329), (14118600.0, 14118600.0, 0.0022184, 0.0, 0.0333329)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-22-13_cameraready.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(28581.6, 28581.6, 0.0348721, 84.0771, 0.0), (28602.5, 28602.5, 0.0348454, 82.8083, 0.0), (28462.4, 28462.4, 0.0350136, 83.5707, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(28233.0, 28233.0, 0.0353046, 85.8589, 0.0), (28675.2, 28675.2, 0.0347586, 80.8825, 0.0), (28770.5, 28770.5, 0.0346354, 83.7797, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(30384.4, 30384.4, 0.0328257, 0.0, 0.0), (30370.2, 30370.2, 0.0328381, 0.0, 0.0), (30603.3, 30603.3, 0.0325872, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(25631.9, 25631.9, 0.0388824, 86.3268, 0.0), (25497.7, 25497.7, 0.0391135, 82.3829, 0.0), (25305.3, 25305.3, 0.0393871, 86.8797, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(25144.7, 25144.7, 0.0396357, 84.7745, 0.0), (25611.3, 25611.3, 0.0389202, 84.2683, 0.0), (25066.7, 25066.7, 0.0397612, 89.0185, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(26999.5, 26999.5, 0.0369491, 0.0, 0.0), (27038.9, 27038.9, 0.0368896, 0.0, 0.0), (27030.5, 27030.5, 0.0369025, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(102033.0, 102033.0, 0.039075, 116.086, 4.24616), (101811.0, 101811.0, 0.0391514, 108.753, 4.32904), (101613.0, 101613.0, 0.0392468, 116.108, 4.33032)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(102238.0, 102238.0, 0.0389833, 93.8575, 4.16197), (102146.0, 102146.0, 0.0390133, 95.4447, 4.26152), (102410.0, 102410.0, 0.0389261, 95.6984, 4.11312)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(109854.0, 109854.0, 0.036318, 0.0, 5.04994), (108880.0, 108880.0, 0.0366435, 0.0, 4.16664), (108802.0, 108802.0, 0.0366672, 0.0, 4.51663)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(91573.6, 91573.6, 0.043533, 94.3058, 2.68056), (91358.8, 91358.8, 0.0436126, 116.024, 2.51268), (91581.8, 91581.8, 0.04354, 96.238, 2.24792)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(91837.7, 91837.7, 0.0434038, 103.306, 2.83012), (92498.9, 92498.9, 0.0431005, 102.537, 2.59721), (91561.9, 91561.9, 0.0435366, 92.6303, 2.71367)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(96777.6, 96777.6, 0.0412297, 0.0, 2.79997), (96094.7, 96094.7, 0.0415237, 0.0, 2.56665), (96149.3, 96149.3, 0.0415024, 0.0, 2.93332)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(190403.0, 190403.0, 0.0418729, 138.159, 7.87489), (187809.0, 187809.0, 0.0424441, 100.639, 7.75646), (185207.0, 185207.0, 0.0425577, 177.304, 8.16468)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(190805.0, 190805.0, 0.0417944, 101.474, 8.07568), (191865.0, 191865.0, 0.0415614, 96.7059, 8.22492), (191391.0, 191391.0, 0.0416554, 99.4986, 7.30902)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(206900.0, 206900.0, 0.0385719, 0.0, 9.09978), (207548.0, 207548.0, 0.0384517, 0.0, 9.06647), (205381.0, 205381.0, 0.0388612, 0.0, 9.41648)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(173500.0, 173500.0, 0.0459583, 166.703, 5.24425), (171314.0, 171314.0, 0.0465562, 121.944, 5.19582), (173732.0, 173732.0, 0.0458952, 142.919, 5.36053)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(172978.0, 172978.0, 0.0461067, 93.2365, 5.16248), (174523.0, 174523.0, 0.0457, 105.733, 5.04557), (175544.0, 175544.0, 0.0454341, 107.263, 4.97892)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(184680.0, 184680.0, 0.0432207, 0.0, 4.96662), (181980.0, 181980.0, 0.0438596, 0.0, 5.09995), (184128.0, 184128.0, 0.0433499, 0.0, 5.39994)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(282551.0, 282551.0, 0.0423176, 124.085, 11.9193), (281383.0, 281383.0, 0.0424913, 173.96, 11.5686), (279719.0, 279719.0, 0.0427516, 161.055, 11.0876)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(285786.0, 285786.0, 0.0418578, 102.085, 12.5737), (281282.0, 281282.0, 0.0425319, 100.516, 11.6916), (285913.0, 285913.0, 0.0418388, 103.829, 12.1077)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(307865.0, 307865.0, 0.0388836, 0.0, 13.6999), (307560.0, 307560.0, 0.0389219, 0.0, 14.1498), (304962.0, 304962.0, 0.0392521, 0.0, 13.5497)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(254450.0, 254450.0, 0.0470049, 146.707, 7.40828), (257875.0, 257875.0, 0.0463946, 196.539, 7.4782), (257060.0, 257060.0, 0.0465216, 185.46, 7.44082)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(256678.0, 256678.0, 0.0465896, 96.0207, 7.80751), (258295.0, 258295.0, 0.0462982, 95.7259, 6.92513), (258533.0, 258533.0, 0.0462594, 97.0189, 7.62485)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(274121.0, 274121.0, 0.0436743, 0.0, 8.04985), (273844.0, 273844.0, 0.0437198, 0.0, 8.26659), (274565.0, 274565.0, 0.0436082, 0.0, 8.68317)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(371245.0, 371245.0, 0.0428847, 178.863, 14.8604), (365105.0, 365105.0, 0.0430223, 189.756, 14.5964), (372664.0, 372664.0, 0.0427771, 251.848, 14.9127)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(378012.0, 378012.0, 0.0421861, 106.449, 15.9495), (378407.0, 378407.0, 0.0421463, 106.281, 15.2035), (379336.0, 379336.0, 0.0420492, 97.747, 15.156)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(402865.0, 402865.0, 0.0396181, 0.0, 17.332), (402822.0, 402822.0, 0.0396222, 0.0, 16.8644), (405851.0, 405851.0, 0.0393262, 0.0, 18.8818)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(337543.0, 337543.0, 0.047233, 202.524, 9.92075), (338362.0, 338362.0, 0.0471185, 220.232, 9.55321), (340017.0, 340017.0, 0.046891, 249.777, 9.87118)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(339413.0, 339413.0, 0.0469776, 114.482, 9.15526), (340671.0, 340671.0, 0.0468063, 96.959, 9.53925), (344088.0, 344088.0, 0.0463691, 114.054, 9.57796)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(362596.0, 362596.0, 0.0440203, 0.0, 10.8832), (360304.0, 360304.0, 0.0443018, 0.0, 10.2998), (361802.0, 361802.0, 0.04412, 0.0, 11.2498)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(457057.0, 457057.0, 0.0436033, 223.184, 19.1931), (465981.0, 465981.0, 0.0427698, 176.921, 19.6938), (456816.0, 456816.0, 0.0436322, 239.539, 18.6467)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(475511.0, 475511.0, 0.0419239, 108.85, 18.9492), (473337.0, 473337.0, 0.0420988, 100.572, 19.3759), (473696.0, 473696.0, 0.0420733, 107.531, 19.8091)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(502112.0, 502112.0, 0.0397368, 0.0, 23.333), (504345.0, 504345.0, 0.0395582, 0.0, 22.0956), (504367.0, 504367.0, 0.0395524, 0.0, 22.5995)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(425761.0, 425761.0, 0.0468164, 193.99, 11.9535), (426636.0, 426636.0, 0.0467402, 231.505, 12.2418), (421637.0, 421637.0, 0.0472769, 252.581, 12.37)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(429522.0, 429522.0, 0.0464213, 114.885, 11.8401), (424845.0, 424845.0, 0.0469283, 97.2517, 11.9559), (430225.0, 430225.0, 0.0463448, 115.266, 12.7561)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(447396.0, 447396.0, 0.0446023, 0.0, 13.2831), (452285.0, 452285.0, 0.044116, 0.0, 12.7498), (453371.0, 453371.0, 0.0440071, 0.0, 12.9469)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(552020.0, 552020.0, 0.0429334, 490.78, 21.4949), (548774.0, 548774.0, 0.0435793, 300.284, 21.9052), (549327.0, 549327.0, 0.0435437, 349.779, 21.5926)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(558812.0, 558812.0, 0.0428157, 109.199, 23.4636), (557852.0, 557852.0, 0.0428741, 108.9, 23.0735), (560258.0, 560258.0, 0.0426928, 101.417, 23.9582)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(601613.0, 601613.0, 0.0397974, 0.0, 26.633), (598201.0, 598201.0, 0.0400262, 0.0, 27.2279), (594152.0, 594152.0, 0.0402956, 0.0, 25.8754)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(502036.0, 502036.0, 0.0476424, 418.618, 14.1489), (504214.0, 504214.0, 0.0474485, 248.564, 14.8526), (500780.0, 500780.0, 0.0477532, 326.528, 14.2482)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(502606.0, 502606.0, 0.0475962, 118.022, 14.3026), (509099.0, 509099.0, 0.0469954, 117.879, 14.8704), (508311.0, 508311.0, 0.0470499, 117.516, 14.2495)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(537301.0, 537301.0, 0.0445649, 0.0, 17.1663), (539009.0, 539009.0, 0.0444205, 0.0, 15.0978), (527390.0, 527390.0, 0.0454046, 0.0, 16.3329)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(623661.0, 623661.0, 0.044735, 130.327, 25.5491), (630421.0, 630421.0, 0.0442648, 207.427, 24.8565), (629670.0, 629670.0, 0.0443212, 140.857, 25.2746)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(640440.0, 640440.0, 0.0435831, 112.309, 26.8904), (638178.0, 638178.0, 0.0437352, 112.442, 26.2754), (636365.0, 636365.0, 0.0438555, 111.845, 25.971)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(690378.0, 690378.0, 0.0404617, 0.0, 30.132), (689311.0, 689311.0, 0.0405206, 0.0, 29.3142), (689306.0, 689306.0, 0.0405216, 0.0, 30.7158)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(573420.0, 573420.0, 0.0486641, 133.812, 16.1471), (570821.0, 570821.0, 0.0488872, 128.48, 15.8819), (567837.0, 567837.0, 0.0491639, 114.833, 16.7374)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(576329.0, 576329.0, 0.04843, 119.866, 16.4995), (577427.0, 577427.0, 0.0483374, 119.106, 15.7518), (578257.0, 578257.0, 0.048274, 120.102, 16.4361)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(616882.0, 616882.0, 0.0452864, 0.0, 18.5497), (617558.0, 617558.0, 0.045233, 0.0, 18.3996), (607894.0, 607894.0, 0.0459614, 0.0, 18.8329)])]+[({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(662954.0, 662954.0, 0.0471049, 2429.49, 27.4553), (659281.0, 659281.0, 0.0471141, 2522.32, 26.8881), (664766.0, 664766.0, 0.0472818, 2013.89, 27.4348)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(704843.0, 704843.0, 0.0452273, 927.15, 29.4923), (702699.0, 702699.0, 0.0453462, 718.997, 29.4776), (708851.0, 708851.0, 0.0449806, 715.551, 28.3624)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 45,43,4,4,4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(793687.0, 793687.0, 0.0402152, 0.0, 36.0826), (796774.0, 796774.0, 0.0400538, 0.0, 35.1118), (777733.0, 777733.0, 0.0410367, 0.0, 35.7484)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(625800.0, 625800.0, 0.0509602, 862.335, 17.8348), (625680.0, 625680.0, 0.0509713, 889.848, 16.9672), (624682.0, 624682.0, 0.0510143, 750.333, 17.5048)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-temp', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(638791.0, 638791.0, 0.0499017, 954.426, 18.66), (637160.0, 637160.0, 0.0500432, 450.39, 18.2134), (641167.0, 641167.0, 0.0497459, 668.748, 17.3197)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(712978.0, 712978.0, 0.0447699, 0.0, 21.3485), (709582.0, 709582.0, 0.044985, 0.0, 20.0829), (709746.0, 709746.0, 0.044968, 0.0, 21.2122)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-22-13_cameraready_2.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(761925.0, 761925.0, 0.036687, 0.0, 0.0), (755236.0, 755236.0, 0.0370134, 0.0, 0.0), (761988.0, 761988.0, 0.0366857, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(741514.0, 741514.0, 0.0376888, 0.0, 112.514), (739086.0, 739086.0, 0.0378125, 0.0, 113.831), (740218.0, 740218.0, 0.0377549, 0.0, 114.347)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(743874.0, 743874.0, 0.0375595, 0.0, 226.745), (742293.0, 742293.0, 0.0376404, 0.0, 224.595), (694439.0, 694439.0, 0.0402369, 0.0, 212.695)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(739433.0, 739433.0, 0.0377757, 0.0, 339.36), (738721.0, 738721.0, 0.0378116, 0.0, 336.921), (740819.0, 740819.0, 0.0377048, 0.0, 334.977)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(724033.0, 724033.0, 0.038567, 0.0, 439.057), (737439.0, 737439.0, 0.0378762, 0.0, 449.04), (711693.0, 711693.0, 0.0392472, 0.0, 431.058)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(720801.0, 720801.0, 0.0387317, 0.0, 544.489), (734749.0, 734749.0, 0.037999, 0.0, 554.856), (731802.0, 731802.0, 0.0381505, 0.0, 555.039)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(717564.0, 717564.0, 0.0389012, 0.0, 641.42), (717539.0, 717539.0, 0.0389021, 0.0, 639.789), (726509.0, 726509.0, 0.0384251, 0.0, 652.853)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(716533.0, 716533.0, 0.0389462, 0.0, 742.653), (723216.0, 723216.0, 0.0385864, 0.0, 761.198), (719808.0, 719808.0, 0.0387761, 0.0, 754.219)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(723667.0, 723667.0, 0.0385537, 0.0, 852.167), (713627.0, 713627.0, 0.0391009, 0.0, 848.684), (713430.0, 713430.0, 0.0391072, 0.0, 844.501)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(698474.0, 698474.0, 0.0399392, 0.0, 926.317), (715089.0, 715089.0, 0.0390088, 0.0, 956.292), (698082.0, 698082.0, 0.0399615, 0.0, 931.414)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(713678.0, 713678.0, 0.0390771, 0.0, 1048.95), (693198.0, 693198.0, 0.0402394, 0.0, 1007.36), (708960.0, 708960.0, 0.0393372, 0.0, 1044.95)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(764516.0, 764516.0, 0.036567, 0.0, 0.0), (753562.0, 753562.0, 0.0370983, 0.0, 0.0), (768736.0, 768736.0, 0.0363656, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(761984.0, 761984.0, 0.0366779, 0.0, 116.365), (758150.0, 758150.0, 0.0368636, 0.0, 115.514), (748610.0, 748610.0, 0.037333, 0.0, 116.514)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(752947.0, 752947.0, 0.0371113, 0.0, 233.529), (753083.0, 753083.0, 0.0371008, 0.0, 232.029), (753469.0, 753469.0, 0.0370838, 0.0, 230.713)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(732446.0, 732446.0, 0.0381398, 0.0, 340.393), (732461.0, 732461.0, 0.0381376, 0.0, 339.644), (747909.0, 747909.0, 0.0373479, 0.0, 343.194)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(751076.0, 751076.0, 0.0371826, 0.0, 460.576), (747916.0, 747916.0, 0.0373426, 0.0, 457.438), (740021.0, 740021.0, 0.0377378, 0.0, 454.891)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(746069.0, 746069.0, 0.0374253, 0.0, 567.739), (742668.0, 742668.0, 0.0375976, 0.0, 566.224), (737383.0, 737383.0, 0.0378633, 0.0, 559.706)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(736851.0, 736851.0, 0.037882, 0.0, 675.005), (742248.0, 742248.0, 0.0376062, 0.0, 677.336), (738785.0, 738785.0, 0.0377861, 0.0, 674.681)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(725477.0, 725477.0, 0.038467, 0.0, 770.969), (733751.0, 733751.0, 0.038038, 0.0, 773.802), (733336.0, 733336.0, 0.0380546, 0.0, 782.502)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(735556.0, 735556.0, 0.0379309, 0.0, 889.63), (723751.0, 723751.0, 0.0385487, 0.0, 870.399), (724768.0, 724768.0, 0.0384961, 0.0, 865.635)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(714283.0, 714283.0, 0.0390534, 0.0, 959.65), (728052.0, 728052.0, 0.0383148, 0.0, 981.798), (723395.0, 723395.0, 0.0385579, 0.0, 971.409)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(721641.0, 721641.0, 0.038646, 0.0, 1079.56), (708074.0, 708074.0, 0.0393894, 0.0, 1039.58), (731489.0, 731489.0, 0.0381238, 0.0, 1097.68)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(916252.0, 916252.0, 0.0305083, 0.0, 0.0), (917521.0, 917521.0, 0.0304585, 0.0, 0.0), (915088.0, 915088.0, 0.0305415, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(901833.0, 901833.0, 0.0309844, 0.0, 137.498), (896487.0, 896487.0, 0.0311668, 0.0, 137.647), (896755.0, 896755.0, 0.0311592, 0.0, 137.531)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(891766.0, 891766.0, 0.0313249, 0.0, 271.813), (898610.0, 898610.0, 0.0310878, 0.0, 272.43), (897235.0, 897235.0, 0.0311386, 0.0, 274.913)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(896572.0, 896572.0, 0.0311474, 0.0, 413.711), (897517.0, 897517.0, 0.0311156, 0.0, 411.444), (893463.0, 893463.0, 0.031254, 0.0, 404.577)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(894255.0, 894255.0, 0.0312222, 0.0, 535.059), (890013.0, 890013.0, 0.0313726, 0.0, 539.76), (886847.0, 886847.0, 0.0314858, 0.0, 537.927)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(869808.0, 869808.0, 0.0320924, 0.0, 648.923), (889337.0, 889337.0, 0.0313859, 0.0, 671.986), (885142.0, 885142.0, 0.0315384, 0.0, 664.491)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(880989.0, 880989.0, 0.0316803, 0.0, 793.356), (881858.0, 881858.0, 0.0316454, 0.0, 790.987), (879940.0, 879940.0, 0.0317201, 0.0, 792.57)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(880672.0, 880672.0, 0.0316803, 0.0, 915.722), (883545.0, 883545.0, 0.0315806, 0.0, 920.838), (860971.0, 860971.0, 0.0324068, 0.0, 893.522)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(851959.0, 851959.0, 0.0327449, 0.0, 1003.77), (868622.0, 868622.0, 0.0321134, 0.0, 1034.45), (872809.0, 872809.0, 0.0319597, 0.0, 1031.66)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(876583.0, 876583.0, 0.0318182, 0.0, 1163.23), (855208.0, 855208.0, 0.0326117, 0.0, 1131.17), (868075.0, 868075.0, 0.0321304, 0.0, 1152.82)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(867701.0, 867701.0, 0.0321374, 0.0, 1272.03), (855953.0, 855953.0, 0.0325811, 0.0, 1255.06), (860486.0, 860486.0, 0.0324038, 0.0, 1252.75)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(1232090.0, 1232090.0, 0.0226764, 0.0, 0.0), (1220140.0, 1220140.0, 0.0229003, 0.0, 0.0), (1242170.0, 1242170.0, 0.0224947, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(1021610.0, 1021610.0, 0.0273595, 0.0, 0.0), (1033550.0, 1033550.0, 0.0270438, 0.0, 0.0), (1020520.0, 1020520.0, 0.0273879, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(843155.0, 843155.0, 0.0331615, 0.0, 0.0), (834208.0, 834208.0, 0.0335171, 0.0, 0.0), (851254.0, 851254.0, 0.0328454, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(692836.0, 692836.0, 0.0403644, 0.0, 0.0), (703075.0, 703075.0, 0.0397767, 0.0, 0.0), (693779.0, 693779.0, 0.0403112, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(575992.0, 575992.0, 0.0485627, 0.0, 0.0), (580830.0, 580830.0, 0.0481582, 0.0, 0.0), (578876.0, 578876.0, 0.0483207, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(487289.0, 487289.0, 0.0574108, 0.0, 0.0), (486983.0, 486983.0, 0.0574478, 0.0, 0.0), (481985.0, 481985.0, 0.0580441, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(412714.0, 412714.0, 0.0677913, 0.0, 0.0), (415006.0, 415006.0, 0.0674203, 0.0, 0.0), (410488.0, 410488.0, 0.0681635, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(356538.0, 356538.0, 0.0784847, 0.0, 0.0), (354649.0, 354649.0, 0.0789013, 0.0, 0.0), (354405.0, 354405.0, 0.0789565, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(315910.0, 315910.0, 0.0885812, 0.0, 0.0), (314779.0, 314779.0, 0.0889002, 0.0, 0.0), (312993.0, 312993.0, 0.0894047, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(280556.0, 280556.0, 0.099751, 0.0, 0.0), (281837.0, 281837.0, 0.0992975, 0.0, 0.0), (281193.0, 281193.0, 0.0995241, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(250461.0, 250461.0, 0.111738, 0.0, 0.0), (253391.0, 253391.0, 0.11045, 0.0, 0.0), (253295.0, 253295.0, 0.110493, 0.0, 0.0)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-23-13_cameraready.py	/^RESULTS = [({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(378558.0, 378558.0, 0.0738352, 0.0, 14.9164), (376220.0, 376220.0, 0.0742913, 0.0, 14.3164), (378809.0, 378809.0, 0.0737782, 0.0, 14.1664)]), ({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(453376.0, 453376.0, 0.0616387, 0.0, 17.283), (462089.0, 462089.0, 0.0604906, 0.0, 17.0163), (461377.0, 461377.0, 0.0605727, 0.0, 18.1997)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(607920.0, 607920.0, 0.0459504, 0.0, 17.6995), (613208.0, 613208.0, 0.0455548, 0.0, 17.7486), (612916.0, 612916.0, 0.0455771, 0.0, 17.6164)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(669453.0, 669453.0, 0.0417192, 0.0, 20.6492), (663652.0, 663652.0, 0.0420858, 0.0, 20.8492), (670641.0, 670641.0, 0.041646, 0.0, 20.016)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': True, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'log_nofsync': False, 'disable_snapshots': True, 'log_compress': False}, [(676449.0, 676449.0, 0.0412916, 0.0, 20.7495), (673556.0, 673556.0, 0.0414636, 0.0, 22.266), (681930.0, 681930.0, 0.0409544, 0.0, 21.0328)])]$/;"	v
RESULTS	benchmarks/results/istc3-8-24-13_cameraready.py	/^RESULTS = [({'binary': '..\/out-factor-fake-compression\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(532579.0, 532579.0, 0.0523977, 116.868, 15.2999), (530511.0, 530511.0, 0.0526062, 120.144, 15.4506), (523314.0, 523314.0, 0.0533354, 115.421, 14.8863)]), ({'binary': '..\/out-factor-fake-compression\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(608186.0, 608186.0, 0.0459001, 117.062, 18.0027), (612484.0, 612484.0, 0.0455733, 116.841, 18.1505), (607283.0, 607283.0, 0.0459702, 104.865, 18.0365)]), ({'binary': '..\/out-perf\/new-benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(467031.0, 467031.0, 0.0594358, 115.534, 3564.88), (464451.0, 464451.0, 0.0597498, 125.002, 3475.16), (472428.0, 472428.0, 0.0586882, 115.636, 4400.58)]), ({'binary': '..\/out-perf\/new-benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': False}, [(521674.0, 521674.0, 0.0531624, 122.404, 4328.4), (524501.0, 524501.0, 0.0527698, 123.597, 5020.51), (526127.0, 526127.0, 0.0526186, 119.165, 4947.64)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': True}, [(479742.0, 479742.0, 0.0581989, 121.353, 13.9398), (476630.0, 476630.0, 0.0585747, 162.718, 13.4896), (482217.0, 482217.0, 0.0578746, 165.733, 13.0846)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '--workload-mix 39,37,4,10,10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'log_nofsync': False, 'disable_snapshots': False, 'log_compress': True}, [(544413.0, 544413.0, 0.0512864, 171.96, 14.6895), (544332.0, 544332.0, 0.0512839, 184.383, 14.8198), (545894.0, 545894.0, 0.0511259, 120.204, 15.6496)])]$/;"	v
RESULTS	benchmarks/results/istc3-9-6-13.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(452042.0, 452042.0, 0.00216524, 0.0, 0.0), (464864.0, 464864.0, 0.00210337, 0.0, 0.0), (466241.0, 466241.0, 0.00209754, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(437983.0, 437983.0, 0.0022322, 0.0, 0.0), (442841.0, 442841.0, 0.0022081, 0.0, 0.0), (446022.0, 446022.0, 0.00219415, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(451615.0, 451615.0, 0.00216578, 0.0, 0.0), (461024.0, 461024.0, 0.00212142, 0.0, 0.0), (457708.0, 457708.0, 0.00213468, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(1921590.0, 1921590.0, 0.00203194, 0.0, 0.0), (1926810.0, 1926810.0, 0.00202617, 0.0, 0.0), (1913600.0, 1913600.0, 0.00204084, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(1767270.0, 1767270.0, 0.00219573, 0.0, 0.0), (1792550.0, 1792550.0, 0.00215962, 0.0, 0.0), (1767530.0, 1767530.0, 0.00219522, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(1833020.0, 1833020.0, 0.00212994, 0.0, 0.0), (1838520.0, 1838520.0, 0.00212361, 0.0, 0.0), (1838180.0, 1838180.0, 0.00212396, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(3712160.0, 3712160.0, 0.0021053, 0.0, 0.0), (3644190.0, 3644190.0, 0.00212426, 0.0, 0.0), (3715240.0, 3715240.0, 0.00210303, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(3471230.0, 3471230.0, 0.00223265, 0.0, 0.0), (3517710.0, 3517710.0, 0.00222198, 0.0, 0.0), (3480990.0, 3480990.0, 0.00222303, 0.0, 0.0166666)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(3538120.0, 3538120.0, 0.00221022, 0.0, 0.0), (3486620.0, 3486620.0, 0.00224206, 0.0, 0.0), (3546780.0, 3546780.0, 0.00220471, 0.0, 0.0166666)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(5054530.0, 5054530.0, 0.00232453, 0.0, 0.0), (5066520.0, 5066520.0, 0.00231886, 0.0, 0.0), (5040760.0, 5040760.0, 0.00233107, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(4823480.0, 4823480.0, 0.00243508, 0.0, 0.0), (4858860.0, 4858860.0, 0.00241689, 0.0, 0.0166666), (4779740.0, 4779740.0, 0.00244918, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(4879320.0, 4879320.0, 0.00240545, 0.0, 0.0), (4888500.0, 4888500.0, 0.00240203, 0.0, 0.0166665), (4901180.0, 4901180.0, 0.00239799, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(6522230.0, 6522230.0, 0.00238239, 0.0, 0.0), (6619740.0, 6619740.0, 0.00236734, 0.0, 0.0), (6604000.0, 6604000.0, 0.00237299, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(6325430.0, 6325430.0, 0.0024773, 0.0, 0.0333329), (6338340.0, 6338340.0, 0.00247133, 0.0, 0.0), (6250710.0, 6250710.0, 0.00249825, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(6398160.0, 6398160.0, 0.00244992, 0.0, 0.0), (6248970.0, 6248970.0, 0.00250899, 0.0, 0.033333), (6318810.0, 6318810.0, 0.0024569, 0.0, 0.0166665)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(8201050.0, 8201050.0, 0.00238911, 0.0, 0.0), (8168090.0, 8168090.0, 0.0023989, 0.0, 0.0), (8188650.0, 8188650.0, 0.0023926, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(7624520.0, 7624520.0, 0.00257256, 0.0, 0.0499994), (7777670.0, 7777670.0, 0.00252113, 0.0, 0.0), (7772230.0, 7772230.0, 0.00252295, 0.0, 0.0166664)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(7875170.0, 7875170.0, 0.00248672, 0.0, 0.0), (7916410.0, 7916410.0, 0.00247345, 0.0, 0.0), (7913710.0, 7913710.0, 0.00247439, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(9675690.0, 9675690.0, 0.00243063, 0.0, 0.0), (9686230.0, 9686230.0, 0.0024281, 0.0, 0.0), (9676750.0, 9676750.0, 0.00243037, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(8974170.0, 8974170.0, 0.00261314, 0.0, 0.0333329), (9048450.0, 9048450.0, 0.0025994, 0.0, 0.0166664), (8872590.0, 8872590.0, 0.00263662, 0.0, 0.0166665)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(9271600.0, 9271600.0, 0.00251357, 0.0, 0.033333), (9381340.0, 9381340.0, 0.00250479, 0.0, 0.033333), (9404460.0, 9404460.0, 0.00250152, 0.0, 0.033333)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(11296300.0, 11296300.0, 0.00242902, 0.0, 0.0), (11324100.0, 11324100.0, 0.00242303, 0.0, 0.0), (11338600.0, 11338600.0, 0.00241994, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(9701690.0, 9701690.0, 0.0028357, 0.0, 0.0666656), (9761020.0, 9761020.0, 0.00281746, 0.0, 0.0166662), (9729960.0, 9729960.0, 0.00282581, 0.0, 0.0333325)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(10683700.0, 10683700.0, 0.00257016, 0.0, 0.0833313), (10929000.0, 10929000.0, 0.00250912, 0.0, 0.0), (10981500.0, 10981500.0, 0.00249772, 0.0, 0.033332)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(12647100.0, 12647100.0, 0.00248038, 0.0, 0.0), (12646200.0, 12646200.0, 0.0024805, 0.0, 0.0), (12694000.0, 12694000.0, 0.00247065, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(9311740.0, 9311740.0, 0.00338524, 0.0, 0.0166643), (9362850.0, 9362850.0, 0.00334534, 0.0, 0.0499993), (9588760.0, 9588760.0, 0.00328362, 0.0, 0.0333264)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(12222600.0, 12222600.0, 0.0025649, 0.0, 0.0666657), (12214100.0, 12214100.0, 0.00256708, 0.0, 0.0333328), (12216600.0, 12216600.0, 0.00256603, 0.0, 0.0499896)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(27538.3, 27538.3, 0.0361888, 83.0556, 0.0), (27492.9, 27492.9, 0.0362428, 86.853, 0.0), (26757.2, 26757.2, 0.0372377, 83.0574, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(27578.6, 27578.6, 0.036121, 80.2099, 0.0), (27030.2, 27030.2, 0.0368578, 81.0188, 0.0), (27458.4, 27458.4, 0.0362976, 84.3511, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(29180.6, 29180.6, 0.0341653, 0.0, 0.0), (29135.3, 29135.3, 0.0342217, 0.0, 0.0), (28736.5, 28736.5, 0.0346753, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(96007.7, 96007.7, 0.0414997, 94.7939, 3.63077), (95666.0, 95666.0, 0.0416369, 94.9036, 3.63068), (95873.0, 95873.0, 0.0415698, 110.137, 4.09709)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(95466.6, 95466.6, 0.04174, 97.0183, 3.71276), (96668.8, 96668.8, 0.0412194, 97.7066, 4.46162), (95564.9, 95564.9, 0.0416969, 93.0297, 3.91266)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(102773.0, 102773.0, 0.0388068, 0.0, 4.48328), (103817.0, 103817.0, 0.0384017, 0.0, 4.51662), (102911.0, 102911.0, 0.0387586, 0.0, 4.44997)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(180394.0, 180394.0, 0.0441757, 105.423, 7.00823), (179518.0, 179518.0, 0.0444062, 126.829, 7.22653), (178611.0, 178611.0, 0.0446177, 117.303, 7.3108)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(181509.0, 181509.0, 0.0439308, 94.9045, 6.89569), (181726.0, 181726.0, 0.0438724, 99.8244, 7.87748), (180855.0, 180855.0, 0.044076, 100.578, 8.32576)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(195073.0, 195073.0, 0.0408981, 0.0, 8.14993), (194432.0, 194432.0, 0.0410341, 0.0, 8.38325), (195370.0, 195370.0, 0.040833, 0.0, 8.61655)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(268938.0, 268938.0, 0.0444439, 149.54, 11.269), (265761.0, 265761.0, 0.0449617, 159.273, 10.3899), (266935.0, 266935.0, 0.0441493, 170.926, 10.7511)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(276264.0, 276264.0, 0.043269, 105.131, 11.3872), (276787.0, 276787.0, 0.0432036, 95.3977, 11.3736), (277126.0, 277126.0, 0.0431518, 105.348, 10.4912)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(293333.0, 293333.0, 0.0407696, 0.0, 12.4497), (292780.0, 292780.0, 0.0408571, 0.0, 13.2498), (291534.0, 291534.0, 0.0410375, 0.0, 13.8497)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(352427.0, 352427.0, 0.0452315, 222.677, 13.9848), (348421.0, 348421.0, 0.0457489, 246.85, 13.9664), (352008.0, 352008.0, 0.0452919, 219.16, 14.3365)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(359112.0, 359112.0, 0.0444021, 107.038, 14.6608), (357159.0, 357159.0, 0.0446192, 98.1228, 14.7699), (358054.0, 358054.0, 0.0445315, 106.795, 15.2039)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(381875.0, 381875.0, 0.0417836, 0.0, 16.7313), (377503.0, 377503.0, 0.0422643, 0.0, 17.6159), (380584.0, 380584.0, 0.0419252, 0.0, 16.1156)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(433175.0, 433175.0, 0.0460038, 212.165, 16.9328), (437184.0, 437184.0, 0.0450801, 260.417, 17.9312), (442212.0, 442212.0, 0.0450386, 197.142, 18.0396)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(452979.0, 452979.0, 0.043993, 107.888, 18.0369), (448373.0, 448373.0, 0.0444015, 111.046, 17.58), (453081.0, 453081.0, 0.0439962, 99.2393, 17.9533)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(484640.0, 484640.0, 0.0411549, 0.0, 20.2161), (488753.0, 488753.0, 0.040809, 0.0, 20.3997), (479245.0, 479245.0, 0.0415849, 0.0, 19.6497)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(525248.0, 525248.0, 0.0455121, 242.057, 21.0699), (523367.0, 523367.0, 0.0456968, 193.988, 20.3312), (524602.0, 524602.0, 0.0455, 321.327, 20.7913)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(532022.0, 532022.0, 0.0449575, 105.089, 22.0334), (534329.0, 534329.0, 0.0447697, 111.91, 21.4019), (536476.0, 536476.0, 0.044561, 111.151, 21.4223)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(570732.0, 570732.0, 0.0419374, 0.0, 23.9329), (571047.0, 571047.0, 0.0419124, 0.0, 23.8163), (570918.0, 570918.0, 0.0419215, 0.0, 24.7761)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(598686.0, 598686.0, 0.0465895, 174.449, 23.4482), (600258.0, 600258.0, 0.046462, 162.084, 24.6326), (598717.0, 598717.0, 0.046568, 311.776, 24.3769)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(603890.0, 603890.0, 0.0461928, 112.448, 24.6044), (596718.0, 596718.0, 0.0467293, 111.342, 24.1922), (608729.0, 608729.0, 0.0458189, 112.189, 26.3649)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(651817.0, 651817.0, 0.0428116, 0.0, 26.7657), (656421.0, 656421.0, 0.0425398, 0.0, 28.0488), (660473.0, 660473.0, 0.0422742, 0.0, 28.3763)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(644787.0, 644787.0, 0.049389, 590.73, 26.9662), (656987.0, 656987.0, 0.0483292, 835.787, 25.5428), (657270.0, 657270.0, 0.0482841, 1012.16, 26.7783)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(678882.0, 678882.0, 0.0469296, 842.415, 28.2716), (669076.0, 669076.0, 0.0476558, 453.983, 27.5187), (665170.0, 665170.0, 0.0478988, 386.233, 27.6094)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(765890.0, 765890.0, 0.0416563, 0.0, 34.766), (755041.0, 755041.0, 0.0422457, 0.0, 33.1598), (749524.0, 749524.0, 0.042559, 0.0, 33.5291)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(760737.0, 760737.0, 0.0367443, 0.0, 0.0), (756585.0, 756585.0, 0.0369378, 0.0, 0.0), (748428.0, 748428.0, 0.0373201, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(736352.0, 736352.0, 0.0379472, 0.0, 108.314), (736097.0, 736097.0, 0.0379347, 0.0, 110.915), (741020.0, 741020.0, 0.0377052, 0.0, 110.781)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(723448.0, 723448.0, 0.0386128, 0.0, 214.33), (718911.0, 718911.0, 0.0388503, 0.0, 214.812), (731800.0, 731800.0, 0.0381717, 0.0, 219.429)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(734918.0, 734918.0, 0.0380018, 0.0, 328.96), (730728.0, 730728.0, 0.0382122, 0.0, 320.594), (718775.0, 718775.0, 0.0388285, 0.0, 321.241)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(707975.0, 707975.0, 0.0394355, 0.0, 416.492), (727129.0, 727129.0, 0.0384009, 0.0, 429.359), (726943.0, 726943.0, 0.0384061, 0.0, 434.107)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(692040.0, 692040.0, 0.040308, 0.0, 504.957), (721994.0, 721994.0, 0.038661, 0.0, 530.524), (708013.0, 708013.0, 0.0394314, 0.0, 516.141)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(718826.0, 718826.0, 0.0388202, 0.0, 631.537), (717853.0, 717853.0, 0.038875, 0.0, 631.061), (714846.0, 714846.0, 0.0390424, 0.0, 625.232)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(706458.0, 706458.0, 0.0394982, 0.0, 717.488), (695008.0, 695008.0, 0.0401466, 0.0, 706.137), (702387.0, 702387.0, 0.0397258, 0.0, 722.003)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(701751.0, 701751.0, 0.0397245, 0.0, 803.435), (707510.0, 707510.0, 0.0394277, 0.0, 827.283), (707377.0, 707377.0, 0.0394405, 0.0, 821.086)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(704369.0, 704369.0, 0.0395943, 0.0, 911.508), (694207.0, 694207.0, 0.040176, 0.0, 893.0), (704339.0, 704339.0, 0.0395913, 0.0, 917.744)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(704799.0, 704799.0, 0.0395601, 0.0, 1016.02), (695775.0, 695775.0, 0.0400784, 0.0, 998.515), (703833.0, 703833.0, 0.0396155, 0.0, 1012.73)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(728023.0, 728023.0, 0.0383993, 0.0, 0.0), (765268.0, 765268.0, 0.0365334, 0.0, 0.0), (764189.0, 764189.0, 0.0365702, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(755996.0, 755996.0, 0.0369549, 0.0, 114.197), (750716.0, 750716.0, 0.0372323, 0.0, 114.465), (750218.0, 750218.0, 0.0372571, 0.0, 114.664)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(752511.0, 752511.0, 0.0371191, 0.0, 229.246), (748679.0, 748679.0, 0.0373163, 0.0, 227.178), (756912.0, 756912.0, 0.0369055, 0.0, 226.962)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(742884.0, 742884.0, 0.0375954, 0.0, 332.826), (738827.0, 738827.0, 0.0378136, 0.0, 331.377), (744265.0, 744265.0, 0.0375378, 0.0, 332.578)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(724986.0, 724986.0, 0.0385223, 0.0, 435.425), (736227.0, 736227.0, 0.0379248, 0.0, 435.454), (741237.0, 741237.0, 0.0376792, 0.0, 451.392)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(736801.0, 736801.0, 0.0378862, 0.0, 547.14), (737716.0, 737716.0, 0.037841, 0.0, 549.898), (737309.0, 737309.0, 0.0378723, 0.0, 554.407)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(732697.0, 732697.0, 0.0380914, 0.0, 652.839), (728138.0, 728138.0, 0.0383327, 0.0, 644.57), (738829.0, 738829.0, 0.0377762, 0.0, 650.27)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(730904.0, 730904.0, 0.0381887, 0.0, 760.554), (715812.0, 715812.0, 0.0389897, 0.0, 737.384), (731317.0, 731317.0, 0.0381524, 0.0, 748.521)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(729032.0, 729032.0, 0.038264, 0.0, 865.983), (724778.0, 724778.0, 0.0384879, 0.0, 846.502), (731534.0, 731534.0, 0.0381356, 0.0, 859.499)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(709319.0, 709319.0, 0.0393346, 0.0, 934.615), (717715.0, 717715.0, 0.0388643, 0.0, 946.692), (716229.0, 716229.0, 0.0389539, 0.0, 940.517)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(719137.0, 719137.0, 0.0387861, 0.0, 1054.25), (724973.0, 724973.0, 0.0384603, 0.0, 1065.1), (723514.0, 723514.0, 0.038538, 0.0, 1048.11)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(854066.0, 854066.0, 0.0327204, 0.0, 0.0), (852372.0, 852372.0, 0.0327866, 0.0, 0.0), (842170.0, 842170.0, 0.033193, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(844104.0, 844104.0, 0.0331083, 0.0, 129.064), (840490.0, 840490.0, 0.0332385, 0.0, 124.048), (853847.0, 853847.0, 0.0327148, 0.0, 127.131)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(844633.0, 844633.0, 0.0330805, 0.0, 250.296), (840322.0, 840322.0, 0.0332488, 0.0, 252.962), (832127.0, 832127.0, 0.0335763, 0.0, 249.342)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(831417.0, 831417.0, 0.0335936, 0.0, 372.777), (841467.0, 841467.0, 0.0331792, 0.0, 372.343), (835749.0, 835749.0, 0.0334182, 0.0, 376.211)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(835356.0, 835356.0, 0.0334186, 0.0, 494.972), (821575.0, 821575.0, 0.0339817, 0.0, 484.092), (812035.0, 812035.0, 0.0343911, 0.0, 483.921)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(823976.0, 823976.0, 0.0338862, 0.0, 607.39), (829215.0, 829215.0, 0.0336586, 0.0, 613.24), (825950.0, 825950.0, 0.0337922, 0.0, 610.639)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(825304.0, 825304.0, 0.033811, 0.0, 728.849), (820991.0, 820991.0, 0.0340006, 0.0, 727.237), (815901.0, 815901.0, 0.0342117, 0.0, 720.008)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(815238.0, 815238.0, 0.0342296, 0.0, 831.135), (813051.0, 813051.0, 0.0343265, 0.0, 835.937), (818609.0, 818609.0, 0.0340772, 0.0, 836.069)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(811705.0, 811705.0, 0.0343658, 0.0, 944.4), (792589.0, 792589.0, 0.0352003, 0.0, 923.665), (795024.0, 795024.0, 0.0350929, 0.0, 929.318)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(792337.0, 792337.0, 0.0352103, 0.0, 1030.16), (792573.0, 792573.0, 0.0351861, 0.0, 1019.87), (809167.0, 809167.0, 0.0344651, 0.0, 1051.46)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(804000.0, 804000.0, 0.0346887, 0.0, 1168.68), (804058.0, 804058.0, 0.0346762, 0.0, 1164.0), (787078.0, 787078.0, 0.0354363, 0.0, 1139.12)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(1181230.0, 1181230.0, 0.0236538, 0.0, 0.0), (1166800.0, 1166800.0, 0.0239464, 0.0, 0.0), (1179850.0, 1179850.0, 0.0236783, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(971295.0, 971295.0, 0.0287749, 0.0, 0.0), (968253.0, 968253.0, 0.0288669, 0.0, 0.0), (973275.0, 973275.0, 0.0287167, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(810657.0, 810657.0, 0.0344889, 0.0, 0.0), (800640.0, 800640.0, 0.0349187, 0.0, 0.0), (799896.0, 799896.0, 0.0349515, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(662791.0, 662791.0, 0.0421835, 0.0, 0.0), (654332.0, 654332.0, 0.0427393, 0.0, 0.0), (663105.0, 663105.0, 0.0421728, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(552833.0, 552833.0, 0.0505958, 0.0, 0.0), (555669.0, 555669.0, 0.050337, 0.0, 0.0), (554818.0, 554818.0, 0.050412, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(463739.0, 463739.0, 0.0603213, 0.0, 0.0), (465112.0, 465112.0, 0.0601426, 0.0, 0.0), (466305.0, 466305.0, 0.0599932, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(385157.0, 385157.0, 0.0726439, 0.0, 0.0), (394612.0, 394612.0, 0.0708986, 0.0, 0.0), (393333.0, 393333.0, 0.0711282, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(340802.0, 340802.0, 0.0821019, 0.0, 0.0), (335568.0, 335568.0, 0.0833865, 0.0, 0.0), (343311.0, 343311.0, 0.0814972, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(301388.0, 301388.0, 0.0928434, 0.0, 0.0), (299738.0, 299738.0, 0.0933579, 0.0, 0.0), (301597.0, 301597.0, 0.0927779, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(267745.0, 267745.0, 0.104522, 0.0, 0.0), (266828.0, 266828.0, 0.10487, 0.0, 0.0), (266606.0, 266606.0, 0.104964, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(240171.0, 240171.0, 0.116524, 0.0, 0.0), (240236.0, 240236.0, 0.116491, 0.0, 0.0), (238061.0, 238061.0, 0.117557, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(38292.6, 38292.6, 0.0260605, 0.0, 0.0), (37907.0, 37907.0, 0.0263185, 0.0, 0.0), (36878.5, 36878.5, 0.0270556, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(27449.3, 27449.3, 0.036351, 0.0, 0.0), (27753.3, 27753.3, 0.0359516, 0.0, 0.0), (27094.8, 27094.8, 0.0368207, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(27641.0, 27641.0, 0.0361019, 0.0, 0.0), (27953.9, 27953.9, 0.0356978, 0.0, 0.0), (27457.8, 27457.8, 0.0363236, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(57652.2, 57652.2, 0.0345676, 0.0, 2.89998), (56670.7, 56670.7, 0.0351528, 0.0, 2.84998), (54917.8, 54917.8, 0.0362913, 0.0, 2.73331)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(58061.6, 58061.6, 0.0343619, 0.0, 2.96665), (57482.4, 57482.4, 0.0347208, 0.0, 2.96664), (58990.0, 58990.0, 0.0338333, 0.0, 2.88332)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(115410.0, 115410.0, 0.0344323, 0.0, 17.1166), (113899.0, 113899.0, 0.0349052, 0.0, 16.9832), (115116.0, 115116.0, 0.0345421, 0.0, 16.8999)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(119515.0, 119515.0, 0.0333832, 0.0, 19.0499), (107348.0, 107348.0, 0.037148, 0.0, 16.6499), (118260.0, 118260.0, 0.0337463, 0.0, 17.9333)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(117606.0, 117606.0, 0.0362444, 0.0, 1821.36), (121477.0, 121477.0, 0.0350092, 0.0, 1839.61), (121716.0, 121716.0, 0.0349849, 0.0, 1855.5)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(166855.0, 166855.0, 0.0355978, 0.0, 816.394), (168836.0, 168836.0, 0.0351889, 0.0, 834.01), (168706.0, 168706.0, 0.0352278, 0.0, 829.311)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(129422.0, 129422.0, 0.0350511, 0.0, 3738.71), (131922.0, 131922.0, 0.0343259, 0.0, 3738.77), (128203.0, 128203.0, 0.0353515, 0.0, 3723.92)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(219029.0, 219029.0, 0.036051, 0.0, 1653.34), (223050.0, 223050.0, 0.0353896, 0.0, 1683.79), (217087.0, 217087.0, 0.0363719, 0.0, 1631.48)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(134115.0, 134115.0, 0.035721, 0.0, 5419.21), (132831.0, 132831.0, 0.0360902, 0.0, 5383.39), (133570.0, 133570.0, 0.0358967, 0.0, 5408.46)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(275315.0, 275315.0, 0.0356079, 0.0, 3265.04), (267270.0, 267270.0, 0.0366779, 0.0, 3196.41), (258025.0, 258025.0, 0.0380096, 0.0, 3063.84)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(134664.0, 134664.0, 0.0376712, 0.0, 6953.06), (138622.0, 138622.0, 0.0363219, 0.0, 6988.71), (133456.0, 133456.0, 0.0380449, 0.0, 6924.66)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(312876.0, 312876.0, 0.0374476, 0.0, 4664.68), (313013.0, 313013.0, 0.0374199, 0.0, 4695.41), (309851.0, 309851.0, 0.0377907, 0.0, 4608.88)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(147921.0, 147921.0, 0.0373401, 0.0, 10293.3), (146719.0, 146719.0, 0.0376785, 0.0, 10249.4), (142295.0, 142295.0, 0.0391457, 0.0, 10189.7)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(414050.0, 414050.0, 0.0373039, 0.0, 9346.84), (397622.0, 397622.0, 0.0388512, 0.0, 8841.48), (390131.0, 390131.0, 0.0396171, 0.0, 8705.83)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(157425.0, 157425.0, 0.0376934, 0.0, 13473.3), (157162.0, 157162.0, 0.0377117, 0.0, 13501.3), (158112.0, 158112.0, 0.0374377, 0.0, 13528.2)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(487718.0, 487718.0, 0.0391512, 0.0, 14527.8), (476057.0, 476057.0, 0.040123, 0.0, 14131.1), (474003.0, 474003.0, 0.0403265, 0.0, 14046.5)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(167017.0, 167017.0, 0.0376897, 0.0, 16618.8), (167114.0, 167114.0, 0.0375454, 0.0, 16642.9), (167724.0, 167724.0, 0.0375093, 0.0, 16660.2)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(569716.0, 569716.0, 0.0397995, 0.0, 21317.7), (565332.0, 565332.0, 0.0401014, 0.0, 21155.6), (569637.0, 569637.0, 0.0398009, 0.0, 21278.9)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(176680.0, 176680.0, 0.0374522, 0.0, 19737.7), (176131.0, 176131.0, 0.0375693, 0.0, 19699.5), (169694.0, 169694.0, 0.0394857, 0.0, 19546.6)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(647802.0, 647802.0, 0.0403817, 0.0, 29106.6), (649554.0, 649554.0, 0.0402671, 0.0, 29253.2), (624850.0, 624850.0, 0.0418035, 0.0, 28084.9)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False}, [(177803.0, 177803.0, 0.0379713, 0.0, 21947.0), (176418.0, 176418.0, 0.0386506, 0.0, 22016.0), (176467.0, 176467.0, 0.0384451, 0.0, 21910.9)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(623901.0, 623901.0, 0.0461267, 0.0, 32038.7), (627919.0, 627919.0, 0.045893, 0.0, 32414.8), (633267.0, 633267.0, 0.0454382, 0.0, 32682.7)]), ({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(426155.0, 426155.0, 0.0655891, 0.0, 22.7828), (432210.0, 432210.0, 0.0646728, 0.0, 22.8162), (428042.0, 428042.0, 0.0652981, 0.0, 22.2329)]), ({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(483589.0, 483589.0, 0.0577953, 0.0, 25.666), (488737.0, 488737.0, 0.0571845, 0.0, 25.1995), (482652.0, 482652.0, 0.0579039, 0.0, 25.083)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(647104.0, 647104.0, 0.0431504, 0.0, 26.4822), (648314.0, 648314.0, 0.04308, 0.0, 27.3327), (650269.0, 650269.0, 0.0429486, 0.0, 27.4994)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(711287.0, 711287.0, 0.0392559, 0.0, 30.866), (720057.0, 720057.0, 0.0387759, 0.0, 33.7993), (713284.0, 713284.0, 0.0391468, 0.0, 32.6993)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': True, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(734030.0, 734030.0, 0.0380367, 0.0, 34.2159), (735049.0, 735049.0, 0.0379817, 0.0, 33.4993), (730100.0, 730100.0, 0.0382423, 0.0, 34.1326)]), ({'binary': '..\/out-factor-fake-compression\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(646630.0, 646630.0, 0.043147, 96.5089, 26.7218), (649321.0, 649321.0, 0.042985, 107.006, 26.9464), (650433.0, 650433.0, 0.0428896, 120.055, 27.0496)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': True}, [(562316.0, 562316.0, 0.0496007, 167.636, 21.647), (569509.0, 569509.0, 0.0490054, 184.241, 22.4489), (571327.0, 571327.0, 0.0488279, 191.067, 21.7078)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(184219.0, 184219.0, 0.0861123, 0.0, 2268.81), (186755.0, 186755.0, 0.0849474, 0.0, 2311.64), (186564.0, 186564.0, 0.0850164, 0.0, 2334.02)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(177982.0, 177982.0, 0.0891101, 0.0, 2300.09), (178695.0, 178695.0, 0.0887728, 0.0, 2261.79), (178712.0, 178712.0, 0.0887415, 0.0, 2336.5)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(175626.0, 175626.0, 0.0902572, 0.0, 2339.76), (174921.0, 174921.0, 0.0906454, 0.0, 2355.32), (176961.0, 176961.0, 0.0896144, 0.0, 2331.2)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(174207.0, 174207.0, 0.0909996, 0.0, 2314.15), (175069.0, 175069.0, 0.0905427, 0.0, 2380.53), (175155.0, 175155.0, 0.0905247, 0.0, 2357.35)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(173961.0, 173961.0, 0.0911228, 0.0, 2413.27), (173021.0, 173021.0, 0.0916247, 0.0, 2376.02), (173094.0, 173094.0, 0.0915701, 0.0, 2424.44)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(175126.0, 175126.0, 0.0905186, 0.0, 2413.01), (170861.0, 170861.0, 0.0927766, 0.0, 2320.99), (174009.0, 174009.0, 0.0910858, 0.0, 2433.45)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(156216.0, 156216.0, 0.0905651, 0.0, 14649.0), (158060.0, 158060.0, 0.0894652, 0.0, 14894.0), (157640.0, 157640.0, 0.0897404, 0.0, 14829.2)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(143294.0, 143294.0, 0.0969205, 0.0, 15430.2), (150768.0, 150768.0, 0.0923082, 0.0, 16068.1), (152628.0, 152628.0, 0.0911489, 0.0, 16330.1)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(148656.0, 148656.0, 0.0921969, 0.0, 17609.6), (147416.0, 147416.0, 0.093038, 0.0, 17435.0), (149081.0, 149081.0, 0.0919632, 0.0, 17680.3)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(145412.0, 145412.0, 0.0929773, 0.0, 18834.7), (143389.0, 143389.0, 0.0943072, 0.0, 18445.4), (146292.0, 146292.0, 0.0923443, 0.0, 18925.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(142789.0, 142789.0, 0.0934635, 0.0, 19946.9), (142389.0, 142389.0, 0.0937627, 0.0, 19858.4), (143424.0, 143424.0, 0.0930233, 0.0, 20007.1)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False}, [(141565.0, 141565.0, 0.0930924, 0.0, 21140.1), (140793.0, 140793.0, 0.0936215, 0.0, 20910.6), (141613.0, 141613.0, 0.0931092, 0.0, 21110.9)])]$/;"	v
RESULTS	benchmarks/results/istc3-9-8-13.py	/^RESULTS = [({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(598829.0, 598829.0, 0.00162352, 0.0, 0.0), (576272.0, 576272.0, 0.00168956, 0.0, 0.0), (596995.0, 596995.0, 0.00162922, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(570013.0, 570013.0, 0.00170737, 0.0, 0.0), (576566.0, 576566.0, 0.00168789, 0.0, 0.0), (578566.0, 578566.0, 0.0016818, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 1, 'numa_memory': '42G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(575913.0, 575913.0, 0.00169019, 0.0, 0.0), (578635.0, 578635.0, 0.00168184, 0.0, 0.0), (574126.0, 574126.0, 0.00169477, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(2438130.0, 2438130.0, 0.00159217, 0.0, 0.0), (2431590.0, 2431590.0, 0.00159665, 0.0, 0.0), (2426370.0, 2426370.0, 0.00160015, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(2290490.0, 2290490.0, 0.00169747, 0.0, 0.0), (2291870.0, 2291870.0, 0.00169685, 0.0, 0.0), (2286970.0, 2286970.0, 0.00169992, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 4, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(2294240.0, 2294240.0, 0.00169429, 0.0, 0.0), (2291370.0, 2291370.0, 0.00169699, 0.0, 0.0), (2294750.0, 2294750.0, 0.00169438, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(4661400.0, 4661400.0, 0.00166712, 0.0, 0.0), (4687400.0, 4687400.0, 0.00165809, 0.0, 0.0), (4694850.0, 4694850.0, 0.00165542, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(4386430.0, 4386430.0, 0.00177481, 0.0, 0.0), (4379040.0, 4379040.0, 0.00177779, 0.0, 0.0), (4372870.0, 4372870.0, 0.00178038, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 8, 'numa_memory': '56G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(4408000.0, 4408000.0, 0.00176533, 0.0, 0.0), (4391850.0, 4391850.0, 0.00177218, 0.0, 0.0), (4382660.0, 4382660.0, 0.00177663, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(6466410.0, 6466410.0, 0.00180709, 0.0, 0.0), (6450240.0, 6450240.0, 0.00181201, 0.0, 0.0), (6476090.0, 6476090.0, 0.00180464, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(5903190.0, 5903190.0, 0.00198429, 0.0, 0.0166665), (5904180.0, 5904180.0, 0.00198394, 0.0, 0.0166664), (5909890.0, 5909890.0, 0.00198205, 0.0, 0.0166666)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 12, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(6177300.0, 6177300.0, 0.00189372, 0.0, 0.0333327), (6174910.0, 6174910.0, 0.00189447, 0.0, 0.0), (6163160.0, 6163160.0, 0.00189852, 0.0, 0.0333331)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8401480.0, 8401480.0, 0.00185598, 0.0, 0.0), (8445120.0, 8445120.0, 0.00184608, 0.0, 0.0), (8428590.0, 8428590.0, 0.00184987, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(7891700.0, 7891700.0, 0.00197831, 0.0, 0.0333331), (7920470.0, 7920470.0, 0.00197126, 0.0, 0.0), (7924250.0, 7924250.0, 0.00196993, 0.0, 0.0166666)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 16, 'numa_memory': '72G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8007260.0, 8007260.0, 0.00194911, 0.0, 0.0), (8050990.0, 8050990.0, 0.0019384, 0.0, 0.0), (7996460.0, 7996460.0, 0.00195181, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(10393900.0, 10393900.0, 0.00187588, 0.0, 0.0), (10085100.0, 10085100.0, 0.00193509, 0.0, 0.0), (10440000.0, 10440000.0, 0.00186743, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(9557570.0, 9557570.0, 0.00204384, 0.0, 0.0499995), (9538900.0, 9538900.0, 0.00204754, 0.0, 0.0), (9573950.0, 9573950.0, 0.00204017, 0.0, 0.0499993)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(9952310.0, 9952310.0, 0.00196109, 0.0, 0.0333329), (9972960.0, 9972960.0, 0.00195628, 0.0, 0.0166665), (9985650.0, 9985650.0, 0.001954, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(12298300.0, 12298300.0, 0.00190305, 0.0, 0.0), (12300300.0, 12300300.0, 0.00190267, 0.0, 0.0), (12312900.0, 12312900.0, 0.00190073, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(10579900.0, 10579900.0, 0.0022179, 0.0, 0.0333329), (10544700.0, 10544700.0, 0.0022271, 0.0, 0.0499995), (10558600.0, 10558600.0, 0.00222414, 0.0, 0.033333)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 24, 'numa_memory': '88G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(11803200.0, 11803200.0, 0.00198391, 0.0, 0.0166662), (11789800.0, 11789800.0, 0.00198707, 0.0, 0.0833317), (11782000.0, 11782000.0, 0.00198799, 0.0, 0.0833323)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(14403600.0, 14403600.0, 0.00189556, 0.0, 0.0), (14414900.0, 14414900.0, 0.00189406, 0.0, 0.0), (14447200.0, 14447200.0, 0.00188966, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(9598150.0, 9598150.0, 0.00286876, 0.0, 0.0499992), (9492480.0, 9492480.0, 0.00290082, 0.0, 0.0), (9400670.0, 9400670.0, 0.00292828, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 28, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(13783200.0, 13783200.0, 0.00198227, 0.0, 0.0), (13774500.0, 13774500.0, 0.00198424, 0.0, 0.0499994), (13753900.0, 13753900.0, 0.00198701, 0.0, 0.0499987)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'kvdb', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(16055600.0, 16055600.0, 0.00194448, 0.0, 0.0), (16089100.0, 16089100.0, 0.00194021, 0.0, 0.0), (16085200.0, 16085200.0, 0.00194084, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto1', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(8924990.0, 8924990.0, 0.00353644, 0.0, 0.0), (8876150.0, 8876150.0, 0.00355618, 0.0, 0.0), (8950210.0, 8950210.0, 0.00352647, 0.0, 0.066665)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 160000, 'name': 'scale_rmw', 'bench_opts': '--workload-mix 80,0,20,0', 'db': 'ndb-proto2', 'bench': 'ycsb', 'par_load': True, 'disable_gc': False, 'threads': 32, 'numa_memory': '104G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(15272000.0, 15272000.0, 0.00204642, 0.0, 0.0833321), (15297600.0, 15297600.0, 0.002041, 0.0, 0.0999969), (15355300.0, 15355300.0, 0.00203521, 0.0, 0.13333)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(28617.3, 28617.3, 0.0348511, 84.0693, 0.0), (28797.6, 28797.6, 0.0346053, 85.089, 0.0), (28634.6, 28634.6, 0.0348112, 82.1759, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(28599.0, 28599.0, 0.034848, 80.7266, 0.0), (29454.5, 29454.5, 0.0338453, 80.0298, 0.0), (29408.1, 29408.1, 0.0338889, 80.1761, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 1, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(31471.4, 31471.4, 0.0316881, 0.0, 0.0), (30873.7, 30873.7, 0.0323058, 0.0, 0.0), (31358.4, 31358.4, 0.0318088, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(102620.0, 102620.0, 0.0388521, 119.521, 4.29604), (102977.0, 102977.0, 0.0387193, 99.163, 4.03024), (102850.0, 102850.0, 0.0387698, 125.878, 4.11336)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(103526.0, 103526.0, 0.0385128, 95.7767, 3.97995), (103273.0, 103273.0, 0.0385991, 94.4058, 4.1124), (101679.0, 101679.0, 0.039207, 93.914, 3.92921)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(109121.0, 109121.0, 0.0365664, 0.0, 4.9333), (109623.0, 109623.0, 0.0363978, 0.0, 4.74996), (109268.0, 109268.0, 0.0365079, 0.0, 4.49996)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(193124.0, 193124.0, 0.0410664, 138.851, 8.42909), (191079.0, 191079.0, 0.0417271, 125.539, 7.87475), (191261.0, 191261.0, 0.041699, 140.306, 8.30992)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(196416.0, 196416.0, 0.0406024, 95.78, 7.51033), (194810.0, 194810.0, 0.0409333, 101.529, 7.94223), (195209.0, 195209.0, 0.0408526, 98.6565, 8.49267)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 8, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(210821.0, 210821.0, 0.0378565, 0.0, 10.0332), (207514.0, 207514.0, 0.0384576, 0.0, 8.74985), (208789.0, 208789.0, 0.0382243, 0.0, 8.74991)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(287716.0, 287716.0, 0.041558, 147.45, 11.1854), (284466.0, 284466.0, 0.0420381, 167.027, 11.4533), (284599.0, 284599.0, 0.0420073, 160.727, 12.0337)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(294521.0, 294521.0, 0.040619, 104.533, 12.1073), (294360.0, 294360.0, 0.0406423, 95.7708, 12.1238), (293600.0, 293600.0, 0.04075, 96.6426, 11.259)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 12, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(309782.0, 309782.0, 0.0386451, 0.0, 13.6312), (315285.0, 315285.0, 0.0379676, 0.0, 13.8332), (316796.0, 316796.0, 0.037787, 0.0, 13.4964)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(378445.0, 378445.0, 0.0421168, 197.735, 15.9599), (378523.0, 378523.0, 0.0421152, 243.092, 15.6954), (376749.0, 376749.0, 0.0423176, 146.844, 14.2827)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(384610.0, 384610.0, 0.0414841, 104.691, 15.2749), (383920.0, 383920.0, 0.0415515, 95.9765, 15.4567), (384704.0, 384704.0, 0.0414555, 105.822, 16.102)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 16, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(411151.0, 411151.0, 0.0388214, 0.0, 18.0664), (407373.0, 407373.0, 0.0391797, 0.0, 17.833), (405772.0, 405772.0, 0.0393358, 0.0, 16.6817)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(467720.0, 467720.0, 0.0425209, 285.225, 18.7369), (471138.0, 471138.0, 0.0423071, 180.023, 19.645), (470824.0, 470824.0, 0.0423446, 149.565, 18.4838)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(479899.0, 479899.0, 0.0415457, 108.423, 19.1495), (482061.0, 482061.0, 0.0413528, 107.488, 19.8966), (477598.0, 477598.0, 0.0417324, 106.076, 18.4774)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 20, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(518581.0, 518581.0, 0.0384662, 0.0, 23.7657), (521165.0, 521165.0, 0.0382815, 0.0, 22.2322), (520478.0, 520478.0, 0.0383316, 0.0, 21.9944)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(560251.0, 560251.0, 0.042649, 347.523, 22.7845), (557037.0, 557037.0, 0.0429351, 226.496, 22.6055), (566398.0, 566398.0, 0.0422298, 259.593, 22.5577)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(570554.0, 570554.0, 0.0419319, 109.373, 22.4786), (571235.0, 571235.0, 0.0418883, 109.831, 22.8149), (561708.0, 561708.0, 0.0425866, 109.558, 22.1268)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 24, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(614054.0, 614054.0, 0.0389887, 0.0, 26.9214), (612463.0, 612463.0, 0.0390935, 0.0, 25.5662), (611227.0, 611227.0, 0.0391734, 0.0, 26.1997)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(635704.0, 635704.0, 0.0432926, 440.427, 25.892), (641894.0, 641894.0, 0.0434858, 122.07, 25.8114), (636286.0, 636286.0, 0.043859, 129.47, 26.2711)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(645019.0, 645019.0, 0.0432778, 112.454, 25.5628), (644904.0, 644904.0, 0.0432636, 113.517, 26.0968), (648679.0, 648679.0, 0.0430153, 102.459, 25.6019)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(705610.0, 705610.0, 0.0395877, 0.0, 30.1652), (702785.0, 702785.0, 0.0397455, 0.0, 29.3329), (705719.0, 705719.0, 0.0395825, 0.0, 30.1161)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(699384.0, 699384.0, 0.0452612, 1136.85, 28.7525), (699960.0, 699960.0, 0.0452737, 1210.42, 29.2327), (696170.0, 696170.0, 0.0453715, 1474.05, 27.8344)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-temp', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(720767.0, 720767.0, 0.0442469, 759.988, 29.0968), (718494.0, 718494.0, 0.0443789, 648.494, 28.9776), (728285.0, 728285.0, 0.0437597, 773.536, 30.0091)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 32, 'name': 'scale_tpcc', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(814635.0, 814635.0, 0.0391764, 0.0, 35.1976), (823571.0, 823571.0, 0.0387536, 0.0, 37.2659), (813039.0, 813039.0, 0.0392549, 0.0, 36.2492)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(806288.0, 806288.0, 0.0346716, 0.0, 0.0), (812797.0, 812797.0, 0.0343964, 0.0, 0.0), (805790.0, 805790.0, 0.0346961, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(797902.0, 797902.0, 0.0350234, 0.0, 121.078), (788705.0, 788705.0, 0.0354296, 0.0, 116.181), (790483.0, 790483.0, 0.0353565, 0.0, 119.697)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(777488.0, 777488.0, 0.0359398, 0.0, 234.32), (793928.0, 793928.0, 0.0351839, 0.0, 238.275), (774937.0, 774937.0, 0.0360464, 0.0, 234.145)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(769009.0, 769009.0, 0.0363146, 0.0, 347.611), (781956.0, 781956.0, 0.0357226, 0.0, 349.994), (784384.0, 784384.0, 0.0356131, 0.0, 351.86)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(766040.0, 766040.0, 0.0364569, 0.0, 451.138), (774012.0, 774012.0, 0.0360733, 0.0, 467.057), (782923.0, 782923.0, 0.0356682, 0.0, 464.325)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(761386.0, 761386.0, 0.0366621, 0.0, 560.837), (773768.0, 773768.0, 0.0360849, 0.0, 571.139), (778537.0, 778537.0, 0.0358533, 0.0, 578.473)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(764569.0, 764569.0, 0.0365113, 0.0, 679.599), (759640.0, 759640.0, 0.0367474, 0.0, 666.214), (776602.0, 776602.0, 0.0359345, 0.0, 687.29)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(765354.0, 765354.0, 0.036465, 0.0, 773.979), (760492.0, 760492.0, 0.0366901, 0.0, 780.935), (765215.0, 765215.0, 0.0364707, 0.0, 779.952)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(741889.0, 741889.0, 0.0376049, 0.0, 862.211), (765299.0, 765299.0, 0.0364518, 0.0, 895.632), (767722.0, 767722.0, 0.0363191, 0.0, 902.566)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(751384.0, 751384.0, 0.0371292, 0.0, 985.814), (763935.0, 763935.0, 0.0365074, 0.0, 1001.3), (756551.0, 756551.0, 0.0368641, 0.0, 999.711)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(761211.0, 761211.0, 0.0366384, 0.0, 1092.68), (763319.0, 763319.0, 0.0365279, 0.0, 1110.38), (765116.0, 765116.0, 0.0364423, 0.0, 1102.56)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(825461.0, 825461.0, 0.033858, 0.0, 0.0), (815822.0, 815822.0, 0.0342369, 0.0, 0.0), (821089.0, 821089.0, 0.0340414, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(811573.0, 811573.0, 0.034428, 0.0, 121.597), (814350.0, 814350.0, 0.034308, 0.0, 124.348), (816024.0, 816024.0, 0.0342422, 0.0, 125.231)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(808929.0, 808929.0, 0.0345328, 0.0, 245.946), (799773.0, 799773.0, 0.0349224, 0.0, 242.943), (790461.0, 790461.0, 0.0353392, 0.0, 238.913)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(804244.0, 804244.0, 0.0347248, 0.0, 367.843), (799706.0, 799706.0, 0.0349187, 0.0, 362.959), (796449.0, 796449.0, 0.0350647, 0.0, 361.86)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(794453.0, 794453.0, 0.0351407, 0.0, 487.235), (788685.0, 788685.0, 0.0353989, 0.0, 476.802), (787245.0, 787245.0, 0.0354657, 0.0, 475.537)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(798494.0, 798494.0, 0.0349548, 0.0, 602.005), (800584.0, 800584.0, 0.034865, 0.0, 608.673), (788170.0, 788170.0, 0.0354135, 0.0, 596.038)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(794715.0, 794715.0, 0.0351173, 0.0, 712.204), (782944.0, 782944.0, 0.0355952, 0.0, 699.92), (782979.0, 782979.0, 0.0356386, 0.0, 705.519)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(765775.0, 765775.0, 0.0364354, 0.0, 804.152), (792340.0, 792340.0, 0.0352126, 0.0, 829.994), (785538.0, 785538.0, 0.0355196, 0.0, 827.851)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(769798.0, 769798.0, 0.0362347, 0.0, 913.05), (783104.0, 783104.0, 0.0356187, 0.0, 938.75), (790762.0, 790762.0, 0.035276, 0.0, 940.525)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(774841.0, 774841.0, 0.0359907, 0.0, 1027.7), (776136.0, 776136.0, 0.0359342, 0.0, 1026.0), (781545.0, 781545.0, 0.0356814, 0.0, 1041.08)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(785045.0, 785045.0, 0.0355166, 0.0, 1159.89), (781998.0, 781998.0, 0.0356545, 0.0, 1146.56), (775092.0, 775092.0, 0.0359774, 0.0, 1136.1)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(925456.0, 925456.0, 0.0301944, 0.0, 0.0), (924710.0, 924710.0, 0.0302244, 0.0, 0.0), (912381.0, 912381.0, 0.0306279, 0.0, 0.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 1', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(905686.0, 905686.0, 0.030846, 0.0, 139.797), (923047.0, 923047.0, 0.0302669, 0.0, 141.698), (912168.0, 912168.0, 0.0306273, 0.0, 140.031)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 2', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(915460.0, 915460.0, 0.0305097, 0.0, 278.892), (891186.0, 891186.0, 0.0313397, 0.0, 272.795), (910633.0, 910633.0, 0.0306712, 0.0, 281.36)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 3', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(909618.0, 909618.0, 0.0306986, 0.0, 409.575), (900989.0, 900989.0, 0.0309938, 0.0, 405.692), (909806.0, 909806.0, 0.0306935, 0.0, 413.409)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 4', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(892349.0, 892349.0, 0.031283, 0.0, 543.606), (895733.0, 895733.0, 0.0311659, 0.0, 534.007), (905308.0, 905308.0, 0.0308356, 0.0, 546.89)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 5', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(892090.0, 892090.0, 0.0312859, 0.0, 669.004), (883095.0, 883095.0, 0.0316099, 0.0, 663.537), (892337.0, 892337.0, 0.0312792, 0.0, 658.321)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 6', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(881039.0, 881039.0, 0.0316704, 0.0, 793.076), (882058.0, 882058.0, 0.0316328, 0.0, 784.9), (880395.0, 880395.0, 0.0316974, 0.0, 782.47)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 7', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(886761.0, 886761.0, 0.0314644, 0.0, 921.532), (881661.0, 881661.0, 0.0316401, 0.0, 915.601), (882964.0, 882964.0, 0.0315967, 0.0, 917.951)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 8', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(880621.0, 880621.0, 0.0316745, 0.0, 1031.19), (871377.0, 871377.0, 0.0320079, 0.0, 1025.53), (876721.0, 876721.0, 0.0318137, 0.0, 1034.05)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 9', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(881304.0, 881304.0, 0.0316413, 0.0, 1159.76), (869172.0, 869172.0, 0.0320832, 0.0, 1144.78), (886523.0, 886523.0, 0.0314546, 0.0, 1169.68)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--enable-separate-tree-per-partition --workload-mix 100,0,0,0,0 --new-order-remote-item-pct 10', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(863583.0, 863583.0, 0.0322865, 0.0, 1254.06), (878930.0, 878930.0, 0.0317189, 0.0, 1276.02), (877821.0, 877821.0, 0.0317597, 0.0, 1278.09)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 0', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1242960.0, 1242960.0, 0.0224758, 0.0, 0.0), (1247870.0, 1247870.0, 0.0223908, 0.0, 0.0), (1227620.0, 1227620.0, 0.0227595, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 1', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(1043580.0, 1043580.0, 0.0267812, 0.0, 0.0), (1039090.0, 1039090.0, 0.0268949, 0.0, 0.0), (1032500.0, 1032500.0, 0.0270694, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 2', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(855396.0, 855396.0, 0.0326825, 0.0, 0.0), (860291.0, 860291.0, 0.0324972, 0.0, 0.0), (855942.0, 855942.0, 0.032662, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 3', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(704703.0, 704703.0, 0.0396825, 0.0, 0.0), (695359.0, 695359.0, 0.0402165, 0.0, 0.0), (698044.0, 698044.0, 0.0400605, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 4', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(591127.0, 591127.0, 0.0473125, 0.0, 0.0), (586776.0, 586776.0, 0.0476642, 0.0, 0.0), (580026.0, 580026.0, 0.0482227, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 5', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(478630.0, 478630.0, 0.0584464, 0.0, 0.0), (491725.0, 491725.0, 0.0568888, 0.0, 0.0), (493271.0, 493271.0, 0.0567128, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 6', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(408654.0, 408654.0, 0.0684639, 0.0, 0.0), (419374.0, 419374.0, 0.0667132, 0.0, 0.0), (419056.0, 419056.0, 0.0667628, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 7', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(359188.0, 359188.0, 0.0778998, 0.0, 0.0), (359580.0, 359580.0, 0.0778133, 0.0, 0.0), (349631.0, 349631.0, 0.0800309, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 8', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(319971.0, 319971.0, 0.0874537, 0.0, 0.0), (319187.0, 319187.0, 0.0876687, 0.0, 0.0), (310965.0, 310965.0, 0.0899824, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 9', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(284031.0, 284031.0, 0.098525, 0.0, 0.0), (280539.0, 280539.0, 0.0997519, 0.0, 0.0), (284378.0, 284378.0, 0.0984049, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'multipart:pct', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks --new-order-remote-item-pct 10', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(255585.0, 255585.0, 0.109496, 0.0, 0.0), (256025.0, 256025.0, 0.109306, 0.0, 0.0), (256373.0, 256373.0, 0.109162, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --enable-separate-tree-per-partition --enable-partition-locks', 'db': 'kvdb-st', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(44495.0, 44495.0, 0.0224293, 0.0, 0.0), (44288.4, 44288.4, 0.0225344, 0.0, 0.0), (44321.1, 44321.1, 0.0225171, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(32118.3, 32118.3, 0.031069, 0.0, 0.0), (31969.4, 31969.4, 0.0312214, 0.0, 0.0), (31833.7, 31833.7, 0.0313521, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 1, 'numa_memory': '4G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(32951.1, 32951.1, 0.0302875, 0.0, 0.0), (32419.2, 32419.2, 0.0307953, 0.0, 0.0), (32893.5, 32893.5, 0.0303424, 0.0, 0.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(62796.0, 62796.0, 0.0317857, 0.0, 3.31664), (62559.5, 62559.5, 0.0319149, 0.0, 3.14998), (61874.2, 61874.2, 0.0322658, 0.0, 2.99998)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 2, 'numa_memory': '8G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(64657.0, 64657.0, 0.0308702, 0.0, 3.28332), (64476.1, 64476.1, 0.0309545, 0.0, 3.48331), (64139.1, 64139.1, 0.0311286, 0.0, 3.26665)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(121387.0, 121387.0, 0.032889, 0.0, 18.0999), (121454.0, 121454.0, 0.0328622, 0.0, 18.0498), (122034.0, 122034.0, 0.0327109, 0.0, 19.4165)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 4, 'numa_memory': '16G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(123894.0, 123894.0, 0.0322137, 0.0, 19.0832), (123991.0, 123991.0, 0.0321967, 0.0, 18.9832), (124994.0, 124994.0, 0.0319308, 0.0, 19.2999)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(169515.0, 169515.0, 0.0327435, 0.0, 11079.4), (168722.0, 168722.0, 0.0329019, 0.0, 11018.7), (168456.0, 168456.0, 0.0329514, 0.0, 11011.8)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 6, 'numa_memory': '24G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(183716.0, 183716.0, 0.0323312, 0.0, 956.825), (183498.0, 183498.0, 0.0323662, 0.0, 960.558), (182594.0, 182594.0, 0.0325335, 0.0, 949.625)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(216280.0, 216280.0, 0.0328513, 0.0, 22023.0), (210393.0, 210393.0, 0.0338061, 0.0, 21584.0), (213755.0, 213755.0, 0.0332433, 0.0, 21779.1)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 8, 'numa_memory': '32G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(238839.0, 238839.0, 0.0330196, 0.0, 1873.42), (237640.0, 237640.0, 0.0331984, 0.0, 1869.13), (239380.0, 239380.0, 0.0329553, 0.0, 1877.23)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(250519.0, 250519.0, 0.0330805, 0.0, 40559.1), (241457.0, 241457.0, 0.0343597, 0.0, 39833.8), (250890.0, 250890.0, 0.0330292, 0.0, 40774.7)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 10, 'numa_memory': '40G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(293347.0, 293347.0, 0.0333821, 0.0, 3590.83), (295378.0, 295378.0, 0.0331443, 0.0, 3610.9), (292020.0, 292020.0, 0.0335388, 0.0, 3585.19)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(275702.0, 275702.0, 0.0344281, 0.0, 57568.0), (277685.0, 277685.0, 0.0342305, 0.0, 57495.8), (279760.0, 279760.0, 0.0339387, 0.0, 58130.7)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 12, 'numa_memory': '48G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(343407.0, 343407.0, 0.0340644, 0.0, 5269.62), (340971.0, 340971.0, 0.0343138, 0.0, 5212.04), (341800.0, 341800.0, 0.034232, 0.0, 5232.51)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(327565.0, 327565.0, 0.0345718, 0.0, 103537.0), (325068.0, 325068.0, 0.0347459, 0.0, 103584.0), (327822.0, 327822.0, 0.0344385, 0.0, 104351.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(432829.0, 432829.0, 0.035626, 0.0, 9930.59), (442102.0, 442102.0, 0.0348777, 0.0, 10143.6), (441455.0, 441455.0, 0.0349215, 0.0, 10166.3)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(352584.0, 352584.0, 0.0352099, 0.0, 150022.0), (353061.0, 353061.0, 0.034983, 0.0, 150998.0), (349523.0, 349523.0, 0.0353466, 0.0, 150234.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 20, 'numa_memory': '80G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(531869.0, 531869.0, 0.0358097, 0.0, 16305.2), (531126.0, 531126.0, 0.0358588, 0.0, 16329.8), (531405.0, 531405.0, 0.0358489, 0.0, 16244.1)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(362583.0, 362583.0, 0.0353427, 0.0, 191307.0), (363862.0, 363862.0, 0.0353339, 0.0, 191715.0), (363285.0, 363285.0, 0.0353368, 0.0, 191112.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 24, 'numa_memory': '96G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(618380.0, 618380.0, 0.0365441, 0.0, 23631.0), (621098.0, 621098.0, 0.0363649, 0.0, 23789.4), (619742.0, 619742.0, 0.0364553, 0.0, 23719.6)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(338537.0, 338537.0, 0.0365146, 0.0, 205308.0), (337417.0, 337417.0, 0.0363902, 0.0, 207241.0), (336938.0, 336938.0, 0.03607, 0.0, 207617.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(690271.0, 690271.0, 0.0377613, 0.0, 31631.7), (695852.0, 695852.0, 0.037431, 0.0, 32018.7), (695134.0, 695134.0, 0.0374861, 0.0, 31971.2)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': True, 'log_compress': False, 'disable_madv_willneed': True}, [(300664.0, 300664.0, 0.0364553, 0.0, 195246.0), (309101.0, 309101.0, 0.0362933, 0.0, 201725.0), (307603.0, 307603.0, 0.0365383, 0.0, 200124.0)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 4, 'name': 'multipart:skew', 'bench_opts': '--workload-mix 100,0,0,0,0 --new-order-fast-id-gen', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 32, 'numa_memory': '128G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(762910.0, 762910.0, 0.0379692, 0.0, 40435.0), (766111.0, 766111.0, 0.0378948, 0.0, 40718.0), (753796.0, 753796.0, 0.0385245, 0.0, 39840.5)]), ({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': None, 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(433200.0, 433200.0, 0.0645148, 0.0, 23.2829), (429709.0, 429709.0, 0.0650403, 0.0, 22.1329), (432455.0, 432455.0, 0.0646299, 0.0, 22.9662)]), ({'binary': '..\/out-factor-gc-nowriteinplace\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(525665.0, 525665.0, 0.0531658, 0.0, 26.2329), (520951.0, 520951.0, 0.0536426, 0.0, 28.9828), (522117.0, 522117.0, 0.0535238, 0.0, 27.6495)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(698023.0, 698023.0, 0.0400015, 0.0, 30.2117), (702420.0, 702420.0, 0.0397585, 0.0, 31.3994), (699132.0, 699132.0, 0.0399416, 0.0, 30.7157)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(759458.0, 759458.0, 0.0367641, 0.0, 99.8045), (769139.0, 769139.0, 0.0362966, 0.0, 103.031), (759587.0, 759587.0, 0.0367557, 0.0, 99.7311)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'factoranalysis', 'bench_opts': '--disable-read-only-snapshots', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': True, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(777304.0, 777304.0, 0.035915, 0.0, 102.848), (779015.0, 779015.0, 0.0358351, 0.0, 105.114), (777038.0, 777038.0, 0.0359254, 0.0, 104.731)]), ({'binary': '..\/out-factor-fake-compression\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(688122.0, 688122.0, 0.0405507, 105.366, 30.9495), (685386.0, 685386.0, 0.0407172, 96.5505, 29.9872), (690778.0, 690778.0, 0.0404074, 105.092, 30.0936)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': False, 'scale_factor': 28, 'name': 'persistfactoranalysis', 'bench_opts': '', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 28, 'numa_memory': '112G', 'persist': 'persist-real', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': True, 'disable_madv_willneed': True}, [(596712.0, 596712.0, 0.046765, 139.349, 23.7017), (600256.0, 600256.0, 0.0464942, 145.855, 22.8553), (603010.0, 603010.0, 0.0462962, 147.18, 23.5958)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(199646.0, 199646.0, 0.0794695, 0.0, 2514.41), (205182.0, 205182.0, 0.0773246, 0.0, 2603.53), (200252.0, 200252.0, 0.0792314, 0.0, 2570.28)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(197077.0, 197077.0, 0.0805048, 0.0, 2514.27), (196762.0, 196762.0, 0.0806183, 0.0, 2570.83), (196422.0, 196422.0, 0.0807498, 0.0, 2611.23)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(196410.0, 196410.0, 0.0807394, 0.0, 2658.45), (196638.0, 196638.0, 0.0806373, 0.0, 2659.57), (195049.0, 195049.0, 0.0813108, 0.0, 2631.86)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(194832.0, 194832.0, 0.0813761, 0.0, 2682.3), (192620.0, 192620.0, 0.0823341, 0.0, 2604.41), (193308.0, 193308.0, 0.0820224, 0.0, 2643.47)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(194833.0, 194833.0, 0.0813758, 0.0, 2662.9), (194696.0, 194696.0, 0.081434, 0.0, 2695.99), (194545.0, 194545.0, 0.0814888, 0.0, 2691.61)]), ({'binary': '..\/out-perf\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': False, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(194546.0, 194546.0, 0.0815033, 0.0, 2684.96), (192913.0, 192913.0, 0.0821921, 0.0, 2649.91), (194385.0, 194385.0, 0.0815586, 0.0, 2688.2)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 0', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(168978.0, 168978.0, 0.0837348, 0.0, 15890.0), (161929.0, 161929.0, 0.0872612, 0.0, 15326.3), (168062.0, 168062.0, 0.0842055, 0.0, 15755.6)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 20', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(164062.0, 164062.0, 0.0848855, 0.0, 17470.9), (164666.0, 164666.0, 0.0845902, 0.0, 17461.6), (161672.0, 161672.0, 0.0862109, 0.0, 17059.7)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 40', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(158790.0, 158790.0, 0.0864914, 0.0, 18601.4), (157279.0, 157279.0, 0.0872426, 0.0, 18473.4), (160467.0, 160467.0, 0.0855206, 0.0, 18853.0)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 60', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(157723.0, 157723.0, 0.0858837, 0.0, 20168.6), (157928.0, 157928.0, 0.0857274, 0.0, 20283.9), (157018.0, 157018.0, 0.0862519, 0.0, 20123.3)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 80', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(155544.0, 155544.0, 0.0859683, 0.0, 21492.7), (154378.0, 154378.0, 0.0866151, 0.0, 21396.8), (154077.0, 154077.0, 0.0868223, 0.0, 21207.4)]), ({'binary': '..\/out-factor-gc\/benchmarks\/dbtest', 'log_fake_writes': False, 'retry': True, 'scale_factor': 8, 'name': 'readonly', 'bench_opts': '--disable-read-only-snapshots --workload-mix 50,0,0,0,50 --new-order-remote-item-pct 100', 'db': 'ndb-proto2', 'bench': 'tpcc', 'par_load': False, 'disable_gc': False, 'threads': 16, 'numa_memory': '64G', 'persist': 'persist-none', 'disable_snapshots': True, 'log_nofsync': False, 'backoff': False, 'log_compress': False, 'disable_madv_willneed': True}, [(150274.0, 150274.0, 0.0879101, 0.0, 22111.7), (153706.0, 153706.0, 0.0859128, 0.0, 22644.0), (151011.0, 151011.0, 0.0874784, 0.0, 22178.2)])]$/;"	v
RESULTS	benchmarks/results/tom-1-22-13.py	/^RESULTS = [[24379.9, 39409.1, 69521.0, 111504.0, 93520.6, 74206.8, 59526.8, 29637.5, 24295.9], [133844.0, 78811.2, 82557.7, 76093.0, 77323.0, 78700.7, 76911.0, 41490.7, 38417.1], [342565.0, 793420.0, 1467000.0, 2850810.0, 4767900.0, 5926280.0, 6401950.0, 7045150.0, 6379670.0], [535023.0, 804012.0, 1551490.0, 2866770.0, 4857820.0, 7156630.0, 8767890.0, 9970540.0, 9252390.0]]$/;"	v
RESULTS	benchmarks/results/tom-2-13-13.py	/^RESULTS = [({'scale_factor': 48, 'threads': 48, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (225679.0, 3.66666)), ({'scale_factor': 48, 'threads': 48, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (288234.0, 3.36666)), ({'scale_factor': 42, 'threads': 42, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (221730.0, 3.56666)), ({'scale_factor': 42, 'threads': 42, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (247879.0, 2.36666)), ({'scale_factor': 36, 'threads': 36, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (224701.0, 3.06666)), ({'scale_factor': 36, 'threads': 36, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (245265.0, 2.36666)), ({'scale_factor': 30, 'threads': 30, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (208188.0, 3.36666)), ({'scale_factor': 30, 'threads': 30, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (217769.0, 2.69999)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (170535.0, 2.49999)), ({'scale_factor': 24, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (175420.0, 1.69999)), ({'scale_factor': 18, 'threads': 18, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (133891.0, 2.29999)), ({'scale_factor': 18, 'threads': 18, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (138354.0, 1.53333)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (94429.6, 1.53333)), ({'scale_factor': 12, 'threads': 12, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (96529.3, 1.13333)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (66287.5, 1.1)), ({'scale_factor': 8, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (66264.2, 0.966663)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (34313.2, 0.466665)), ({'scale_factor': 4, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (34307.9, 0.199999)), ({'scale_factor': 2, 'threads': 2, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (17625.4, 0.133333)), ({'scale_factor': 2, 'threads': 2, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (17263.5, 0.199999)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, (9129.21, 0.0)), ({'scale_factor': 1, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, (9053.26, 0.0))]$/;"	v
RESULTS	benchmarks/results/tom-2-6-13.py	/^RESULTS = [({'scale_factor': 10, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 1484.09), ({'scale_factor': 10, 'threads': 2, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 2890.06), ({'scale_factor': 10, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 5741.49), ({'scale_factor': 10, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 11037.6), ({'scale_factor': 10, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 18200.4), ({'scale_factor': 10, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 23739.9), ({'scale_factor': 10, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 28485.0), ({'scale_factor': 10, 'threads': 40, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 32868.2), ({'scale_factor': 10, 'threads': 48, 'txn_flags': 1, 'db': 'ndb-proto1', 'bench': 'tpcc'}, 36221.4), ({'scale_factor': 10, 'threads': 1, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 1479.2), ({'scale_factor': 10, 'threads': 2, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 2928.76), ({'scale_factor': 10, 'threads': 4, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 5767.42), ({'scale_factor': 10, 'threads': 8, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 11211.6), ({'scale_factor': 10, 'threads': 16, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 19651.7), ({'scale_factor': 10, 'threads': 24, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 26213.1), ({'scale_factor': 10, 'threads': 32, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 31440.7), ({'scale_factor': 10, 'threads': 40, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 35715.4), ({'scale_factor': 10, 'threads': 48, 'txn_flags': 1, 'db': 'ndb-proto2', 'bench': 'tpcc'}, 40504.7)]$/;"	v
RGX	benchmarks/results/make_graphs-3.py	/^    RGX = re.compile(r'--new-order-remote-item-pct (\\d+)')$/;"	v
RND_STEP_PER_ORDER	benchmarks/egen/bucketsimulator.h	/^        static const UINT RND_STEP_PER_ORDER = 1; \/\/ Number of random number generator calls$/;"	m	class:TPCE::BucketSimulator
RNGSEED	benchmarks/egen/Random.h	/^typedef UINT64  RNGSEED;$/;"	t	namespace:TPCE
RNGSEEDS_H	benchmarks/egen/RNGSeeds.h	42;"	d
RNGSeed	benchmarks/egen/DriverParamSettings.h	/^    RNGSEED RNGSeed;$/;"	m	struct:TPCE::TDriverDMSettings
RNGSeed	benchmarks/egen/DriverParamSettings.h	/^    RNGSEED RNGSeed;$/;"	m	struct:TPCE::TDriverMEESettings
RNGSeedBaseAccountTaxStatus	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseAccountTaxStatus = 34376701;$/;"	m	namespace:TPCE
RNGSeedBaseBrokerId	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseBrokerId = 75607774;$/;"	m	namespace:TPCE
RNGSeedBaseCIDForPermission1	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseCIDForPermission1 = 76103629;$/;"	m	namespace:TPCE
RNGSeedBaseCIDForPermission2	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseCIDForPermission2 = 103275149;$/;"	m	namespace:TPCE
RNGSeedBaseC_AREA_1	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseC_AREA_1 = 97905013;$/;"	m	namespace:TPCE
RNGSeedBaseC_AREA_2	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseC_AREA_2 = 68856487;$/;"	m	namespace:TPCE
RNGSeedBaseC_AREA_3	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseC_AREA_3 = 67142295;$/;"	m	namespace:TPCE
RNGSeedBaseC_TIER	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseC_TIER = 16225173;$/;"	m	namespace:TPCE
RNGSeedBaseFirstName	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseFirstName = 95066470;$/;"	m	namespace:TPCE
RNGSeedBaseGender	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseGender = 9568922;$/;"	m	namespace:TPCE
RNGSeedBaseLastName	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseLastName = 35846049;$/;"	m	namespace:TPCE
RNGSeedBaseMEESecurity	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseMEESecurity = 75791232;$/;"	m	namespace:TPCE
RNGSeedBaseMEETickerTape	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseMEETickerTape = 42065035;$/;"	m	namespace:TPCE
RNGSeedBaseMEETradingFloor	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseMEETradingFloor = 25730774;$/;"	m	namespace:TPCE
RNGSeedBaseMiddleInitial	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseMiddleInitial = 71434514;$/;"	m	namespace:TPCE
RNGSeedBaseNumberOfAccountPermissions	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseNumberOfAccountPermissions = 27794203;$/;"	m	namespace:TPCE
RNGSeedBaseNumberOfSecurities	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseNumberOfSecurities = 23361736;$/;"	m	namespace:TPCE
RNGSeedBaseSPRate	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseSPRate = 56593330;$/;"	m	namespace:TPCE
RNGSeedBaseStartingSecurityID	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseStartingSecurityID = 12020070;$/;"	m	namespace:TPCE
RNGSeedBaseTaxID	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseTaxID = 8731255;$/;"	m	namespace:TPCE
RNGSeedBaseTaxRateRow	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseTaxRateRow = 92740731;$/;"	m	namespace:TPCE
RNGSeedBaseTownDivZip	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseTownDivZip = 26778071;$/;"	m	namespace:TPCE
RNGSeedBaseTxnInputGenerator	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseTxnInputGenerator = 80534927;$/;"	m	namespace:TPCE
RNGSeedBaseTxnMixGenerator	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedBaseTxnMixGenerator = 87944308;$/;"	m	namespace:TPCE
RNGSeedCustomerSelection	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedCustomerSelection = 9270899;$/;"	m	namespace:TPCE
RNGSeedTableDefault	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedTableDefault = 37039940;$/;"	m	namespace:TPCE
RNGSeedTradeGen	benchmarks/egen/RNGSeeds.h	/^    const RNGSEED   RNGSeedTradeGen = 32900134;$/;"	m	namespace:TPCE
ROUND_PAGE	third-party/lz4/fuzzer.c	53;"	d	file:
RO_DRANGE	benchmarks/runner.py	/^  RO_DRANGE = [0, 20, 40, 60, 80, 100]$/;"	v
RUNMODE_OPS	benchmarks/bench.h	/^  RUNMODE_OPS  = 1$/;"	e	enum:__anon95
RUNMODE_TIME	benchmarks/bench.h	/^  RUNMODE_TIME = 0,$/;"	e	enum:__anon95
RUN_BITS	third-party/lz4/lz4.c	226;"	d	file:
RUN_BITS	third-party/lz4/lz4hc.c	199;"	d	file:
RUN_MASK	third-party/lz4/lz4.c	227;"	d	file:
RUN_MASK	third-party/lz4/lz4hc.c	200;"	d	file:
R_MERGE_WITH_LEFT	btree.h	/^    R_MERGE_WITH_LEFT,$/;"	e	enum:btree::remove_status
R_MERGE_WITH_RIGHT	btree.h	/^    R_MERGE_WITH_RIGHT,$/;"	e	enum:btree::remove_status
R_NONE_MOD	btree.h	/^    R_NONE_MOD,$/;"	e	enum:btree::remove_status
R_NONE_NOMOD	btree.h	/^    R_NONE_NOMOD,$/;"	e	enum:btree::remove_status
R_REPLACE_NODE	btree.h	/^    R_REPLACE_NODE,$/;"	e	enum:btree::remove_status
R_RETRY	btree.h	/^    R_RETRY,$/;"	e	enum:btree::remove_status
R_STOLE_FROM_LEFT	btree.h	/^    R_STOLE_FROM_LEFT,$/;"	e	enum:btree::remove_status
R_STOLE_FROM_RIGHT	btree.h	/^    R_STOLE_FROM_RIGHT,$/;"	e	enum:btree::remove_status
RandomNStr	benchmarks/tpcc.cc	/^  RandomNStr(fast_random &r, uint len)$/;"	f	class:tpcc_worker_mixin
RandomNStr	benchmarks/tpce.cc	/^			RandomNStr(fast_random &r, uint len)$/;"	f	class:tpce_worker_mixin
RandomNumber	benchmarks/tpcc.cc	/^  RandomNumber(fast_random &r, int min, int max)$/;"	f	class:tpcc_worker_mixin
RandomNumber	benchmarks/tpce.cc	/^			RandomNumber(fast_random &r, int min, int max)$/;"	f	class:tpce_worker_mixin
RandomStr	benchmarks/tpcc.cc	/^  RandomStr(fast_random &r, uint len)$/;"	f	class:tpcc_worker_mixin
RandomStr	benchmarks/tpce.cc	/^			RandomStr(fast_random &r, uint len)$/;"	f	class:tpce_worker_mixin
RangeAwareParser	util.h	/^struct RangeAwareParser {$/;"	s	namespace:util
RawVersionManip	btree.h	/^    RawVersionManip;$/;"	t	class:btree
RcuRespCaller	btree.cc	/^  static const bool RcuRespCaller = false;$/;"	m	struct:testing_concurrent_btree_traits	file:
RcuRespCaller	btree.h	/^  static const bool RcuRespCaller = true;$/;"	m	struct:base_btree_config
RcuRespCaller	masstree_btree.h	/^  enum { RcuRespCaller = true }; \/\/ FIXME: tzwang: OK, silo's original code also set it to true$/;"	e	enum:masstree_params::__anon105
ReadList	benchmarks/egen/FlatFile.h	/^    void ReadList(const char *szListFile)$/;"	f	class:TPCE::CFlatFile
ReadList	benchmarks/egen/FlatFile.h	/^    void ReadList(const string &str)$/;"	f	class:TPCE::CFlatFile
ReadList	benchmarks/egen/FlatFile.h	/^    void ReadList(istream &tmpFile)$/;"	f	class:TPCE::CFlatFile
ReadList	benchmarks/egen/InputFile.h	/^    void ReadList(const char *szListFile)$/;"	f	class:TPCE::CInputFile
ReadList	benchmarks/egen/InputFile.h	/^    void ReadList(const string &str)$/;"	f	class:TPCE::CInputFile
ReadList	benchmarks/egen/InputFile.h	/^    void ReadList(istream &tmpFile) {$/;"	f	class:TPCE::CInputFile
ReadList	benchmarks/egen/InputFileNoWeight.h	/^    void ReadList(const char *szListFile)$/;"	f	class:TPCE::CInputFileNoWeight
ReadList	benchmarks/egen/InputFileNoWeight.h	/^    void ReadList(const string &str)$/;"	f	class:TPCE::CInputFileNoWeight
ReadList	benchmarks/egen/InputFileNoWeight.h	/^    void ReadList(istream &tmpFile)$/;"	f	class:TPCE::CInputFileNoWeight
ReadStatus	tuple.h	/^  enum ReadStatus {$/;"	g	struct:dbtuple
RecordCount	benchmarks/egen/InputFile.h	/^    UINT RecordCount( )$/;"	f	class:TPCE::CInputFile
Ref	dbcore/sm-defs.h	/^    typedef T &Ref;$/;"	t	struct:_enumerate_helper
Ref	dbcore/sm-defs.h	/^    typedef typename std::iterator_traits<typename T::iterator>::reference Ref;$/;"	t	struct:_enumerate_helper
ReleaseAddress	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseAddress(){$/;"	f	class:CGenerateAndLoad
ReleaseCharge	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCharge(){$/;"	f	class:CGenerateAndLoad
ReleaseCommissionRate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCommissionRate(){$/;"	f	class:CGenerateAndLoad
ReleaseCompany	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCompany(){$/;"	f	class:CGenerateAndLoad
ReleaseCompanyCompetitor	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCompanyCompetitor(){$/;"	f	class:CGenerateAndLoad
ReleaseCustomer	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCustomer(){$/;"	f	class:CGenerateAndLoad
ReleaseCustomerAccountAndAccountPermission	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCustomerAccountAndAccountPermission(){$/;"	f	class:CGenerateAndLoad
ReleaseCustomerTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseCustomerTaxrate(){$/;"	f	class:CGenerateAndLoad
ReleaseDailyMarket	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseDailyMarket(){$/;"	f	class:CGenerateAndLoad
ReleaseExchange	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseExchange(){$/;"	f	class:CGenerateAndLoad
ReleaseFinancial	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseFinancial(){$/;"	f	class:CGenerateAndLoad
ReleaseHoldingAndTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseHoldingAndTrade(){$/;"	f	class:CGenerateAndLoad
ReleaseIndustry	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseIndustry(){$/;"	f	class:CGenerateAndLoad
ReleaseLastTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseLastTrade(){$/;"	f	class:CGenerateAndLoad
ReleaseLock	benchmarks/egen/SyncLockInterface.h	/^    void ReleaseLock() {$/;"	f	class:TPCE::CSyncLock
ReleaseNewsItemAndNewsXRef	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseNewsItemAndNewsXRef(){$/;"	f	class:CGenerateAndLoad
ReleaseSector	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseSector(){$/;"	f	class:CGenerateAndLoad
ReleaseSecurity	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseSecurity(){$/;"	f	class:CGenerateAndLoad
ReleaseStatusType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseStatusType(){$/;"	f	class:CGenerateAndLoad
ReleaseTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseTaxrate(){$/;"	f	class:CGenerateAndLoad
ReleaseTradeType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseTradeType(){$/;"	f	class:CGenerateAndLoad
ReleaseWatchListAndWatchItem	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseWatchListAndWatchItem(){$/;"	f	class:CGenerateAndLoad
ReleaseZipCode	benchmarks/egen/EGenGenerateAndLoad.cpp	/^void CGenerateAndLoad::ReleaseZipCode(){$/;"	f	class:CGenerateAndLoad
Remove	masstree/doc/spec.tex	/^\\end{figure}$/;"	s
Reshaping the tree	masstree/doc/spec.tex	/^root requires more work to fix, as we'll see.$/;"	u
Retry	masstree/kvproto.hh	/^    Retry,$/;"	e	enum:result_t
RndAlphaNumFormatted	benchmarks/egen/Random.cpp	/^void CRandom::RndAlphaNumFormatted(char *szReturnString, const char *szFormat)$/;"	f	class:CRandom
RndDouble	benchmarks/egen/Random.cpp	/^double CRandom::RndDouble(void)$/;"	f	class:CRandom
RndDoubleIncrRange	benchmarks/egen/Random.cpp	/^double CRandom::RndDoubleIncrRange(double min, double max, double incr)$/;"	f	class:CRandom
RndDoubleNegExp	benchmarks/egen/Random.cpp	/^double CRandom::RndDoubleNegExp(double mean)$/;"	f	class:CRandom
RndDoubleRange	benchmarks/egen/Random.cpp	/^double CRandom::RndDoubleRange(double min, double max)$/;"	f	class:CRandom
RndGenerateIntegerPercentage	benchmarks/egen/Random.h	/^    inline UINT RndGenerateIntegerPercentage( )$/;"	f	class:TPCE::CRandom
RndInt64Range	benchmarks/egen/Random.cpp	/^INT64 CRandom::RndInt64Range(INT64 min, INT64 max)$/;"	f	class:CRandom
RndInt64RangeExclude	benchmarks/egen/Random.cpp	/^INT64 CRandom::RndInt64RangeExclude(INT64 low, INT64 high, INT64 exclude)$/;"	f	class:CRandom
RndIntRange	benchmarks/egen/Random.cpp	/^int CRandom::RndIntRange(int min, int max)$/;"	f	class:CRandom
RndIntRangeExclude	benchmarks/egen/Random.cpp	/^int CRandom::RndIntRangeExclude(int low, int high, int exclude)$/;"	f	class:CRandom
RndNthElement	benchmarks/egen/Random.cpp	/^RNGSEED CRandom::RndNthElement( RNGSEED nSeed, RNGSEED nCount) {$/;"	f	class:CRandom
RndNthInt64Range	benchmarks/egen/Random.cpp	/^INT64 CRandom::RndNthInt64Range(RNGSEED Seed, RNGSEED N, INT64 min, INT64 max)$/;"	f	class:CRandom
RndNthIntRange	benchmarks/egen/Random.cpp	/^int CRandom::RndNthIntRange(RNGSEED Seed, RNGSEED N, int min, int max)$/;"	f	class:CRandom
RndPercent	benchmarks/egen/Random.h	/^    inline bool RndPercent(int percent)$/;"	f	class:TPCE::CRandom
Root reachability	masstree/doc/spec.tex	/^and \\(t'\\).$/;"	P
RoundToNearestNsec	benchmarks/egen/DateTime.h	84;"	d
S32	third-party/lz4/bench.c	/^  typedef   signed int        S32;$/;"	t	file:
S32	third-party/lz4/bench.c	/^  typedef  int32_t S32;$/;"	t	file:
S32	third-party/lz4/fullbench.c	/^  typedef   signed int        S32;$/;"	t	file:
S32	third-party/lz4/fullbench.c	/^  typedef  int32_t S32;$/;"	t	file:
S32	third-party/lz4/lz4.c	/^  typedef   signed int        S32;$/;"	t	file:
S32	third-party/lz4/lz4.c	/^  typedef  int32_t S32;$/;"	t	file:
S32	third-party/lz4/lz4hc.c	/^  typedef   signed int        S32;$/;"	t	file:
S32	third-party/lz4/lz4hc.c	/^  typedef  int32_t S32;$/;"	t	file:
S32	third-party/lz4/xxhash.c	/^  typedef   signed int       S32;$/;"	t	file:
S32	third-party/lz4/xxhash.c	/^  typedef  int32_t S32;$/;"	t	file:
SCALE_FACTORS	benchmarks/results/tom-2-6-13.py	/^SCALE_FACTORS = (10,)$/;"	v
SC_ID	benchmarks/egen/Table_Defs.h	/^    char                    SC_ID[cSC_ID_len+1];$/;"	m	struct:TPCE::SECTOR_ROW
SC_NAME	benchmarks/egen/Table_Defs.h	/^    char                    SC_NAME[cSC_NAME_len+1];$/;"	m	struct:TPCE::SECTOR_ROW
SDF1_ERROR1	benchmarks/egen/error.h	/^        SDF1_ERROR1 = -511,     \/\/ day_len not in [min_day_len..max_day_len]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
SDF1_ERROR2	benchmarks/egen/error.h	/^        SDF1_ERROR2 = -512,     \/\/ fin_len <> max_fin_len$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
SDF1_ERROR3	benchmarks/egen/error.h	/^        SDF1_ERROR3 = -513,     \/\/ news_len <> max_news_len$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
SD_settings	benchmarks/egen/DriverParamSettings.h	/^    CSecurityDetailSettings     SD_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
SECTOR_KEY_FIELDS	benchmarks/tpce.h	315;"	d
SECTOR_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct SECTOR_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
SECTOR_TABLE_H	benchmarks/egen/SectorTable.h	41;"	d
SECTOR_VALUE_FIELDS	benchmarks/tpce.h	318;"	d
SECURITY_DETAIL	benchmarks/egen/CE.h	/^    static const INT32 SECURITY_DETAIL          = CCETxnMixGenerator::SECURITY_DETAIL;$/;"	m	class:TPCE::CCE
SECURITY_DETAIL	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 SECURITY_DETAIL          =  0;$/;"	m	class:TPCE::CCETxnMixGenerator
SECURITY_FILE_H	benchmarks/egen/SecurityFile.h	43;"	d
SECURITY_KEY_FIELDS	benchmarks/tpce.h	322;"	d
SECURITY_PRICE_RANGE_H	benchmarks/egen/SecurityPriceRange.h	42;"	d
SECURITY_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct SECURITY_ROW$/;"	s	namespace:TPCE
SECURITY_TABLE_H	benchmarks/egen/SecurityTable.h	41;"	d
SECURITY_VALUE_FIELDS	benchmarks/tpce.h	324;"	d
SEGMENT_FILE_NAME_BUFSZ	dbcore/sm-log-file.cpp	13;"	d	file:
SEGMENT_FILE_NAME_FMT	dbcore/sm-log-file.cpp	12;"	d	file:
SEQ_MSK	third-party/lz4/fuzzer.c	49;"	d	file:
SEQ_POW	third-party/lz4/fuzzer.c	47;"	d	file:
SERIALIZE_FAILSAFE_READ_FIELD	record/encoder.h	133;"	d
SERIALIZE_FAILSAFE_READ_KEY_FIELD_X	record/encoder.h	188;"	d
SERIALIZE_FAILSAFE_READ_VALUE_FIELD_X	record/encoder.h	190;"	d
SERIALIZE_MAX_NBYTES_KEY_FIELD_X	record/encoder.h	149;"	d
SERIALIZE_MAX_NBYTES_KEY_FIELD_Y	record/encoder.h	151;"	d
SERIALIZE_MAX_NBYTES_PREFIX_KEY_FIELD_X	record/encoder.h	159;"	d
SERIALIZE_MAX_NBYTES_PREFIX_VALUE_FIELD_X	record/encoder.h	166;"	d
SERIALIZE_MAX_NBYTES_VALUE_FIELD_X	record/encoder.h	154;"	d
SERIALIZE_MAX_NBYTES_VALUE_FIELD_Y	record/encoder.h	156;"	d
SERIALIZE_NBYTES_FIELD	record/encoder.h	144;"	d
SERIALIZE_NBYTES_KEY_FIELD_X	record/encoder.h	193;"	d
SERIALIZE_NBYTES_VALUE_FIELD_X	record/encoder.h	195;"	d
SERIALIZE_PREFIX_READ_FIELD	record/encoder.h	125;"	d
SERIALIZE_PREFIX_READ_KEY_FIELD_X	record/encoder.h	183;"	d
SERIALIZE_PREFIX_READ_VALUE_FIELD_X	record/encoder.h	185;"	d
SERIALIZE_READ_FIELD	record/encoder.h	119;"	d
SERIALIZE_READ_KEY_FIELD_X	record/encoder.h	178;"	d
SERIALIZE_READ_VALUE_FIELD_X	record/encoder.h	180;"	d
SERIALIZE_WRITE_FIELD	record/encoder.h	114;"	d
SERIALIZE_WRITE_KEY_FIELD_X	record/encoder.h	173;"	d
SERIALIZE_WRITE_VALUE_FIELD_X	record/encoder.h	175;"	d
SETTLEMENT_KEY_FIELDS	benchmarks/tpce.h	163;"	d
SETTLEMENT_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct SETTLEMENT_ROW$/;"	s	namespace:TPCE
SETTLEMENT_VALUE_FIELDS	benchmarks/tpce.h	165;"	d
SE_AMT	benchmarks/egen/Table_Defs.h	/^    double                  SE_AMT;$/;"	m	struct:TPCE::SETTLEMENT_ROW
SE_CASH_DUE_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               SE_CASH_DUE_DATE;$/;"	m	struct:TPCE::SETTLEMENT_ROW
SE_CASH_TYPE	benchmarks/egen/Table_Defs.h	/^    char                    SE_CASH_TYPE[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::SETTLEMENT_ROW
SE_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  SE_T_ID;$/;"	m	struct:TPCE::SETTLEMENT_ROW
SINGLE_THREADED_INVARIANT	macros.h	77;"	d
SIZE	dbcore/epoch.h	/^        enum { SIZE=32 };$/;"	e	enum:epoch_mgr::tls_storage::__anon90
SIZEOF_INT	masstree/config.h	253;"	d
SIZEOF_LONG	masstree/config.h	256;"	d
SIZEOF_LONG_LONG	masstree/config.h	259;"	d
SIZEOF_SHORT	masstree/config.h	262;"	d
SIZEOF_VOID_P	masstree/config.h	265;"	d
SIZE_BITS	dbcore/sm-common.h	/^    static uint64_t const SIZE_BITS = 8;$/;"	m	struct:fat_ptr
SIZE_MASK	dbcore/sm-common.h	/^    static uint64_t const SIZE_MASK = (1 << SIZE_BITS)-1;$/;"	m	struct:fat_ptr
SKIPSTRENGTH	third-party/lz4/lz4.c	219;"	d	file:
SKIP_LOG_SIZE	dbcore/test-sm-log-offset.cpp	/^static uint64_t const SKIP_LOG_SIZE = MIN_LOG_BLOCK_SIZE;$/;"	v	file:
SKIP_LOG_SIZE	dbcore/test-sm-log-segments.cpp	/^static uint64_t const SKIP_LOG_SIZE = 8;$/;"	v	file:
SMALL_SIZE_MAP	macros.h	81;"	d
SMALL_SIZE_VEC	macros.h	80;"	d
SM_OID_ALLOC_ALIGN_BITS	dbcore/sm-oid-alloc.h	/^static size_t const SM_OID_ALLOC_ALIGN_BITS = 10;$/;"	v
SPAM	dbcore/sm-defs.h	222;"	d
SPAM_IF	dbcore/sm-defs.h	226;"	d
SPECIALIZE_PRIM_TYPEUTIL	ndb_type_traits.h	36;"	d
SPINLOCK_BACKOFF	config/config-backoff.h	3;"	d
SRCFILES	Makefile	/^SRCFILES = allocator.cc \\$/;"	m
STATIC_COUNTER_DECL	scopedperf.hh	764;"	d
STATUS_TYPE_H	benchmarks/egen/StatusTypeTable.h	41;"	d
STATUS_TYPE_KEY_FIELDS	benchmarks/tpce.h	354;"	d
STATUS_TYPE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct STATUS_TYPE_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
STATUS_TYPE_VALUE_FIELDS	benchmarks/tpce.h	356;"	d
STDC_HEADERS	masstree/config.h	268;"	d
STEPSIZE	third-party/lz4/lz4.c	234;"	d	file:
STEPSIZE	third-party/lz4/lz4.c	243;"	d	file:
STEPSIZE	third-party/lz4/lz4hc.c	217;"	d	file:
STEPSIZE	third-party/lz4/lz4hc.c	225;"	d	file:
STOCK_DATA_KEY_FIELDS	benchmarks/tpcc.h	132;"	d
STOCK_DATA_VALUE_FIELDS	benchmarks/tpcc.h	135;"	d
STOCK_KEY_FIELDS	benchmarks/tpcc.h	122;"	d
STOCK_VALUE_FIELDS	benchmarks/tpcc.h	125;"	d
STRATEGIES	scripts/tester.py	/^  STRATEGIES = ['epoch', 'epoch-compress']$/;"	v
STREET	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char        STREET[ cAD_LINE_len+1 ];$/;"	m	struct:TPCE::TStreetNameInputRow
STRINGBAG_HH	masstree/stringbag.hh	17;"	d
STRING_BASE_HH	masstree/string_base.hh	17;"	d
STRING_SLICE_HH	masstree/string_slice.hh	17;"	d
STRUCT_EQ_X	record/encoder.h	89;"	d
STRUCT_FIELDPOS_X	record/encoder.h	111;"	d
STRUCT_INITLIST_FIRST_X	record/encoder.h	99;"	d
STRUCT_INITLIST_REST_X	record/encoder.h	102;"	d
STRUCT_LAYOUT_X	record/encoder.h	86;"	d
STRUCT_PARAM_FIRST_X	record/encoder.h	93;"	d
STRUCT_PARAM_REST_X	record/encoder.h	96;"	d
STRUCT_PRINTER_FIRST_X	record/encoder.h	105;"	d
STRUCT_PRINTER_REST_X	record/encoder.h	108;"	d
STRUTIL_H_INCLUDED	benchmarks/egen/strutil.h	42;"	d
STR_HH	masstree/str.hh	17;"	d
STYFILES	masstree/doc/GNUmakefile	/^STYFILES := $(wildcard *.sty)$/;"	m
ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    ST_ID[cST_ID_len+1];$/;"	m	struct:TPCE::STATUS_TYPE_ROW
ST_NAME	benchmarks/egen/Table_Defs.h	/^    char                    ST_NAME[cST_NAME_len+1];$/;"	m	struct:TPCE::STATUS_TYPE_ROW
SUCCESS	benchmarks/egen/error.h	/^        SUCCESS = 0,$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
SUFFIX	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char        SUFFIX[ cAD_LINE_len+1 ];$/;"	m	struct:TPCE::TStreetSuffixInputRow
SYNCLOCK_H	benchmarks/egen/SyncLockInterface.h	38;"	d
SZCODE_ALIGN_BITS	dbcore/sm-oid-impl.h	/^    static size_t const SZCODE_ALIGN_BITS = dynarray::page_bits();$/;"	m	struct:sm_oid_mgr_impl
S_52WK_HIGH	benchmarks/egen/Table_Defs.h	/^    float                   S_52WK_HIGH;$/;"	m	struct:TPCE::SECURITY_ROW
S_52WK_HIGH_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               S_52WK_HIGH_DATE;$/;"	m	struct:TPCE::SECURITY_ROW
S_52WK_LOW	benchmarks/egen/Table_Defs.h	/^    float                   S_52WK_LOW;$/;"	m	struct:TPCE::SECURITY_ROW
S_52WK_LOW_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               S_52WK_LOW_DATE;$/;"	m	struct:TPCE::SECURITY_ROW
S_CO_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TIdent      S_CO_ID;$/;"	m	struct:TPCE::TSecurityInputRow
S_CO_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  S_CO_ID;$/;"	m	struct:TPCE::SECURITY_ROW
S_DIVIDEND	benchmarks/egen/Table_Defs.h	/^    double                  S_DIVIDEND;$/;"	m	struct:TPCE::SECURITY_ROW
S_EXCH_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               S_EXCH_DATE;$/;"	m	struct:TPCE::SECURITY_ROW
S_EX_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    S_EX_ID[ cEX_ID_len+1];$/;"	m	struct:TPCE::TSecurityInputRow
S_EX_ID	benchmarks/egen/Table_Defs.h	/^    char                    S_EX_ID[ cEX_ID_len+1 ];$/;"	m	struct:TPCE::SECURITY_ROW
S_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TIdent      S_ID;$/;"	m	struct:TPCE::TSecurityInputRow
S_ISREG	third-party/lz4/bench.c	42;"	d	file:
S_ISREG	third-party/lz4/fullbench.c	42;"	d	file:
S_ISSUE	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    S_ISSUE[ cS_ISSUE_len+1 ];$/;"	m	struct:TPCE::TSecurityInputRow
S_ISSUE	benchmarks/egen/Table_Defs.h	/^    char                    S_ISSUE[ cS_ISSUE_len+1 ];$/;"	m	struct:TPCE::SECURITY_ROW
S_NAME	benchmarks/egen/Table_Defs.h	/^    char                    S_NAME[ cS_NAME_len+1 ];$/;"	m	struct:TPCE::SECURITY_ROW
S_NUM_OUT	benchmarks/egen/Table_Defs.h	/^    INT64                   S_NUM_OUT;$/;"	m	struct:TPCE::SECURITY_ROW
S_PE	benchmarks/egen/Table_Defs.h	/^    double                  S_PE;$/;"	m	struct:TPCE::SECURITY_ROW
S_START_DATE	benchmarks/egen/Table_Defs.h	/^    CDateTime               S_START_DATE;$/;"	m	struct:TPCE::SECURITY_ROW
S_ST_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    S_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::TSecurityInputRow
S_ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    S_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::SECURITY_ROW
S_SYMB	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::TSecurityInputRow
S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::SECURITY_ROW
S_YIELD	benchmarks/egen/Table_Defs.h	/^    double                  S_YIELD;$/;"	m	struct:TPCE::SECURITY_ROW
SanityCheckCustomer	benchmarks/tpcc.cc	/^  SanityCheckCustomer(const customer::key *k, const customer::value *v)$/;"	f	struct:checker
SanityCheckDistrict	benchmarks/tpcc.cc	/^  SanityCheckDistrict(const district::key *k, const district::value *v)$/;"	f	struct:checker
SanityCheckItem	benchmarks/tpcc.cc	/^  SanityCheckItem(const item::key *k, const item::value *v)$/;"	f	struct:checker
SanityCheckNewOrder	benchmarks/tpcc.cc	/^  SanityCheckNewOrder(const new_order::key *k, const new_order::value *v)$/;"	f	struct:checker
SanityCheckOOrder	benchmarks/tpcc.cc	/^  SanityCheckOOrder(const oorder::key *k, const oorder::value *v)$/;"	f	struct:checker
SanityCheckOrderLine	benchmarks/tpcc.cc	/^  SanityCheckOrderLine(const order_line::key *k, const order_line::value *v)$/;"	f	struct:checker
SanityCheckStock	benchmarks/tpcc.cc	/^  SanityCheckStock(const stock::key *k, const stock::value *v)$/;"	f	struct:checker
SanityCheckWarehouse	benchmarks/tpcc.cc	/^  SanityCheckWarehouse(const warehouse::key *k, const warehouse::value *v)$/;"	f	struct:checker
ScanDone	masstree/kvproto.hh	/^    ScanDone$/;"	e	enum:result_t
SecondsPerDay	benchmarks/egen/DateTime.h	/^const INT32     SecondsPerDay       = SecondsPerMinute * MinutesPerHour * HoursPerDay;$/;"	m	namespace:TPCE
SecondsPerHour	benchmarks/egen/DateTime.h	/^const INT32     SecondsPerHour      = SecondsPerMinute * MinutesPerHour;$/;"	m	namespace:TPCE
SecondsPerMinute	benchmarks/egen/DateTime.h	/^const INT32     SecondsPerMinute        = 60;$/;"	m	namespace:TPCE
SecondsPerWorkDay	benchmarks/egen/DateTime.h	/^const INT32     SecondsPerWorkDay   = SecondsPerMinute * MinutesPerHour * HoursPerWorkDay;$/;"	m	namespace:TPCE
SectorBuffer	benchmarks/egen/shore_tpce_egen.h	/^    SectorBuffer(int c): EgenTupleContainer<SECTOR_ROW>(c){}$/;"	f	class:TPCE::SectorBuffer
SectorBuffer	benchmarks/egen/shore_tpce_egen.h	/^class SectorBuffer: public EgenTupleContainer<SECTOR_ROW>{$/;"	c	namespace:TPCE
SectorRowFmt	benchmarks/egen/Table_Defs.h	/^const char SectorRowFmt[] = "%s|%s\\n";$/;"	m	namespace:TPCE
Sectors	benchmarks/egen/InputFlatFilesStructure.h	/^    TSectorFile                 *Sectors;$/;"	m	class:TPCE::CInputFiles
Securities	benchmarks/egen/InputFlatFilesStructure.h	/^    CSecurityFile               *Securities;$/;"	m	class:TPCE::CInputFiles
SecurityBuffer	benchmarks/egen/shore_tpce_egen.h	/^    SecurityBuffer(int c): EgenTupleContainer<SECURITY_ROW>(c){}$/;"	f	class:TPCE::SecurityBuffer
SecurityBuffer	benchmarks/egen/shore_tpce_egen.h	/^class SecurityBuffer: public EgenTupleContainer<SECURITY_ROW>{$/;"	c	namespace:TPCE
SecurityDetail	benchmarks/tpce.cc	/^		static txn_result SecurityDetail(bench_worker *w)$/;"	f	class:tpce_worker
SecurityDetailMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   SecurityDetailMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
SecurityDetailMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    SecurityDetailMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
SecurityRowFmt	benchmarks/egen/Table_Defs.h	/^const char SecurityRowFmt[] = "%s|%s|%s|%s|%s|%" PRId64 "|%" PRId64 "|%s|%s|%.2f|%.2f|%s|%.2f|%s|%.2f|%.2f\\n";$/;"	m	namespace:TPCE
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CBrokerVolumeSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CCustomerPositionSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CDriverCEPartitionSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CDriverCESettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CDriverDMSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CDriverGlobalSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CDriverMEESettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CLoaderSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CMarketWatchSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CSecurityDetailSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CTradeLookupSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CTradeOrderSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CTradeUpdateSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(CTxnMixGeneratorSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(TDriverCETxnSettings& parms)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(const char *str)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(const char *szPrefix, const char *szMsg)$/;"	f	class:CBaseLogger
SendToLogger	benchmarks/egen/BaseLogger.cpp	/^bool CBaseLogger::SendToLogger(string str)$/;"	f	class:CBaseLogger
SendToLoggerImpl	benchmarks/egen/EGenLogger.h	/^    bool SendToLoggerImpl(const char *szPrefix, const char *szTimestamp, const char *szMsg)$/;"	f	class:TPCE::CEGenLogger
SendToMarket	benchmarks/tpce.cc	/^		bool SendToMarket(TTradeRequest &trade_mes)$/;"	f	class:tpce_worker
SendToMarketFromFrame	benchmarks/egen/TxnHarnessSendToMarketInterface.h	/^    bool SendToMarketFromFrame(TTradeRequest &trade_mes)$/;"	f	class:TPCE::CSendToMarketInterface
SendToMarketFromHarness	benchmarks/egen/TxnHarnessSendToMarketInterface.h	/^    bool SendToMarketFromHarness(TTradeRequest &trade_mes)$/;"	f	class:TPCE::CSendToMarketInterface
SendTradeResult	benchmarks/egen/MEETradingFloor.cpp	/^void CMEETradingFloor::SendTradeResult( PTradeRequest pTradeRequest )$/;"	f	class:CMEETradingFloor
Set	benchmarks/egen/DateTime.cpp	/^void CDateTime::Set(INT32 dayno)$/;"	f	class:CDateTime
Set	benchmarks/egen/DateTime.cpp	/^void CDateTime::Set(INT32 year, INT32 month, INT32 day)$/;"	f	class:CDateTime
Set	benchmarks/egen/DateTime.cpp	/^void CDateTime::Set(INT32 year, INT32 month, INT32 day, INT32 hour, INT32 minute, INT32 second, INT32 msec)$/;"	f	class:CDateTime
Set	benchmarks/egen/WheelTime.cpp	/^void CWheelTime::Set( CDateTime& Base, CDateTime& Now )$/;"	f	class:CWheelTime
Set	benchmarks/egen/WheelTime.cpp	/^void CWheelTime::Set( CDateTime* pBase, CDateTime* pNow )$/;"	f	class:CWheelTime
Set	benchmarks/egen/WheelTime.cpp	/^void CWheelTime::Set( INT32 cycles, INT32 index )$/;"	f	class:CWheelTime
SetActiveCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    void SetActiveCompanyCompetitorCount(TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CCompanyCompetitorFile
SetActiveCompanyCount	benchmarks/egen/CompanyFile.h	/^    void SetActiveCompanyCount(TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CCompanyFile
SetActiveSecurityCount	benchmarks/egen/SecurityFile.h	/^    void SetActiveSecurityCount(TIdent iActiveCustomerCount)$/;"	f	class:TPCE::CSecurityFile
SetBaseTime	benchmarks/egen/MEE.cpp	/^void CMEE::SetBaseTime( void )$/;"	f	class:CMEE
SetClearBufferOption	benchmarks/egen/CE.cpp	/^void CCE::SetClearBufferOption(bool bClearBufferBeforeGeneration)$/;"	f	class:CCE
SetConfiguredCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    void SetConfiguredCompanyCompetitorCount(TIdent iConfiguredCustomerCount)$/;"	f	class:TPCE::CCompanyCompetitorFile
SetConfiguredCompanyCount	benchmarks/egen/CompanyFile.h	/^    void SetConfiguredCompanyCount(TIdent iConfiguredCustomerCount)$/;"	f	class:TPCE::CCompanyFile
SetConfiguredSecurityCount	benchmarks/egen/SecurityFile.h	/^    void SetConfiguredSecurityCount(TIdent iConfiguredCustomerCount)$/;"	f	class:TPCE::CSecurityFile
SetFileName	benchmarks/egen/FlatLoaderFactory.h	/^    void SetFileName(const char* szFileName)$/;"	f	class:TPCE::CFlatLoaderFactory
SetHMS	benchmarks/egen/DateTime.cpp	/^void CDateTime::SetHMS(INT32 hour, INT32 minute, INT32 second, INT32 msec)$/;"	f	class:CDateTime
SetKeySlotsUsed	btree.h	/^  SetKeySlotsUsed(VersionType &v, size_t n)$/;"	f	class:btree_version_manip
SetNextTime	benchmarks/egen/TimerWheel.h	/^INT32 CTimerWheel< T,  T2, Period, Resolution >::SetNextTime( void )$/;"	f	class:TPCE::CTimerWheel
SetPartitionRange	benchmarks/egen/CustomerSelection.cpp	/^void CCustomerSelection::SetPartitionRange(TIdent iStartFromCustomer, TIdent iCustomerCount)$/;"	f	class:CCustomerSelection
SetRNGSeed	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::SetRNGSeed( RNGSEED RNGSeed )$/;"	f	class:CCETxnInputGenerator
SetRNGSeed	benchmarks/egen/CETxnMixGenerator.cpp	/^void CCETxnMixGenerator::SetRNGSeed( RNGSEED RNGSeed )$/;"	f	class:CCETxnMixGenerator
SetRNGSeed	benchmarks/egen/MEETickerTape.cpp	/^void CMEETickerTape::SetRNGSeed( RNGSEED RNGSeed )$/;"	f	class:CMEETickerTape
SetRNGSeed	benchmarks/egen/MEETradingFloor.cpp	/^void CMEETradingFloor::SetRNGSeed( RNGSEED RNGSeed )$/;"	f	class:CMEETradingFloor
SetRoot	btree.h	/^  SetRoot(VersionType &v)$/;"	f	class:btree_version_manip
SetSeed	benchmarks/egen/Random.cpp	/^void CRandom::SetSeed(RNGSEED seed)$/;"	f	class:CRandom
SetToCurrent	benchmarks/egen/DateTime.cpp	/^void CDateTime::SetToCurrent(void)$/;"	f	class:CDateTime
SetToDefaults	benchmarks/egen/DriverParamSettings.h	/^    void SetToDefaults(void)$/;"	f	class:TPCE::CParametersWithDefaults
SetTxnTunables	benchmarks/egen/CE.cpp	/^bool CCE::SetTxnTunables(const PDriverCETxnSettings pTxnParamSettings)$/;"	f	class:CCE
SettlementAmount	benchmarks/egen/TradeGen.h	/^    CMoney                          SettlementAmount;$/;"	m	struct:TPCE::TAdditionalTradeInfo
SettlementBuffer	benchmarks/egen/shore_tpce_egen.h	/^    SettlementBuffer(int c): EgenTupleContainer<SETTLEMENT_ROW>(c){}$/;"	f	class:TPCE::SettlementBuffer
SettlementBuffer	benchmarks/egen/shore_tpce_egen.h	/^class SettlementBuffer: public EgenTupleContainer<SETTLEMENT_ROW>{$/;"	c	namespace:TPCE
SettlementRowFmt	benchmarks/egen/Table_Defs.h	/^const char SettlementRowFmt[] = "%" PRId64 "|%s|%s|%.2f\\n";$/;"	m	namespace:TPCE
SingleValueReader	txn_btree.h	/^  typedef single_value_reader SingleValueReader;$/;"	t	struct:txn_btree_
Size	record/encoder.h	/^Size(const T &t)$/;"	f
StableVersion	btree.h	/^    StableVersion(const std::atomic<uint64_t> &t)$/;"	f	struct:private_::u64manip
StableVersion	btree.h	/^    StableVersion(uint64_t t)$/;"	f	struct:private_::u64manip
StableVersion	btree.h	/^  StableVersion(LoadVersionType v)$/;"	f	class:btree_version_manip
StartTimer	benchmarks/egen/TimerWheel.h	/^INT32 CTimerWheel< T,  T2, Period, Resolution >::StartTimer( double Offset, T2* pExpiryObject, void (T2::* pExpiryFunction) ( T* ), T* pExpiryData )$/;"	f	class:TPCE::CTimerWheel
StatusAndTradeType	benchmarks/egen/TxnHarnessStructs.h	/^    TStatusAndTradeType StatusAndTradeType;$/;"	m	struct:TPCE::TMarketFeedFrame1Input
StatusAndTradeType	benchmarks/egen/TxnHarnessStructs.h	/^    TStatusAndTradeType StatusAndTradeType;$/;"	m	struct:TPCE::TMarketFeedTxnInput
StatusType	benchmarks/egen/InputFlatFilesStructure.h	/^    TStatusTypeFile             *StatusType;$/;"	m	class:TPCE::CInputFiles
StatusTypeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    StatusTypeBuffer(int c): EgenTupleContainer<STATUS_TYPE_ROW>(c){}$/;"	f	class:TPCE::StatusTypeBuffer
StatusTypeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class StatusTypeBuffer: public EgenTupleContainer<STATUS_TYPE_ROW>{$/;"	c	namespace:TPCE
StatusTypeRowFmt	benchmarks/egen/Table_Defs.h	/^const char StatusTypeRowFmt[] = "%s|%s\\n";$/;"	m	namespace:TPCE
Store	btree.h	/^    Store(std::atomic<uint64_t> &t, uint64_t v)$/;"	f	struct:private_::u64manip
Store	btree.h	/^    static inline void Store(uint64_t &t, uint64_t v) { t = v; }$/;"	f	struct:private_::u64manip
Store	btree.h	/^  Store(VersionType &t, uint64_t v)$/;"	f	class:btree_version_manip
Str	masstree/str.hh	/^    Str()$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const String_base<T>& x)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const char *first, const char *last)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const char* s_)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const char* s_, int len_)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const std::string& str)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const uninitialized_type &unused) {$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const unsigned char *first, const unsigned char *last)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^    Str(const unsigned char* s_, int len_)$/;"	f	struct:lcdf::Str
Str	masstree/str.hh	/^struct Str : public String_base<Str> {$/;"	s	namespace:lcdf
Str	masstree/value_bag.hh	/^    typedef lcdf::Str Str;$/;"	t	class:value_bag
Str	masstree/value_string.hh	/^    typedef lcdf::Str Str;$/;"	t	class:value_string
Str	persist_test.cc	/^  Str(uint64_t v)$/;"	f	struct:tidhelpers
Street	benchmarks/egen/InputFlatFilesStructure.h	/^    TStreetNamesFile            *Street;$/;"	m	class:TPCE::CInputFiles
StreetSuffix	benchmarks/egen/InputFlatFilesStructure.h	/^    TStreetSuffixFile           *StreetSuffix;$/;"	m	class:TPCE::CInputFiles
String	masstree/string.cc	/^String::String(double x)$/;"	f	class:lcdf::String
String	masstree/string.cc	/^String::String(int x)$/;"	f	class:lcdf::String
String	masstree/string.cc	/^String::String(long long x)$/;"	f	class:lcdf::String
String	masstree/string.cc	/^String::String(long x)$/;"	f	class:lcdf::String
String	masstree/string.cc	/^String::String(unsigned long long x)$/;"	f	class:lcdf::String
String	masstree/string.cc	/^String::String(unsigned long x)$/;"	f	class:lcdf::String
String	masstree/string.cc	/^String::String(unsigned x)$/;"	f	class:lcdf::String
String	masstree/string.hh	/^    inline String(const char* data, int length, const null_memo&)$/;"	f	class:lcdf::String
String	masstree/string.hh	/^    inline String(const char* data, int length, memo_type* memo) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^class String : public String_base<String> {$/;"	c	namespace:lcdf
String	masstree/string.hh	/^inline String::String()$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(String &&x)$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(bool x)$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(char c) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const String& x)$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const String_base<T> &str) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const char *first, const char *last) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const char* cstr) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const char* s, int len) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const rep_type& r)$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const std::string &str) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const unsigned char* first, const unsigned char* last) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(const unsigned char* s, int len) {$/;"	f	class:lcdf::String
String	masstree/string.hh	/^inline String::String(unsigned char c) {$/;"	f	class:lcdf::String
StringAccum	masstree/straccum.hh	/^class StringAccum { public:$/;"	c	namespace:lcdf
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum() {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(String&& x) {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(StringAccum&& x) {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(const StringAccum &x) {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(const String_base<T> &str) {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(const char *cstr) {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(const char *s, int len) {$/;"	f	class:lcdf::StringAccum
StringAccum	masstree/straccum.hh	/^inline StringAccum::StringAccum(int capacity) {$/;"	f	class:lcdf::StringAccum
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_default_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_kv_get_put_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_kv_scan_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_read_only_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_tpcc_credit_check_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_tpcc_delivery_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_tpcc_new_order_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_tpcc_order_status_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_tpcc_payment_traits
StringAllocator	benchmarks/ndb_wrapper_impl.h	/^  typedef str_arena StringAllocator;$/;"	t	struct:hint_tpcc_stock_level_traits
StringAllocator	txn.h	/^  typedef util::default_string_allocator StringAllocator;$/;"	t	struct:default_transaction_traits
String_base	masstree/string_base.hh	/^class String_base {$/;"	c	namespace:lcdf
String_generic	masstree/string_base.hh	/^class String_generic {$/;"	c	namespace:lcdf
SubmissionTime	benchmarks/egen/TradeGen.h	/^    double          SubmissionTime; \/\/ seconds from StartTime$/;"	m	struct:TPCE::TTradeInfo
SubmitTradeRequest	benchmarks/egen/MEE.cpp	/^INT32 CMEE::SubmitTradeRequest( PTradeRequest pTradeRequest )$/;"	f	class:CMEE
SubmitTradeRequest	benchmarks/egen/MEETradingFloor.cpp	/^INT32 CMEETradingFloor::SubmitTradeRequest( PTradeRequest pTradeRequest )$/;"	f	class:CMEETradingFloor
TABLE_CONSTS_H	benchmarks/egen/TableConsts.h	42;"	d
TABLE_DEFS_H	benchmarks/egen/Table_Defs.h	42;"	d
TABLE_TEMPLATE_H	benchmarks/egen/TableTemplate.h	42;"	d
TAXRATE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct TAXRATE_ROW$/;"	s	namespace:TPCE
TAXRATE_TABLE_H	benchmarks/egen/TaxrateTable.h	41;"	d
TAX_ID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    TAX_ID[ cTX_ID_len+1 ];$/;"	m	struct:TPCE::TTaxRateInputRow
TAX_NAME	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    TAX_NAME[ cTX_NAME_len+1 ];$/;"	m	struct:TPCE::TTaxRateInputRow
TAX_RATE	benchmarks/egen/InputFlatFilesDeclarations.h	/^    double  TAX_RATE;   \/\/the actual taxrate - needed to calculate tax for the TRADE table$/;"	m	struct:TPCE::TTaxRateInputRow
TAX_RATE_KEY_FIELDS	benchmarks/tpce.h	360;"	d
TAX_RATE_VALUE_FIELDS	benchmarks/tpce.h	362;"	d
TAccountNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TAccountNameInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TAdditionalTradeInfo	benchmarks/egen/TradeGen.h	/^typedef struct TAdditionalTradeInfo$/;"	s	namespace:TPCE
TAreaCodeFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TAreaCodeInputRow, TAreaCodesLimits>             TAreaCodeFile;$/;"	t	namespace:TPCE
TAreaCodeInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TAreaCodeInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TAreaCodesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TAreaCodesLimits()$/;"	f	struct:TPCE::TAreaCodesLimits
TAreaCodesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TAreaCodesLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TBaseElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TBaseElementsLimits()$/;"	f	struct:TPCE::TBaseElementsLimits
TBaseElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TBaseElementsLimits$/;"	s	namespace:TPCE
TBaseInputRow	benchmarks/egen/Table_Defs.h	/^typedef struct TBaseInputRow$/;"	s	namespace:TPCE
TBaseKeyElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TBaseKeyElementsLimits()$/;"	f	struct:TPCE::TBaseKeyElementsLimits
TBaseKeyElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TBaseKeyElementsLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TBrokerVolumeFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^     TBrokerVolumeFrame1Input,  \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TBrokerVolumeTxnInput
TBrokerVolumeFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TBrokerVolumeFrame1Output$/;"	s	namespace:TPCE
TBrokerVolumeSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TBrokerVolumeSettings$/;"	s	namespace:TPCE
TBrokerVolumeSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TBrokerVolumeSettingsState$/;"	s	namespace:TPCE
TBrokerVolumeTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TBrokerVolumeTxnInput$/;"	s	namespace:TPCE
TBrokerVolumeTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TBrokerVolumeTxnOutput$/;"	s	namespace:TPCE
TChargeFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<CHARGE_ROW, TChargeLimits>                        TChargeFile;$/;"	t	namespace:TPCE
TChargeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TChargeLimits()$/;"	f	struct:TPCE::TChargeLimits
TChargeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TChargeLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TCommissionRateFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<COMMISSION_RATE_ROW, TCommissionRateLimits>       TCommissionRateFile;$/;"	t	namespace:TPCE
TCommissionRateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TCommissionRateLimits()$/;"	f	struct:TPCE::TCommissionRateLimits
TCommissionRateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCommissionRateLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TCompanyCompetitorInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCompanyCompetitorInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TCompanyCompetitorLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TCompanyCompetitorLimits()$/;"	f	struct:TPCE::TCompanyCompetitorLimits
TCompanyCompetitorLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCompanyCompetitorLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TCompanyInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCompanyInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TCompanyLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TCompanyLimits()$/;"	f	struct:TPCE::TCompanyLimits
TCompanyLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCompanyLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TCompanySPRateFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TCompanySPRateInputRow, TCompanySPRateLimits>    TCompanySPRateFile;$/;"	t	namespace:TPCE
TCompanySPRateInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCompanySPRateInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TCompanySPRateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TCompanySPRateLimits()$/;"	f	struct:TPCE::TCompanySPRateLimits
TCompanySPRateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TCompanySPRateLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TCustomerHoldingArray	benchmarks/egen/TradeGen.h	/^typedef THoldingList TCustomerHoldingArray[iMaxSecuritiesPerAccount];$/;"	t	namespace:TPCE
TCustomerPositionFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TCustomerPositionFrame1Input$/;"	s	namespace:TPCE
TCustomerPositionFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TCustomerPositionFrame1Output$/;"	s	namespace:TPCE
TCustomerPositionFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TCustomerPositionFrame2Input$/;"	s	namespace:TPCE
TCustomerPositionFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TCustomerPositionFrame2Output$/;"	s	namespace:TPCE
TCustomerPositionSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TCustomerPositionSettings$/;"	s	namespace:TPCE
TCustomerPositionSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TCustomerPositionSettingsState$/;"	s	namespace:TPCE
TCustomerPositionTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TCustomerPositionTxnInput$/;"	s	namespace:TPCE
TCustomerPositionTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TCustomerPositionTxnOutput$/;"	s	namespace:TPCE
TDailyHistory	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TDailyHistory$/;"	s	namespace:TPCE
TDataMaintenanceFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^     TDataMaintenanceFrame1Input,   \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TDataMaintenanceTxnInput
TDataMaintenanceTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TDataMaintenanceTxnInput$/;"	s	namespace:TPCE
TDataMaintenanceTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TDataMaintenanceTxnOutput$/;"	s	namespace:TPCE
TDriverCEPartitionSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TDriverCEPartitionSettings$/;"	s	namespace:TPCE
TDriverCEPartitionSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TDriverCEPartitionSettingsState$/;"	s	namespace:TPCE
TDriverCESettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TDriverCESettings$/;"	s	namespace:TPCE
TDriverCETxnSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TDriverCETxnSettings$/;"	s	namespace:TPCE
TDriverDMSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TDriverDMSettings$/;"	s	namespace:TPCE
TDriverGlobalSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TDriverGlobalSettings$/;"	s	namespace:TPCE
TDriverGlobalSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TDriverGlobalSettingsState$/;"	s	namespace:TPCE
TDriverMEESettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TDriverMEESettings$/;"	s	namespace:TPCE
TEST	masstree/msgpacktest.cc	59;"	d	file:
TESTRUNNER_SIGNATURE	masstree/mtclient.cc	371;"	d	file:
TESTRUNNER_SIGNATURE	masstree/mttest.cc	491;"	d	file:
TExchangeFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<EXCHANGE_ROW, TExchangeLimits>                    TExchangeFile;$/;"	t	namespace:TPCE
TExchangeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TExchangeLimits()$/;"	f	struct:TPCE::TExchangeLimits
TExchangeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TExchangeLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TFemaleFirstNamesFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TFirstNameInputRow, TFemaleFirstNamesLimits>     TFemaleFirstNamesFile;$/;"	t	namespace:TPCE
TFemaleFirstNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TFemaleFirstNamesLimits()$/;"	f	struct:TPCE::TFemaleFirstNamesLimits
TFemaleFirstNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TFemaleFirstNamesLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TFinInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TFinInfo$/;"	s	namespace:TPCE
TFirstNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TFirstNameInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
THREADING_H_INCLUDED	benchmarks/egen/threading.h	38;"	d
THREADING_PTHREAD_H_INCLUDED	benchmarks/egen/threading_pthread.h	45;"	d
THREADING_SINGLE_H_INCLUDED	benchmarks/egen/threading_single.h	43;"	d
THREADS	benchmarks/results/tom-1-22-13.py	/^THREADS = (1, 2, 4, 8, 16, 24, 32, 40, 48)$/;"	v
THREADS	benchmarks/results/tom-2-6-13.py	/^THREADS = (1, 2, 4, 8, 16, 24, 32, 40, 48)$/;"	v
THREADS	benchmarks/runner.py	/^  THREADS = get_scale_threads(4)$/;"	v
THROW_IF	dbcore/sm-exceptions.h	40;"	d
THROW_UNLESS	dbcore/sm-exceptions.h	46;"	d
TH_DTS	benchmarks/egen/Table_Defs.h	/^    CDateTime               TH_DTS;$/;"	m	struct:TPCE::TRADE_HISTORY_ROW
TH_ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    TH_ST_ID[cST_ID_len+1];$/;"	m	struct:TPCE::TRADE_HISTORY_ROW
TH_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  TH_T_ID;$/;"	m	struct:TPCE::TRADE_HISTORY_ROW
THoldingInfo	benchmarks/egen/TradeGen.h	/^typedef struct THoldingInfo$/;"	s	namespace:TPCE
THoldingList	benchmarks/egen/TradeGen.h	/^typedef list<THoldingInfo> THoldingList;$/;"	t	namespace:TPCE
TIMELOOP	third-party/lz4/bench.c	99;"	d	file:
TIMELOOP	third-party/lz4/fullbench.c	105;"	d	file:
TIMER_WHEEL_H	benchmarks/egen/TimerWheel.h	43;"	d
TIMER_WHEEL_TIMER_H	benchmarks/egen/TimerWheelTimer.h	42;"	d
TIMESTAMP_HH	masstree/timestamp.hh	17;"	d
TIMESTAMP_STRUCT	benchmarks/egen/DateTime.h	/^} TIMESTAMP_STRUCT;$/;"	t	namespace:TPCE	typeref:struct:TPCE::tagTIMESTAMP_STRUCT
TIME_FORMAT	benchmarks/egen/FlatFileLoader.h	58;"	d
TI_CHECKPOINT	masstree/kvthread.hh	/^	TI_MAIN, TI_PROCESS, TI_LOG, TI_CHECKPOINT$/;"	e	enum:threadinfo::__anon71
TI_LOG	masstree/kvthread.hh	/^	TI_MAIN, TI_PROCESS, TI_LOG, TI_CHECKPOINT$/;"	e	enum:threadinfo::__anon71
TI_MAIN	masstree/kvthread.hh	/^	TI_MAIN, TI_PROCESS, TI_LOG, TI_CHECKPOINT$/;"	e	enum:threadinfo::__anon71
TI_PROCESS	masstree/kvthread.hh	/^	TI_MAIN, TI_PROCESS, TI_LOG, TI_CHECKPOINT$/;"	e	enum:threadinfo::__anon71
TIdent	benchmarks/egen/EGenStandardTypes.h	/^typedef long long   TIdent;$/;"	t
TIndustryFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<INDUSTRY_ROW, TIndustryLimits>                    TIndustryFile;$/;"	t	namespace:TPCE
TIndustryLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TIndustryLimits()$/;"	f	struct:TPCE::TIndustryLimits
TIndustryLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TIndustryLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TLF1_ERROR1	benchmarks/egen/error.h	/^        TLF1_ERROR1 = -611,     \/\/ num_found <> max_trades$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF2_ERROR1	benchmarks/egen/error.h	/^        TLF2_ERROR1 = -621,     \/\/ num_found not in [0..max_trades]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF2_WARN1	benchmarks/egen/error.h	/^        TLF2_WARN1  = +621,     \/\/ num_found == 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF3_ERROR1	benchmarks/egen/error.h	/^        TLF3_ERROR1 = -631,     \/\/ num_found not in [0..max_trades]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF3_WARN1	benchmarks/egen/error.h	/^        TLF3_WARN1  = +631,     \/\/ num_found == 0 $/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF4_ERROR1	benchmarks/egen/error.h	/^        TLF4_ERROR1 = -641,     \/\/ num_trades_found not in [0..1]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF4_ERROR2	benchmarks/egen/error.h	/^        TLF4_ERROR2 = -642,     \/\/ num_found not in [1..20]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLF4_WARN1	benchmarks/egen/error.h	/^        TLF4_WARN1  = +641,     \/\/ num_trades_found == 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TLS_BUFSIZE	dbcore/sm-trace.cpp	/^enum { TLS_BUFSIZE=128 };$/;"	e	enum:TRACER::__anon84	file:
TL_settings	benchmarks/egen/DriverParamSettings.h	/^    CTradeLookupSettings        TL_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
TLastNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TLastNameInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TLastNamesFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TLastNameInputRow, TLastNamesLimits>             TLastNamesFile;$/;"	t	namespace:TPCE
TLastNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TLastNamesLimits()$/;"	f	struct:TPCE::TLastNamesLimits
TLastNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TLastNamesLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TLoaderSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TLoaderSettings$/;"	s	namespace:TPCE
TLoaderSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TLoaderSettingsState$/;"	s	namespace:TPCE
TMaleFirstNamesFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TFirstNameInputRow, TMaleFirstNamesLimits>       TMaleFirstNamesFile;$/;"	t	namespace:TPCE
TMaleFirstNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TMaleFirstNamesLimits()$/;"	f	struct:TPCE::TMaleFirstNamesLimits
TMaleFirstNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TMaleFirstNamesLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TMarketFeedFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketFeedFrame1Input$/;"	s	namespace:TPCE
TMarketFeedFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketFeedFrame1Output$/;"	s	namespace:TPCE
TMarketFeedTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketFeedTxnInput$/;"	s	namespace:TPCE
TMarketFeedTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketFeedTxnOutput$/;"	s	namespace:TPCE
TMarketWatchFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^     TMarketWatchFrame1Input,   \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TMarketWatchTxnInput
TMarketWatchFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketWatchFrame1Output$/;"	s	namespace:TPCE
TMarketWatchSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TMarketWatchSettings$/;"	s	namespace:TPCE
TMarketWatchSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TMarketWatchSettingsState$/;"	s	namespace:TPCE
TMarketWatchTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketWatchTxnInput$/;"	s	namespace:TPCE
TMarketWatchTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TMarketWatchTxnOutput$/;"	s	namespace:TPCE
TMutex	benchmarks/egen/EGenStandardTypes.h	/^typedef CRITICAL_SECTION    TMutex;$/;"	t
TMutex	benchmarks/egen/EGenStandardTypes.h	/^typedef pthread_mutex_t TMutex;$/;"	t
TNews	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TNews$/;"	s	namespace:TPCE
TNewsFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TNewsInputRow, TNewsLimits>                      TNewsFile;$/;"	t	namespace:TPCE
TNewsInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TNewsInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TNewsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TNewsLimits()$/;"	f	struct:TPCE::TNewsLimits
TNewsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TNewsLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TNonTaxableAccountNameFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<TAccountNameInputRow, TNonTaxableAccountNameLimits> TNonTaxableAccountNameFile;$/;"	t	namespace:TPCE
TNonTaxableAccountNameLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TNonTaxableAccountNameLimits()$/;"	f	struct:TPCE::TNonTaxableAccountNameLimits
TNonTaxableAccountNameLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TNonTaxableAccountNameLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TOF1_ERROR1	benchmarks/egen/error.h	/^        TOF1_ERROR1 = -711,     \/\/ num_found <> 1$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TOF2_ERROR1	benchmarks/egen/error.h	/^        TOF2_ERROR1 = -721,     \/\/ ap_acl[0] == '\\0'$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TOF3_ERROR1	benchmarks/egen/error.h	/^        TOF3_ERROR1 = -731,     \/\/ tax_amount == 0 (for profitable, taxable trade)$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TOF3_ERROR2	benchmarks/egen/error.h	/^        TOF3_ERROR2 = -732,     \/\/ comm_rate == 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TOF3_ERROR3	benchmarks/egen/error.h	/^        TOF3_ERROR3 = -733,     \/\/ charge_amount == 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TOP	Makefile	/^TOP     := $(shell echo $${PWD-`pwd`})$/;"	m
TO_settings	benchmarks/egen/DriverParamSettings.h	/^    CTradeOrderSettings         TO_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
TPCC_REALISTIC_MIX	benchmarks/results/make_graphs-6.py	/^TPCC_REALISTIC_MIX=[39, 37, 4, 10, 10]$/;"	v
TPCC_REALISTIC_MIX	benchmarks/runner.py	/^TPCC_REALISTIC_MIX='39,37,4,10,10'$/;"	v
TPCC_REGULAR_MIX	benchmarks/results/make_graphs-6.py	/^TPCC_REGULAR_MIX=[45, 43, 4, 4, 4]$/;"	v
TPCC_STANDARD_MIX	benchmarks/runner.py	/^TPCC_STANDARD_MIX='45,43,4,4,4'$/;"	v
TPCC_TABLE_LIST	benchmarks/tpcc.cc	/^    TPCC_TABLE_LIST(DEFN_TBL_INIT_X)$/;"	f	class:tpcc_worker_mixin
TPCC_TABLE_LIST	benchmarks/tpcc.cc	29;"	d	file:
TPCE	benchmarks/MEESUT.h	/^namespace TPCE{$/;"	n
TPCE	benchmarks/egen/AddressTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/BaseLoader.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/BaseLoaderFactory.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/BaseLogFormatter.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/BaseLogger.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/BigMath.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/Brokers.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CE.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CESUTInterface.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CETxnInputGenerator.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CETxnMixGenerator.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/ChargeTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CommissionRateTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CompanyCompetitorFile.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CompanyCompetitorTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CompanyFile.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CompanyTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CustomerSelection.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CustomerTable.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/CustomerTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/CustomerTaxratesTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/DM.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/DMSUTInterface.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/DailyMarketTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/DateTime.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/DateTime.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/DriverParamSettings.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/DriverTypes.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenError.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenGenerateAndLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenGenerateAndLoadBaseOutput.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenGenerateAndLoadStandardOutput.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenLogFormatterTab.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenLogger.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/EGenVersion.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/EGenVersion.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/ExchangeTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FinalTransform.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FinancialTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FixedArray.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FixedMap.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatAccountPermissionLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatAddressLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatBrokerLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCashTransactionLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatChargeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCommissionRateLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCompanyCompetitorLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCompanyLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCustomerAccountLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCustomerLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatCustomerTaxrateLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatDailyMarketLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatExchangeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatFile.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatFileLoader.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/FlatFileLoader.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatFinancialLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatHoldingHistoryLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatHoldingLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatHoldingSummaryLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatIndustryLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatLastTradeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatLoaderFactory.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatNewsItemLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatNewsXRefLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatSectorLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatSecurityLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatSettlementLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatStatusTypeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatTaxrateLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatTradeHistoryLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatTradeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatTradeRequestLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatTradeTypeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatWatchItemLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatWatchListLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/FlatZipCodeLoad.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/HoldingsAndTradesTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/IndustryTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/InputFile.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/InputFileNoWeight.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/InputFlatFilesDeclarations.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/InputFlatFilesStructure.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/InputFlatFilesStructure.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/LastTradeTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEE.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEEPriceBoard.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEESUTInterface.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEESecurity.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEETickerTape.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEETradeRequestActions.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MEETradingFloor.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/MiscConsts.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/Money.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/Money.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/NewsItemAndXRefTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/NullLoader.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/NullLoaderFactory.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/Person.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/RNGSeeds.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/Random.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/SectorTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/SecurityFile.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/SecurityPriceRange.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/SecurityTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/StatusTypeTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/SyncLockInterface.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TableConsts.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TableTemplate.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/Table_Defs.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TaxrateTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TimerWheel.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TimerWheelTimer.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TradeGen.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/TradeGen.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TradeTypeIDs.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TradeTypeTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessBrokerVolume.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessCustomerPosition.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessDBInterface.h	/^namespace TPCE {$/;"	n
TPCE	benchmarks/egen/TxnHarnessDataMaintenance.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessMarketFeed.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessMarketWatch.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessSecurityDetail.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessSendToMarketInterface.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessStructs.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessTradeCleanup.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessTradeLookup.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessTradeOrder.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessTradeResult.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessTradeStatus.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/TxnHarnessTradeUpdate.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/WatchListsAndItemsTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/Wheel.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/WheelTime.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/ZipCodeTable.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/bucketsimulator.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/bucketsimulator.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/error.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/locking.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/locking.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/progressmeter.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/progressmeter.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/progressmeterinterface.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/progressmeterinterface.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/shore_tpce_egen.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/strutil.cpp	/^namespace TPCE {$/;"	n	file:
TPCE	benchmarks/egen/strutil.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/threading.cpp	/^namespace TPCE$/;"	n	file:
TPCE	benchmarks/egen/threading.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/threading_pthread.h	/^namespace TPCE$/;"	n
TPCE	benchmarks/egen/threading_single.h	/^namespace TPCE$/;"	n
TPCE_TABLE_LIST	benchmarks/tpce.cc	/^			TPCE_TABLE_LIST(DEFN_TBL_INIT_X)$/;"	f	class:tpce_worker_mixin
TPCE_TABLE_LIST	benchmarks/tpce.h	375;"	d
TRACER	dbcore/sm-trace.cpp	/^namespace TRACER {$/;"	n	file:
TRACER	dbcore/sm-trace.h	/^namespace TRACER {$/;"	n
TRACE_FOOTPRINT_S	Makefile	/^TRACE_FOOTPRINT_S=$(strip $(TRACE_FOOTPRINT))$/;"	m
TRADE_GEN_H	benchmarks/egen/TradeGen.h	48;"	d
TRADE_HISTORY_KEY_FIELDS	benchmarks/tpce.h	190;"	d
TRADE_HISTORY_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct TRADE_HISTORY_ROW$/;"	s	namespace:TPCE
TRADE_HISTORY_VALUE_FIELDS	benchmarks/tpce.h	193;"	d
TRADE_KEY_FIELDS	benchmarks/tpce.h	171;"	d
TRADE_LOOKUP	benchmarks/egen/CE.h	/^    static const INT32 TRADE_LOOKUP             = CCETxnMixGenerator::TRADE_LOOKUP;$/;"	m	class:TPCE::CCE
TRADE_LOOKUP	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 TRADE_LOOKUP             =  5;$/;"	m	class:TPCE::CCETxnMixGenerator
TRADE_ORDER	benchmarks/egen/CE.h	/^    static const INT32 TRADE_ORDER              = CCETxnMixGenerator::TRADE_ORDER;$/;"	m	class:TPCE::CCE
TRADE_ORDER	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 TRADE_ORDER              =  6;$/;"	m	class:TPCE::CCETxnMixGenerator
TRADE_REQUEST_KEY_FIELDS	benchmarks/tpce.h	197;"	d
TRADE_REQUEST_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct TRADE_REQUEST_ROW$/;"	s	namespace:TPCE
TRADE_REQUEST_VALUE_FIELDS	benchmarks/tpce.h	200;"	d
TRADE_RESULT	benchmarks/egen/CE.h	/^    static const INT32 TRADE_RESULT             = CCETxnMixGenerator::TRADE_RESULT;$/;"	m	class:TPCE::CCE
TRADE_RESULT	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 TRADE_RESULT             =  9;$/;"	m	class:TPCE::CCETxnMixGenerator
TRADE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct TRADE_ROW$/;"	s	namespace:TPCE
TRADE_STATUS	benchmarks/egen/CE.h	/^    static const INT32 TRADE_STATUS             = CCETxnMixGenerator::TRADE_STATUS;$/;"	m	class:TPCE::CCE
TRADE_STATUS	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 TRADE_STATUS             =  4;$/;"	m	class:TPCE::CCETxnMixGenerator
TRADE_TYPE_IDS_H	benchmarks/egen/TradeTypeIDs.h	45;"	d
TRADE_TYPE_KEY_FIELDS	benchmarks/tpce.h	207;"	d
TRADE_TYPE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct TRADE_TYPE_ROW$/;"	s	namespace:TPCE
TRADE_TYPE_TABLE_H	benchmarks/egen/TradeTypeTable.h	41;"	d
TRADE_TYPE_VALUE_FIELDS	benchmarks/tpce.h	209;"	d
TRADE_UPDATE	benchmarks/egen/CE.h	/^    static const INT32 TRADE_UPDATE             = CCETxnMixGenerator::TRADE_UPDATE;$/;"	m	class:TPCE::CCE
TRADE_UPDATE	benchmarks/egen/CETxnMixGenerator.h	/^    static const INT32 TRADE_UPDATE             =  7;$/;"	m	class:TPCE::CCETxnMixGenerator
TRADE_VALUE_FIELDS	benchmarks/tpce.h	173;"	d
TRBuffer	benchmarks/MEESUT.h	/^class TRBuffer: public InputBuffer<TPCE::TTradeResultTxnInput>{$/;"	c	namespace:TPCE
TRF1_ERROR1	benchmarks/egen/error.h	/^        TRF1_ERROR1 = -811,     \/\/ num_found <> 1$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TRF3_ERROR1	benchmarks/egen/error.h	/^        TRF3_ERROR1 = -831,     \/\/ tax_amount < 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TRF4_ERROR1	benchmarks/egen/error.h	/^        TRF4_ERROR1 = -841,     \/\/ comm_rate <= 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TRQueue	benchmarks/MEESUT.h	/^    TRBuffer* TRQueue;$/;"	m	class:TPCE::CMEESUT
TR_BID_PRICE	benchmarks/egen/Table_Defs.h	/^    double                  TR_BID_PRICE;$/;"	m	struct:TPCE::TRADE_REQUEST_ROW
TR_B_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  TR_B_ID;$/;"	m	struct:TPCE::TRADE_REQUEST_ROW
TR_QTY	benchmarks/egen/Table_Defs.h	/^    int                     TR_QTY;$/;"	m	struct:TPCE::TRADE_REQUEST_ROW
TR_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    TR_S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::TRADE_REQUEST_ROW
TR_TT_ID	benchmarks/egen/Table_Defs.h	/^    char                    TR_TT_ID[ cTT_ID_len+1 ];$/;"	m	struct:TPCE::TRADE_REQUEST_ROW
TR_T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  TR_T_ID;$/;"	m	struct:TPCE::TRADE_REQUEST_ROW
TSF1_ERROR1	benchmarks/egen/error.h	/^        TSF1_ERROR1 = -911,     \/\/ num_found <> max_trade_status_len$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TSectorFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<SECTOR_ROW, TSectorLimits>                        TSectorFile;$/;"	t	namespace:TPCE
TSectorLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TSectorLimits()$/;"	f	struct:TPCE::TSectorLimits
TSectorLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TSectorLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TSecurityDetailFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^     TSecurityDetailFrame1Input,    \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TSecurityDetailTxnInput
TSecurityDetailFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TSecurityDetailFrame1Output$/;"	s	namespace:TPCE
TSecurityDetailSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TSecurityDetailSettings$/;"	s	namespace:TPCE
TSecurityDetailSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TSecurityDetailSettingsState$/;"	s	namespace:TPCE
TSecurityDetailTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TSecurityDetailTxnInput$/;"	s	namespace:TPCE
TSecurityDetailTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TSecurityDetailTxnOutput$/;"	s	namespace:TPCE
TSecurityInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TSecurityInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TSecurityLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TSecurityLimits()$/;"	f	struct:TPCE::TSecurityLimits
TSecurityLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TSecurityLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TStatusAndTradeType	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TStatusAndTradeType$/;"	s	namespace:TPCE
TStatusTypeFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<STATUS_TYPE_ROW, TStatusTypeLimits>               TStatusTypeFile;$/;"	t	namespace:TPCE
TStatusTypeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TStatusTypeLimits()$/;"	f	struct:TPCE::TStatusTypeLimits
TStatusTypeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TStatusTypeLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TStreetNameInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TStreetNameInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TStreetNamesFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TStreetNameInputRow, TStreetNamesLimits>         TStreetNamesFile;$/;"	t	namespace:TPCE
TStreetNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TStreetNamesLimits()$/;"	f	struct:TPCE::TStreetNamesLimits
TStreetNamesLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TStreetNamesLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TStreetSuffixFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TStreetSuffixInputRow, TStreetSuffixLimits>      TStreetSuffixFile;$/;"	t	namespace:TPCE
TStreetSuffixInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TStreetSuffixInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TStreetSuffixLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TStreetSuffixLimits()$/;"	f	struct:TPCE::TStreetSuffixLimits
TStreetSuffixLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TStreetSuffixLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
TT_ID	benchmarks/egen/Table_Defs.h	/^    char                    TT_ID[ cTT_ID_len+1 ];$/;"	m	struct:TPCE::TRADE_TYPE_ROW
TT_IS_MRKT	benchmarks/egen/Table_Defs.h	/^    bool                    TT_IS_MRKT;$/;"	m	struct:TPCE::TRADE_TYPE_ROW
TT_IS_SELL	benchmarks/egen/Table_Defs.h	/^    bool                    TT_IS_SELL;$/;"	m	struct:TPCE::TRADE_TYPE_ROW
TT_NAME	benchmarks/egen/Table_Defs.h	/^    char                    TT_NAME[ cTT_NAME_len+1 ];$/;"	m	struct:TPCE::TRADE_TYPE_ROW
TTaxRateInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TTaxRateInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TTaxRatesCountryFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFileNoWeight<TTaxRateInputRow>                        TTaxRatesCountryFile;$/;"	t	namespace:TPCE
TTaxRatesDivisionFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFileNoWeight<TTaxRateInputRow>                        TTaxRatesDivisionFile;$/;"	t	namespace:TPCE
TTaxableAccountNameFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<TAccountNameInputRow, TTaxableAccountNameLimits>  TTaxableAccountNameFile;$/;"	t	namespace:TPCE
TTaxableAccountNameLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TTaxableAccountNameLimits()$/;"	f	struct:TPCE::TTaxableAccountNameLimits
TTaxableAccountNameLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TTaxableAccountNameLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TTaxrateFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<TAXRATE_ROW, TTaxrateLimits>                      TTaxrateFile;$/;"	t	namespace:TPCE
TTaxrateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TTaxrateLimits()$/;"	f	struct:TPCE::TTaxrateLimits
TTaxrateLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TTaxrateLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TThread	benchmarks/egen/EGenStandardTypes.h	/^typedef HANDLE              TThread;$/;"	t
TThread	benchmarks/egen/EGenStandardTypes.h	/^typedef pthread_t       TThread;$/;"	t
TThreadAttr	benchmarks/egen/EGenStandardTypes.h	/^typedef pthread_attr_t  TThreadAttr;$/;"	t
TTickerEntry	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTickerEntry$/;"	s	namespace:TPCE
TTrade	benchmarks/egen/EGenStandardTypes.h	/^typedef long long   TTrade;$/;"	t
TTradeCleanupFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^     TTradeCleanupFrame1Input,  \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeCleanupTxnInput
TTradeCleanupTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeCleanupTxnInput$/;"	s	namespace:TPCE
TTradeCleanupTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeCleanupTxnOutput$/;"	s	namespace:TPCE
TTradeInfo	benchmarks/egen/TradeGen.h	/^typedef struct TTradeInfo$/;"	s	namespace:TPCE
TTradeLookupFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame1Input$/;"	s	namespace:TPCE
TTradeLookupFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame1Output$/;"	s	namespace:TPCE
TTradeLookupFrame1TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame1TradeInfo$/;"	s	namespace:TPCE
TTradeLookupFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame2Input$/;"	s	namespace:TPCE
TTradeLookupFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame2Output$/;"	s	namespace:TPCE
TTradeLookupFrame2TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame2TradeInfo$/;"	s	namespace:TPCE
TTradeLookupFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame3Input$/;"	s	namespace:TPCE
TTradeLookupFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame3Output$/;"	s	namespace:TPCE
TTradeLookupFrame3TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame3TradeInfo$/;"	s	namespace:TPCE
TTradeLookupFrame4Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame4Input$/;"	s	namespace:TPCE
TTradeLookupFrame4Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame4Output$/;"	s	namespace:TPCE
TTradeLookupFrame4TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupFrame4TradeInfo$/;"	s	namespace:TPCE
TTradeLookupSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TTradeLookupSettings$/;"	s	namespace:TPCE
TTradeLookupSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TTradeLookupSettingsState$/;"	s	namespace:TPCE
TTradeLookupTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupTxnInput$/;"	s	namespace:TPCE
TTradeLookupTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeLookupTxnOutput$/;"	s	namespace:TPCE
TTradeOrderFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame1Input$/;"	s	namespace:TPCE
TTradeOrderFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame1Output$/;"	s	namespace:TPCE
TTradeOrderFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame2Input$/;"	s	namespace:TPCE
TTradeOrderFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame2Output$/;"	s	namespace:TPCE
TTradeOrderFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame3Input$/;"	s	namespace:TPCE
TTradeOrderFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame3Output$/;"	s	namespace:TPCE
TTradeOrderFrame4Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame4Input$/;"	s	namespace:TPCE
TTradeOrderFrame4Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderFrame4Output$/;"	s	namespace:TPCE
TTradeOrderSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TTradeOrderSettings$/;"	s	namespace:TPCE
TTradeOrderSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TTradeOrderSettingsState$/;"	s	namespace:TPCE
TTradeOrderTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderTxnInput$/;"	s	namespace:TPCE
TTradeOrderTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeOrderTxnOutput$/;"	s	namespace:TPCE
TTradeRequest	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeRequest$/;"	s	namespace:TPCE
TTradeResultFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame1Input$/;"	s	namespace:TPCE
TTradeResultFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame1Output$/;"	s	namespace:TPCE
TTradeResultFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame2Input$/;"	s	namespace:TPCE
TTradeResultFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame2Output$/;"	s	namespace:TPCE
TTradeResultFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame3Input$/;"	s	namespace:TPCE
TTradeResultFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame3Output$/;"	s	namespace:TPCE
TTradeResultFrame4Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame4Input$/;"	s	namespace:TPCE
TTradeResultFrame4Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame4Output$/;"	s	namespace:TPCE
TTradeResultFrame5Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame5Input$/;"	s	namespace:TPCE
TTradeResultFrame6Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame6Input$/;"	s	namespace:TPCE
TTradeResultFrame6Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultFrame6Output$/;"	s	namespace:TPCE
TTradeResultTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultTxnInput$/;"	s	namespace:TPCE
TTradeResultTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeResultTxnOutput$/;"	s	namespace:TPCE
TTradeRow	benchmarks/egen/TradeGen.h	/^typedef struct TTradeRow$/;"	s	namespace:TPCE
TTradeStatusFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^     TTradeStatusFrame1Input,   \/\/ Single-Frame transaction$/;"	t	namespace:TPCE	typeref:struct:TPCE::TTradeStatusTxnInput
TTradeStatusFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeStatusFrame1Output$/;"	s	namespace:TPCE
TTradeStatusTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeStatusTxnInput$/;"	s	namespace:TPCE
TTradeStatusTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeStatusTxnOutput$/;"	s	namespace:TPCE
TTradeTypeFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CFlatFile<TRADE_TYPE_ROW, TTradeTypeLimits>                 TTradeTypeFile;$/;"	t	namespace:TPCE
TTradeTypeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TTradeTypeLimits()$/;"	f	struct:TPCE::TTradeTypeLimits
TTradeTypeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TTradeTypeLimits : public TBaseElementsLimits$/;"	s	namespace:TPCE
TTradeUpdateFrame1Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame1Input$/;"	s	namespace:TPCE
TTradeUpdateFrame1Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame1Output$/;"	s	namespace:TPCE
TTradeUpdateFrame1TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame1TradeInfo$/;"	s	namespace:TPCE
TTradeUpdateFrame2Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame2Input$/;"	s	namespace:TPCE
TTradeUpdateFrame2Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame2Output$/;"	s	namespace:TPCE
TTradeUpdateFrame2TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame2TradeInfo$/;"	s	namespace:TPCE
TTradeUpdateFrame3Input	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame3Input$/;"	s	namespace:TPCE
TTradeUpdateFrame3Output	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame3Output$/;"	s	namespace:TPCE
TTradeUpdateFrame3TradeInfo	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateFrame3TradeInfo$/;"	s	namespace:TPCE
TTradeUpdateSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TTradeUpdateSettings$/;"	s	namespace:TPCE
TTradeUpdateSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TTradeUpdateSettingsState$/;"	s	namespace:TPCE
TTradeUpdateTxnInput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateTxnInput$/;"	s	namespace:TPCE
TTradeUpdateTxnOutput	benchmarks/egen/TxnHarnessStructs.h	/^typedef struct TTradeUpdateTxnOutput$/;"	s	namespace:TPCE
TTxnMixGeneratorSettings	benchmarks/egen/DriverParamSettings.h	/^typedef struct TTxnMixGeneratorSettings$/;"	s	namespace:TPCE
TTxnMixGeneratorSettingsState	benchmarks/egen/DriverParamSettings.h	/^struct TTxnMixGeneratorSettingsState$/;"	s	namespace:TPCE
TUF1_ERROR1	benchmarks/egen/error.h	/^        TUF1_ERROR1 = -1011,    \/\/ num_found <> max_trades || num_updated <> max_updates$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TUF2_ERROR1	benchmarks/egen/error.h	/^        TUF2_ERROR1 = -1021,    \/\/ num_updated <> num_found || num_found not in [0..max_trades]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TUF2_WARN1	benchmarks/egen/error.h	/^        TUF2_WARN1  = +1021,    \/\/ num_updated == 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TUF3_ERROR1	benchmarks/egen/error.h	/^        TUF3_ERROR1 = -1031,    \/\/ num_updated <> num_found || num_found not in [0..max_trades]$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TUF3_WARN1	benchmarks/egen/error.h	/^        TUF3_WARN1  = +1031,    \/\/ num_updated == 0$/;"	e	enum:TPCE::CBaseTxnErr::__anon96
TUPLE_WRITER_COMPUTE_DELTA_NEEDED	tuple.h	/^    TUPLE_WRITER_COMPUTE_DELTA_NEEDED, \/\/ last two args ignored$/;"	e	enum:dbtuple::TupleWriterMode
TUPLE_WRITER_COMPUTE_NEEDED	tuple.h	/^    TUPLE_WRITER_COMPUTE_NEEDED,$/;"	e	enum:dbtuple::TupleWriterMode
TUPLE_WRITER_DO_DELTA_WRITE	tuple.h	/^    TUPLE_WRITER_DO_DELTA_WRITE,$/;"	e	enum:dbtuple::TupleWriterMode
TUPLE_WRITER_DO_WRITE	tuple.h	/^    TUPLE_WRITER_DO_WRITE,$/;"	e	enum:dbtuple::TupleWriterMode
TUPLE_WRITER_NEEDS_OLD_VALUE	tuple.h	/^    TUPLE_WRITER_NEEDS_OLD_VALUE, \/\/ all three args ignored$/;"	e	enum:dbtuple::TupleWriterMode
TU_settings	benchmarks/egen/DriverParamSettings.h	/^    CTradeUpdateSettings        TU_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
TWheelConfig	benchmarks/egen/Wheel.h	/^    TWheelConfig( INT32 Size, INT32 Resolution )$/;"	f	struct:TPCE::TWheelConfig
TWheelConfig	benchmarks/egen/Wheel.h	/^typedef struct TWheelConfig$/;"	s	namespace:TPCE
TXN	dbcore/ssn.cpp	/^namespace TXN {$/;"	n	file:
TXN	dbcore/ssn.h	/^namespace TXN {$/;"	n
TXN	dbcore/xid.cpp	/^namespace TXN {$/;"	n	file:
TXN	dbcore/xid.h	/^namespace TXN {$/;"	n
TXN_ABRTD	dbcore/xid.h	/^enum txn_state { TXN_EMBRYO, TXN_ACTIVE, TXN_COMMITTING, TXN_CMMTD, TXN_ABRTD };$/;"	e	enum:TXN::txn_state
TXN_ACTIVE	dbcore/xid.h	/^enum txn_state { TXN_EMBRYO, TXN_ACTIVE, TXN_COMMITTING, TXN_CMMTD, TXN_ABRTD };$/;"	e	enum:TXN::txn_state
TXN_BTREE_DUMP_PURGE_STATS	macros.h	17;"	d
TXN_CMMTD	dbcore/xid.h	/^enum txn_state { TXN_EMBRYO, TXN_ACTIVE, TXN_COMMITTING, TXN_CMMTD, TXN_ABRTD };$/;"	e	enum:TXN::txn_state
TXN_COMMITTING	dbcore/xid.h	/^enum txn_state { TXN_EMBRYO, TXN_ACTIVE, TXN_COMMITTING, TXN_CMMTD, TXN_ABRTD };$/;"	e	enum:TXN::txn_state
TXN_EMBRYO	dbcore/xid.h	/^enum txn_state { TXN_EMBRYO, TXN_ACTIVE, TXN_COMMITTING, TXN_CMMTD, TXN_ABRTD };$/;"	e	enum:TXN::txn_state
TXN_FLAGS	benchmarks/results/tom-2-6-13.py	/^TXN_FLAGS = (1,)$/;"	v
TXN_FLAG_LOW_LEVEL_SCAN	txn.h	/^    TXN_FLAG_LOW_LEVEL_SCAN = 0x1,$/;"	e	enum:transaction_base::__anon104
TXN_FLAG_READ_ONLY	txn.h	/^    TXN_FLAG_READ_ONLY = 0x2,$/;"	e	enum:transaction_base::__anon104
TXN_HARNESS_BROKER_VOLUME_H	benchmarks/egen/TxnHarnessBrokerVolume.h	38;"	d
TXN_HARNESS_CUSTOMER_POSITION_H	benchmarks/egen/TxnHarnessCustomerPosition.h	42;"	d
TXN_HARNESS_DATA_MAINTENANCE_H	benchmarks/egen/TxnHarnessDataMaintenance.h	38;"	d
TXN_HARNESS_MARKET_FEED_H	benchmarks/egen/TxnHarnessMarketFeed.h	38;"	d
TXN_HARNESS_MARKET_WATCH_H	benchmarks/egen/TxnHarnessMarketWatch.h	38;"	d
TXN_HARNESS_PROPAGATE_STATUS	benchmarks/egen/TxnHarnessStructs.h	90;"	d
TXN_HARNESS_SECURITY_DETAIL_H	benchmarks/egen/TxnHarnessSecurityDetail.h	38;"	d
TXN_HARNESS_SEND_TO_MARKET_INTERFACE_H	benchmarks/egen/TxnHarnessSendToMarketInterface.h	43;"	d
TXN_HARNESS_SET_STATUS_SUCCESS	benchmarks/egen/TxnHarnessStructs.h	102;"	d
TXN_HARNESS_STRUCTS_H	benchmarks/egen/TxnHarnessStructs.h	41;"	d
TXN_HARNESS_TRADE_CLEANUP_H	benchmarks/egen/TxnHarnessTradeCleanup.h	38;"	d
TXN_HARNESS_TRADE_LOOKUP_H	benchmarks/egen/TxnHarnessTradeLookup.h	38;"	d
TXN_HARNESS_TRADE_ORDER_H	benchmarks/egen/TxnHarnessTradeOrder.h	42;"	d
TXN_HARNESS_TRADE_RESULT_H	benchmarks/egen/TxnHarnessTradeResult.h	42;"	d
TXN_HARNESS_TRADE_STATUS_H	benchmarks/egen/TxnHarnessTradeStatus.h	38;"	d
TXN_HARNESS_TRADE_UPDATE_H	benchmarks/egen/TxnHarnessTradeUpdate.h	42;"	d
TXN_PROFILE_HINT_OP	benchmarks/ndb_wrapper_impl.h	117;"	d
TX_ID	benchmarks/egen/Table_Defs.h	/^    char                    TX_ID[ cTX_ID_len+1 ];$/;"	m	struct:TPCE::TAXRATE_ROW
TX_NAME	benchmarks/egen/Table_Defs.h	/^    char                    TX_NAME[ cTX_NAME_len+1 ];$/;"	m	struct:TPCE::TAXRATE_ROW
TX_RATE	benchmarks/egen/Table_Defs.h	/^    double                  TX_RATE;$/;"	m	struct:TPCE::TAXRATE_ROW
TYPE_AGG	counter.h	/^  enum Type { TYPE_COUNT, TYPE_AGG };$/;"	e	enum:counter_data::Type
TYPE_COUNT	counter.h	/^  enum Type { TYPE_COUNT, TYPE_AGG };$/;"	e	enum:counter_data::Type
TZipCodeFile	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef CInputFile<TZipCodeInputRow, TZipCodeLimits>                TZipCodeFile;$/;"	t	namespace:TPCE
TZipCodeInputRow	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TZipCodeInputRow : public TBaseInputRow$/;"	s	namespace:TPCE
TZipCodeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    TZipCodeLimits()$/;"	f	struct:TPCE::TZipCodeLimits
TZipCodeLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^typedef struct TZipCodeLimits : public TBaseKeyElementsLimits$/;"	s	namespace:TPCE
T_BID_PRICE	benchmarks/egen/Table_Defs.h	/^    double                  T_BID_PRICE;$/;"	m	struct:TPCE::TRADE_ROW
T_CA_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  T_CA_ID;$/;"	m	struct:TPCE::TRADE_ROW
T_CHRG	benchmarks/egen/Table_Defs.h	/^    double                  T_CHRG;$/;"	m	struct:TPCE::TRADE_ROW
T_COMM	benchmarks/egen/Table_Defs.h	/^    double                  T_COMM;$/;"	m	struct:TPCE::TRADE_ROW
T_DTS	benchmarks/egen/Table_Defs.h	/^    CDateTime               T_DTS;$/;"	m	struct:TPCE::TRADE_ROW
T_EXEC_NAME	benchmarks/egen/Table_Defs.h	/^    char                    T_EXEC_NAME[ cEXEC_NAME_len+1 ];$/;"	m	struct:TPCE::TRADE_ROW
T_ID	benchmarks/egen/Table_Defs.h	/^    TTrade                  T_ID;$/;"	m	struct:TPCE::TRADE_ROW
T_IS_CASH	benchmarks/egen/Table_Defs.h	/^    bool                    T_IS_CASH;$/;"	m	struct:TPCE::TRADE_ROW
T_LIFO	benchmarks/egen/Table_Defs.h	/^    bool                    T_LIFO;$/;"	m	struct:TPCE::TRADE_ROW
T_QTY	benchmarks/egen/Table_Defs.h	/^    int                     T_QTY;$/;"	m	struct:TPCE::TRADE_ROW
T_ST_ID	benchmarks/egen/Table_Defs.h	/^    char                    T_ST_ID[ cST_ID_len+1 ];$/;"	m	struct:TPCE::TRADE_ROW
T_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    T_S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::TRADE_ROW
T_TAX	benchmarks/egen/Table_Defs.h	/^    double                  T_TAX;$/;"	m	struct:TPCE::TRADE_ROW
T_TRADE_PRICE	benchmarks/egen/Table_Defs.h	/^    double                  T_TRADE_PRICE;$/;"	m	struct:TPCE::TRADE_ROW
T_TT_ID	benchmarks/egen/Table_Defs.h	/^    char                    T_TT_ID[ cTT_ID_len+1 ];$/;"	m	struct:TPCE::TRADE_ROW
TableSize	small_unordered_map.h	/^  TableSize(size_t small_size)$/;"	f	namespace:private_
TableSize	small_unordered_map.h	/^  static const size_t TableSize = private_::TableSize(SmallSize);$/;"	m	class:small_unordered_map
TableSize	static_unordered_map.h	/^  static const size_t TableSize = private_::TableSize(StaticSize);$/;"	m	class:static_unordered_map
TableTemplate	benchmarks/egen/TableTemplate.h	/^    TableTemplate()$/;"	f	class:TPCE::TableTemplate
TableTemplate	benchmarks/egen/TableTemplate.h	/^class TableTemplate$/;"	c	namespace:TPCE
Tax	benchmarks/egen/TradeGen.h	/^    CMoney                          Tax;$/;"	m	struct:TPCE::TAdditionalTradeInfo
TaxIDFmt	benchmarks/egen/Person.h	/^const char  TaxIDFmt[TaxIDFmt_len+1] = "nnnaannnnaannn";$/;"	m	namespace:TPCE
TaxIDFmt_len	benchmarks/egen/Person.h	/^const int   TaxIDFmt_len = 14;$/;"	m	namespace:TPCE
TaxRatesCountry	benchmarks/egen/InputFlatFilesStructure.h	/^    TTaxRatesCountryFile        *TaxRatesCountry;$/;"	m	class:TPCE::CInputFiles
TaxRatesDivision	benchmarks/egen/InputFlatFilesStructure.h	/^    TTaxRatesDivisionFile       *TaxRatesDivision;$/;"	m	class:TPCE::CInputFiles
TaxableAccountName	benchmarks/egen/InputFlatFilesStructure.h	/^    TTaxableAccountNameFile     *TaxableAccountName;$/;"	m	class:TPCE::CInputFiles
TaxrateBuffer	benchmarks/egen/shore_tpce_egen.h	/^    TaxrateBuffer(int c): EgenTupleContainer<TAXRATE_ROW>(c){}$/;"	f	class:TPCE::TaxrateBuffer
TaxrateBuffer	benchmarks/egen/shore_tpce_egen.h	/^class TaxrateBuffer: public EgenTupleContainer<TAXRATE_ROW>{$/;"	c	namespace:TPCE
TaxrateRowFmt	benchmarks/egen/Table_Defs.h	/^const char TaxrateRowFmt[] = "%s|%s|%.5f\\n";$/;"	m	namespace:TPCE
Test	varint.cc	/^varint::Test()$/;"	f	class:varint
TestConcurrentBtreeFast	btree.cc	/^TestConcurrentBtreeFast()$/;"	f
TestConcurrentBtreeSlow	btree.cc	/^TestConcurrentBtreeSlow()$/;"	f
Thread	benchmarks/egen/threading.h	/^        Thread(std::auto_ptr<T> throbj)$/;"	f	class:TPCE::Thread
Thread	benchmarks/egen/threading.h	/^        Thread(std::auto_ptr<T> throbj, int stacksize)$/;"	f	class:TPCE::Thread
Thread	benchmarks/egen/threading.h	/^class Thread : public ThreadBase$/;"	c	namespace:TPCE
Thread	benchmarks/egen/threading_pthread.h	/^        Thread(std::auto_ptr<T> throbj)$/;"	f	class:TPCE::Thread
Thread	benchmarks/egen/threading_pthread.h	/^class Thread : public ThreadBase$/;"	c	namespace:TPCE
Thread	benchmarks/egen/threading_single.h	/^        Thread(std::auto_ptr<T> obj)$/;"	f	class:TPCE::Thread
Thread	benchmarks/egen/threading_single.h	/^class Thread : public ThreadBase$/;"	c	namespace:TPCE
ThreadBase	benchmarks/egen/threading.h	/^class ThreadBase$/;"	c	namespace:TPCE
ThreadBase	benchmarks/egen/threading_pthread.h	/^class ThreadBase$/;"	c	namespace:TPCE
ThreadBase	benchmarks/egen/threading_single.h	/^class ThreadBase$/;"	c	namespace:TPCE
TickerTapeRNGSeed	benchmarks/egen/DriverParamSettings.h	/^    RNGSEED TickerTapeRNGSeed;$/;"	m	struct:TPCE::TDriverMEESettings
ToStr	benchmarks/egen/DateTime.cpp	/^char* CDateTime::ToStr( INT32 style = 11 )$/;"	f	class:CDateTime
TotalElements	benchmarks/egen/InputFlatFilesDeclarations.h	/^    UINT   TotalElements() {return m_iTotalElements;}$/;"	f	struct:TPCE::TBaseElementsLimits
TradeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    TradeBuffer(int c): EgenTupleContainer<TRADE_ROW>(c){}$/;"	f	class:TPCE::TradeBuffer
TradeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class TradeBuffer: public EgenTupleContainer<TRADE_ROW>{$/;"	c	namespace:TPCE
TradeCleanup	benchmarks/tpce.cc	/^		static txn_result TradeCleanup(bench_worker *w)$/;"	f	class:tpce_worker
TradeHistoryBuffer	benchmarks/egen/shore_tpce_egen.h	/^    TradeHistoryBuffer(int c): EgenTupleContainer<TRADE_HISTORY_ROW>(c){}$/;"	f	class:TPCE::TradeHistoryBuffer
TradeHistoryBuffer	benchmarks/egen/shore_tpce_egen.h	/^class TradeHistoryBuffer: public EgenTupleContainer<TRADE_HISTORY_ROW>{$/;"	c	namespace:TPCE
TradeHistoryRowFmt	benchmarks/egen/Table_Defs.h	/^const char TradeHistoryRowFmt[] = "%" PRId64 "|%s|%s\\n";$/;"	m	namespace:TPCE
TradeLookup	benchmarks/tpce.cc	/^		static txn_result TradeLookup(bench_worker *w)$/;"	f	class:tpce_worker
TradeLookupAValueForSymbolFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupAValueForSymbolFrame3        = 0;$/;"	m	namespace:TPCE
TradeLookupAValueForTimeGenFrame2	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupAValueForTimeGenFrame2       = 4095;$/;"	m	namespace:TPCE
TradeLookupAValueForTimeGenFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupAValueForTimeGenFrame3       = 4095;$/;"	m	namespace:TPCE
TradeLookupAValueForTimeGenFrame4	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupAValueForTimeGenFrame4       = 4095;$/;"	m	namespace:TPCE
TradeLookupAValueForTradeIDGenFrame1	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupAValueForTradeIDGenFrame1    = 65535;$/;"	m	namespace:TPCE
TradeLookupFrame1MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupFrame1MaxRows                = TradeLookupMaxRows;$/;"	m	namespace:TPCE
TradeLookupFrame2MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupFrame2MaxRows                = TradeLookupMaxRows;$/;"	m	namespace:TPCE
TradeLookupFrame3MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupFrame3MaxRows                = TradeLookupMaxRows;$/;"	m	namespace:TPCE
TradeLookupFrame4MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupFrame4MaxRows                = TradeLookupMaxRows;$/;"	m	namespace:TPCE
TradeLookupMaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupMaxRows                      = 20;   \/\/ Max number of rows for the frames$/;"	m	namespace:TPCE
TradeLookupMaxTradeHistoryRowsReturned	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupMaxTradeHistoryRowsReturned  = 3;    \/\/Based on the maximum number of status changes a trade can go through.$/;"	m	namespace:TPCE
TradeLookupMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   TradeLookupMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
TradeLookupMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    TradeLookupMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
TradeLookupSValueForSymbolFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupSValueForSymbolFrame3        = 0;$/;"	m	namespace:TPCE
TradeLookupSValueForTimeGenFrame2	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupSValueForTimeGenFrame2       = 16;$/;"	m	namespace:TPCE
TradeLookupSValueForTimeGenFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupSValueForTimeGenFrame3       = 16;$/;"	m	namespace:TPCE
TradeLookupSValueForTimeGenFrame4	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupSValueForTimeGenFrame4       = 16;$/;"	m	namespace:TPCE
TradeLookupSValueForTradeIDGenFrame1	benchmarks/egen/MiscConsts.h	/^const INT32     TradeLookupSValueForTradeIDGenFrame1    = 7;$/;"	m	namespace:TPCE
TradeOrder	benchmarks/tpce.cc	/^		static txn_result TradeOrder(bench_worker *w)$/;"	f	class:tpce_worker
TradeOrderMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   TradeOrderMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
TradeOrderMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    TradeOrderMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
TradeRequestBuffer	benchmarks/egen/shore_tpce_egen.h	/^    TradeRequestBuffer(int c): EgenTupleContainer<TRADE_REQUEST_ROW>(c){}$/;"	f	class:TPCE::TradeRequestBuffer
TradeRequestBuffer	benchmarks/egen/shore_tpce_egen.h	/^class TradeRequestBuffer: public EgenTupleContainer<TRADE_REQUEST_ROW>{$/;"	c	namespace:TPCE
TradeRequestRowFmt	benchmarks/egen/Table_Defs.h	/^const char TradeRequestRowFmt[] = "%" PRId64 "|%s|%s|%d|%.2f|%" PRId64 "\\n";$/;"	m	namespace:TPCE
TradeResult	benchmarks/MEESUT.h	/^    bool TradeResult( TPCE::PTradeResultTxnInput pTxnInput ) {$/;"	f	class:TPCE::CMEESUT
TradeResult	benchmarks/tpce.cc	/^		static txn_result TradeResult(bench_worker *w)$/;"	f	class:tpce_worker
TradeResultInputBuffer	benchmarks/tpce.cc	/^TRBuffer* 					TradeResultInputBuffer;$/;"	v
TradeResultMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   TradeResultMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
TradeRowFmt	benchmarks/egen/Table_Defs.h	/^const char TradeRowFmt[] = "%" PRId64 "|%s|%s|%s|%s|%s|%d|%.2f|%" PRId64 "|%s|%.2f|%.2f|%.2f|%.2f|%s\\n";$/;"	m	namespace:TPCE
TradeStatus	benchmarks/tpce.cc	/^		static txn_result TradeStatus(bench_worker *w)$/;"	f	class:tpce_worker
TradeStatusMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   TradeStatusMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
TradeStatusMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    TradeStatusMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
TradeType	benchmarks/egen/InputFlatFilesStructure.h	/^    TTradeTypeFile              *TradeType;$/;"	m	class:TPCE::CInputFiles
TradeTypeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    TradeTypeBuffer(int c): EgenTupleContainer<TRADE_TYPE_ROW>(c){}$/;"	f	class:TPCE::TradeTypeBuffer
TradeTypeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class TradeTypeBuffer: public EgenTupleContainer<TRADE_TYPE_ROW>{$/;"	c	namespace:TPCE
TradeTypeRowFmt	benchmarks/egen/Table_Defs.h	/^const char TradeTypeRowFmt[] = "%s|%s|%s|%s\\n";$/;"	m	namespace:TPCE
TradeUpdate	benchmarks/tpce.cc	/^		static txn_result TradeUpdate(bench_worker *w)$/;"	f	class:tpce_worker
TradeUpdateAValueForSymbolFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateAValueForSymbolFrame3        = 0;$/;"	m	namespace:TPCE
TradeUpdateAValueForTimeGenFrame2	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateAValueForTimeGenFrame2       = 4095;$/;"	m	namespace:TPCE
TradeUpdateAValueForTimeGenFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateAValueForTimeGenFrame3       = 4095;$/;"	m	namespace:TPCE
TradeUpdateAValueForTradeIDGenFrame1	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateAValueForTradeIDGenFrame1    = 65535;$/;"	m	namespace:TPCE
TradeUpdateFrame1MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateFrame1MaxRows                = TradeUpdateMaxRows;$/;"	m	namespace:TPCE
TradeUpdateFrame2MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateFrame2MaxRows                = TradeUpdateMaxRows;$/;"	m	namespace:TPCE
TradeUpdateFrame3MaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateFrame3MaxRows                = TradeUpdateMaxRows;$/;"	m	namespace:TPCE
TradeUpdateMaxRows	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateMaxRows                      = 20;   \/\/ Max number of rows for the frames$/;"	m	namespace:TPCE
TradeUpdateMaxTradeHistoryRowsReturned	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateMaxTradeHistoryRowsReturned  = 3;    \/\/Based on the maximum number of status changes a trade can go through.$/;"	m	namespace:TPCE
TradeUpdateMixLevel	benchmarks/egen/DriverParamSettings.h	/^    INT32   TradeUpdateMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
TradeUpdateMixLevel	benchmarks/egen/DriverParamSettings.h	/^    bool    TradeUpdateMixLevel;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
TradeUpdateSValueForSymbolFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateSValueForSymbolFrame3        = 0;$/;"	m	namespace:TPCE
TradeUpdateSValueForTimeGenFrame2	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateSValueForTimeGenFrame2       = 16;$/;"	m	namespace:TPCE
TradeUpdateSValueForTimeGenFrame3	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateSValueForTimeGenFrame3       = 16;$/;"	m	namespace:TPCE
TradeUpdateSValueForTradeIDGenFrame1	benchmarks/egen/MiscConsts.h	/^const INT32     TradeUpdateSValueForTradeIDGenFrame1    = 7;$/;"	m	namespace:TPCE
TradingFloorRNGSeed	benchmarks/egen/DriverParamSettings.h	/^    RNGSEED TradingFloorRNGSeed;$/;"	m	struct:TPCE::TDriverMEESettings
TransactionMixTotal	benchmarks/egen/DriverParamSettings.h	/^    INT32   TransactionMixTotal;$/;"	m	struct:TPCE::TTxnMixGeneratorSettings
TransactionMixTotal	benchmarks/egen/DriverParamSettings.h	/^    bool    TransactionMixTotal;$/;"	m	struct:TPCE::TTxnMixGeneratorSettingsState
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PACCOUNT_PERMISSION_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PADDRESS_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PBROKER_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCASH_TRANSACTION_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCHARGE_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCOMMISSION_RATE_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCOMPANY_COMPETITOR_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCOMPANY_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCUSTOMER_ACCOUNT_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCUSTOMER_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PCUSTOMER_TAXRATE_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PDAILY_MARKET_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PEXCHANGE_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PFINANCIAL_ROW   pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PHOLDING_HISTORY_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PHOLDING_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PHOLDING_SUMMARY_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PINDUSTRY_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PLAST_TRADE_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PNEWS_ITEM_ROW   pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PNEWS_XREF_ROW   pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PSECTOR_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PSECURITY_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PSETTLEMENT_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PSTATUS_TYPE_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PTAXRATE_ROW pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PTRADE_HISTORY_ROW   pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PTRADE_REQUEST_ROW   pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PTRADE_ROW   pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PTRADE_TYPE_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PWATCH_ITEM_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PWATCH_LIST_ROW  pRow)$/;"	f	class:TPCE::CFinalTransform
Transform	benchmarks/egen/FinalTransform.h	/^    void Transform(PZIP_CODE_ROW    pRow)$/;"	f	class:TPCE::CFinalTransform
TransformCustomerAccountId	benchmarks/egen/FinalTransform.h	/^    void TransformCustomerAccountId(TIdent* pCA_ID) \/\/ for customer account id$/;"	f	class:TPCE::CFinalTransform
TransformCustomerId	benchmarks/egen/FinalTransform.h	/^    void TransformCustomerId(TIdent*    pC_ID)      \/\/ for customer id$/;"	f	class:TPCE::CFinalTransform
TransformTradeId	benchmarks/egen/FinalTransform.h	/^    void TransformTradeId(TTrade*   pT_ID)          \/\/ for trade id$/;"	f	class:TPCE::CFinalTransform
TupleWriterMode	tuple.h	/^  enum TupleWriterMode {$/;"	g	struct:dbtuple
TxnBid	benchmarks/bid.cc	/^  TxnBid(bench_worker *w)$/;"	f	class:bid_worker
TxnConsume	benchmarks/queue.cc	/^  TxnConsume(bench_worker *w)$/;"	f	class:queue_worker
TxnConsumeNoScan	benchmarks/queue.cc	/^  TxnConsumeNoScan(bench_worker *w)$/;"	f	class:queue_worker
TxnConsumeScanHint	benchmarks/queue.cc	/^  TxnConsumeScanHint(bench_worker *w)$/;"	f	class:queue_worker
TxnCreditCheck	benchmarks/tpcc.cc	/^  TxnCreditCheck(bench_worker *w)$/;"	f	class:tpcc_worker
TxnDelivery	benchmarks/tpcc.cc	/^  TxnDelivery(bench_worker *w)$/;"	f	class:tpcc_worker
TxnInputRNGSeed	benchmarks/egen/DriverParamSettings.h	/^    RNGSEED TxnInputRNGSeed;$/;"	m	struct:TPCE::TDriverCESettings
TxnMicroBenchOrderLine	benchmarks/tpcc.cc	/^  TxnMicroBenchOrderLine(bench_worker *w)$/;"	f	class:tpcc_worker
TxnMicroBenchRO	benchmarks/tpcc.cc	/^  TxnMicroBenchRO(bench_worker *w)$/;"	f	class:tpcc_worker
TxnMicroBenchRandom	benchmarks/tpcc.cc	/^  TxnMicroBenchRandom(bench_worker *w)$/;"	f	class:tpcc_worker
TxnMicroBenchSimple	benchmarks/tpcc.cc	/^  TxnMicroBenchSimple(bench_worker *w)$/;"	f	class:tpcc_worker
TxnMicroBenchStatic	benchmarks/tpcc.cc	/^  TxnMicroBenchStatic(bench_worker *w)$/;"	f	class:tpcc_worker
TxnMixGenerator_settings	benchmarks/egen/DriverParamSettings.h	/^    CTxnMixGeneratorSettings    TxnMixGenerator_settings;$/;"	m	struct:TPCE::TDriverCETxnSettings
TxnMixRNGSeed	benchmarks/egen/DriverParamSettings.h	/^    RNGSEED TxnMixRNGSeed;$/;"	m	struct:TPCE::TDriverCESettings
TxnNewOrder	benchmarks/tpcc.cc	/^  TxnNewOrder(bench_worker *w)$/;"	f	class:tpcc_worker
TxnOrderStatus	benchmarks/tpcc.cc	/^  TxnOrderStatus(bench_worker *w)$/;"	f	class:tpcc_worker
TxnPayment	benchmarks/tpcc.cc	/^  TxnPayment(bench_worker *w)$/;"	f	class:tpcc_worker
TxnProduce	benchmarks/queue.cc	/^  TxnProduce(bench_worker *w)$/;"	f	class:queue_worker
TxnProfileHint	benchmarks/abstract_db.h	/^  enum TxnProfileHint {$/;"	g	class:abstract_db
TxnRead	benchmarks/encstress.cc	/^  TxnRead(bench_worker *w)$/;"	f	class:encstress_worker
TxnStockLevel	benchmarks/tpcc.cc	/^  TxnStockLevel(bench_worker *w)$/;"	f	class:tpcc_worker
Type	counter.h	/^  enum Type { TYPE_COUNT, TYPE_AGG };$/;"	g	struct:counter_data
U16	third-party/lz4/bench.c	/^  typedef uint16_t U16;$/;"	t	file:
U16	third-party/lz4/bench.c	/^  typedef unsigned short      U16;$/;"	t	file:
U16	third-party/lz4/fullbench.c	/^  typedef uint16_t U16;$/;"	t	file:
U16	third-party/lz4/fullbench.c	/^  typedef unsigned short      U16;$/;"	t	file:
U16	third-party/lz4/lz4.c	/^  typedef uint16_t U16;$/;"	t	file:
U16	third-party/lz4/lz4.c	/^  typedef unsigned short      U16;$/;"	t	file:
U16	third-party/lz4/lz4hc.c	/^  typedef uint16_t U16;$/;"	t	file:
U16	third-party/lz4/lz4hc.c	/^  typedef unsigned short      U16;$/;"	t	file:
U16	third-party/lz4/xxhash.c	/^  typedef uint16_t U16;$/;"	t	file:
U16	third-party/lz4/xxhash.c	/^  typedef unsigned short     U16;$/;"	t	file:
U16_S	third-party/lz4/lz4.c	/^typedef struct _U16_S { U16 v; } _PACKED U16_S;$/;"	t	typeref:struct:_U16_S	file:
U16_S	third-party/lz4/lz4hc.c	/^typedef struct _U16_S { U16 v; } _PACKED U16_S;$/;"	t	typeref:struct:_U16_S	file:
U32	third-party/lz4/bench.c	/^  typedef uint32_t U32;$/;"	t	file:
U32	third-party/lz4/bench.c	/^  typedef unsigned int        U32;$/;"	t	file:
U32	third-party/lz4/fullbench.c	/^  typedef uint32_t U32;$/;"	t	file:
U32	third-party/lz4/fullbench.c	/^  typedef unsigned int        U32;$/;"	t	file:
U32	third-party/lz4/lz4.c	/^  typedef uint32_t U32;$/;"	t	file:
U32	third-party/lz4/lz4.c	/^  typedef unsigned int        U32;$/;"	t	file:
U32	third-party/lz4/lz4hc.c	/^  typedef uint32_t U32;$/;"	t	file:
U32	third-party/lz4/lz4hc.c	/^  typedef unsigned int        U32;$/;"	t	file:
U32	third-party/lz4/xxhash.c	/^  typedef uint32_t U32;$/;"	t	file:
U32	third-party/lz4/xxhash.c	/^  typedef unsigned int       U32;$/;"	t	file:
U32_S	third-party/lz4/lz4.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	t	typeref:struct:_U32_S	file:
U32_S	third-party/lz4/lz4hc.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	t	typeref:struct:_U32_S	file:
U32_S	third-party/lz4/xxhash.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	t	typeref:struct:_U32_S	file:
U64	third-party/lz4/bench.c	/^  typedef uint64_t U64;$/;"	t	file:
U64	third-party/lz4/bench.c	/^  typedef unsigned long long  U64;$/;"	t	file:
U64	third-party/lz4/fullbench.c	/^  typedef uint64_t U64;$/;"	t	file:
U64	third-party/lz4/fullbench.c	/^  typedef unsigned long long  U64;$/;"	t	file:
U64	third-party/lz4/lz4.c	/^  typedef uint64_t U64;$/;"	t	file:
U64	third-party/lz4/lz4.c	/^  typedef unsigned long long  U64;$/;"	t	file:
U64	third-party/lz4/lz4hc.c	/^  typedef uint64_t U64;$/;"	t	file:
U64	third-party/lz4/lz4hc.c	/^  typedef unsigned long long  U64;$/;"	t	file:
U64	third-party/lz4/xxhash.c	/^  typedef uint64_t U64;$/;"	t	file:
U64	third-party/lz4/xxhash.c	/^  typedef unsigned long long U64;$/;"	t	file:
U64Manip	btree.h	/^    U64Manip;$/;"	t	class:btree_version_manip
U64_S	third-party/lz4/lz4.c	/^typedef struct _U64_S { U64 v; } _PACKED U64_S;$/;"	t	typeref:struct:_U64_S	file:
U64_S	third-party/lz4/lz4hc.c	/^typedef struct _U64_S { U64 v; } _PACKED U64_S;$/;"	t	typeref:struct:_U64_S	file:
UARCH	third-party/lz4/lz4.c	235;"	d	file:
UARCH	third-party/lz4/lz4.c	244;"	d	file:
UARCH	third-party/lz4/lz4hc.c	220;"	d	file:
UARCH	third-party/lz4/lz4hc.c	228;"	d	file:
UINT	benchmarks/egen/EGenStandardTypes.h	/^typedef unsigned int UINT;$/;"	t
UINT16	benchmarks/egen/EGenStandardTypes.h	/^typedef uint16_t        UINT16, *PUINT16;$/;"	t
UINT32	benchmarks/egen/EGenStandardTypes.h	/^typedef uint32_t        UINT32, *PUINT32;$/;"	t
UINT64	benchmarks/egen/EGenStandardTypes.h	/^typedef unsigned long long UINT64, *PUINT64;$/;"	t
UINT64_CONST	benchmarks/egen/EGenStandardTypes.h	106;"	d
UINT64_CONST	benchmarks/egen/EGenStandardTypes.h	150;"	d
UINT8	benchmarks/egen/EGenStandardTypes.h	/^typedef uint8_t         UINT8,  *PUINT8;$/;"	t
UInt64Rand	benchmarks/egen/Random.cpp	/^inline RNGSEED CRandom::UInt64Rand(void){$/;"	f	class:CRandom
UInt64Rand_A_MULTIPLIER	benchmarks/egen/Random.h	78;"	d
UInt64Rand_C_INCREMENT	benchmarks/egen/Random.h	79;"	d
UInt64Rand_ONE	benchmarks/egen/Random.h	80;"	d
UInt64Rand_RECIPROCAL_2_POWER_64	benchmarks/egen/Random.h	88;"	d
UNDEFINED	masstree/doc/GNUmakefile	/^UNDEFINED = egrep -q '^(LaTeX|Package natbib) Warning:.* undefined'$/;"	m
UNUSED	benchmarks/egen/unusedflag.h	43;"	d
UNUSED	benchmarks/egen/unusedflag.h	45;"	d
UNUSED	macros.h	52;"	d
UNUSEDFLAG_H_INCLUDED	benchmarks/egen/unusedflag.h	41;"	d
UPPER32	benchmarks/egen/BigMath.h	49;"	d
USEPDFLATEX	masstree/doc/GNUmakefile	/^USEPDFLATEX = 1$/;"	m
USE_BUILTIN_MEMFUNCS	macros.h	14;"	d
USE_HEAPMEMORY	third-party/lz4/lz4.c	435;"	d	file:
USE_HEAPMEMORY	third-party/lz4/lz4.c	454;"	d	file:
USE_HEAPMEMORY	third-party/lz4/lz4.c	473;"	d	file:
USE_HEAPMEMORY	third-party/lz4/lz4.c	494;"	d	file:
USE_HEAPMEMORY	third-party/lz4/lz4_encoder.h	257;"	d
USE_MALLOC_MODE	Makefile	/^USE_MALLOC_MODE ?= 2$/;"	m
USE_MALLOC_MODE_S	Makefile	/^USE_MALLOC_MODE_S=$(strip $(USE_MALLOC_MODE))$/;"	m
USE_MASSTREE	benchmarks/runner.py	/^USE_MASSTREE = True$/;"	v
USE_PARALLEL_SSN	macros.h	8;"	d
USE_VARINT_ENCODING	macros.h	20;"	d
USE_WINAPI	dbcore/window-buffer.cpp	9;"	d	file:
U_REPLACEMENT	masstree/clp.c	284;"	d	file:
UniqueId	benchmarks/egen/DriverParamSettings.h	/^    UINT32  UniqueId;$/;"	m	struct:TPCE::TDriverCESettings
UniqueId	benchmarks/egen/DriverParamSettings.h	/^    UINT32  UniqueId;$/;"	m	struct:TPCE::TDriverDMSettings
UniqueId	benchmarks/egen/DriverParamSettings.h	/^    UINT32  UniqueId;$/;"	m	struct:TPCE::TDriverMEESettings
Unlock	btree.h	/^    Unlock(std::atomic<uint64_t> &v)$/;"	f	struct:private_::u64manip
Unlock	btree.h	/^    Unlock(uint64_t &t)$/;"	f	struct:private_::u64manip
Unlock	btree.h	/^  Unlock(VersionType &v)$/;"	f	class:btree_version_manip
UnlockAndReturn	btree.h	/^  UnlockAndReturn(typename util::vec<node *>::type &locked_nodes, T t)$/;"	f	class:btree
UnlockNodes	btree.h	/^  UnlockNodes(typename util::vec<node *>::type &locked_nodes)$/;"	f	class:btree
UnstableVersion	btree.h	/^  UnstableVersion(LoadVersionType v)$/;"	f	class:btree_version_manip
UpdateHoldings	benchmarks/egen/TradeGen.cpp	/^void CTradeGen::UpdateHoldings()$/;"	f	class:CTradeGen
UpdateTradeAndCommissionYTD	benchmarks/egen/Brokers.h	/^    void UpdateTradeAndCommissionYTD(TIdent B_ID, int iTradeIncrement, double fCommissionIncrement)$/;"	f	class:TPCE::CBrokersTable
UpdateTunables	benchmarks/egen/CETxnInputGenerator.cpp	/^void CCETxnInputGenerator::UpdateTunables( void )$/;"	f	class:CCETxnInputGenerator
UpdateTunables	benchmarks/egen/CETxnMixGenerator.cpp	/^void CCETxnMixGenerator::UpdateTunables( void )$/;"	f	class:CCETxnMixGenerator
Updated	masstree/kvproto.hh	/^    Updated,$/;"	e	enum:result_t
UpperCaseLetters	benchmarks/egen/MiscConsts.h	/^const char      UpperCaseLetters[]  =   "ABCDEFGHIJKLMNOPQRSTUVWXYZ";$/;"	m	namespace:TPCE
Usage	benchmarks/egen/EGenLoader.cpp	/^void Usage()$/;"	f
V	benchmarks/results/make_graphs-2.py	/^            V = v$/;"	v
V	benchmarks/results/make_graphs-2.py	/^        V = None$/;"	v
VALUE_ARRAY_HH	masstree/value_array.hh	17;"	d
VALUE_BAG_HH	masstree/value_bag.hh	17;"	d
VALUE_START_BIT	dbcore/sm-common.h	/^    static uint64_t const VALUE_START_BIT = 16;$/;"	m	struct:fat_ptr
VALUE_STRING_HH	masstree/value_string.hh	17;"	d
VALUE_VERSIONED_ARRAY_HH	masstree/value_versioned_array.hh	17;"	d
VERBOSE	macros.h	67;"	d
VOLT1N	masstree/mtclient.cc	1419;"	d	file:
VOLT1SIZE	masstree/mtclient.cc	1420;"	d	file:
VOLT2INTS	masstree/mtclient.cc	1525;"	d	file:
VOLT2N	masstree/mtclient.cc	1524;"	d	file:
ValidateParameters	benchmarks/egen/EGenLoader.cpp	/^	bool ValidateParameters()$/;"	f
Value	txn_btree.h	/^  typedef std::string Value;$/;"	t	struct:txn_btree_
Value	typed_txn_btree.h	/^  typedef value_type Value;$/;"	t	struct:typed_txn_btree_
ValueInfo	typed_txn_btree.h	/^  typedef uint64_t ValueInfo;$/;"	t	struct:typed_txn_btree_
ValueReader	txn_btree.h	/^  typedef value_reader ValueReader;$/;"	t	struct:txn_btree_
ValueWriter	txn_btree.h	/^  typedef value_writer ValueWriter;$/;"	t	struct:txn_btree_
ValueWriter	typed_txn_btree.h	/^  typedef value_writer ValueWriter;$/;"	t	struct:typed_txn_btree_
Version	btree.h	/^  Version(LoadVersionType v)$/;"	f	class:btree_version_manip
VersionInfoStr	btree.h	/^  VersionInfoStr(LoadVersionType v)$/;"	f	class:btree_version_manip
VersionManip	btree.h	/^    VersionManip;$/;"	t	class:btree
VersionType	btree.h	/^  typedef std::atomic<uint64_t> VersionType;$/;"	t	struct:concurrent_btree_traits
VersionType	btree.h	/^  typedef uint64_t VersionType;$/;"	t	struct:single_threaded_btree_traits
Versions and locking	masstree/doc/spec.tex	/^\\end{programtabbing}$/;"	s
WAREHOUSE_KEY_FIELDS	benchmarks/tpcc.h	149;"	d
WAREHOUSE_VALUE_FIELDS	benchmarks/tpcc.h	151;"	d
WARN	dbcore/sm-defs.h	235;"	d
WARN	dbcore/sm-defs.h	238;"	d
WARN_IF	dbcore/sm-defs.h	236;"	d
WARN_IF	dbcore/sm-defs.h	239;"	d
WATCH_ITEM_KEY_FIELDS	benchmarks/tpce.h	105;"	d
WATCH_ITEM_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct WATCH_ITEM_ROW$/;"	s	namespace:TPCE
WATCH_ITEM_VALUE_FIELDS	benchmarks/tpce.h	109;"	d
WATCH_LIST_AND_ITEMS_TABLE_H	benchmarks/egen/WatchListsAndItemsTable.h	41;"	d
WATCH_LIST_AND_ITEM_ROW	benchmarks/egen/WatchListsAndItemsTable.h	/^typedef struct WATCH_LIST_AND_ITEM_ROW$/;"	s	namespace:TPCE
WATCH_LIST_KEY_FIELDS	benchmarks/tpce.h	114;"	d
WATCH_LIST_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct WATCH_LIST_ROW$/;"	s	namespace:TPCE
WATCH_LIST_VALUE_FIELDS	benchmarks/tpce.h	118;"	d
WELCOME_MESSAGE	third-party/lz4/fullbench.c	102;"	d	file:
WELCOME_MESSAGE	third-party/lz4/lz4c.c	87;"	d	file:
WHEEL_H	benchmarks/egen/Wheel.h	43;"	d
WHEEL_TIME_H	benchmarks/egen/WheelTime.h	43;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/EGenGenerateAndLoad_stdafx.h	40;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/EGenLoader_stdafx.h	40;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/EGenTables_common.h	40;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/EGenTables_stdafx.h	40;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/EGenUtilities_stdafx.h	40;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/FlatFileLoad_common.h	40;"	d
WIN32_LEAN_AND_MEAN	benchmarks/egen/FlatFileLoad_stdafx.h	40;"	d
WI_S_SYMB	benchmarks/egen/Table_Defs.h	/^    char                    WI_S_SYMB[ cSYMBOL_len+1 ];$/;"	m	struct:TPCE::WATCH_ITEM_ROW
WI_WL_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  WI_WL_ID;$/;"	m	struct:TPCE::WATCH_ITEM_ROW
WL_C_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  WL_C_ID;$/;"	m	struct:TPCE::WATCH_LIST_ROW
WL_ID	benchmarks/egen/Table_Defs.h	/^    TIdent                  WL_ID;$/;"	m	struct:TPCE::WATCH_LIST_ROW
WORD	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    WORD[cWORD_len+1];$/;"	m	struct:TPCE::TNewsInputRow
WORDS_BIGENDIAN	masstree/config.h	274;"	d
WORDS_BIGENDIAN_SET	masstree/config.h	283;"	d
WSET	scripts/tester.py	/^  WSET = [18]$/;"	v
WatchItemBuffer	benchmarks/egen/shore_tpce_egen.h	/^    WatchItemBuffer(int c): EgenTupleContainer<WATCH_ITEM_ROW>(c){}$/;"	f	class:TPCE::WatchItemBuffer
WatchItemBuffer	benchmarks/egen/shore_tpce_egen.h	/^class WatchItemBuffer: public EgenTupleContainer<WATCH_ITEM_ROW>{$/;"	c	namespace:TPCE
WatchItemRowFmt	benchmarks/egen/Table_Defs.h	/^const char WatchItemRowFmt[] = "%" PRId64 "|%s\\n";$/;"	m	namespace:TPCE
WatchListBuffer	benchmarks/egen/shore_tpce_egen.h	/^    WatchListBuffer(int c): EgenTupleContainer<WATCH_LIST_ROW>(c){}$/;"	f	class:TPCE::WatchListBuffer
WatchListBuffer	benchmarks/egen/shore_tpce_egen.h	/^class WatchListBuffer: public EgenTupleContainer<WATCH_LIST_ROW>{$/;"	c	namespace:TPCE
WatchListRowFmt	benchmarks/egen/Table_Defs.h	/^const char WatchListRowFmt[] = "%" PRId64 "|%" PRId64 "\\n";$/;"	m	namespace:TPCE
WheelResolution	benchmarks/egen/Wheel.h	/^    INT32   WheelResolution;    \/\/ Expressed in milliseconds$/;"	m	struct:TPCE::TWheelConfig
WheelSize	benchmarks/egen/Wheel.h	/^    INT32   WheelSize;          \/\/ Total size of the wheel (based on the period and resolution)$/;"	m	struct:TPCE::TWheelConfig
WriteNextRecord	benchmarks/egen/FlatAccountPermissionLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatAccountPermissionLoad
WriteNextRecord	benchmarks/egen/FlatAddressLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatAddressLoad
WriteNextRecord	benchmarks/egen/FlatBrokerLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatBrokerLoad
WriteNextRecord	benchmarks/egen/FlatCashTransactionLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCashTransactionLoad
WriteNextRecord	benchmarks/egen/FlatChargeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatChargeLoad
WriteNextRecord	benchmarks/egen/FlatCommissionRateLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCommissionRateLoad
WriteNextRecord	benchmarks/egen/FlatCompanyCompetitorLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCompanyCompetitorLoad
WriteNextRecord	benchmarks/egen/FlatCompanyLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCompanyLoad
WriteNextRecord	benchmarks/egen/FlatCustomerAccountLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCustomerAccountLoad
WriteNextRecord	benchmarks/egen/FlatCustomerLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCustomerLoad
WriteNextRecord	benchmarks/egen/FlatCustomerTaxrateLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatCustomerTaxrateLoad
WriteNextRecord	benchmarks/egen/FlatDailyMarketLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatDailyMarketLoad
WriteNextRecord	benchmarks/egen/FlatExchangeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatExchangeLoad
WriteNextRecord	benchmarks/egen/FlatFinancialLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatFinancialLoad
WriteNextRecord	benchmarks/egen/FlatHoldingHistoryLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatHoldingHistoryLoad
WriteNextRecord	benchmarks/egen/FlatHoldingLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatHoldingLoad
WriteNextRecord	benchmarks/egen/FlatHoldingSummaryLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatHoldingSummaryLoad
WriteNextRecord	benchmarks/egen/FlatIndustryLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatIndustryLoad
WriteNextRecord	benchmarks/egen/FlatLastTradeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatLastTradeLoad
WriteNextRecord	benchmarks/egen/FlatNewsItemLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatNewsItemLoad
WriteNextRecord	benchmarks/egen/FlatNewsXRefLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatNewsXRefLoad
WriteNextRecord	benchmarks/egen/FlatSectorLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatSectorLoad
WriteNextRecord	benchmarks/egen/FlatSecurityLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatSecurityLoad
WriteNextRecord	benchmarks/egen/FlatSettlementLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatSettlementLoad
WriteNextRecord	benchmarks/egen/FlatStatusTypeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatStatusTypeLoad
WriteNextRecord	benchmarks/egen/FlatTaxrateLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatTaxrateLoad
WriteNextRecord	benchmarks/egen/FlatTradeHistoryLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatTradeHistoryLoad
WriteNextRecord	benchmarks/egen/FlatTradeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatTradeLoad
WriteNextRecord	benchmarks/egen/FlatTradeRequestLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatTradeRequestLoad
WriteNextRecord	benchmarks/egen/FlatTradeTypeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatTradeTypeLoad
WriteNextRecord	benchmarks/egen/FlatWatchItemLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatWatchItemLoad
WriteNextRecord	benchmarks/egen/FlatWatchListLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatWatchListLoad
WriteNextRecord	benchmarks/egen/FlatZipCodeLoad.h	/^    void WriteNextRecord(PT next_record)$/;"	f	class:TPCE::CFlatZipCodeLoad
WriteNextRecord	benchmarks/egen/NullLoader.h	/^    virtual void WriteNextRecord(PT next_record UNUSED) {}; \/\/do not load$/;"	f	class:TPCE::CNullLoader
XDEFER	dbcore/defer.h	54;"	d
XDEFER_IF	dbcore/defer.h	94;"	d
XDEFER_UNLESS	dbcore/defer.h	87;"	d
XID	dbcore/sm-common.h	/^struct XID {$/;"	s
XIDS_PER_READER_KEY	dbcore/ssn.h	/^    enum { XIDS_PER_READER_KEY=24 };$/;"	e	enum:TXN::readers_list::__anon87
XX	benchmarks/results/make_graphs-4.py	/^def XX(x):$/;"	f
XX	benchmarks/results/make_graphs-5.py	/^    def XX(x):$/;"	f	function:datafromfile
XXH32	third-party/lz4/xxhash.c	/^U32 XXH32(const void* input, int len, U32 seed)$/;"	f
XXH32_SIZEOFSTATE	third-party/lz4/xxhash.h	127;"	d
XXH32_alignedInput	third-party/lz4/xxhash.c	/^static U32 XXH32_alignedInput(const void* input, int len, U32 seed)$/;"	f	file:
XXH32_digest	third-party/lz4/xxhash.c	/^U32 XXH32_digest (void* state_in)$/;"	f
XXH32_feed	third-party/lz4/xxhash.h	156;"	d
XXH32_getIntermediateResult	third-party/lz4/xxhash.h	158;"	d
XXH32_init	third-party/lz4/xxhash.c	/^void* XXH32_init (U32 seed)$/;"	f
XXH32_intermediateDigest	third-party/lz4/xxhash.c	/^U32 XXH32_intermediateDigest (void* state_in)$/;"	f
XXH32_resetState	third-party/lz4/xxhash.c	/^XXH_errorcode XXH32_resetState(void* state_in, U32 seed)$/;"	f
XXH32_result	third-party/lz4/xxhash.h	157;"	d
XXH32_sizeofState	third-party/lz4/xxhash.c	/^int XXH32_sizeofState() $/;"	f
XXH32_stateSpace_t	third-party/lz4/xxhash.h	/^typedef struct { long long ll[(XXH32_SIZEOFSTATE+(sizeof(long long)-1))\/sizeof(long long)]; } XXH32_stateSpace_t;$/;"	t	typeref:struct:__anon3
XXH32_update	third-party/lz4/xxhash.c	/^XXH_errorcode XXH32_update (void* state_in, const void* input, int len)$/;"	f
XXH_BIG_ENDIAN	third-party/lz4/xxhash.c	104;"	d	file:
XXH_BIG_ENDIAN	third-party/lz4/xxhash.c	109;"	d	file:
XXH_BIG_ENDIAN	third-party/lz4/xxhash.c	92;"	d	file:
XXH_BIG_ENDIAN	third-party/lz4/xxhash.c	96;"	d	file:
XXH_BIG_ENDIAN	third-party/lz4/xxhash.c	99;"	d	file:
XXH_ERROR	third-party/lz4/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	e	enum:__anon2
XXH_LE32	third-party/lz4/xxhash.c	189;"	d	file:
XXH_OK	third-party/lz4/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	e	enum:__anon2
XXH_STATIC_ASSERT	third-party/lz4/xxhash.c	188;"	d	file:
XXH_USE_UNALIGNED_ACCESS	third-party/lz4/xxhash.c	43;"	d	file:
XXH_alignedLE32	third-party/lz4/xxhash.c	190;"	d	file:
XXH_errorcode	third-party/lz4/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	t	typeref:enum:__anon2
XXH_free	third-party/lz4/xxhash.c	/^static inline void  XXH_free  (void* p)  { free(p); }$/;"	f	file:
XXH_malloc	third-party/lz4/xxhash.c	/^static inline void* XXH_malloc(size_t s) { return malloc(s); }$/;"	f	file:
XXH_memcpy	third-party/lz4/xxhash.c	/^static inline void* XXH_memcpy(void* dest, const void* src, size_t size) { return memcpy(dest,src,size); }$/;"	f	file:
XXH_rotl32	third-party/lz4/xxhash.c	157;"	d	file:
XXH_rotl32	third-party/lz4/xxhash.c	159;"	d	file:
XXH_state32_t	third-party/lz4/xxhash.c	/^struct XXH_state32_t$/;"	s	file:
XXH_swap32	third-party/lz4/xxhash.c	/^static inline U32 XXH_swap32 (U32 x) {$/;"	f	file:
XXH_swap32	third-party/lz4/xxhash.c	163;"	d	file:
XXH_swap32	third-party/lz4/xxhash.c	165;"	d	file:
YERR	benchmarks/results/make_graphs-4.py	/^def YERR(x):$/;"	f
YERR	benchmarks/results/make_graphs-5.py	/^    def YERR(x):$/;"	f	function:datafromfile
YERRPC	benchmarks/results/make_graphs-4.py	/^def YERRPC(x):$/;"	f
YERRPC	benchmarks/results/make_graphs-5.py	/^    def YERRPC(x):$/;"	f	function:datafromfile
YMDtoDayno	benchmarks/egen/DateTime.cpp	/^INT32 CDateTime::YMDtoDayno( INT32 yr, INT32 mm, INT32 dd )$/;"	f	class:CDateTime
YY	benchmarks/results/make_graphs-4.py	/^def YY(x):$/;"	f
YY	benchmarks/results/make_graphs-5.py	/^    def YY(x):$/;"	f	function:datafromfile
YYPC	benchmarks/results/make_graphs-4.py	/^def YYPC(x):$/;"	f
YYPC	benchmarks/results/make_graphs-5.py	/^    def YYPC(x):$/;"	f	function:datafromfile
ZC_CODE	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    ZC_CODE[cZC_CODE_len+1];$/;"	m	struct:TPCE::TZipCodeInputRow
ZC_CODE	benchmarks/egen/Table_Defs.h	/^    char                    ZC_CODE[cZC_CODE_len+1];$/;"	m	struct:TPCE::ZIP_CODE_ROW
ZC_DIV	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    ZC_DIV[cZC_DIV_len+1];$/;"	m	struct:TPCE::TZipCodeInputRow
ZC_DIV	benchmarks/egen/Table_Defs.h	/^    char                    ZC_DIV[cZC_DIV_len+1];$/;"	m	struct:TPCE::ZIP_CODE_ROW
ZC_TOWN	benchmarks/egen/InputFlatFilesDeclarations.h	/^    char    ZC_TOWN[cZC_TOWN_len+1];$/;"	m	struct:TPCE::TZipCodeInputRow
ZC_TOWN	benchmarks/egen/Table_Defs.h	/^    char                    ZC_TOWN[cZC_TOWN_len+1];$/;"	m	struct:TPCE::ZIP_CODE_ROW
ZERO	dbcore/adler.cpp	/^static v8hi const ZERO = {0,0,0,0,0,0,0,0};$/;"	v	file:
ZIP_CODE_KEY_FIELDS	benchmarks/tpce.h	367;"	d
ZIP_CODE_ROW	benchmarks/egen/Table_Defs.h	/^typedef struct ZIP_CODE_ROW : public TBaseInputRow$/;"	s	namespace:TPCE
ZIP_CODE_TABLE_H	benchmarks/egen/ZipCodeTable.h	41;"	d
ZIP_CODE_VALUE_FIELDS	benchmarks/tpce.h	369;"	d
ZeroInputBuffer	benchmarks/egen/CE.cpp	/^void CCE::ZeroInputBuffer(int iTxnType)$/;"	f	class:CCE
ZipCode	benchmarks/egen/InputFlatFilesStructure.h	/^    TZipCodeFile                *ZipCode;$/;"	m	class:TPCE::CInputFiles
ZipCodeBuffer	benchmarks/egen/shore_tpce_egen.h	/^    ZipCodeBuffer(int c): EgenTupleContainer<ZIP_CODE_ROW>(c){}$/;"	f	class:TPCE::ZipCodeBuffer
ZipCodeBuffer	benchmarks/egen/shore_tpce_egen.h	/^class ZipCodeBuffer: public EgenTupleContainer<ZIP_CODE_ROW>{$/;"	c	namespace:TPCE
ZipCodeRowFmt	benchmarks/egen/Table_Defs.h	/^const char ZipCodeRowFmt[] = "%s|%s|%s\\n";$/;"	m	namespace:TPCE
_1BIT	third-party/lz4/lz4c.c	93;"	d	file:
_2BITS	third-party/lz4/lz4c.c	94;"	d	file:
_3BITS	third-party/lz4/lz4c.c	95;"	d	file:
_4BITS	third-party/lz4/lz4c.c	96;"	d	file:
_8BITS	third-party/lz4/lz4c.c	97;"	d	file:
_ABSTRACT_DB_H_	benchmarks/abstract_db.h	2;"	d
_ABSTRACT_ORDERED_INDEX_H_	benchmarks/abstract_ordered_index.h	2;"	d
_AMD64_H_	amd64.h	2;"	d
_COUNTER_H_	counter.h	2;"	d
_CRT_SECURE_NO_DEPRECATE	third-party/lz4/bench.c	30;"	d	file:
_CRT_SECURE_NO_DEPRECATE	third-party/lz4/fullbench.c	30;"	d	file:
_CRT_SECURE_NO_DEPRECATE	third-party/lz4/lz4c.c	38;"	d	file:
_CRT_SECURE_NO_WARNINGS	third-party/lz4/bench.c	29;"	d	file:
_CRT_SECURE_NO_WARNINGS	third-party/lz4/fullbench.c	29;"	d	file:
_CRT_SECURE_NO_WARNINGS	third-party/lz4/fuzzer.c	29;"	d	file:
_CRT_SECURE_NO_WARNINGS	third-party/lz4/lz4c.c	37;"	d	file:
_FILE_OFFSET_BITS	third-party/lz4/bench.c	35;"	d	file:
_FILE_OFFSET_BITS	third-party/lz4/fullbench.c	35;"	d	file:
_LARGEFILE64_SOURCE	third-party/lz4/bench.c	37;"	d	file:
_LARGEFILE64_SOURCE	third-party/lz4/fullbench.c	37;"	d	file:
_LARGEFILE_SOURCE	third-party/lz4/bench.c	34;"	d	file:
_LARGEFILE_SOURCE	third-party/lz4/fullbench.c	34;"	d	file:
_LOCK_GUARD_H_	lockguard.h	2;"	d
_MACROS_H_	macros.h	2;"	d
_MARKED_PTR_H_	marked_ptr.h	2;"	d
_MSG_IF	dbcore/sm-defs.h	216;"	d
_NDB_ALLOCATOR_H_	allocator.h	2;"	d
_NDB_BASE_TXN_BTREE_H_	base_txn_btree.h	2;"	d
_NDB_BENCH_ENCODER_H_	record/encoder.h	2;"	d
_NDB_BENCH_H_	benchmarks/bench.h	2;"	d
_NDB_BENCH_INLINE_STR_H_	record/inline_str.h	2;"	d
_NDB_BENCH_SERIALIZER_H_	record/serializer.h	2;"	d
_NDB_BENCH_TPCC_H_	benchmarks/tpcc.h	2;"	d
_NDB_BENCH_TPCE_H_	benchmarks/tpce.h	2;"	d
_NDB_IMSTRING_H_	imstring.h	2;"	d
_NDB_THREAD_H_	thread.h	2;"	d
_NDB_TUPLE_H_	tuple.h	2;"	d
_NDB_TXN_BTREE_H_	txn_btree.h	2;"	d
_NDB_TXN_H_	txn.h	2;"	d
_NDB_TXN_IMPL_H_	txn_impl.h	2;"	d
_NDB_TXN_PROTO2_IMPL_H_	txn_proto2_impl.h	2;"	d
_NDB_TYPED_TXN_BTREE_H_	typed_txn_btree.h	2;"	d
_NDB_TYPE_TRAITS_H_	ndb_type_traits.h	2;"	d
_NDB_VARKEY_H_	varkey.h	2;"	d
_NDB_WRAPPER_H_	benchmarks/ndb_wrapper.h	2;"	d
_NDB_WRAPPER_IMPL_H_	benchmarks/ndb_wrapper_impl.h	2;"	d
_PACKED	third-party/lz4/lz4.c	180;"	d	file:
_PACKED	third-party/lz4/lz4.c	182;"	d	file:
_PACKED	third-party/lz4/lz4hc.c	155;"	d	file:
_PACKED	third-party/lz4/lz4hc.c	157;"	d	file:
_PACKED	third-party/lz4/xxhash.c	132;"	d	file:
_PACKED	third-party/lz4/xxhash.c	134;"	d	file:
_PREFETCH_H_	prefetch.h	2;"	d
_S	masstree/string.hh	/^inline String operator"" _S(const char *s, size_t len) {$/;"	f	namespace:lcdf
_SCOPED_PERF_H_	scopedperf.hh	10;"	d
_SMALL_UNORDERED_MAP_H_	small_unordered_map.h	2;"	d
_SMALL_VECTOR_H_	small_vector.h	2;"	d
_SPINBARRIER_H_	spinbarrier.h	2;"	d
_SPINLOCK_H_	spinlock.h	2;"	d
_STATIC_UNORDERED_MAP_H_	static_unordered_map.h	2;"	d
_STATIC_VECTOR_H_	static_vector.h	2;"	d
_STOPWATCH_H	dbcore/stopwatch.h	4;"	d
_U16_S	third-party/lz4/lz4.c	/^typedef struct _U16_S { U16 v; } _PACKED U16_S;$/;"	s	file:
_U16_S	third-party/lz4/lz4hc.c	/^typedef struct _U16_S { U16 v; } _PACKED U16_S;$/;"	s	file:
_U32_S	third-party/lz4/lz4.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	s	file:
_U32_S	third-party/lz4/lz4hc.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	s	file:
_U32_S	third-party/lz4/xxhash.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	s	file:
_U64_S	third-party/lz4/lz4.c	/^typedef struct _U64_S { U64 v; } _PACKED U64_S;$/;"	s	file:
_U64_S	third-party/lz4/lz4hc.c	/^typedef struct _U64_S { U64 v; } _PACKED U64_S;$/;"	s	file:
_UTIL_H_	util.h	2;"	d
_VARINT_H_	varint.h	2;"	d
_XDEFER	dbcore/defer.h	57;"	d
__ADLER_H	dbcore/adler.h	2;"	d
__CSLIST_H	dbcore/cslist.h	3;"	d
__DEFER_H	dbcore/defer.h	3;"	d
__DYNARRAY_H	dbcore/dynarray.h	25;"	d
__PERF_ANON	scopedperf.hh	751;"	d
__PERF_CONCAT	scopedperf.hh	750;"	d
__PERF_CONCAT2	scopedperf.hh	749;"	d
__PERF_REGION	scopedperf.hh	753;"	d
__RCU_H	dbcore/rcu.h	3;"	d
__RCU_SLIST_H	dbcore/rcu-slist.h	3;"	d
__RCU_WRAPPER_	rcu-wrapper.h	2;"	d
__SHORE_TPCE_EGEN_H	benchmarks/egen/shore_tpce_egen.h	32;"	d
__SIZE_ENCODE_H	dbcore/size-encode.h	3;"	d
__SM_COMMON_H	dbcore/sm-common.h	3;"	d
__SM_DEFS_H	dbcore/sm-defs.h	3;"	d
__SM_EXCEPTIONS_H	dbcore/sm-exceptions.h	3;"	d
__SM_LOG_ALLOC_H	dbcore/sm-log-alloc.h	3;"	d
__SM_LOG_DEFS_H	dbcore/sm-log-defs.h	3;"	d
__SM_LOG_FILE_H	dbcore/sm-log-file.h	3;"	d
__SM_LOG_H	dbcore/sm-log.h	3;"	d
__SM_LOG_IMPL_H	dbcore/sm-log-impl.h	3;"	d
__SM_LOG_OFFSET_H	dbcore/sm-log-offset.h	3;"	d
__SM_LOG_RECOVER_H	dbcore/sm-log-recover.h	3;"	d
__SM_LOG_SEGMENTS_H	dbcore/sm-log-segments.h	3;"	d
__STDC_FORMAT_MACROS	masstree/compiler.hh	19;"	d
__STUB_IMPL_H	dbcore/stub-impl.h	3;"	d
__WINDOW_BUFFER_H	dbcore/window-buffer.h	3;"	d
__W_RAND_H	dbcore/w_rand.h	25;"	d
__XCONCAT	macros.h	45;"	d
__XCONCAT2	macros.h	44;"	d
__XDEFER	dbcore/defer.h	60;"	d
__cl_asserter	util.h	/^  __cl_asserter() const$/;"	f	class:util::aligned_padded_elem
__defer	dbcore/defer.h	/^    __defer(T &fn) : fn(fn) { }$/;"	f	struct:__defer
__defer	dbcore/defer.h	/^struct __defer {$/;"	s
__padding	dbcore/sm-log-defs.h	/^    uint8_t __padding;$/;"	m	struct:log_request
__x86__	masstree/compiler.hh	57;"	d
_adjust_mapping	dbcore/dynarray.cpp	/^dynarray::_adjust_mapping(size_t begin, size_t end,$/;"	f	class:dynarray
_align1	dbcore/epoch.cpp	/^    aligner<64> _align1;$/;"	m	struct:epoch_mgr::private_state	file:
_align2	dbcore/epoch.cpp	/^    aligner<64> _align2;$/;"	m	struct:epoch_mgr::private_state	file:
_arena	benchmarks/tpcc.cc	/^		str_arena* _arena;$/;"	m	class:credit_check_order_line_scan_callback	file:
_arena	benchmarks/tpcc.cc	/^		str_arena* _arena;$/;"	m	class:credit_check_order_scan_callback	file:
_arena	benchmarks/tpce.cc	/^		str_arena* _arena;$/;"	m	class:sector_scan_callback	file:
_arr	dbcore/w_rand.h	/^    uint32_t _arr[R];$/;"	m	struct:w_rand
_backing_store	dbcore/sm-oid-impl.h	/^        dynarray _backing_store;$/;"	m	struct:sm_oid_mgr_impl::oid_array
_block	dbcore/sm-log-recover.h	/^            log_block *_block;$/;"	m	union:sm_log_recover_mgr::block_scanner::__anon85
_block_list	dbcore/sm-log-alloc.h	/^    rcu_block_list _block_list;$/;"	m	struct:sm_log_alloc_mgr
_bscan	dbcore/sm-log-recover.h	/^        block_scanner _bscan;$/;"	m	struct:sm_log_recover_mgr::log_scanner
_buckets	dbcore/sc-hash.h	/^    value_space _buckets[N];$/;"	v
_buf	dbcore/sm-log-recover.h	/^            char *_buf;$/;"	m	union:sm_log_recover_mgr::block_scanner::__anon85
_buf	scopedperf.hh	/^  T _buf[128];$/;"	m	struct:scopedperf::vector
_capacity	dbcore/dynarray.h	/^    uint32_t _capacity;$/;"	m	struct:dynarray
_chkpt_end_lsn	dbcore/sm-log-file.h	/^    LSN _chkpt_end_lsn;$/;"	m	struct:sm_log_file_mgr
_chkpt_start_lsn	dbcore/sm-log-file.h	/^    LSN _chkpt_start_lsn;$/;"	m	struct:sm_log_file_mgr
_cnt	scopedperf.hh	/^  uint _cnt;$/;"	m	struct:scopedperf::vector
_commit_block	dbcore/sm-log-impl.h	/^    log_allocation *_commit_block;$/;"	m	struct:sm_tx_log_impl
_cond	dbcore/sm-common.h	/^    pthread_cond_t _cond;$/;"	m	struct:os_condvar_pod
_core_oid_offset	object.h	/^    percore<uint64_t, false, false> _core_oid_offset;$/;"	m	class:object_vector
_core_oid_remaining	object.h	/^    percore<uint64_t, false, false> _core_oid_remaining;$/;"	m	class:object_vector
_create_nxt_seg_file	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::_create_nxt_seg_file(bool force)$/;"	f	class:sm_log_file_mgr
_d	dbcore/sm-common.h	/^        DIR *_d;$/;"	m	struct:dirent_iterator::iterator
_d	dbcore/sm-common.h	/^    DIR *_d;$/;"	m	struct:dirent_iterator
_data	dbcore/dynarray.h	/^    char *_data;$/;"	m	struct:dynarray
_data	dbcore/window-buffer.h	/^    char *_data;$/;"	m	struct:window_buffer
_decode_size	dbcore/size-encode.cpp	/^size_t constexpr _decode_size(uint8_t code) {$/;"	f	file:
_dent	dbcore/sm-common.h	/^        dirent *_dent;$/;"	m	struct:dirent_iterator::iterator
_depths	rcu-wrapper.h	/^  static percore_lazy<int> _depths;$/;"	m	class:scoped_rcu_region
_dest	dbcore/adler.cpp	/^    char *_dest;$/;"	m	struct:adler32_memcpy_op	file:
_destroy_value	dbcore/sc-hash.h	/^    _destroy_value(size_t pos) {$/;"	f
_dmark_updated_cond	dbcore/sm-log-alloc.h	/^    os_condvar _dmark_updated_cond;$/;"	m	struct:sm_log_alloc_mgr
_drain_l1	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_drain_l1(uint32_t target)$/;"	f	class:sm_allocator
_drain_l2	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_drain_l2(uint32_t n)$/;"	f	class:sm_allocator
_dummy	benchmarks/tpcc.cc	/^struct _dummy {}; \/\/ exists so we can inherit from it, so we can use a macro in$/;"	s	file:
_dummy	benchmarks/tpce.cc	/^struct _dummy {}; \/\/ exists so we can inherit from it, so we can use a macro in$/;"	s	file:
_durable_lsn	dbcore/sm-log-file.h	/^    LSN _durable_lsn;$/;"	m	struct:sm_log_file_mgr
_durable_lsn_offset	dbcore/sm-log-alloc.h	/^    uint64_t _durable_lsn_offset;$/;"	m	struct:sm_log_alloc_mgr
_empty	dbcore/sm-defs.h	/^    char _empty[];$/;"	m	struct:aligner
_encode_size_tab	dbcore/size-encode.cpp	/^static size_t constexpr _encode_size_tab[] = {$/;"	v	file:
_entries	dbcore/sm-oid-impl.h	/^        fat_ptr _entries[];$/;"	m	struct:sm_oid_mgr_impl::oid_array
_enumerate_helper	dbcore/sm-defs.h	/^struct _enumerate_helper {$/;"	s
_enumerate_helper	dbcore/sm-defs.h	/^struct _enumerate_helper<T[N]> {$/;"	s
_equal	dbcore/sc-hash.h	/^    equals_function _equal;$/;"	v
_fetch_payloads	dbcore/sm-log-recover.h	/^        bool _fetch_payloads;$/;"	m	struct:sm_log_recover_mgr::block_scanner
_fill_from_l1	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_fill_from_l1(thread_cache *tc, uint32_t target)$/;"	f	class:sm_allocator
_fill_from_l2	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_fill_from_l2(thread_cache *tc, uint32_t target)$/;"	f	class:sm_allocator
_find	dbcore/sc-hash.h	/^    _find(Key const &x, hash_type h) {$/;"	f
_find_record	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::log_scanner::_find_record()$/;"	f	class:sm_log_recover_mgr::log_scanner
_find_valid	dbcore/sc-hash.h	/^        void _find_valid() {$/;"	f	struct:iterator
_follow_overflow	dbcore/sm-log-recover.h	/^        bool _follow_overflow;$/;"	m	struct:sm_log_recover_mgr::block_scanner
_get	dbcore/sc-hash.h	/^        value_type *_get() { return owner->_get_value(pos); }$/;"	f	struct:iterator
_get_bucket	dbcore/sc-hash.h	/^    size_t _get_bucket(hash_type h, int i) {$/;"	f
_get_ptr	dbcore/window-buffer.cpp	/^window_buffer::_get_ptr(size_t offset)$/;"	f	class:window_buffer
_get_value	dbcore/sc-hash.h	/^    _get_value(size_t pos)$/;"	f
_global_oid_alloc_offset	object.h	/^    uint64_t _global_oid_alloc_offset;$/;"	m	class:object_vector
_hash	dbcore/sc-hash.h	/^    hash_function _hash;$/;"	v
_hash_part	dbcore/sc-hash.h	/^    hash_type _hash_part(hash_type h, size_t i) {$/;"	f
_head	dbcore/window-buffer.h	/^    size_t _head;$/;"	m	struct:window_buffer
_i	dbcore/sm-log-recover.h	/^        size_t _i;$/;"	m	struct:sm_log_recover_mgr::log_scanner
_impl_of	dbcore/stub-impl.h	/^struct _impl_of { typedef T type; };$/;"	s
_init_value	dbcore/sc-hash.h	/^    _init_value(size_t pos, Args && ...args)$/;"	f
_insert_l3	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_insert_l3(OID x)$/;"	f	class:sm_allocator
_install_commit_block	dbcore/sm-tx-log.cpp	/^log_allocation *sm_tx_log_impl::_install_commit_block(log_allocation *a) {$/;"	f	class:sm_tx_log_impl
_install_segment	dbcore/sm-log-offset.cpp	/^sm_log_offset_mgr::_install_segment(segment_id* sid, uint64_t lsn_offset)$/;"	f	class:sm_log_offset_mgr
_is_present	dbcore/sc-hash.h	/^    bool _is_present(size_t pos)$/;"	f
_k_oo	benchmarks/tpcc.cc	/^		std::vector<std::string *> _k_oo;$/;"	m	class:credit_check_order_scan_callback	file:
_kick_log_write_daemon	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::_kick_log_write_daemon()$/;"	f	class:sm_log_alloc_mgr
_lm	dbcore/sm-log-alloc.h	/^    sm_log_recover_mgr _lm;$/;"	m	struct:sm_log_alloc_mgr
_lm	dbcore/sm-log-impl.h	/^    sm_log_alloc_mgr _lm;$/;"	m	struct:sm_log_impl
_lm	dbcore/sm-log-recover.h	/^        sm_log_recover_mgr *_lm;$/;"	m	struct:sm_log_recover_mgr::block_scanner
_load_block	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::block_scanner::_load_block(LSN x, bool follow_overflow)$/;"	f	class:sm_log_recover_mgr::block_scanner
_log	dbcore/sm-log-impl.h	/^    sm_log_impl *_log;$/;"	m	struct:sm_tx_log_impl
_log_write_daemon	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::_log_write_daemon()$/;"	f	class:sm_log_alloc_mgr
_logbuf	dbcore/sm-log-alloc.h	/^    window_buffer _logbuf;$/;"	m	struct:sm_log_alloc_mgr
_make_new_log	dbcore/sm-log-file.cpp	/^void sm_log_file_mgr::_make_new_log() {$/;"	f	class:sm_log_file_mgr
_mark	dbcore/stopwatch.h	/^    uint64_t _mark;$/;"	m	class:stopwatch_t
_mutex	dbcore/sm-common.h	/^    pthread_mutex_t _mutex;$/;"	m	struct:os_mutex_pod
_newest_segment	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::_newest_segment() {$/;"	f	class:sm_log_file_mgr
_next	object.h	/^		fat_ptr _next;$/;"	m	class:object
_node	dbcore/sm-log-defs.h	/^    _rcu_slist::node _node;$/;"	m	struct:log_allocation
_node	dbcore/test-rcu-slist.cpp	/^    _rcu_slist::node _node;$/;"	m	struct:my_node	file:
_node	dbcore/test-rcu.cpp	/^    _rcu_slist::node _node;$/;"	m	struct:my_node	file:
_nop_filter	dbcore/sm-oid-alloc-impl.h	/^    struct _nop_filter {$/;"	s	struct:sm_allocator
_nreq	dbcore/sm-log-impl.h	/^    size_t _nreq; \/\/ includes a pending overflow record, if such is needed!!!$/;"	m	struct:sm_tx_log_impl
_obj_table	object.h	/^	dynarray 		_obj_table;$/;"	m	class:object_vector
_oldest_segment	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::_oldest_segment() {$/;"	f	class:sm_log_file_mgr
_out	dbcore/test-rcu-slist.cpp	/^    FILE *_out;$/;"	m	struct:list_visitor	file:
_out	dbcore/test-rcu.cpp	/^    FILE *_out;$/;"	m	struct:list_visitor	file:
_overflow_chain	dbcore/sm-log-recover.h	/^        std::vector<LSN> _overflow_chain;$/;"	m	struct:sm_log_recover_mgr::block_scanner
_payload_bytes	dbcore/sm-log-impl.h	/^    size_t _payload_bytes;$/;"	m	struct:sm_tx_log_impl
_pop_newest	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::_pop_newest() {$/;"	f	class:sm_log_file_mgr
_pop_oldest	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::_pop_oldest() {$/;"	f	class:sm_log_file_mgr
_populate_block	dbcore/sm-tx-log.cpp	/^sm_tx_log_impl::_populate_block(log_block *b)$/;"	f	class:sm_tx_log_impl
_pos	scopedperf.hh	/^  int _pos;$/;"	m	struct:scopedperf::viter
_prepare_new_segment	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::_prepare_new_segment(uint32_t segnum, uint64_t start, uint64_t byte_offset)$/;"	f	class:sm_log_file_mgr
_presence	dbcore/sc-hash.h	/^    bitmap_word _presence[NP];$/;"	v
_presence_info	dbcore/sc-hash.h	/^    _presence_info(size_t pos)$/;"	f
_prev_overflow	dbcore/sm-log-impl.h	/^    LSN _prev_overflow;$/;"	m	struct:sm_tx_log_impl
_ptr	dbcore/sm-common.h	/^    uint64_t _ptr;$/;"	m	struct:fat_ptr
_r	masstree/string.hh	/^    mutable rep_type _r;	\/\/ mutable for c_str()$/;"	m	class:lcdf::String
_rcu_slist	dbcore/rcu-slist.h	/^    _rcu_slist() : head(0, OWNER_LIVE) { }$/;"	f	struct:_rcu_slist
_rcu_slist	dbcore/rcu-slist.h	/^struct _rcu_slist {$/;"	s
_rotl	third-party/lz4/bench.c	48;"	d	file:
_rotl	third-party/lz4/fullbench.c	48;"	d	file:
_scan_l2	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_scan_l2(uint32_t n, Filter const &f, Sink const &s)$/;"	f	class:sm_allocator
_scan_l2	dbcore/sm-oid-alloc-impl.h	/^    int32_t _scan_l2(uint32_t n, Sink const &sink) {$/;"	f	struct:sm_allocator
_scavenge_l2	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_scavenge_l2(uint32_t n, Filter const &f, Sink const &s)$/;"	f	class:sm_allocator
_scavenge_l2	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_scavenge_l2(uint32_t target)$/;"	f	class:sm_allocator
_scavenge_l2	dbcore/sm-oid-alloc-impl.h	/^    int32_t _scavenge_l2(uint32_t n, Sink const &sink) {$/;"	f	struct:sm_allocator
_scavenge_l3	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_scavenge_l3(uint32_t n)$/;"	f	class:sm_allocator
_scavenge_l3	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::_scavenge_l3(uint32_t n, Filter const &f, Sink const &s)$/;"	f	class:sm_allocator
_scavenge_l3	dbcore/sm-oid-alloc-impl.h	/^    int32_t _scavenge_l3(uint32_t n, Sink const &sink) {$/;"	f	struct:sm_allocator
_set_present	dbcore/sc-hash.h	/^    void _set_present(size_t pos)$/;"	f
_size	dbcore/dynarray.h	/^    uint32_t _size;$/;"	m	struct:dynarray
_size	dbcore/window-buffer.h	/^    size_t _size;$/;"	m	struct:window_buffer
_size	object.h	/^		size_t _size;			\/\/ contraint on object size( practical enough )$/;"	m	class:object
_state	dbcore/w_rand.h	/^    uint32_t _state;$/;"	m	struct:w_rand
_tail	dbcore/cslist.h	/^    Node *_tail;$/;"	m	struct:cslist
_tail	dbcore/window-buffer.h	/^    size_t _tail;$/;"	m	struct:window_buffer
_unset_present	dbcore/sc-hash.h	/^    void _unset_present(size_t pos)$/;"	f
_v	scopedperf.hh	/^  const vector<T> *_v;$/;"	m	struct:scopedperf::viter
_v_ol	benchmarks/tpcc.cc	/^		std::vector<const std::string *> _v_ol;$/;"	m	class:credit_check_order_line_scan_callback	file:
_val	dbcore/sm-common.h	/^    uint64_t _val;$/;"	m	struct:LSN
_val	dbcore/sm-common.h	/^    uint64_t _val;$/;"	m	struct:XID
_visit	dbcore/rcu-slist.h	/^    void _visit(Visitor v) {$/;"	f	struct:_rcu_slist
_visit	dbcore/rcu-slist.h	/^    void _visit(Visitor v) {$/;"	f	struct:rcu_slist
_waiting_for_dmark	dbcore/sm-log-alloc.h	/^    bool _waiting_for_dmark;$/;"	m	struct:sm_log_alloc_mgr
_waiting_for_durable	dbcore/sm-log-alloc.h	/^    bool _waiting_for_durable;$/;"	m	struct:sm_log_alloc_mgr
_write_complete_cond	dbcore/sm-log-alloc.h	/^    os_condvar _write_complete_cond;$/;"	m	struct:sm_log_alloc_mgr
_write_daemon_cond	dbcore/sm-log-alloc.h	/^    os_condvar _write_daemon_cond;$/;"	m	struct:sm_log_alloc_mgr
_write_daemon_mutex	dbcore/sm-log-alloc.h	/^    os_mutex _write_daemon_mutex;$/;"	m	struct:sm_log_alloc_mgr
_write_daemon_should_stop	dbcore/sm-log-alloc.h	/^    bool _write_daemon_should_stop;$/;"	m	struct:sm_log_alloc_mgr
_write_daemon_should_wake	dbcore/sm-log-alloc.h	/^    bool _write_daemon_should_wake;$/;"	m	struct:sm_log_alloc_mgr
_write_daemon_state	dbcore/sm-log-alloc.h	/^    int _write_daemon_state;$/;"	m	struct:sm_log_alloc_mgr
_write_daemon_tid	dbcore/sm-log-alloc.h	/^    pthread_t _write_daemon_tid;$/;"	m	struct:sm_log_alloc_mgr
a	benchmarks/masstree/kvrandom.hh	/^    enum { default_seed = 819234718U, a = 1664525U, c = 1013904223U };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon98
a	masstree/json.hh	/^        Json_rep_item<ArrayJson*> a;$/;"	m	union:lcdf::Json::rep_type
a	masstree/json.hh	/^    Json a[0];$/;"	m	struct:lcdf::Json::ArrayJson
a	masstree/kvrandom.hh	/^    enum { default_seed = 819234718U, a = 1664525U, c = 1013904223U };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon30
a	masstree/mtclient.cc	/^    struct async a[MAXWINDOW];$/;"	m	struct:child	typeref:struct:child::async	file:
a_lock	benchmarks/MEESUT.h	/^std::mutex a_lock;$/;"	m	namespace:TPCE
abegin	masstree/json.hh	/^    Json::array_iterator abegin() {$/;"	f	class:lcdf::Json_proxy_base
abegin	masstree/json.hh	/^    Json::const_array_iterator abegin() const {$/;"	f	class:lcdf::Json_proxy_base
abegin	masstree/json.hh	/^inline Json::array_iterator Json::abegin() {$/;"	f	class:lcdf::Json
abegin	masstree/json.hh	/^inline Json::const_array_iterator Json::abegin() const {$/;"	f	class:lcdf::Json
abort	txn.h	/^  abort()$/;"	f	class:transaction
abort_impl	txn_impl.h	/^transaction<Protocol, Traits>::abort_impl()$/;"	f	class:transaction
abort_reason	txn.h	/^  enum abort_reason {$/;"	g	class:transaction_base
abort_trap	txn.h	/^  abort_trap(abort_reason reason)$/;"	f	class:transaction
abort_txn	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::abort_txn(void *txn)$/;"	f	class:ndb_wrapper
absent_memo	masstree/string.hh	/^    static inline memo_type* absent_memo() {$/;"	f	class:lcdf::String
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 15;$/;"	m	struct:hint_tpcc_payment_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 1;$/;"	m	struct:hint_kv_get_put_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 1;$/;"	m	struct:hint_read_only_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 1;$/;"	m	struct:hint_tpcc_new_order_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 25;$/;"	m	struct:hint_tpcc_order_status_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 25;$/;"	m	struct:hint_tpcc_stock_level_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = 35;$/;"	m	struct:hint_tpcc_delivery_traits
absent_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t absent_set_expected_size = read_set_expected_size \/ 7 + 1;$/;"	m	struct:hint_kv_scan_traits
abstract_abort_exception	benchmarks/abstract_db.h	/^  class abstract_abort_exception : public std::exception { };$/;"	c	class:abstract_db
abstract_db	benchmarks/abstract_db.h	/^  abstract_db() {}$/;"	f	class:abstract_db
abstract_db	benchmarks/abstract_db.h	/^class abstract_db {$/;"	c
abstract_ordered_index	benchmarks/abstract_ordered_index.h	/^class abstract_ordered_index {$/;"	c
ac_fn_c_try_compile	masstree/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_cxx_check_decl	masstree/configure	/^ac_fn_cxx_check_decl ()$/;"	f
ac_fn_cxx_check_func	masstree/configure	/^ac_fn_cxx_check_func ()$/;"	f
ac_fn_cxx_check_header_compile	masstree/configure	/^ac_fn_cxx_check_header_compile ()$/;"	f
ac_fn_cxx_check_header_mongrel	masstree/configure	/^ac_fn_cxx_check_header_mongrel ()$/;"	f
ac_fn_cxx_check_type	masstree/configure	/^ac_fn_cxx_check_type ()$/;"	f
ac_fn_cxx_compute_int	masstree/configure	/^ac_fn_cxx_compute_int ()$/;"	f
ac_fn_cxx_try_compile	masstree/configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	masstree/configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	masstree/configure	/^ac_fn_cxx_try_link ()$/;"	f
ac_fn_cxx_try_run	masstree/configure	/^ac_fn_cxx_try_run ()$/;"	f
acceptable_stddev_	benchmarks/egen/bucketsimulator.h	/^        double acceptable_stddev_;$/;"	m	class:TPCE::BucketProgress
access	dbcore/test-dynarray.cpp	/^access(dynarray &d, size_t offset, bool should_fault)$/;"	f	file:
access_lob_flag	benchmarks/egen/TxnHarnessStructs.h	/^    bool                access_lob_flag;$/;"	m	struct:TPCE::TSecurityDetailTxnInput
account_destroy	masstree/string.cc	/^void String::memo_type::account_destroy() {$/;"	f	class:lcdf::String::memo_type
account_destroy	masstree/string.hh	/^        inline void account_destroy() {}$/;"	f	struct:lcdf::String::memo_type
account_new	masstree/string.cc	/^void String::memo_type::account_new() {$/;"	f	class:lcdf::String::memo_type
accounting_relax_fence	masstree/kvthread.hh	/^    accounting_relax_fence_function accounting_relax_fence(threadcounter ci) {$/;"	f	class:threadinfo
accounting_relax_fence	masstree_btree.h	/^    relax_fence_function accounting_relax_fence(threadcounter) {$/;"	f	class:simple_threadinfo
accounting_relax_fence_function	masstree/kvthread.hh	/^	accounting_relax_fence_function(threadinfo *ti, threadcounter ci)$/;"	f	struct:threadinfo::accounting_relax_fence_function
accounting_relax_fence_function	masstree/kvthread.hh	/^    struct accounting_relax_fence_function {$/;"	s	class:threadinfo
accounting_relax_fence_function	masstree_btree.h	/^    class accounting_relax_fence_function {$/;"	c	class:simple_threadinfo
acct_assets	benchmarks/egen/TxnHarnessStructs.h	/^    double  acct_assets;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
acct_bal	benchmarks/egen/TxnHarnessStructs.h	/^    double      acct_bal;$/;"	m	struct:TPCE::TTradeResultFrame6Output
acct_bal	benchmarks/egen/TxnHarnessStructs.h	/^    double      acct_bal;$/;"	m	struct:TPCE::TTradeResultTxnOutput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TCustomerPositionFrame2Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TMarketWatchTxnInput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeLookupFrame2Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeLookupFrame4Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeLookupTxnInput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeResultFrame2Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeResultFrame6Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeStatusTxnInput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeUpdateFrame2Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id;$/;"	m	struct:TPCE::TTradeUpdateTxnInput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id[max_acct_len];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              acct_id[max_acct_len];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent          acct_id;$/;"	m	struct:TPCE::TTradeOrderTxnInput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent      acct_id;$/;"	m	struct:TPCE::TTradeResultTxnOutput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  acct_id;$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  acct_id;$/;"	m	struct:TPCE::TTradeOrderFrame1Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  acct_id;$/;"	m	struct:TPCE::TTradeOrderFrame2Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  acct_id;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  acct_id;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  acct_id;$/;"	m	struct:TPCE::TTradeResultFrame1Output
acct_id_idx	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent      acct_id_idx;$/;"	m	struct:TPCE::TCustomerPositionTxnInput
acct_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        acct_id_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
acct_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        acct_id_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
acct_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               acct_len;$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
acct_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               acct_len;$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
acct_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    acct_name[cCA_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame1Output
acked	masstree/mtclient.cc	/^    int acked;$/;"	m	struct:async	file:
acquire	masstree/log.hh	/^inline void loginfo::acquire() {$/;"	f	class:loginfo
acquire	scopedperf.hh	/^  void acquire() {$/;"	f	class:scopedperf::spinlock
acquire_fence	masstree/compiler.hh	/^inline void acquire_fence() {$/;"	f
active	scopedperf.hh	/^  bool active;$/;"	m	class:scopedperf::killable_perf_region
active_segment	dbcore/sm-log-file.h	/^    segment_id *active_segment;$/;"	m	struct:sm_log_file_mgr
active_segment	dbcore/sm-log-segments.h	/^    log_segment_desc * volatile active_segment;$/;"	m	struct:log_segment_mgr
active_threads_	masstree/mttest.cc	/^    static unsigned active_threads_;$/;"	m	struct:test_thread	file:
active_threads_	masstree/mttest.cc	/^template <typename T> unsigned test_thread<T>::active_threads_;$/;"	m	class:test_thread	file:
add	masstree/json.hh	/^inline Json& Json::add(T x) {$/;"	f	class:lcdf::Json
add	masstree/json.hh	/^inline Json& Json::add(double x) {$/;"	f	class:lcdf::Json
add	masstree/kvstats.hh	/^  void add(double x) {$/;"	f	struct:kvstats
add	masstree/mtd.cc	/^    void add(int fd, conn *c) {$/;"	f	class:tcpfds
add	masstree/mtd.cc	/^    void add(int fd, conn *c) {$/;"	f	struct:tcpfds
add_payload_request	dbcore/sm-tx-log.cpp	/^sm_tx_log_impl::add_payload_request(log_record_type type, FID f, OID o,$/;"	f	class:sm_tx_log_impl
add_request	dbcore/sm-tx-log.cpp	/^void sm_tx_log_impl::add_request(log_request const &req) {$/;"	f	class:sm_tx_log_impl
addcpus	scopedperf.hh	/^  static uint64_t addcpus(const Stats stat[], T f) {$/;"	f	class:scopedperf::perfsum_tmpl
addressTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CAddressTable*				addressTable;$/;"	m	class:TPCE::CGenerateAndLoad
adjust_length	masstree/kvio.hh	/^inline void kvout::adjust_length(int delta) {$/;"	f	class:kvout
adjust_length	masstree/straccum.hh	/^inline void StringAccum::adjust_length(int delta) {$/;"	f	class:lcdf::StringAccum
adler32	dbcore/adler.cpp	/^adler32(char const *data, size_t nbytes, uint32_t sofar)$/;"	f
adler32_finish	dbcore/adler.cpp	/^adler32_finish(uint64_t a, uint64_t b, char const *data, size_t i, size_t nbytes, Op &op)$/;"	f
adler32_finish_sse	dbcore/adler.cpp	/^adler32_finish_sse(uint64_t a, uint64_t b, char const *data, size_t i, size_t nbytes, Op &op)$/;"	f
adler32_memcpy	dbcore/adler.cpp	/^adler32_memcpy(char *dest, char const *src, size_t nbytes, uint32_t sofar)$/;"	f
adler32_memcpy_op	dbcore/adler.cpp	/^    adler32_memcpy_op(char *dest, char const *src)$/;"	f	struct:adler32_memcpy_op
adler32_memcpy_op	dbcore/adler.cpp	/^struct adler32_memcpy_op {$/;"	s	file:
adler32_memcpy_sse	dbcore/adler.cpp	/^adler32_memcpy_sse(char *dest, char const *src, size_t nbytes, uint32_t sofar)$/;"	f
adler32_memcpy_vanilla	dbcore/adler.cpp	/^adler32_memcpy_vanilla(char *dest, char const *src, size_t nbytes, uint32_t sofar)$/;"	f
adler32_merge	dbcore/adler.cpp	/^uint32_t adler32_merge(uint32_t left, uint32_t right, size_t right_size) {$/;"	f
adler32_nop_op	dbcore/adler.cpp	/^struct adler32_nop_op {$/;"	s	file:
adler32_orig	dbcore/test-adler.cpp	/^adler32_orig(char *data, size_t nbytes)$/;"	f
adler32_single	dbcore/adler.cpp	/^adler32_single(uint64_t &a, uint64_t &b, char const *data, Op &op)$/;"	f
adler32_sse	dbcore/adler.cpp	/^adler32_sse(char const *data, size_t nbytes, uint32_t sofar)$/;"	f
adler32_sse	dbcore/adler.cpp	/^adler32_sse(char const *data, size_t nbytes, uint32_t sofar, Op &op)$/;"	f
adler32_sse_chunk1_fast	dbcore/adler.cpp	/^void adler32_sse_chunk1_fast(v4si &a, v4si &b, v16qi const *bx, Op &op)$/;"	f
adler32_sse_chunk4_fast	dbcore/adler.cpp	/^adler32_sse_chunk4_fast(v4si &a, v4si &b, v16qi const *bx, Op &op)$/;"	f
adler32_sse_reduce	dbcore/adler.cpp	/^void adler32_sse_reduce(uint64_t &a, uint64_t &b, v4si &va, v4si &vb, int k)$/;"	f	file:
adler32_vanilla	dbcore/adler.cpp	/^adler32_vanilla(char const *data, size_t nbytes, uint32_t sofar)$/;"	f
adler32_vanilla	dbcore/adler.cpp	/^adler32_vanilla(char const *data, size_t nbytes, uint32_t sofar, Op &op)$/;"	f
advance	masstree/masstree_scan.hh	/^    N *advance(const N *n, K &k) const {$/;"	f	struct:Masstree::reverse_scan_helper
advance	masstree/masstree_scan.hh	/^    N *advance(const N *n, const K &) const {$/;"	f	struct:Masstree::forward_scan_helper
advance_reader	dbcore/window-buffer.cpp	/^window_buffer::advance_reader(size_t new_rbegin)$/;"	f	class:window_buffer
advance_system_sync_epoch	persist_test.cc	/^  advance_system_sync_epoch(const vector<vector<unsigned>> &assignments)$/;"	f	class:onecopy_logbased_simulation	file:
advance_timestamp	masstree/kvthread.hh	/^    void advance_timestamp(kvtimestamp_t x) {$/;"	f	class:threadinfo
advance_timestamp	masstree_btree.h	/^    void advance_timestamp(kvtimestamp_t x) {$/;"	f	class:simple_threadinfo
advance_to_key	masstree/masstree_struct.hh	/^leaf<P>* leaf<P>::advance_to_key(const key_type& ka, nodeversion_type& v,$/;"	f	class:Masstree::leaf
advance_within_segment	dbcore/sm-common.h	/^    LSN advance_within_segment(uint64_t delta) {$/;"	f	struct:LSN
advance_writer	dbcore/window-buffer.cpp	/^window_buffer::advance_writer(size_t new_wbegin)$/;"	f	class:window_buffer
advanced	dbcore/cslist.h	/^        bool advanced;$/;"	m	struct:cslist::iterator
aend	masstree/json.hh	/^    Json::array_iterator aend() {$/;"	f	class:lcdf::Json_proxy_base
aend	masstree/json.hh	/^    Json::const_array_iterator aend() const {$/;"	f	class:lcdf::Json_proxy_base
aend	masstree/json.hh	/^inline Json::array_iterator Json::aend() {$/;"	f	class:lcdf::Json
aend	masstree/json.hh	/^inline Json::const_array_iterator Json::aend() const {$/;"	f	class:lcdf::Json
after_rcu	masstree/kvthread.hh	/^    int after_rcu;$/;"	m	struct:memdebug
aget	masstree/mtclient.cc	/^aget(struct child *c, const Str &key, const Str &wanted, get_async_cb fn)$/;"	f
aget	masstree/mtclient.cc	/^aget(struct child *c, long ikey, long iwanted, get_async_cb fn)$/;"	f
aget_col	masstree/mtclient.cc	/^void aget_col(struct child *c, const Str& key, int col, const Str& wanted,$/;"	f
ajson	masstree/json.hh	/^inline Json::ArrayJson* Json::ajson() const {$/;"	f	class:lcdf::Json
align	masstree/string.cc	/^String::align(int n)$/;"	f	class:lcdf::String
align_down	dbcore/sm-defs.h	/^align_down(T val, U amount=DEFAULT_ALIGNMENT)$/;"	f
align_up	dbcore/sm-defs.h	/^align_up(T val, U amount=DEFAULT_ALIGNMENT)$/;"	f
aligned_padded_elem	util.h	/^  aligned_padded_elem(Args &&... args)$/;"	f	class:util::aligned_padded_elem
aligned_padded_elem	util.h	/^class aligned_padded_elem {$/;"	c	namespace:util
aligned_padded_u16	util.h	/^typedef aligned_padded_elem<uint16_t> aligned_padded_u16;$/;"	t	namespace:util
aligned_padded_u32	util.h	/^typedef aligned_padded_elem<uint32_t> aligned_padded_u32;$/;"	t	namespace:util
aligned_padded_u64	util.h	/^typedef aligned_padded_elem<uint64_t> aligned_padded_u64;$/;"	t	namespace:util
aligned_padded_u8	util.h	/^typedef aligned_padded_elem<uint8_t>  aligned_padded_u8;$/;"	t	namespace:util
aligner	dbcore/sm-defs.h	/^struct __attribute__((aligned(N))) aligner {$/;"	s
all_segments	dbcore/sm-log-segments.h	/^    log_segment_array all_segments;$/;"	m	struct:log_segment_mgr
alloc	btree.h	/^    alloc()$/;"	f	struct:btree::internal_node
alloc	btree.h	/^    alloc()$/;"	f	struct:btree::leaf_node
alloc	object.h	/^	inline oid_type alloc()$/;"	f	class:object_vector
alloc_cmds	scripts/tester.py	/^    alloc_cmds = list($/;"	v
alloc_oid	dbcore/sm-oid.cpp	/^sm_oid_mgr::alloc_oid(FID f)$/;"	f	class:sm_oid_mgr
alloc_oid	dbcore/test-sm-log.cpp	/^    iterator alloc_oid() {$/;"	f	struct:db_file
alloc_oid_extent	object.h	/^    inline uint64_t alloc_oid_extent() {$/;"	f	class:object_vector
alloc_size	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::alloc_size()$/;"	f	class:sm_allocator
alloc_size	dbcore/sm-oid-impl.h	/^        alloc_size(size_t n=MAX_ENTRIES)$/;"	f	struct:sm_oid_mgr_impl::oid_array
alloc_storage	dbcore/sm-tx-log.cpp	/^sm_tx_log_impl::alloc_storage() {$/;"	f	class:sm_tx_log_impl
alloc_suffixes	btree.h	/^    alloc_suffixes()$/;"	f	struct:btree::leaf_node
allocate	benchmarks/runner.py	/^def allocate(nworkers, weights):$/;"	f
allocate	dbcore/sm-alloc.cpp	/^    void *allocate(uint64_t size) {$/;"	f	namespace:RA
allocate	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::allocate(uint32_t nrec, size_t payload_bytes)$/;"	f	class:sm_log_alloc_mgr
allocate	masstree/kvthread.hh	/^    void* allocate(size_t sz, memtag tag) {$/;"	f	class:threadinfo
allocate	masstree/test_atomics.cc	/^    static void* allocate(size_t sz, memtag = memtag_none) {$/;"	f	struct:fake_threadinfo
allocate	masstree_btree.h	/^    void* allocate(size_t sz, memtag) {$/;"	f	class:simple_threadinfo
allocate	rcu-wrapper.cc	/^RCU::allocate(size_t nbytes)$/;"	f	class:RCU
allocate	scripts/tester.py	/^def allocate(nworkers, weights):$/;"	f
allocate_contiguous_aligned_block	core.cc	/^coreid::allocate_contiguous_aligned_block(unsigned n, unsigned alignment)$/;"	f	class:coreid
allocated_size	masstree/masstree_struct.hh	/^    size_t allocated_size() const {$/;"	f	class:Masstree::leaf
allocated_size	masstree/stringbag.hh	/^    int allocated_size() const {$/;"	f	class:stringbag
allocation_offset_	masstree/log.hh	/^        int allocation_offset_;$/;"	m	struct:loginfo::logset_info
allocations	scripts/tester.py	/^    allocations = allocate(ncores, weights)$/;"	v
allocator	allocator.h	/^class allocator {$/;"	c
allow_int	masstree/clp.c	/^    unsigned char allow_int;$/;"	m	struct:Clp_StringList	file:
allthreads	masstree/kvthread.cc	/^threadinfo *threadinfo::allthreads;$/;"	m	class:threadinfo	file:
allthreads	masstree/kvthread.hh	/^    static threadinfo *allthreads;$/;"	m	class:threadinfo
almost_full	dbcore/sm-oid-alloc-impl.h	/^    bool almost_full() {$/;"	f	struct:sparse_bitset
always_assert	masstree/config.h	291;"	d
always_disabled	scopedperf.hh	/^class always_disabled {$/;"	c	namespace:scopedperf
always_enabled	scopedperf.hh	/^class always_enabled {$/;"	c	namespace:scopedperf
ambiguity_error	masstree/clp.c	/^ambiguity_error(Clp_Parser *clp, int ambiguous, int *ambiguous_values,$/;"	f	file:
ambiguous	masstree/clp.c	/^    int ambiguous;$/;"	m	struct:Clp_Internal	file:
ambiguous_values	masstree/clp.c	/^    int ambiguous_values[MAX_AMBIGUOUS_VALUES];$/;"	m	struct:Clp_Internal	file:
ap_acl	benchmarks/egen/TxnHarnessStructs.h	/^    char        ap_acl[cACL_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame2Output
append	benchmarks/egen/shore_tpce_egen.h	/^    void append(T* row) {memcpy(&buffer[size++],row, sizeof(T)); }$/;"	f	class:TPCE::EgenTupleContainer
append	masstree/kvio.hh	/^inline void kvout::append(char c) {$/;"	f	class:kvout
append	masstree/straccum.hh	/^inline void StringAccum::append(char c) {$/;"	f	class:lcdf::StringAccum
append	masstree/straccum.hh	/^inline void StringAccum::append(const char *cstr) {$/;"	f	class:lcdf::StringAccum
append	masstree/straccum.hh	/^inline void StringAccum::append(const char *first, const char *last) {$/;"	f	class:lcdf::StringAccum
append	masstree/straccum.hh	/^inline void StringAccum::append(const char *s, int len) {$/;"	f	class:lcdf::StringAccum
append	masstree/straccum.hh	/^inline void StringAccum::append(const unsigned char *first, const unsigned char *last) {$/;"	f	class:lcdf::StringAccum
append	masstree/straccum.hh	/^inline void StringAccum::append(const unsigned char *s, int len) {$/;"	f	class:lcdf::StringAccum
append	masstree/straccum.hh	/^inline void StringAccum::append(unsigned char c) {$/;"	f	class:lcdf::StringAccum
append	masstree/string.cc	/^String::append(const char* s, int len, memo_type* memo)$/;"	f	class:lcdf::String
append	masstree/string.hh	/^inline void String::append(const String &x) {$/;"	f	class:lcdf::String
append	masstree/string.hh	/^inline void String::append(const char *cstr) {$/;"	f	class:lcdf::String
append	masstree/string.hh	/^inline void String::append(const char *first, const char *last) {$/;"	f	class:lcdf::String
append	masstree/string.hh	/^inline void String::append(const char *s, int len) {$/;"	f	class:lcdf::String
append	masstree/string.hh	/^inline void String::append(const unsigned char* first,$/;"	f	class:lcdf::String
append_break_lines	masstree/straccum.cc	/^StringAccum::append_break_lines(const String& text, int linelen, const String &leftmargin)$/;"	f	class:lcdf::StringAccum
append_build_string	masstree/clp.c	/^append_build_string(Clp_BuildString *bs, const char *s, int l)$/;"	f	file:
append_encoded	masstree/straccum.hh	/^inline void StringAccum::append_encoded(T &state,$/;"	f	class:lcdf::StringAccum
append_encoded	masstree/straccum.hh	/^inline void StringAccum::append_encoded(const char *first,$/;"	f	class:lcdf::StringAccum
append_encoded	masstree/straccum.hh	/^inline void StringAccum::append_encoded(const unsigned char *first,$/;"	f	class:lcdf::StringAccum
append_encoded	masstree/straccum.hh	/^void StringAccum::append_encoded(T &encoder)$/;"	f	class:lcdf::StringAccum
append_encoded	masstree/straccum.hh	/^void StringAccum::append_encoded(T &encoder,$/;"	f	class:lcdf::StringAccum
append_fill	masstree/straccum.cc	/^StringAccum::append_fill(int c, int len)$/;"	f	class:lcdf::StringAccum
append_fill	masstree/string.cc	/^String::append_fill(int c, int len)$/;"	f	class:lcdf::String
append_join	masstree/straccum.hh	/^inline void StringAccum::append_join(const String &joiner, I first, I last) {$/;"	f	class:lcdf::StringAccum
append_join	masstree/straccum.hh	/^inline void StringAccum::append_join(const String &joiner, const T &x) {$/;"	f	class:lcdf::StringAccum
append_stash	dbcore/rcu.cpp	/^append_stash(pointer_list *free_list, pointer_list *pstash)$/;"	f	namespace:RCU
append_uninitialized	masstree/string.cc	/^String::append_uninitialized(int len)$/;"	f	class:lcdf::String
append_utf8	masstree/straccum.hh	/^inline bool StringAccum::append_utf8(int ch) {$/;"	f	class:lcdf::StringAccum
append_utf8_hard	masstree/straccum.cc	/^StringAccum::append_utf8_hard(int ch)$/;"	f	class:lcdf::StringAccum
apply	masstree/log.cc	/^inline void logrecord::apply(row_type*& value, bool found,$/;"	f	class:logrecord
apply	util.h	/^    apply(std::ostream &o, const std::tuple<Types...> &t)$/;"	f	struct:private_::helper
apply_put	masstree/kvrow.hh	/^inline bool query<R>::apply_put(R*& value, bool found, const Json* firstreq,$/;"	f	class:query
apply_remove	masstree/kvrow.hh	/^inline void query<R>::apply_remove(R*& value, kvtimestamp_t& node_ts,$/;"	f	class:query
apply_replace	masstree/kvrow.hh	/^inline bool query<R>::apply_replace(R*& value, bool found, Str new_value,$/;"	f	class:query
aput	masstree/mtclient.cc	/^aput(struct child *c, const Str &key, const Str &val,$/;"	f
aput_col	masstree/mtclient.cc	/^void aput_col(struct child *c, const Str &key, int col, const Str &val,$/;"	f
aremove	masstree/mtclient.cc	/^aremove(struct child *c, const Str &key, remove_async_cb fn)$/;"	f
arena	benchmarks/bench.h	/^  str_arena *arena;$/;"	m	class:static_limit_callback
arena	benchmarks/bench.h	/^  str_arena arena;$/;"	m	class:bench_loader
arena	benchmarks/bench.h	/^  str_arena arena;$/;"	m	class:bench_worker
arena	str_arena.h	/^  str_arena *arena;$/;"	m	class:scoped_str_arena
argc	masstree/clp.c	/^    int argc;$/;"	m	struct:Clp_Internal	file:
argc	masstree/clp.c	/^    int argc;$/;"	m	struct:Clp_ParserState	file:
argcmp	benchmarks/runner.py	/^def argcmp(x, comp, predicate):$/;"	f
argcmp	masstree/clp.c	/^argcmp(const char *ref, const char *arg, int min_match, int fewer_dashes)$/;"	f	file:
argcmp	scripts/tester.py	/^def argcmp(x, comp, predicate):$/;"	f
argmax	benchmarks/runner.py	/^def argmax(x, predicate=lambda x: True):$/;"	f
argmax	scripts/tester.py	/^def argmax(x, predicate):$/;"	f
argmin	benchmarks/runner.py	/^def argmin(x, predicate=lambda x: True):$/;"	f
argmin	scripts/tester.py	/^def argmin(x, predicate):$/;"	f
args	benchmarks/stats_runner.py	/^  args = [$/;"	v
args	benchmarks/stats_runner.py	/^  args = [os.path.join(BUILDDIR, 'stats_client'), '\/tmp\/silo.sock', 'dbtuple_bytes_allocated:dbtuple_bytes_freed']$/;"	v
argument_type	masstree/str.hh	/^    typedef Str argument_type;$/;"	t	struct:lcdf::Str
argument_type	masstree/string.hh	/^    typedef const String& argument_type;$/;"	t	class:lcdf::String
argv	masstree/clp.c	/^    const char * const *argv;$/;"	m	struct:Clp_Internal	file:
argv	masstree/clp.c	/^    const char * const *argv;$/;"	m	struct:Clp_ParserState	file:
arr	dbcore/sm-log-file.h	/^        segment_id * volatile arr[NUM_LOG_SEGMENTS];$/;"	m	struct:sm_log_file_mgr::segment_array
arr	dbcore/sm-log-segments.h	/^        log_segment_desc * volatile arr[NUM_LOG_SEGMENTS];$/;"	m	struct:log_segment_mgr::log_segment_array
array	masstree/json.hh	/^inline Json Json::array(Args&&... args) {$/;"	f	class:lcdf::Json
array	masstree/msgpack.hh	/^inline array_t array(uint32_t size) {$/;"	f	namespace:msgpack
array_cdata	masstree/json.hh	/^inline const Json* Json::array_cdata() const {$/;"	f	class:lcdf::Json
array_data	masstree/json.hh	/^inline Json* Json::array_data() {$/;"	f	class:lcdf::Json
array_data	masstree/json.hh	/^inline const Json* Json::array_data() const {$/;"	f	class:lcdf::Json
array_iterator	masstree/json.hh	/^    array_iterator() {$/;"	f	class:lcdf::Json::array_iterator
array_iterator	masstree/json.hh	/^    array_iterator(Json* j, int i)$/;"	f	class:lcdf::Json::array_iterator
array_iterator	masstree/json.hh	/^class Json::array_iterator : public const_array_iterator { public:$/;"	c	class:lcdf::Json
array_t	masstree/msgpack.hh	/^    array_t(uint32_t s)$/;"	f	struct:msgpack::array_t
array_t	masstree/msgpack.hh	/^struct array_t {$/;"	s	namespace:msgpack
array_value_type	masstree/json.hh	/^    typedef Json array_value_type;$/;"	t	class:lcdf::Json
arraysize	masstree/compiler.hh	26;"	d
as_array	dbcore/sm-oid-alloc-impl.h	/^    Array &as_array() { return *(Array*) &entries[0][0]; }$/;"	f	struct:sparse_bitset
as_b	masstree/json.hh	/^    bool as_b() const {$/;"	f	class:lcdf::Json_proxy_base
as_b	masstree/json.hh	/^    bool as_b(bool default_value) const {$/;"	f	class:lcdf::Json_proxy_base
as_b	masstree/json.hh	/^inline bool Json::as_b() const {$/;"	f	class:lcdf::Json
as_b	masstree/json.hh	/^inline bool Json::as_b(bool default_value) const {$/;"	f	class:lcdf::Json
as_d	masstree/json.hh	/^    double as_d() const {$/;"	f	class:lcdf::Json_proxy_base
as_d	masstree/json.hh	/^    double as_d(double default_value) const {$/;"	f	class:lcdf::Json_proxy_base
as_d	masstree/json.hh	/^inline double Json::as_d() const {$/;"	f	class:lcdf::Json
as_d	masstree/json.hh	/^inline double Json::as_d(double default_value) const {$/;"	f	class:lcdf::Json
as_fn_append	masstree/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	masstree/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	masstree/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	masstree/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	masstree/config.status	/^as_fn_error ()$/;"	f
as_fn_error	masstree/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	masstree/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	masstree/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	masstree/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	masstree/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	masstree/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	masstree/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	masstree/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	masstree/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	masstree/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	masstree/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	masstree/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	masstree/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	masstree/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	masstree/configure	/^as_fn_unset ()$/;"	f
as_i	masstree/json.hh	/^    int64_t as_i() const {$/;"	f	class:lcdf::Json_proxy_base
as_i	masstree/json.hh	/^    int64_t as_i(int64_t default_value) const {$/;"	f	class:lcdf::Json_proxy_base
as_i	masstree/json.hh	/^inline int64_t Json::as_i() const {$/;"	f	class:lcdf::Json
as_i	masstree/json.hh	/^inline int64_t Json::as_i(int64_t default_value) const {$/;"	f	class:lcdf::Json
as_s	masstree/json.hh	/^    const String& as_s() const {$/;"	f	class:lcdf::Json_proxy_base
as_s	masstree/json.hh	/^    const String& as_s(const String& default_value) const {$/;"	f	class:lcdf::Json_proxy_base
as_s	masstree/json.hh	/^inline const String& Json::as_s() const {$/;"	f	class:lcdf::Json
as_s	masstree/json.hh	/^inline const String& Json::as_s(const String& default_value) const {$/;"	f	class:lcdf::Json
as_u	masstree/json.hh	/^    uint64_t as_u() const {$/;"	f	class:lcdf::Json_proxy_base
as_u	masstree/json.hh	/^    uint64_t as_u(uint64_t default_value) const {$/;"	f	class:lcdf::Json_proxy_base
as_u	masstree/json.hh	/^inline uint64_t Json::as_u() const {$/;"	f	class:lcdf::Json
as_u	masstree/json.hh	/^inline uint64_t Json::as_u(uint64_t default_value) const {$/;"	f	class:lcdf::Json
asi	dbcore/sm-common.h	/^    uint16_t asi() const { return (_ptr >> ASI_START_BIT) & ASI_MASK; }$/;"	f	struct:fat_ptr
asi_segment	dbcore/sm-common.h	/^    uint16_t asi_segment() const { return asi() & ASI_SEGMENT_MASK; }$/;"	f	struct:fat_ptr
asi_type	dbcore/sm-common.h	/^    uint16_t asi_type() const { return asi() & ~ASI_SEGMENT_MASK; }$/;"	f	struct:fat_ptr
assert_use	masstree/kvthread.hh	/^    static void assert_use(const void *p, memtag tag) {$/;"	f	struct:memdebug
assert_use	masstree/kvthread.hh	/^    static void assert_use(const void *p, memtag tag1, memtag tag2) {$/;"	f	struct:memdebug
asset_total	benchmarks/egen/TxnHarnessStructs.h	/^    double              asset_total[max_acct_len];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
asset_total	benchmarks/egen/TxnHarnessStructs.h	/^    double              asset_total[max_acct_len];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
assets	benchmarks/egen/TxnHarnessStructs.h	/^    double              assets;$/;"	m	struct:TPCE::TFinInfo
assets_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        assets_ind;$/;"	m	struct:TPCE::TFinInfo
assign	masstree/masstree_struct.hh	/^    inline void assign(int p, const key_type& ka, threadinfo& ti) {$/;"	f	class:Masstree::leaf
assign	masstree/masstree_struct.hh	/^    void assign(int p, ikey_type ikey, node_base<P>* child) {$/;"	f	class:Masstree::internode
assign	masstree/str.hh	/^    void assign() {$/;"	f	struct:lcdf::Str
assign	masstree/str.hh	/^    void assign(const String_base<T> &x) {$/;"	f	struct:lcdf::Str
assign	masstree/str.hh	/^    void assign(const char *s_) {$/;"	f	struct:lcdf::Str
assign	masstree/str.hh	/^    void assign(const char *s_, int len_) {$/;"	f	struct:lcdf::Str
assign	masstree/string.cc	/^String::assign(const char *s, int len, bool need_deref)$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^        inline void assign(const char* d, int l, memo_type* m) {$/;"	f	struct:lcdf::String::rep_type
assign	masstree/string.hh	/^inline void String::assign(String&& x) {$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^inline void String::assign(const String& x) {$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^inline void String::assign(const String_base<T>& str) {$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^inline void String::assign(const char *first, const char *last) {$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^inline void String::assign(const char* cstr) {$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^inline void String::assign(const rep_type& rep) {$/;"	f	class:lcdf::String
assign	masstree/string.hh	/^inline void String::assign(const std::string& str) {$/;"	f	class:lcdf::String
assign	masstree/stringbag.hh	/^    bool assign(int p, const char *s, int len) {$/;"	f	class:stringbag
assign	masstree/stringbag.hh	/^    bool assign(int p, lcdf::Str s) {$/;"	f	class:stringbag
assign	record/inline_str.h	/^  assign(const char *s)$/;"	f	class:inline_str_base
assign	record/inline_str.h	/^  assign(const char *s)$/;"	f	class:inline_str_fixed
assign	record/inline_str.h	/^  assign(const char *s, size_t n)$/;"	f	class:inline_str_base
assign	record/inline_str.h	/^  assign(const char *s, size_t n)$/;"	f	class:inline_str_fixed
assign	record/inline_str.h	/^  assign(const std::string &s)$/;"	f	class:inline_str_base
assign	record/inline_str.h	/^  assign(const std::string &s)$/;"	f	class:inline_str_fixed
assign	stats_common.h	/^  assign(const char *p, size_t n)$/;"	f	class:stats_command::packet
assign	stats_common.h	/^  assign(const std::string &s)$/;"	f	class:stats_command::packet
assignFrom	small_unordered_map.h	/^  assignFrom(const small_unordered_map &that)$/;"	f	class:small_unordered_map
assignFrom	small_vector.h	/^  assignFrom(const small_vector &that)$/;"	f	class:small_vector
assignFrom	static_unordered_map.h	/^  assignFrom(const static_unordered_map &that)$/;"	f	class:static_unordered_map
assignFrom	static_vector.h	/^  assignFrom(const static_vector &that)$/;"	f	class:static_vector
assign_initialize	masstree/masstree_struct.hh	/^    inline void assign_initialize(int p, const key_type& ka, threadinfo& ti) {$/;"	f	class:Masstree::leaf
assign_initialize	masstree/masstree_struct.hh	/^    inline void assign_initialize(int p, leaf<P>* x, int xp, threadinfo& ti) {$/;"	f	class:Masstree::leaf
assign_ksuf	masstree/masstree_struct.hh	/^    inline void assign_ksuf(int p, Str s, bool initializing, threadinfo& ti) {$/;"	f	class:Masstree::leaf
assign_noref	masstree/string.hh	/^        inline void assign_noref(const char* d, int l, memo_type* m) {$/;"	f	struct:lcdf::String::rep_type
assign_out_of_memory	masstree/straccum.cc	/^StringAccum::assign_out_of_memory()$/;"	f	class:lcdf::StringAccum
assign_out_of_memory	masstree/string.cc	/^String::assign_out_of_memory()$/;"	f	class:lcdf::String
assign_parse	masstree/json.cc	/^Json::assign_parse(const char* first, const char* last, const String& str)$/;"	f	class:lcdf::Json
assign_parse	masstree/json.hh	/^    bool assign_parse(const String& str) {$/;"	f	class:lcdf::Json_proxy_base
assign_parse	masstree/json.hh	/^    bool assign_parse(const char* first, const char* last) {$/;"	f	class:lcdf::Json_proxy_base
assign_parse	masstree/json.hh	/^inline bool Json::assign_parse(const String &str) {$/;"	f	class:lcdf::Json
assign_parse	masstree/json.hh	/^inline bool Json::assign_parse(const char *first, const char *last) {$/;"	f	class:lcdf::Json
assign_reader_bitmap_entry	dbcore/ssn.cpp	/^void assign_reader_bitmap_entry() {$/;"	f	namespace:TXN
assign_segment	dbcore/sm-log-offset.cpp	/^sm_log_offset_mgr::assign_segment(uint64_t lsn_begin, uint64_t lsn_end)$/;"	f	class:sm_log_offset_mgr
assign_segment	dbcore/sm-log-segments.cpp	/^log_segment_mgr::assign_segment(uint64_t lsn_begin, uint64_t lsn_end)$/;"	f	class:log_segment_mgr
assign_store_ikey	masstree/masstree_key.hh	/^    void assign_store_ikey(ikey_type ikey) {$/;"	f	class:Masstree::key
assign_store_length	masstree/masstree_key.hh	/^    void assign_store_length(int len) {$/;"	f	class:Masstree::key
assign_store_suffix	masstree/masstree_key.hh	/^    int assign_store_suffix(Str s) {$/;"	f	class:Masstree::key
assign_timestamp	masstree/kvrow.hh	/^inline void query<R>::assign_timestamp(threadinfo& ti) {$/;"	f	class:query
assign_timestamp	masstree/kvrow.hh	/^inline void query<R>::assign_timestamp(threadinfo& ti, kvtimestamp_t min_ts) {$/;"	f	class:query
assign_version	masstree/nodeversion.hh	/^    void assign_version(basic_nodeversion<P> x) {$/;"	f	class:basic_nodeversion
assign_version	masstree/nodeversion.hh	/^    void assign_version(basic_singlethreaded_nodeversion<P> x) {$/;"	f	class:basic_singlethreaded_nodeversion
assignments	benchmarks/runner.py	/^        assignments = allocate(threads, weights)$/;"	v
async	masstree/mtclient.cc	/^struct async {$/;"	s	file:
asyncgetcb	masstree/mtclient.cc	/^asyncgetcb(struct child *, struct async *a, bool, const Str &val)$/;"	f
asyncgetcb_int	masstree/mtclient.cc	/^asyncgetcb_int(struct child *, struct async *a, bool, const Str &val)$/;"	f
asyncputcb	masstree/mtclient.cc	/^asyncputcb(struct child *, struct async *a, int status)$/;"	f
at	masstree/json.hh	/^    const Json& at(Json::size_type x) const {$/;"	f	class:lcdf::Json_proxy_base
at	masstree/json.hh	/^    const Json& at(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
at	masstree/json.hh	/^inline const Json& Json::at(Str key) const {$/;"	f	class:lcdf::Json
at	masstree/json.hh	/^inline const Json& Json::at(size_type x) const {$/;"	f	class:lcdf::Json
at	masstree/string_base.hh	/^    const char& at(int i) const {$/;"	f	class:lcdf::String_base
at_insert	masstree/json.hh	/^    Json& at_insert(Json::size_type x) {$/;"	f	class:lcdf::Json_proxy_base
at_insert	masstree/json.hh	/^    Json& at_insert(Str key) {$/;"	f	class:lcdf::Json_proxy_base
at_insert	masstree/json.hh	/^    Json& at_insert(const String& key) {$/;"	f	class:lcdf::Json_proxy_base
at_insert	masstree/json.hh	/^    Json& at_insert(const char* key) {$/;"	f	class:lcdf::Json_proxy_base
at_insert	masstree/json.hh	/^inline Json& Json::at_insert(Str key) {$/;"	f	class:lcdf::Json
at_insert	masstree/json.hh	/^inline Json& Json::at_insert(const String &key) {$/;"	f	class:lcdf::Json
at_insert	masstree/json.hh	/^inline Json& Json::at_insert(const char *key) {$/;"	f	class:lcdf::Json
at_insert	masstree/json.hh	/^inline Json& Json::at_insert(size_type x) {$/;"	f	class:lcdf::Json
atomic_cas	dbcore/rcu-slist.cpp	/^        bool atomic_cas(node *n, owner_status s) {$/;"	f	struct:__anon82::cached_next
atomic_or	masstree/compiler.hh	/^    static inline void atomic_or(type* object, type addend) {$/;"	f	struct:sized_compiler_operations
atomic_or	masstree/compiler.hh	/^inline void atomic_or(T* object, T addend) {$/;"	f
atomic_or	masstree/compiler.hh	/^inline void atomic_or(int16_t* object, int addend) {$/;"	f
atomic_or	masstree/compiler.hh	/^inline void atomic_or(int8_t* object, int addend) {$/;"	f
atomic_or	masstree/compiler.hh	/^inline void atomic_or(uint16_t* object, int addend) {$/;"	f
atomic_or	masstree/compiler.hh	/^inline void atomic_or(uint8_t* object, int addend) {$/;"	f
atomic_or	masstree/compiler.hh	/^inline void atomic_or(unsigned long* object, int addend) {$/;"	f
atomic_or	masstree/compiler.hh	/^inline void atomic_or(unsigned* object, int addend) {$/;"	f
atomic_write_file_contents	masstree/file.cc	/^int atomic_write_file_contents(const char *filename, const lcdf::String &contents,$/;"	f
attr_	benchmarks/egen/threading.h	/^        TThreadAttr attr_;$/;"	m	class:TPCE::Thread
auth	benchmarks/egen/TxnHarnessStructs.h	/^    char                auth[cNI_AUTHOR_len+1];$/;"	m	struct:TPCE::TNews
auth_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        auth_ind;$/;"	m	struct:TPCE::TNews
available_to_read	dbcore/window-buffer.h	/^    size_t available_to_read() {$/;"	f	struct:window_buffer
available_to_write	dbcore/window-buffer.h	/^    size_t available_to_write() {$/;"	f	struct:window_buffer
avg	counter.h	/^  avg() const$/;"	f	struct:counter_data
avg	masstree/kvstats.hh	/^  double avg() {$/;"	f	struct:kvstats
avg_tag_	counter.h	/^    const bool avg_tag_;$/;"	m	struct:private_::event_ctx
b	benchmarks/bench.h	/^  spin_barrier *b;$/;"	m	class:bench_loader
b	benchmarks/masstree/kvtest.cc	/^  spin_barrier *b;$/;"	m	class:kvtest_worker	file:
b	small_unordered_map.h	/^    SmallIterType *b;$/;"	m	class:small_unordered_map::iterator_
b	static_unordered_map.h	/^    BucketType *b;$/;"	m	class:static_unordered_map::iterator_
bGenerateFixedTables	benchmarks/egen/EGenLoader.cpp	/^bool                bGenerateFixedTables = false;$/;"	v
bGenerateGrowingTables	benchmarks/egen/EGenLoader.cpp	/^bool                bGenerateGrowingTables = false;$/;"	v
bGenerateScalingTables	benchmarks/egen/EGenLoader.cpp	/^bool                bGenerateScalingTables = false;$/;"	v
bGenerateUsingCache	benchmarks/egen/EGenLoader.cpp	/^bool                bGenerateUsingCache = true;$/;"	v
bIsLifo	benchmarks/egen/TradeGen.h	/^    bool            bIsLifo;    \/\/ needed to update holdings$/;"	m	struct:TPCE::TTradeInfo
bTableGenerationFlagNotSpecified	benchmarks/egen/EGenLoader.cpp	/^bool                bTableGenerationFlagNotSpecified = true;    \/\/ assume no flag is specified.$/;"	v
back	masstree/json.hh	/^    Json& back() {$/;"	f	class:lcdf::Json_proxy_base
back	masstree/json.hh	/^    const Json& back() const {$/;"	f	class:lcdf::Json_proxy_base
back	masstree/json.hh	/^inline Json& Json::back() {$/;"	f	class:lcdf::Json
back	masstree/json.hh	/^inline const Json& Json::back() const {$/;"	f	class:lcdf::Json
back	masstree/kpermuter.hh	/^    int back() const {$/;"	f	class:kpermuter
back	masstree/local_vector.hh	/^inline T& local_vector<T, N, A>::back() {$/;"	f	class:local_vector
back	masstree/local_vector.hh	/^inline const T& local_vector<T, N, A>::back() const {$/;"	f	class:local_vector
back	masstree/straccum.hh	/^inline char &StringAccum::back() {$/;"	f	class:lcdf::StringAccum
back	masstree/straccum.hh	/^inline char StringAccum::back() const {$/;"	f	class:lcdf::StringAccum
back	masstree/string_base.hh	/^    const char& back() const {$/;"	f	class:lcdf::String_base
back	small_vector.h	/^  back() const$/;"	f	class:small_vector
back	small_vector.h	/^  back()$/;"	f	class:small_vector
back	static_vector.h	/^  back() const$/;"	f	class:static_vector
back	static_vector.h	/^  back()$/;"	f	class:static_vector
backing_store	dbcore/sm-oid-alloc-impl.h	/^        dynarray backing_store;$/;"	m	struct:sm_allocator::header_data
backoff_aborted_transaction	benchmarks/bench.cc	/^int backoff_aborted_transaction = 0;$/;"	v
backoff_fence_function	masstree/compiler.hh	/^    backoff_fence_function()$/;"	f	struct:backoff_fence_function
backoff_fence_function	masstree/compiler.hh	/^struct backoff_fence_function {$/;"	s
backoff_shifts	benchmarks/bench.h	/^  unsigned backoff_shifts;$/;"	m	class:bench_worker
badusage	third-party/lz4/fullbench.c	/^int badusage(char* exename)$/;"	f
badusage	third-party/lz4/lz4c.c	/^int badusage(char* exename)$/;"	f
bagdata	masstree/value_bag.hh	/^    union bagdata {$/;"	u	class:value_bag
bakeoff	dbcore/test-adler.cpp	/^void bakeoff(char const *msg, size_t nbytes, char *data, size_t len) {$/;"	f
barrier_a	benchmarks/bench.h	/^  spin_barrier *const barrier_a;$/;"	m	class:bench_worker
barrier_a	benchmarks/bench.h	/^  spin_barrier barrier_a;$/;"	m	class:bench_runner
barrier_b	benchmarks/bench.h	/^  spin_barrier *const barrier_b;$/;"	m	class:bench_worker
barrier_b	benchmarks/bench.h	/^  spin_barrier barrier_b;$/;"	m	class:bench_runner
base	scopedperf.hh	/^  const struct perfsum_ctr<Enabler, Counters...> *const base;$/;"	m	class:scopedperf::perfsum_ctr
base	third-party/lz4/lz4hc.c	/^    const BYTE* base;$/;"	m	struct:__anon7	file:
base64_decoding_map	masstree/string.cc	/^const unsigned char String_generic::base64_decoding_map[] =$/;"	m	class:lcdf::String_generic	file:
base64_decoding_map	masstree/string_base.hh	/^    static const unsigned char base64_decoding_map[256];$/;"	m	class:lcdf::String_generic
base64_encoding_table	masstree/string.cc	/^const char String_generic::base64_encoding_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	m	class:lcdf::String_generic	file:
base64_encoding_table	masstree/string_base.hh	/^    static const char base64_encoding_table[65];$/;"	m	class:lcdf::String_generic
base_	masstree/json.hh	/^    T &base_;$/;"	m	class:lcdf::Json_array_proxy
base_	masstree/json.hh	/^    T &base_;$/;"	m	class:lcdf::Json_object_proxy
base_	masstree/json.hh	/^    T &base_;$/;"	m	class:lcdf::Json_object_str_proxy
base_	masstree/json.hh	/^    const Json& base_;$/;"	m	class:lcdf::Json_get_proxy
base_	masstree/msgpack.hh	/^    T& base_;$/;"	m	class:msgpack::unparser
base_btree_config	btree.h	/^struct base_btree_config {$/;"	s
base_id	dbcore/xid.cpp	/^    uint16_t base_id;$/;"	m	struct:TXN::thread_data	file:
base_imstring	imstring.h	/^  base_imstring() : p(NULL), l(0) {}$/;"	f	class:base_imstring
base_imstring	imstring.h	/^  base_imstring(const std::string &s)$/;"	f	class:base_imstring
base_imstring	imstring.h	/^  base_imstring(const uint8_t *src, size_t l)$/;"	f	class:base_imstring
base_imstring	imstring.h	/^class base_imstring {$/;"	c
base_invariant_checker	btree_impl.h	/^btree<P>::node::base_invariant_checker(const key_slice *min_key,$/;"	f	class:btree::node
base_invariant_unique_keys_check	btree_impl.h	/^btree<P>::node::base_invariant_unique_keys_check() const$/;"	f	class:btree::node
base_perf_region	scopedperf.hh	/^  base_perf_region(Perfsum *psarg, getcpu_fn getcpu)$/;"	f	class:scopedperf::base_perf_region
base_perf_region	scopedperf.hh	/^class base_perf_region {$/;"	c	namespace:scopedperf
base_seed	benchmarks/egen/EGenValidate.cpp	/^        RNGSEED base_seed;$/;"	m	class:BucketSimOptions	file:
base_txn_btree	base_txn_btree.h	/^  base_txn_btree(size_type value_size_hint = 128,$/;"	f	class:base_txn_btree
base_txn_btree	base_txn_btree.h	/^class base_txn_btree {$/;"	c
base_txn_btree_handler	base_txn_btree.h	/^struct base_txn_btree_handler {$/;"	s
base_txn_btree_handler	txn_proto2_impl.h	/^struct base_txn_btree_handler<transaction_proto2> {$/;"	s
base_type	masstree/masstree_struct.hh	/^    typedef node_base<P> base_type;$/;"	t	class:Masstree::node_base
base_type	record/encoder.h	/^  typedef T base_type;$/;"	t	struct:schema
base_type	typed_txn_btree.h	/^  typedef typename Schema::base_type base_type;$/;"	t	class:typed_txn_btree
base_type	typed_txn_btree.h	/^  typedef typename Schema::base_type base_type;$/;"	t	struct:typed_txn_btree_
basic_eps	benchmarks/egen/TxnHarnessStructs.h	/^    double              basic_eps;$/;"	m	struct:TPCE::TFinInfo
basic_eps_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        basic_eps_ind;$/;"	m	struct:TPCE::TFinInfo
basic_nodeversion	masstree/nodeversion.hh	/^    basic_nodeversion() {$/;"	f	class:basic_nodeversion
basic_nodeversion	masstree/nodeversion.hh	/^    basic_nodeversion(value_type v)$/;"	f	class:basic_nodeversion
basic_nodeversion	masstree/nodeversion.hh	/^    explicit basic_nodeversion(bool isleaf) {$/;"	f	class:basic_nodeversion
basic_nodeversion	masstree/nodeversion.hh	/^class basic_nodeversion {$/;"	c
basic_singlethreaded_nodeversion	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion() {$/;"	f	class:basic_singlethreaded_nodeversion
basic_singlethreaded_nodeversion	masstree/nodeversion.hh	/^    explicit basic_singlethreaded_nodeversion(bool isleaf) {$/;"	f	class:basic_singlethreaded_nodeversion
basic_singlethreaded_nodeversion	masstree/nodeversion.hh	/^class basic_singlethreaded_nodeversion {$/;"	c
basic_table	masstree/masstree.hh	/^class basic_table {$/;"	c	namespace:Masstree
basic_table	masstree/masstree_struct.hh	/^inline basic_table<P>::basic_table()$/;"	f	class:Masstree::basic_table
basic_table_type	masstree/masstree_struct.hh	/^	typedef basic_table<P> basic_table_type;$/;"	t	class:Masstree::internode
basic_table_type	masstree/masstree_struct.hh	/^	typedef basic_table<P> basic_table_type;$/;"	t	class:Masstree::node_base
bbuf_	benchmarks/masstree/kvtest.cc	/^  char *bbuf_;$/;"	m	struct:quick_istr	file:
bbuf_	masstree/misc.hh	/^    char *bbuf_;$/;"	m	struct:quick_istr
been_destructed	base_txn_btree.h	/^  bool been_destructed;$/;"	m	class:base_txn_btree
begin	btree.cc	/^  testing_concurrent_btree::key_type begin;$/;"	m	class:test_range_scan_helper	file:
begin	dbcore/cslist.h	/^    iterator begin() {$/;"	f	struct:cslist
begin	dbcore/epoch.cpp	/^    epoch_num begin = 1;$/;"	m	struct:epoch_mgr::private_state	file:
begin	dbcore/epoch.cpp	/^    epoch_num begin;$/;"	m	struct:epoch_mgr::thread_state	file:
begin	dbcore/rcu-slist.h	/^    iterator begin() { return self.begin<Node>(); }$/;"	f	struct:rcu_slist
begin	dbcore/rcu-slist.h	/^    iterator<Node> begin() { return iterator<Node>(&this->head); }$/;"	f	struct:_rcu_slist
begin	dbcore/rcu-slist.h	/^    iterator<node> begin() { return begin<node>(); }$/;"	f	struct:_rcu_slist
begin	dbcore/sc-hash.h	/^    iterator begin() {$/;"	f
begin	dbcore/sm-common.cpp	/^dirent_iterator::begin() {$/;"	f	class:dirent_iterator
begin	dbcore/sm-common.h	/^    LSN begin;$/;"	m	struct:version
begin	dbcore/sm-defs.h	/^    iterator begin() { return iterator{0, iterable.begin()}; }$/;"	f	struct:_enumerate_helper
begin	dbcore/sm-defs.h	/^    iterator begin() { return iterator{0, iterable}; }$/;"	f	struct:_enumerate_helper
begin	dbcore/sm-oid-alloc-impl.h	/^    iterator begin() { return iterator{as_array(), 0}; }$/;"	f	struct:sparse_bitset
begin	dbcore/xid.h	/^    LSN begin;$/;"	m	struct:TXN::xid_context
begin	masstree/json.hh	/^    Json::const_iterator begin() const {$/;"	f	class:lcdf::Json_proxy_base
begin	masstree/json.hh	/^    Json::iterator begin() {$/;"	f	class:lcdf::Json_proxy_base
begin	masstree/json.hh	/^inline Json::const_iterator Json::begin() const {$/;"	f	class:lcdf::Json
begin	masstree/json.hh	/^inline Json::iterator Json::begin() {$/;"	f	class:lcdf::Json
begin	masstree/straccum.hh	/^inline StringAccum::const_iterator StringAccum::begin() const {$/;"	f	class:lcdf::StringAccum
begin	masstree/straccum.hh	/^inline StringAccum::iterator StringAccum::begin() {$/;"	f	class:lcdf::StringAccum
begin	masstree/string_base.hh	/^    const_iterator begin() const {$/;"	f	class:lcdf::String_base
begin	object.h	/^	inline fat_ptr begin( oid_type oid )$/;"	f	class:object_vector
begin	scopedperf.hh	/^begin(const vector<T> &v)$/;"	f	namespace:scopedperf
begin	small_unordered_map.h	/^  begin() const$/;"	f	class:small_unordered_map
begin	small_unordered_map.h	/^  begin()$/;"	f	class:small_unordered_map
begin	small_vector.h	/^  begin() const$/;"	f	class:small_vector
begin	small_vector.h	/^  begin()$/;"	f	class:small_vector
begin	static_unordered_map.h	/^  begin() const$/;"	f	class:static_unordered_map
begin	static_unordered_map.h	/^  begin()$/;"	f	class:static_unordered_map
begin	static_vector.h	/^  begin() const$/;"	f	class:static_vector
begin	static_vector.h	/^  begin()$/;"	f	class:static_vector
begin_ptr	object.h	/^    inline fat_ptr* begin_ptr(oid_type oid)$/;"	f	class:object_vector
bench_loader	benchmarks/bench.h	/^  bench_loader(unsigned long seed, abstract_db *db,$/;"	f	class:bench_loader
bench_loader	benchmarks/bench.h	/^class bench_loader : public ndb_thread {$/;"	c
bench_runner	benchmarks/bench.h	/^  bench_runner(abstract_db *db)$/;"	f	class:bench_runner
bench_runner	benchmarks/bench.h	/^class bench_runner {$/;"	c
bench_worker	benchmarks/bench.h	/^  bench_worker(unsigned int worker_id,$/;"	f	class:bench_worker
bench_worker	benchmarks/bench.h	/^class bench_worker : public ndb_thread {$/;"	c
benchmark_parse	masstree/jsontest.cc	/^void benchmark_parse() {$/;"	f
bid_bench_runner	benchmarks/bid.cc	/^  bid_bench_runner(abstract_db *db)$/;"	f	class:bid_bench_runner
bid_bench_runner	benchmarks/bid.cc	/^class bid_bench_runner : public bench_runner {$/;"	c	file:
bid_do_test	benchmarks/bid.cc	/^bid_do_test(abstract_db *db, int argc, char **argv)$/;"	f
bid_loader	benchmarks/bid.cc	/^  bid_loader(unsigned long seed,$/;"	f	class:bid_loader
bid_loader	benchmarks/bid.cc	/^class bid_loader : public bench_loader {$/;"	c	file:
bid_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              bid_price;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
bid_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              bid_price;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
bid_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              bid_price;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
bid_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              bid_price;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
bid_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        bid_price_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
bid_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        bid_price_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
bid_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        bid_price_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
bid_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        bid_price_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
bid_worker	benchmarks/bid.cc	/^  bid_worker($/;"	f	class:bid_worker
bid_worker	benchmarks/bid.cc	/^class bid_worker : public bench_worker {$/;"	c	file:
bidmaxtbl	benchmarks/bid.cc	/^  abstract_ordered_index *bidmaxtbl;$/;"	m	class:bid_worker	file:
bidtbl	benchmarks/bid.cc	/^  abstract_ordered_index *bidtbl;$/;"	m	class:bid_worker	file:
bidusertbl	benchmarks/bid.cc	/^  abstract_ordered_index *bidusertbl;$/;"	m	class:bid_worker	file:
big_endian_trfm	util.h	/^struct big_endian_trfm {$/;"	s	namespace:util
big_endian_trfm	util.h	/^struct big_endian_trfm<int16_t> {$/;"	s	namespace:util
big_endian_trfm	util.h	/^struct big_endian_trfm<int32_t> {$/;"	s	namespace:util
big_endian_trfm	util.h	/^struct big_endian_trfm<int64_t> {$/;"	s	namespace:util
big_endian_trfm	util.h	/^struct big_endian_trfm<uint16_t> {$/;"	s	namespace:util
big_endian_trfm	util.h	/^struct big_endian_trfm<uint32_t> {$/;"	s	namespace:util
big_endian_trfm	util.h	/^struct big_endian_trfm<uint64_t> {$/;"	s	namespace:util
binaries	benchmarks/runner.py	/^  binaries = set(it.chain.from_iterable([grid.get('binary', [DEFAULT_BINARY]) for grid in grids]))$/;"	v
binary_extractor	benchmarks/results/make_graphs-6.py	/^    def binary_extractor(binary):$/;"	f
binary_path	benchmarks/runner.py	/^def binary_path(tpe):$/;"	f
bitmap	dbcore/xid.cpp	/^    uint64_t bitmap;$/;"	m	struct:TXN::thread_data	file:
bitmap	dbcore/xid.cpp	/^struct bitmap {$/;"	s	namespace:TXN	file:
bitmap_t	dbcore/ssn.h	/^    typedef dbtuple::rl_bitmap_t bitmap_t;$/;"	t	struct:TXN::readers_list
bitmap_word	dbcore/sc-hash.h	/^    typedef uint64_t bitmap_word; $/;"	t	struct:sc_hash_set
bitmaps	dbcore/xid.cpp	/^bitmap bitmaps[NBITMAPS];$/;"	m	namespace:TXN	file:
block	dbcore/sm-log-defs.h	/^    log_block *block;$/;"	m	struct:log_allocation
blockChecksum	third-party/lz4/lz4c.c	/^static int blockChecksum = 0;$/;"	v	file:
blockIndependence	third-party/lz4/lz4c.c	/^static int blockIndependence = 1;$/;"	v	file:
blockSizeId	third-party/lz4/lz4c.c	/^static int blockSizeId = LZ4S_BLOCKSIZEID_DEFAULT;$/;"	v	file:
block_scanner	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::block_scanner::block_scanner(sm_log_recover_mgr *lm, LSN start,$/;"	f	class:sm_log_recover_mgr::block_scanner
block_scanner	dbcore/sm-log-recover.h	/^        void operator=(block_scanner)=delete;$/;"	m	struct:sm_log_recover_mgr::block_scanner
block_scanner	dbcore/sm-log-recover.h	/^    struct block_scanner {$/;"	s	struct:sm_log_recover_mgr
bnext	small_unordered_map.h	/^    struct bucket *bnext;$/;"	m	struct:small_unordered_map::bucket	typeref:struct:small_unordered_map::bucket::bucket
bnext	static_unordered_map.h	/^    struct bucket *bnext;$/;"	m	struct:static_unordered_map::bucket	typeref:struct:static_unordered_map::bucket::bucket
body_	thread.h	/^  run_t body_;$/;"	m	class:ndb_thread
body_checksum	dbcore/sm-log-defs.h	/^    uint32_t body_checksum() {$/;"	f	struct:log_block
bool_cmpxchg	masstree/compiler.hh	/^    static inline bool bool_cmpxchg(type* object, type expected, type desired) {$/;"	f	struct:sized_compiler_operations
bool_cmpxchg	masstree/compiler.hh	/^inline bool bool_cmpxchg(T* object, T expected, T desired) {$/;"	f
bool_cmpxchg	masstree/compiler.hh	/^inline bool bool_cmpxchg(uint8_t* object, int expected, int desired) {$/;"	f
bool_cmpxchg	masstree/compiler.hh	/^inline bool bool_cmpxchg(unsigned *object, int expected, int desired) {$/;"	f
bool_data	masstree/string.cc	/^const char String_generic::bool_data[] = "false\\0true";$/;"	m	class:lcdf::String_generic	file:
bool_data	masstree/string_base.hh	/^    static const char bool_data[11]; \/\/ "false\\0true\\0"$/;"	m	class:lcdf::String_generic
bound_method	masstree/masstree.hh	/^    static constexpr int bound_method = bound_method_binary;$/;"	m	struct:Masstree::nodeparams
bound_method_binary	masstree/ksearch.hh	/^    bound_method_binary,$/;"	e	enum:__anon34
bound_method_binary	masstree/ksearch.hh	/^    typedef typename key_bound<max_size, (max_size > 16 ? bound_method_binary : bound_method_linear)>::type type;$/;"	t	struct:key_bound
bound_method_fast	masstree/ksearch.hh	/^    bound_method_fast = 0,$/;"	e	enum:__anon34
bound_method_linear	masstree/ksearch.hh	/^    bound_method_linear$/;"	e	enum:__anon34
bound_type	masstree/masstree_scan.hh	/^    typedef typename leaf_type::bound_type bound_type;$/;"	t	class:Masstree::scanstackelt
bound_type	masstree/masstree_struct.hh	/^    typedef typename key_bound<width, P::bound_method>::type bound_type;$/;"	t	class:Masstree::internode
bound_type	masstree/masstree_struct.hh	/^    typedef typename key_bound<width, P::bound_method>::type bound_type;$/;"	t	class:Masstree::leaf
boundary_	masstree_btree.h	/^  const key_type* boundary_;$/;"	m	class:mbtree::search_range_scanner_base
boundary_compar_	masstree_btree.h	/^  bool boundary_compar_;$/;"	m	class:mbtree::search_range_scanner_base
broadcast	dbcore/sm-common.h	/^    void broadcast() {$/;"	f	struct:os_condvar_pod
broker_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              broker_id;$/;"	m	struct:TPCE::TTradeResultFrame2Output
broker_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              broker_id;$/;"	m	struct:TPCE::TTradeResultFrame5Input
broker_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  broker_id;$/;"	m	struct:TPCE::TTradeOrderFrame1Output
broker_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  broker_id;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
broker_list	benchmarks/egen/TxnHarnessStructs.h	/^    char            broker_list[max_broker_list_len][cB_NAME_len+1];$/;"	m	struct:TPCE::TBrokerVolumeTxnInput
broker_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                broker_name[cB_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
broker_name	benchmarks/egen/TxnHarnessStructs.h	/^    char            broker_name[max_broker_list_len][cB_NAME_len+1];$/;"	m	struct:TPCE::TBrokerVolumeFrame1Output
broker_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    broker_name[cB_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame1Output
broker_volume	benchmarks/tpce.cc	/^		txn_result broker_volume()$/;"	f	class:tpce_worker
btr	benchmarks/masstree/kvtest.cc	/^  btree *btr;$/;"	m	class:kvtest_worker	file:
btr	benchmarks/ndb_wrapper.h	/^  txn_btree<Transaction> btr;$/;"	m	class:ndb_ordered_index
btr	btree.cc	/^  testing_concurrent_btree *const btr;$/;"	m	class:btree_worker	file:
btr	btree.cc	/^  testing_concurrent_btree *const btr;$/;"	m	class:test_range_scan_helper	file:
btr	txn.h	/^    concurrent_btree *btr;$/;"	m	struct:transaction::read_record_t
btr	txn.h	/^    concurrent_btree *btr;$/;"	m	struct:transaction::write_record_t
btr_ptr_	masstree_btree.h	/^  const mbtree<P> *btr_ptr_;$/;"	m	class:mbtree::low_level_search_range_scanner
btree	btree.h	/^  btree() : root_(leaf_node::alloc())$/;"	f	class:btree
btree	btree.h	/^class btree {$/;"	c
btree_leaflink	masstree/btree_leaflink.hh	/^template <typename N, bool CONCURRENT = N::concurrent> struct btree_leaflink {};$/;"	s
btree_leaflink	masstree/btree_leaflink.hh	/^template <typename N> struct btree_leaflink<N, false> {$/;"	s
btree_leaflink	masstree/btree_leaflink.hh	/^template <typename N> struct btree_leaflink<N, true> {$/;"	s
btree_version_manip	btree.h	/^class btree_version_manip {$/;"	c
btree_worker	btree.cc	/^  btree_worker(testing_concurrent_btree &btr) : btr(&btr) {}$/;"	f	class:btree_worker
btree_worker	btree.cc	/^  btree_worker(testing_concurrent_btree *btr) : btr(btr)  {}$/;"	f	class:btree_worker
btree_worker	btree.cc	/^class btree_worker : public ndb_thread {$/;"	c	file:
bucket	masstree/json.hh	/^    int bucket(const char* s, int len) const {$/;"	f	struct:lcdf::Json::ObjectJson
bucket	small_unordered_map.h	/^  struct bucket {$/;"	s	class:small_unordered_map
bucket	static_unordered_map.h	/^  struct bucket {$/;"	s	class:static_unordered_map
bucket_value_type	small_unordered_map.h	/^  typedef std::pair<key_type, mapped_type> bucket_value_type;$/;"	t	class:small_unordered_map
bucket_value_type	static_unordered_map.h	/^  typedef std::pair<key_type, mapped_type> bucket_value_type;$/;"	t	class:static_unordered_map
buckets	scopedperf.hh	/^  struct buckets {$/;"	s	class:scopedperf::perfsum_hist_tmpl
buf	benchmarks/ndb_wrapper.h	/^    char buf[0];$/;"	m	struct:private_::ndbtxn
buf	core.h	/^  struct buf {$/;"	s	namespace:private_
buf	dbcore/sm-log-file.cpp	/^    char buf[CHKPT_FILE_NAME_BUFSZ];$/;"	m	struct:cmark_file_name	file:
buf	dbcore/sm-log-file.cpp	/^    char buf[CHKPT_FILE_NAME_BUFSZ];$/;"	m	struct:dmark_file_name	file:
buf	dbcore/sm-log-file.cpp	/^    char buf[NXT_SEG_FILE_NAME_BUFSZ];$/;"	m	struct:nxt_seg_file_name	file:
buf	dbcore/sm-log-file.cpp	/^    char buf[SEGMENT_FILE_NAME_BUFSZ];$/;"	m	struct:segment_file_name	file:
buf	masstree/clp.c	/^    char buf[256];$/;"	m	struct:Clp_BuildString	file:
buf	masstree/kvio.hh	/^    char* buf;$/;"	m	struct:kvout
buf	record/inline_str.h	/^  char buf[N];$/;"	m	class:inline_str_fixed
buf	record/inline_str.h	/^  mutable char buf[N + 1];$/;"	m	class:inline_str_base
buf	small_unordered_map.h	/^    char buf[sizeof(value_type)];$/;"	m	struct:small_unordered_map::bucket
buf	static_unordered_map.h	/^    char buf[sizeof(value_type)];$/;"	m	struct:static_unordered_map::bucket
buf_	benchmarks/masstree/kvtest.cc	/^  char buf_[32];$/;"	m	struct:quick_istr	file:
buf_	circbuf.h	/^  std::atomic<Tp *> buf_[Capacity];$/;"	m	class:circbuf
buf_	masstree/log.cc	/^    char buf_[0];$/;"	m	struct:logrec_kv	file:
buf_	masstree/log.cc	/^    char buf_[0];$/;"	m	struct:logrec_kvdelta	file:
buf_	masstree/log.hh	/^            char *buf_;$/;"	m	struct:loginfo::__anon78::__anon79
buf_	masstree/log.hh	/^    char *buf_;$/;"	m	class:logreplay
buf_	masstree/misc.hh	/^    char buf_[32];$/;"	m	struct:quick_istr
buf_	persist_test.cc	/^  std::string buf_; \/\/ the actual buffer, of size g_buffer_size$/;"	m	struct:pbuffer	file:
buf_offset	dbcore/sm-log-file.h	/^        uint64_t buf_offset(LSN lsn) {$/;"	f	struct:sm_log_file_mgr::segment_id
buf_offset	dbcore/sm-log-file.h	/^        uint64_t buf_offset(uint64_t lsn_offset) {$/;"	f	struct:sm_log_file_mgr::segment_id
buf_offset	dbcore/sm-log-segments.h	/^    uint64_t buf_offset(uint64_t lsn_offset) {$/;"	f	struct:log_segment_desc
buf_t	core.h	/^  typedef private_::buf<T> buf_t;$/;"	t	class:percore_lazy
buffer	benchmarks/MEESUT.h	/^    T* buffer[max_buffer];$/;"	m	class:TPCE::InputBuffer
buffer	benchmarks/egen/shore_tpce_egen.h	/^  T* buffer;$/;"	m	class:TPCE::EgenTupleContainer
build_string_cleanup	masstree/clp.c	/^static void build_string_cleanup(Clp_BuildString* bs) {$/;"	f	file:
build_string_grow	masstree/clp.c	/^static int build_string_grow(Clp_BuildString* bs, size_t want) {$/;"	f	file:
build_string_init	masstree/clp.c	/^static void build_string_init(Clp_BuildString* bs, Clp_Parser* clp) {$/;"	f	file:
build_string_program_prefix	masstree/clp.c	/^build_string_program_prefix(Clp_BuildString* bs, const Clp_Parser* clp)$/;"	f	file:
build_string_text	masstree/clp.c	/^static const char* build_string_text(Clp_BuildString* bs, int report_oom) {$/;"	f	file:
burt_hash	dbcore/burt-hash.h	/^    burt_hash(uint32_t selector=0)$/;"	f	struct:burt_hash
burt_hash	dbcore/burt-hash.h	/^struct burt_hash {$/;"	s
burt_hash4	dbcore/burt-hash.h	/^    burt_hash4(uint32_t selector=0)$/;"	f	struct:burt_hash4
burt_hash4	dbcore/burt-hash.h	/^struct burt_hash4 {$/;"	s
buy_orders	benchmarks/egen/DriverParamSettings.h	/^    INT32   buy_orders;$/;"	m	struct:TPCE::TTradeOrderSettings
buy_orders	benchmarks/egen/DriverParamSettings.h	/^    bool    buy_orders;$/;"	m	struct:TPCE::TTradeOrderSettingsState
buy_value	benchmarks/egen/TxnHarnessStructs.h	/^    double              buy_value;$/;"	m	struct:TPCE::TTradeResultFrame2Output
buy_value	benchmarks/egen/TxnHarnessStructs.h	/^    double  buy_value;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
buy_value	benchmarks/egen/TxnHarnessStructs.h	/^    double  buy_value;$/;"	m	struct:TPCE::TTradeOrderTxnOutput
buy_value	benchmarks/egen/TxnHarnessStructs.h	/^    double  buy_value;$/;"	m	struct:TPCE::TTradeResultFrame3Input
by_acct_id	benchmarks/egen/DriverParamSettings.h	/^    INT32   by_acct_id;     \/\/ percentage$/;"	m	struct:TPCE::TMarketWatchSettings
by_acct_id	benchmarks/egen/DriverParamSettings.h	/^    bool    by_acct_id;     \/\/ percentage$/;"	m	struct:TPCE::TMarketWatchSettingsState
by_cust_id	benchmarks/egen/DriverParamSettings.h	/^    INT32   by_cust_id;     \/\/ percentage$/;"	m	struct:TPCE::TCustomerPositionSettings
by_cust_id	benchmarks/egen/DriverParamSettings.h	/^    bool    by_cust_id;     \/\/ percentage$/;"	m	struct:TPCE::TCustomerPositionSettingsState
by_industry	benchmarks/egen/DriverParamSettings.h	/^    INT32   by_industry;    \/\/ percentage$/;"	m	struct:TPCE::TMarketWatchSettings
by_industry	benchmarks/egen/DriverParamSettings.h	/^    bool    by_industry;    \/\/ percentage$/;"	m	struct:TPCE::TMarketWatchSettingsState
by_tax_id	benchmarks/egen/DriverParamSettings.h	/^    INT32   by_tax_id;      \/\/ percentage$/;"	m	struct:TPCE::TCustomerPositionSettings
by_tax_id	benchmarks/egen/DriverParamSettings.h	/^    bool    by_tax_id;      \/\/ percentage$/;"	m	struct:TPCE::TCustomerPositionSettingsState
by_watch_list	benchmarks/egen/DriverParamSettings.h	/^    INT32   by_watch_list;  \/\/ percentage$/;"	m	struct:TPCE::TMarketWatchSettings
by_watch_list	benchmarks/egen/DriverParamSettings.h	/^    bool    by_watch_list;  \/\/ percentage$/;"	m	struct:TPCE::TMarketWatchSettingsState
byte_offset	dbcore/sm-log-file.h	/^        uint64_t byte_offset;$/;"	m	struct:sm_log_file_mgr::segment_id
byte_offset	dbcore/sm-log-segments.h	/^    uint64_t byte_offset;$/;"	m	struct:log_segment_desc
bytes	masstree/checkpoint.hh	/^    uint64_t bytes;$/;"	m	struct:ckstate
bytes_	core.h	/^    char bytes_[sizeof(T)];$/;"	m	struct:private_::buf
bytes_	core.h	/^  char bytes_[sizeof(util::aligned_padded_elem<T, Pedantic>) * NMAXCORES];$/;"	m	class:percore
bytes_freed	dbcore/rcu.h	/^    size_t bytes_freed;$/;"	m	struct:RCU::rcu_gc_info
bytes_key_reader	typed_txn_btree.h	/^  typedef txn_btree_::key_reader bytes_key_reader;$/;"	t	class:typed_txn_btree
bytes_search_range_call	typed_txn_btree.h	/^typed_txn_btree<Transaction, Schema>::bytes_search_range_call($/;"	f	class:typed_txn_btree
bytes_search_range_callback	typed_txn_btree.h	/^  struct bytes_search_range_callback {$/;"	s	class:typed_txn_btree
bytes_single_value_reader	typed_txn_btree.h	/^  typedef txn_btree_::single_value_reader bytes_single_value_reader;$/;"	t	class:typed_txn_btree
bytes_stashed	dbcore/rcu.h	/^    size_t bytes_stashed;$/;"	m	struct:RCU::rcu_gc_info
bytes_value_reader	typed_txn_btree.h	/^  typedef txn_btree_::value_reader bytes_value_reader;$/;"	t	class:typed_txn_btree
c	benchmarks/masstree/kvrandom.hh	/^    enum { default_seed = 819234718U, a = 1664525U, c = 1013904223U };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon98
c	masstree/clp.c	/^    int c;$/;"	m	struct:__anon44	file:
c	masstree/kvrandom.hh	/^    enum { default_seed = 819234718U, a = 1664525U, c = 1013904223U };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon30
c1	benchmarks/masstree/kvrandom.cc	/^const uint32_t kvrandom_psdes_nr::c1[] = {$/;"	m	class:kvrandom_psdes_nr	file:
c1	benchmarks/masstree/kvrandom.hh	/^    static const uint32_t c1[niter], c2[niter];$/;"	m	class:kvrandom_psdes_nr
c1	masstree/kvrandom.cc	/^const uint32_t kvrandom_psdes_nr::c1[] = {$/;"	m	class:kvrandom_psdes_nr	file:
c1	masstree/kvrandom.hh	/^    static const uint32_t c1[niter], c2[niter];$/;"	m	class:kvrandom_psdes_nr
c2	benchmarks/masstree/kvrandom.cc	/^const uint32_t kvrandom_psdes_nr::c2[] = {$/;"	m	class:kvrandom_psdes_nr	file:
c2	benchmarks/masstree/kvrandom.hh	/^    static const uint32_t c1[niter], c2[niter];$/;"	m	class:kvrandom_psdes_nr
c2	masstree/kvrandom.cc	/^const uint32_t kvrandom_psdes_nr::c2[] = {$/;"	m	class:kvrandom_psdes_nr	file:
c2	masstree/kvrandom.hh	/^    static const uint32_t c1[niter], c2[niter];$/;"	m	class:kvrandom_psdes_nr
cACL_len	benchmarks/egen/TableConsts.h	/^const int cACL_len = 4;$/;"	m	namespace:TPCE
cAD_CTRY_len	benchmarks/egen/TableConsts.h	/^const int cAD_CTRY_len = 80;$/;"	m	namespace:TPCE
cAD_DIV_len	benchmarks/egen/TableConsts.h	/^const int cAD_DIV_len = cDIV_len;   \/\/state\/provice abreviation$/;"	m	namespace:TPCE
cAD_LINE_len	benchmarks/egen/TableConsts.h	/^const int cAD_LINE_len = 80;$/;"	m	namespace:TPCE
cAD_NAME_len	benchmarks/egen/TableConsts.h	/^const int cAD_NAME_len  = 80;$/;"	m	namespace:TPCE
cAD_TOWN_len	benchmarks/egen/TableConsts.h	/^const int cAD_TOWN_len  = cTOWN_len;$/;"	m	namespace:TPCE
cAD_ZIP_len	benchmarks/egen/TableConsts.h	/^const int cAD_ZIP_len = cCODE_len;$/;"	m	namespace:TPCE
cAREA_len	benchmarks/egen/TableConsts.h	/^const int cAREA_len = 3;$/;"	m	namespace:TPCE
cB_NAME_len	benchmarks/egen/TableConsts.h	/^const int cB_NAME_len = cF_NAME_len + cM_NAME_len + cL_NAME_len + 3;    \/\/ two spaces and one period$/;"	m	namespace:TPCE
cCA_NAME_len	benchmarks/egen/TableConsts.h	/^const int cCA_NAME_len      = 50;$/;"	m	namespace:TPCE
cCEO_NAME_len	benchmarks/egen/TableConsts.h	/^const int cCEO_NAME_len = cF_NAME_len + cL_NAME_len + 1;        \/\/ one space$/;"	m	namespace:TPCE
cCODE_len	benchmarks/egen/TableConsts.h	/^const int cCODE_len = 12;$/;"	m	namespace:TPCE
cCO_DESC_len	benchmarks/egen/TableConsts.h	/^const int cCO_DESC_len = 150;$/;"	m	namespace:TPCE
cCO_NAME_len	benchmarks/egen/TableConsts.h	/^const int cCO_NAME_len = 60;$/;"	m	namespace:TPCE
cCO_SP_RATE_len	benchmarks/egen/TableConsts.h	/^const int cCO_SP_RATE_len = 4;$/;"	m	namespace:TPCE
cCTRY_len	benchmarks/egen/TableConsts.h	/^const int cCTRY_len = 3;$/;"	m	namespace:TPCE
cCT_NAME_len	benchmarks/egen/TableConsts.h	/^const int cCT_NAME_len = 100;$/;"	m	namespace:TPCE
cDIV_len	benchmarks/egen/TableConsts.h	/^const int cDIV_len  = 80;$/;"	m	namespace:TPCE
cDOB_len	benchmarks/egen/TableConsts.h	/^const int cDOB_len      = 30;$/;"	m	namespace:TPCE
cEMAIL_len	benchmarks/egen/TableConsts.h	/^const int cEMAIL_len    = 50;$/;"	m	namespace:TPCE
cEXEC_NAME_len	benchmarks/egen/TableConsts.h	/^const int cEXEC_NAME_len = cF_NAME_len + cM_NAME_len + cL_NAME_len + 3; \/\/ two spaces and one extra$/;"	m	namespace:TPCE
cEXT_len	benchmarks/egen/TableConsts.h	/^const int cEXT_len  = 5;$/;"	m	namespace:TPCE
cEX_DESC_len	benchmarks/egen/TableConsts.h	/^const int cEX_DESC_len = 150;$/;"	m	namespace:TPCE
cEX_ID_len	benchmarks/egen/TableConsts.h	/^const int cEX_ID_len = 6;$/;"	m	namespace:TPCE
cEX_NAME_len	benchmarks/egen/TableConsts.h	/^const int cEX_NAME_len = 100;$/;"	m	namespace:TPCE
cF_NAME_len	benchmarks/egen/TableConsts.h	/^const int cF_NAME_len       = 20;$/;"	m	namespace:TPCE
cGNDR_len	benchmarks/egen/TableConsts.h	/^const int cGNDR_len     = 1;$/;"	m	namespace:TPCE
cH_BUY_DTS_len	benchmarks/egen/TableConsts.h	/^const int cH_BUY_DTS_len = 30;  \/\/date of purchase$/;"	m	namespace:TPCE
cIN_ID_len	benchmarks/egen/TableConsts.h	/^const int cIN_ID_len = 2;$/;"	m	namespace:TPCE
cIN_NAME_len	benchmarks/egen/TableConsts.h	/^const int cIN_NAME_len = 50;$/;"	m	namespace:TPCE
cLOCAL_len	benchmarks/egen/TableConsts.h	/^const int cLOCAL_len    = 10;$/;"	m	namespace:TPCE
cL_NAME_len	benchmarks/egen/TableConsts.h	/^const int cL_NAME_len       = 25;$/;"	m	namespace:TPCE
cLimitBuyLoadThreshold	benchmarks/egen/HoldingsAndTradesTable.h	/^const int cLimitBuyLoadThreshold    = cMarketSellLoadThreshold  + 20;   \/\/ 61% - 80%$/;"	m	namespace:TPCE
cLimitSellLoadThreshold	benchmarks/egen/HoldingsAndTradesTable.h	/^const int cLimitSellLoadThreshold   = cLimitBuyLoadThreshold    + 10;   \/\/ 81% - 90%$/;"	m	namespace:TPCE
cM_NAME_len	benchmarks/egen/TableConsts.h	/^const int cM_NAME_len       = 1;$/;"	m	namespace:TPCE
cMarketBuyLoadThreshold	benchmarks/egen/HoldingsAndTradesTable.h	/^const int cMarketBuyLoadThreshold   = 30;                               \/\/  1% - 30%$/;"	m	namespace:TPCE
cMarketSellLoadThreshold	benchmarks/egen/HoldingsAndTradesTable.h	/^const int cMarketSellLoadThreshold  = cMarketBuyLoadThreshold   + 30;   \/\/ 31% - 60%$/;"	m	namespace:TPCE
cNI_AUTHOR_len	benchmarks/egen/TableConsts.h	/^const int cNI_AUTHOR_len = 30;$/;"	m	namespace:TPCE
cNI_HEADLINE_len	benchmarks/egen/TableConsts.h	/^const int cNI_HEADLINE_len = 80;$/;"	m	namespace:TPCE
cNI_ITEM_len	benchmarks/egen/TableConsts.h	/^const int cNI_ITEM_len = 1 * 1000;				\/\/ FIXME. originally, it is 100K $/;"	m	namespace:TPCE
cNI_SOURCE_len	benchmarks/egen/TableConsts.h	/^const int cNI_SOURCE_len = 30;$/;"	m	namespace:TPCE
cNI_SUMMARY_len	benchmarks/egen/TableConsts.h	/^const int cNI_SUMMARY_len = 255;$/;"	m	namespace:TPCE
cNUM_TRADE_QTY_SIZES	benchmarks/egen/HoldingsAndTradesTable.h	/^const int   cNUM_TRADE_QTY_SIZES = 4;$/;"	m	namespace:TPCE
cSC_ID_len	benchmarks/egen/TableConsts.h	/^const int cSC_ID_len = 2;$/;"	m	namespace:TPCE
cSC_NAME_len	benchmarks/egen/TableConsts.h	/^const int cSC_NAME_len = 30;$/;"	m	namespace:TPCE
cSE_CASH_TYPE_len	benchmarks/egen/TableConsts.h	/^const int cSE_CASH_TYPE_len = 40;$/;"	m	namespace:TPCE
cSP_RATE_len	benchmarks/egen/TableConsts.h	/^const int cSP_RATE_len = 4;$/;"	m	namespace:TPCE
cST_ID_len	benchmarks/egen/TableConsts.h	/^const int cST_ID_len = 4;$/;"	m	namespace:TPCE
cST_NAME_len	benchmarks/egen/TableConsts.h	/^const int cST_NAME_len = 10;$/;"	m	namespace:TPCE
cSYMBOL_len	benchmarks/egen/TableConsts.h	/^const int cSYMBOL_len = 7 + 1 + 7;  \/\/ base + separator + extended$/;"	m	namespace:TPCE
cS_ISSUE_len	benchmarks/egen/TableConsts.h	/^const int cS_ISSUE_len = 6;$/;"	m	namespace:TPCE
cS_NAME_len	benchmarks/egen/TableConsts.h	/^const int cS_NAME_len = 70;$/;"	m	namespace:TPCE
cStopLossLoadThreshold	benchmarks/egen/HoldingsAndTradesTable.h	/^const int cStopLossLoadThreshold    = cLimitSellLoadThreshold   + 10;   \/\/ 91% - 100%$/;"	m	namespace:TPCE
cTAX_ID_len	benchmarks/egen/TableConsts.h	/^const int cTAX_ID_len       = 20;$/;"	m	namespace:TPCE
cTH_ST_ID_len	benchmarks/egen/TableConsts.h	/^const int cTH_ST_ID_len = cST_ID_len;$/;"	m	namespace:TPCE
cTOWN_len	benchmarks/egen/TableConsts.h	/^const int cTOWN_len = 80;$/;"	m	namespace:TPCE
cTRADE_QTY_SIZES	benchmarks/egen/HoldingsAndTradesTable.h	/^const int   cTRADE_QTY_SIZES[cNUM_TRADE_QTY_SIZES] = {100, 200, 400, 800};$/;"	m	namespace:TPCE
cTT_ID_len	benchmarks/egen/TableConsts.h	/^const int cTT_ID_len = 3;$/;"	m	namespace:TPCE
cTT_NAME_len	benchmarks/egen/TableConsts.h	/^const int cTT_NAME_len = 12;$/;"	m	namespace:TPCE
cTX_ID_len	benchmarks/egen/TableConsts.h	/^const int cTX_ID_len = 4;$/;"	m	namespace:TPCE
cTX_NAME_len	benchmarks/egen/TableConsts.h	/^const int cTX_NAME_len = 50;$/;"	m	namespace:TPCE
cWORD_len	benchmarks/egen/InputFlatFilesDeclarations.h	/^const int cWORD_len = 30;   \/\/ for NEWS input file$/;"	m	namespace:TPCE
cZC_CODE_len	benchmarks/egen/TableConsts.h	/^const int cZC_CODE_len = cCODE_len;$/;"	m	namespace:TPCE
cZC_DIV_len	benchmarks/egen/TableConsts.h	/^const int cZC_DIV_len = cDIV_len;$/;"	m	namespace:TPCE
cZC_TOWN_len	benchmarks/egen/TableConsts.h	/^const int cZC_TOWN_len = cTOWN_len;$/;"	m	namespace:TPCE
c_	masstree/mtclient.cc	/^    struct child *c_;$/;"	m	struct:kvtest_client	typeref:struct:kvtest_client::child	file:
c_ad_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              c_ad_id;$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ad_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              c_ad_id;$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_area_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_area_1[cAREA_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_area_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_area_1[cAREA_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_area_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_area_2[cAREA_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_area_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_area_2[cAREA_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_area_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_area_3[cAREA_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_area_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_area_3[cAREA_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_ctry_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ctry_1[cCTRY_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ctry_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ctry_1[cCTRY_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_ctry_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ctry_2[cCTRY_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ctry_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ctry_2[cCTRY_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_ctry_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ctry_3[cCTRY_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ctry_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ctry_3[cCTRY_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_dob	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    c_dob;$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_dob	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    c_dob;$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_email_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_email_1[cEMAIL_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_email_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_email_1[cEMAIL_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_email_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_email_2[cEMAIL_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_email_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_email_2[cEMAIL_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_ext_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ext_1[cEXT_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ext_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ext_1[cEXT_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_ext_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ext_2[cEXT_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ext_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ext_2[cEXT_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_ext_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ext_3[cEXT_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_ext_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_ext_3[cEXT_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_f_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_f_name[cF_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_f_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_f_name[cF_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_gndr	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_gndr[cGNDR_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_gndr	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_gndr[cGNDR_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              c_id;$/;"	m	struct:TPCE::TMarketWatchTxnInput
c_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  c_id;$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
c_l_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_l_name[cL_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_l_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_l_name[cL_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_local_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_local_1[cLOCAL_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_local_1	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_local_1[cLOCAL_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_local_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_local_2[cLOCAL_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_local_2	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_local_2[cLOCAL_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_local_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_local_3[cLOCAL_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_local_3	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_local_3[cLOCAL_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_m_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_m_name[cM_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_m_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_m_name[cM_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_st_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_st_id[cST_ID_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_st_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_st_id[cST_ID_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
c_str	benchmarks/masstree/kvtest.cc	/^  c_str()$/;"	f	struct:quick_istr
c_str	masstree/misc.hh	/^    const char *c_str() {$/;"	f	struct:quick_istr
c_str	masstree/straccum.cc	/^StringAccum::c_str()$/;"	f	class:lcdf::StringAccum
c_str	masstree/string.hh	/^inline const char* String::c_str() const {$/;"	f	class:lcdf::String
c_str	record/inline_str.h	/^  c_str() const$/;"	f	class:inline_str_base
c_tier	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_tier;$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
c_tier	benchmarks/egen/TxnHarnessStructs.h	/^    char                c_tier;$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
cabegin	masstree/json.hh	/^    Json::const_array_iterator cabegin() const {$/;"	f	class:lcdf::Json_proxy_base
cabegin	masstree/json.hh	/^inline Json::const_array_iterator Json::cabegin() const {$/;"	f	class:lcdf::Json
cache_line_2_	masstree/log.hh	/^            char cache_line_2_[CACHE_LINE_SIZE - 4 * sizeof(kvepoch_t) - sizeof(logset_info)];$/;"	m	struct:loginfo::__anon78::__anon80
cache_map	dbcore/sm-oid.cpp	/^    typedef sc_hash_set<NENTRIES, sm_allocator::thread_cache, hasher, cmpeq> cache_map;$/;"	t	struct:__anon93::thread_data	file:
cached_next	dbcore/rcu-slist.cpp	/^        cached_next() { \/* uninitialized *\/ }$/;"	f	struct:__anon82::cached_next
cached_next	dbcore/rcu-slist.cpp	/^        cached_next(next_ptr volatile *n)$/;"	f	struct:__anon82::cached_next
cached_next	dbcore/rcu-slist.cpp	/^    struct cached_next {$/;"	s	namespace:__anon82	file:
caches	dbcore/sm-oid.cpp	/^    cache_map caches;$/;"	m	struct:__anon93::thread_data	file:
caend	masstree/json.hh	/^    Json::const_array_iterator caend() const {$/;"	f	class:lcdf::Json_proxy_base
caend	masstree/json.hh	/^inline Json::const_array_iterator Json::caend() const {$/;"	f	class:lcdf::Json
calc_simorders	benchmarks/egen/EGenValidate.cpp	/^        INT64 calc_simorders() {$/;"	f	class:BucketSimOptions
calc_stddev	benchmarks/egen/bucketsimulator.cpp	/^double BucketSimulator::calc_stddev() {$/;"	f	class:TPCE::BucketSimulator
calculate_lmm	masstree/clp.c	/^calculate_lmm(Clp_Parser *clp, const Clp_Option *opt, Clp_InternOption *iopt, int nopt)$/;"	f	file:
callback	txn_btree.h	/^    T *const callback;$/;"	m	class:txn_btree::type_callback_wrapper
callback_	btree.h	/^    T *const callback_;$/;"	m	class:btree::type_callback_wrapper
callback_	masstree_btree.h	/^  F& callback_;$/;"	m	class:mbtree::low_level_search_range_callback_wrapper
callback_	masstree_btree.h	/^  low_level_search_range_callback& callback_;$/;"	m	class:mbtree::low_level_search_range_scanner
callbacks	dbcore/epoch.h	/^    struct callbacks {$/;"	s	struct:epoch_mgr
caller_callback	base_txn_btree.h	/^    Callback *const caller_callback;$/;"	m	struct:base_txn_btree::txn_search_range_callback
canceling	masstree/mtd.cc	/^canceling(void *)$/;"	f
candlesticks	masstree/mttest.cc	/^    std::vector<lcdf::StringAccum> candlesticks;$/;"	m	struct:__anon67::gnuplot_info	file:
cap	masstree/straccum.hh	/^	int cap;$/;"	m	struct:lcdf::StringAccum::rep_t
capacity	benchmarks/egen/shore_tpce_egen.h	/^  int capacity;$/;"	m	class:TPCE::EgenTupleContainer
capacity	dbcore/dynarray.cpp	/^dynarray::capacity() const$/;"	f	class:dynarray
capacity	masstree/json.hh	/^    int capacity;$/;"	m	struct:lcdf::Json::ArrayJson
capacity	masstree/kvio.hh	/^    unsigned capacity; \/\/ allocated size of buf$/;"	m	struct:kvout
capacity	masstree/kvthread.hh	/^    enum { capacity = (4076 - sizeof(limbo_group *)) \/ sizeof(limbo_element) };$/;"	e	enum:limbo_group::__anon70
capacity	masstree/straccum.hh	/^inline int StringAccum::capacity() const {$/;"	f	class:lcdf::StringAccum
capacity	masstree/string.hh	/^	uint32_t capacity;$/;"	m	struct:lcdf::String::memo_type
capacity_	masstree/json.hh	/^    int capacity_;$/;"	m	struct:lcdf::Json::ObjectJson
capacity_	masstree/local_vector.hh	/^	size_type capacity_;$/;"	m	struct:local_vector::rep
capacity_mark	dbcore/sm-oid-alloc-impl.h	/^        OID capacity_mark;$/;"	m	struct:sm_allocator::header_data
cash_bal	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_bal[max_acct_len];$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
cash_bal	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_bal[max_acct_len];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
cash_transaction_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_transaction_amount;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
cash_transaction_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_transaction_amount;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
cash_transaction_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_transaction_amount;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
cash_transaction_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_transaction_amount;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
cash_transaction_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_transaction_amount;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
cash_transaction_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              cash_transaction_amount;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
cash_transaction_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_amount_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
cash_transaction_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_amount_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
cash_transaction_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_amount_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
cash_transaction_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_amount_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
cash_transaction_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_amount_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
cash_transaction_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_amount_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
cash_transaction_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    cash_transaction_dts;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
cash_transaction_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    cash_transaction_dts;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
cash_transaction_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    cash_transaction_dts;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
cash_transaction_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    cash_transaction_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
cash_transaction_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    cash_transaction_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
cash_transaction_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    cash_transaction_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
cash_transaction_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_dts_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
cash_transaction_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_dts_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
cash_transaction_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_dts_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
cash_transaction_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_dts_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
cash_transaction_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_dts_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
cash_transaction_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_dts_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
cash_transaction_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cash_transaction_name[cCT_NAME_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
cash_transaction_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cash_transaction_name[cCT_NAME_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
cash_transaction_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cash_transaction_name[cCT_NAME_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
cash_transaction_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cash_transaction_name[cCT_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
cash_transaction_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cash_transaction_name[cCT_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
cash_transaction_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cash_transaction_name[cCT_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
cash_transaction_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_name_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
cash_transaction_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_name_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
cash_transaction_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_name_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
cash_transaction_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
cash_transaction_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
cash_transaction_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        cash_transaction_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
cast	core.h	/^    inline T * cast() { return (T *) &bytes_[0]; }$/;"	f	struct:private_::buf
cast	core.h	/^    inline const T * cast() const { return (T *) &bytes_[0]; }$/;"	f	struct:private_::buf
cast	txn.h	/^  cast() const$/;"	f	class:transaction
cast	txn.h	/^  cast()$/;"	f	class:transaction
cast_base	benchmarks/ndb_wrapper.h	/^  struct cast_base {$/;"	s	namespace:private_
catchint	masstree/mtd.cc	/^catchint(int)$/;"	f
cb	dbcore/epoch.h	/^    callbacks cb;$/;"	m	struct:epoch_mgr
cbegin	masstree/json.hh	/^    Json::const_iterator cbegin() const {$/;"	f	class:lcdf::Json_proxy_base
cbegin	masstree/json.hh	/^inline Json::const_iterator Json::cbegin() const {$/;"	f	class:lcdf::Json
ceil_log2	log2.hh	/^ceil_log2(std::size_t x)$/;"	f
ceil_log2_const	log2.hh	/^ceil_log2_const(std::size_t x, bool exact = true)$/;"	f
cend	masstree/json.hh	/^    Json::const_iterator cend() const {$/;"	f	class:lcdf::Json_proxy_base
cend	masstree/json.hh	/^inline Json::const_iterator Json::cend() const {$/;"	f	class:lcdf::Json
ceo_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                ceo_name[cCEO_NAME_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
cesu8_to_utf8	masstree/string.cc	/^String::cesu8_to_utf8(int flags) const$/;"	f	class:lcdf::String
cg	scopedperf.hh	/^  const struct ctrgroup_chain<Counters...> *const cg;$/;"	m	class:scopedperf::perfsum_tmpl
cg_get_delta	scopedperf.hh	/^  void cg_get_delta(uint64_t *delta, uint64_t *prev) const {$/;"	f	class:scopedperf::ctrgroup_chain
cg_get_delta	scopedperf.hh	/^  void cg_get_delta(uint64_t *delta, uint64_t *prev) const {}$/;"	f	class:scopedperf::ctrgroup_chain
cg_get_samples	scopedperf.hh	/^  void cg_get_samples(uint64_t *v) const {$/;"	f	class:scopedperf::ctrgroup_chain
cg_get_samples	scopedperf.hh	/^  void cg_get_samples(uint64_t *v) const {}$/;"	f	class:scopedperf::ctrgroup_chain
cg_nctr	scopedperf.hh	/^  static const uint cg_nctr = 0;$/;"	m	class:scopedperf::ctrgroup_chain
cg_nctr	scopedperf.hh	/^  static const uint cg_nctr = 1 + ctrgroup_chain<Others...>::cg_nctr;$/;"	m	class:scopedperf::ctrgroup_chain
chainTable	third-party/lz4/lz4hc.c	/^    U16 chainTable[MAXD];$/;"	m	struct:__anon7	file:
chain_length	small_unordered_map.h	/^  chain_length(bucket *b)$/;"	f	class:small_unordered_map
chain_length	static_unordered_map.h	/^  chain_length(bucket *b)$/;"	f	class:static_unordered_map
charge	benchmarks/egen/TxnHarnessStructs.h	/^    double              charge[max_trade_status_len];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
charge	benchmarks/egen/TxnHarnessStructs.h	/^    double  charge;$/;"	m	struct:TPCE::TTradeResultFrame1Output
chargeTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CChargeTable*				chargeTable;$/;"	m	class:TPCE::CGenerateAndLoad
charge_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double  charge_amount;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
charge_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double  charge_amount;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
cheap_eq	small_unordered_map.h	/^  struct cheap_eq { static const bool value = false; };$/;"	s	namespace:private_
check	masstree/log.cc	/^    static bool check(const char *buf) {$/;"	f	struct:logrec_base
check	masstree/log.cc	/^    static bool check(const char *buf) {$/;"	f	struct:logrec_epoch
check	masstree/log.cc	/^    static bool check(const char *buf) {$/;"	f	struct:logrec_kv
check	masstree/log.cc	/^    static bool check(const char *buf) {$/;"	f	struct:logrec_kvdelta
check	masstree/mtclient.hh	/^    int check(int tryhard) {$/;"	f	class:KVConn
check	masstree/mtd.cc	/^    int check(int tryhard) {$/;"	f	struct:conn
check	masstree_btree.h	/^  void check(const Masstree::scanstackelt<P>& iter,$/;"	f	class:mbtree::search_range_scanner_base
check_binary_executable	benchmarks/runner.py	/^def check_binary_executable(binary):$/;"	f
check_correctness	masstree/msgpacktest.cc	/^void check_correctness() {$/;"	f
check_epoch	masstree/log.cc	/^static void check_epoch() {$/;"	f	file:
check_flush	masstree/mtclient.cc	/^inline void child::check_flush() {$/;"	f	class:child
check_free	masstree/kvthread.hh	/^    static void *check_free(void *p, size_t size, int freetype) {$/;"	f	struct:memdebug
check_free_after_rcu	masstree/kvthread.hh	/^    static void *check_free_after_rcu(void *p, int freetype) {$/;"	f	struct:memdebug
check_leaf_insert	masstree/masstree_insert.hh	/^inline node_base<P>* tcursor<P>::check_leaf_insert(node_type* root,$/;"	f	class:Masstree::tcursor
check_leaf_locked	masstree/masstree_get.hh	/^inline node_base<P>* tcursor<P>::check_leaf_locked(node_type* root,$/;"	f	class:Masstree::tcursor
check_list	dbcore/test-rcu-slist.cpp	/^void check_list(node_list &present)$/;"	f	file:
check_list	dbcore/test-rcu.cpp	/^void check_list(node_list &present)$/;"	f	file:
check_rcu	masstree/kvthread.hh	/^    static void check_rcu(void *p, size_t size, int freetype) {$/;"	f	struct:memdebug
check_straccum2_utf8	masstree/test_string.cc	/^check_straccum2_utf8(StringAccum &sa, const char *in, int inlen,$/;"	f	file:
check_straccum_utf8	masstree/test_string.cc	/^check_straccum_utf8(StringAccum &sa, const char *in, int inlen,$/;"	f	file:
check_use	masstree/kvthread.hh	/^    static bool check_use(const void *p, int type) {$/;"	f	struct:memdebug
check_use	masstree/kvthread.hh	/^    static bool check_use(const void *p, int type1, int type2) {$/;"	f	struct:memdebug
check_version	btree.h	/^    check_version(uint64_t version) const$/;"	f	struct:btree::node
checkasync	masstree/mtclient.cc	/^checkasync(struct child *c, int force)$/;"	f
checked	benchmarks/results/make_graphs-4.py	/^  def checked(e):$/;"	f	function:YY
checked	benchmarks/results/make_graphs-4.py	/^  def checked(e):$/;"	f	function:YYPC
checked	benchmarks/results/make_graphs-5.py	/^        def checked(e):$/;"	f	function:datafromfile.YY
checked	benchmarks/results/make_graphs-5.py	/^        def checked(e):$/;"	f	function:datafromfile.YYPC
checked_write	masstree/file.hh	/^checked_write(int fd, const T *x)$/;"	f
checked_write	masstree/file.hh	/^checked_write(int fd, const void *buf, size_t count)$/;"	f
checker	benchmarks/tpcc.cc	/^struct checker {$/;"	s	file:
checkpoint	masstree/mtclient.hh	/^    void checkpoint(int childno) {$/;"	f	class:KVConn
checkpoint_cond	masstree/mtd.cc	/^static pthread_cond_t checkpoint_cond;$/;"	v	file:
checkpoint_interval	masstree/mtd.cc	/^static double checkpoint_interval = 1000000;$/;"	v	file:
checkpoint_mu	masstree/mtd.cc	/^static pthread_mutex_t checkpoint_mu;$/;"	v	file:
checkpoint_read	masstree/value_array.hh	/^value_array* value_array::checkpoint_read(PARSER& par, kvtimestamp_t ts,$/;"	f	class:value_array
checkpoint_read	masstree/value_bag.hh	/^inline value_bag<O>* value_bag<O>::checkpoint_read(PARSER& par,$/;"	f	class:value_bag
checkpoint_read	masstree/value_string.hh	/^inline value_string* value_string::checkpoint_read(PARSER& par,$/;"	f	class:value_string
checkpoint_read	masstree/value_versioned_array.hh	/^value_versioned_array::checkpoint_read(PARSER& par, kvtimestamp_t ts,$/;"	f	class:value_versioned_array
checkpoint_write	masstree/value_array.hh	/^void value_array::checkpoint_write(UNPARSER& unpar) const {$/;"	f	class:value_array
checkpoint_write	masstree/value_bag.hh	/^inline void value_bag<O>::checkpoint_write(UNPARSER& unpar) const {$/;"	f	class:value_bag
checkpoint_write	masstree/value_string.hh	/^inline void value_string::checkpoint_write(UNPARSER& unpar) const {$/;"	f	class:value_string
checkpoint_write	masstree/value_versioned_array.hh	/^void value_versioned_array::checkpoint_write(UNPARSER& unpar) const {$/;"	f	class:value_versioned_array
checks_	masstree/mtd.cc	/^    int checks_;$/;"	m	struct:kvtest_client	file:
checksum	dbcore/sm-log-defs.h	/^    uint32_t checksum;$/;"	m	struct:log_block
checksum_begin	dbcore/sm-log-defs.h	/^    char const *checksum_begin() {$/;"	f	struct:log_block
child	masstree/mtclient.cc	/^    struct child* child() const {$/;"	f	struct:kvtest_client
child	masstree/mtclient.cc	/^struct child {$/;"	s	file:
child_oid_	masstree/masstree_struct.hh	/^	oid_type child_oid_[width + 1];$/;"	m	class:Masstree::internode
childno	masstree/mtclient.cc	/^    int childno;$/;"	m	struct:child	file:
children	masstree/mtclient.cc	/^static int children = 1;$/;"	v	file:
children_	btree.h	/^    node *children_[NKeysPerNode + 1];$/;"	m	struct:btree::internal_node
chunkParameters	third-party/lz4/bench.c	/^struct chunkParameters$/;"	s	file:
chunkParameters	third-party/lz4/fullbench.c	/^struct chunkParameters$/;"	s	file:
chunkSize	third-party/lz4/bench.c	/^static int chunkSize = DEFAULT_CHUNKSIZE;$/;"	v	file:
chunkSize	third-party/lz4/fullbench.c	/^static int chunkSize = DEFAULT_CHUNKSIZE;$/;"	v	file:
ci_	masstree/kvthread.hh	/^	threadcounter ci_;$/;"	m	struct:threadinfo::accounting_relax_fence_function
cid	masstree/perfstat.hh	/^    int cid;    \/\/ core index$/;"	m	struct:Perf::stat
circbuf	circbuf.h	/^  circbuf()$/;"	f	class:circbuf
circbuf	circbuf.h	/^class circbuf {$/;"	c
circular_int	masstree/circular_int.hh	/^    circular_int()$/;"	f	class:circular_int
circular_int	masstree/circular_int.hh	/^    circular_int(T x)$/;"	f	class:circular_int
circular_int	masstree/circular_int.hh	/^class circular_int {$/;"	c
ckp_gen	masstree/mtd.cc	/^static kvepoch_t ckp_gen = 0; \/\/ recover from checkpoint$/;"	v	file:
ckpdirs	masstree/mtd.cc	/^static std::vector<const char*> ckpdirs;$/;"	v	file:
ckptrav_inorder	masstree/kvproto.hh	/^    ckptrav_inorder = 0,$/;"	e	enum:ckptrav_order_t
ckptrav_order_t	masstree/kvproto.hh	/^enum ckptrav_order_t {$/;"	g
ckptrav_preorder	masstree/kvproto.hh	/^    ckptrav_preorder$/;"	e	enum:ckptrav_order_t
cks	masstree/mtd.cc	/^static ckstate *cks = NULL; \/\/ checkpoint status of all checkpointing threads$/;"	v	file:
ckstate	masstree/checkpoint.hh	/^struct ckstate {$/;"	s
claimed_bitmap_entries	dbcore/ssn.cpp	/^static rl_bitmap_t claimed_bitmap_entries = 0;$/;"	m	namespace:TXN	file:
clear	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::clear()$/;"	f	class:ndb_ordered_index
clear	btree.h	/^  clear()$/;"	f	class:btree
clear	dbcore/sc-hash.h	/^    void clear() {$/;"	f
clear	dbcore/test-sc-hash.cpp	/^    void clear() {$/;"	f	struct:hinstance
clear	masstree/json.cc	/^void Json::clear() {$/;"	f	class:lcdf::Json
clear	masstree/local_vector.hh	/^inline void local_vector<T, N, A>::clear() {$/;"	f	class:local_vector
clear	masstree/msgpack.hh	/^    inline void clear() {$/;"	f	class:msgpack::unparser
clear	masstree/straccum.hh	/^inline void StringAccum::clear() {$/;"	f	class:lcdf::StringAccum
clear	masstree/value_versioned_array.hh	/^    void clear() {$/;"	f	struct:rowversion
clear	masstree_btree.h	/^  inline void clear() {$/;"	f	class:mbtree
clear	small_unordered_map.h	/^  clear()$/;"	f	class:small_unordered_map
clear	small_vector.h	/^  clear()$/;"	f	class:small_vector
clear	static_unordered_map.h	/^  clear()$/;"	f	class:static_unordered_map
clear	static_vector.h	/^  clear()$/;"	f	class:static_vector
clear	stats_common.h	/^  inline void clear() { size_ = 0; }$/;"	f	class:stats_command::packet
clearDestructive	small_vector.h	/^  clearDestructive()$/;"	f	class:small_vector
clear_file	benchmarks/bench.cc	/^clear_file(const char *name)$/;"	f	file:
clear_root	btree.h	/^    clear_root()$/;"	f	struct:btree::node
clearandbump	masstree/value_versioned_array.hh	/^    void clearandbump() {$/;"	f	struct:rowversion
client_	masstree/mttest.cc	/^    kvtest_client<T> client_;$/;"	m	struct:test_thread	file:
close	benchmarks/egen/TxnHarnessStructs.h	/^    double              close;$/;"	m	struct:TPCE::TDailyHistory
close_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        close_ind;$/;"	m	struct:TPCE::TDailyHistory
close_index	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::close_index(abstract_ordered_index *idx)$/;"	f	class:ndb_wrapper
clp_option_sentinel	masstree/clp.c	/^static const Clp_Option clp_option_sentinel[] = {$/;"	v	file:
clp_parse_suffixdouble	masstree/misc.cc	/^int clp_parse_suffixdouble(Clp_Parser *clp, const char *vstr,$/;"	f
clp_utf8_charlen	masstree/clp.c	/^clp_utf8_charlen(const Clp_Internal *cli, const char *s)$/;"	f	file:
clp_val_normalize	masstree/mttest.cc	/^enum { clp_val_normalize = Clp_ValFirstUser, clp_val_suffixdouble };$/;"	e	enum:__anon64	file:
clp_val_suffixdouble	masstree/mtclient.cc	/^enum { clp_val_suffixdouble = Clp_ValFirstUser };$/;"	e	enum:__anon19	file:
clp_val_suffixdouble	masstree/mtd.cc	/^enum { clp_val_suffixdouble = Clp_ValFirstUser };$/;"	e	enum:__anon57	file:
clp_val_suffixdouble	masstree/mttest.cc	/^enum { clp_val_normalize = Clp_ValFirstUser, clp_val_suffixdouble };$/;"	e	enum:__anon64	file:
clsn	tuple.h	/^  fat_ptr clsn;     \/\/ version creation stamp$/;"	m	struct:dbtuple
clz	masstree/compiler.hh	/^inline int clz(int x) {$/;"	f
clz	masstree/compiler.hh	/^inline int clz(long long x) {$/;"	f
clz	masstree/compiler.hh	/^inline int clz(long x) {$/;"	f
clz	masstree/compiler.hh	/^inline int clz(unsigned long long x) {$/;"	f
clz	masstree/compiler.hh	/^inline int clz(unsigned long x) {$/;"	f
clz	masstree/compiler.hh	/^inline int clz(unsigned x) {$/;"	f
cmark_file_name	dbcore/sm-log-file.cpp	/^    cmark_file_name(LSN start, LSN end) {$/;"	f	struct:cmark_file_name
cmark_file_name	dbcore/sm-log-file.cpp	/^struct cmark_file_name {$/;"	s	file:
cmd	masstree/mtclient.cc	/^    int cmd; \/\/ Cmd_ constant$/;"	m	struct:async	file:
cmd	scripts/tester.py	/^        ['--num-threads', str(ncores),$/;"	v
cmpeq	dbcore/sc-hash.h	/^    struct cmpeq {$/;"	s	struct:sc_hash_set
cmpeq	dbcore/sm-oid.cpp	/^    struct cmpeq {$/;"	s	struct:__anon93::thread_data	file:
cmpxchg	masstree/circular_int.hh	/^    circular_int<T> cmpxchg(T expected, T desired) {$/;"	f	class:circular_int
cmpxchg	masstree/circular_int.hh	/^    circular_int<T> cmpxchg(circular_int<T> expected, circular_int<T> desired) {$/;"	f	class:circular_int
cmpxchg	masstree/circular_int.hh	/^inline circular_int<T> cmpxchg(circular_int<T> *object, circular_int<T> expected,$/;"	f
cmpxchg	masstree/compiler.hh	/^inline T cmpxchg(T* object, T expected, T desired) {$/;"	f
cmpxchg	masstree/compiler.hh	/^inline unsigned cmpxchg(unsigned *object, int expected, int desired) {$/;"	f
cn	scopedperf.hh	/^  int cn;$/;"	m	class:scopedperf::pmc_ctr
cnt	benchmarks/egen/shore_tpce_egen.h	/^  long cnt;$/;"	m	class:TPCE::EgenTupleContainer
co_ad_cty	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_ad_cty[cAD_CTRY_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_ad_div	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_ad_div[cAD_DIV_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_ad_line1	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_ad_line1[cAD_LINE_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_ad_line2	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_ad_line2[cAD_LINE_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_ad_town	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_ad_town[cAD_TOWN_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_ad_zip	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_ad_zip[cAD_ZIP_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_desc	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_desc[cCO_DESC_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  co_id;$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
co_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_name[cCO_NAME_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
co_name	benchmarks/egen/TxnHarnessStructs.h	/^    char            co_name[cCO_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
co_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    co_name[cCO_NAME_len+1];        \/\/ IN-OUT parameter$/;"	m	struct:TPCE::TTradeOrderFrame3Input
co_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    co_name[cCO_NAME_len+1];    \/\/ IN-OUT parameter$/;"	m	struct:TPCE::TTradeOrderFrame3Output
co_st_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                co_st_id[cST_ID_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
cobegin	masstree/json.hh	/^    Json::const_object_iterator cobegin() const {$/;"	f	class:lcdf::Json_proxy_base
cobegin	masstree/json.hh	/^inline Json::const_object_iterator Json::cobegin() const {$/;"	f	class:lcdf::Json
coend	masstree/json.hh	/^    Json::const_object_iterator coend() const {$/;"	f	class:lcdf::Json_proxy_base
coend	masstree/json.hh	/^inline Json::const_object_iterator Json::coend() const {$/;"	f	class:lcdf::Json
col	masstree/value_array.hh	/^inline Str value_array::col(int i) const {$/;"	f	class:value_array
col	masstree/value_bag.hh	/^inline lcdf::Str value_bag<O>::col(int i) const {$/;"	f	class:value_bag
col	masstree/value_string.hh	/^inline lcdf::Str value_string::col(index_type idx) const {$/;"	f	class:value_string
col	masstree/value_versioned_array.hh	/^inline Str value_versioned_array::col(int i) const {$/;"	f	class:value_versioned_array
cold_cookie	dbcore/epoch.cpp	/^    void *cold_cookie = 0;$/;"	m	struct:epoch_mgr::private_state	file:
cold_stash	dbcore/rcu.cpp	/^    pointer_list *cold_stash;$/;"	m	struct:RCU::rcu_tcb	file:
collapse	masstree/masstree_remove.hh	/^void tcursor<P>::collapse(internode_type* p, ikey_type ikey,$/;"	f	class:Masstree::tcursor
cols_	masstree/value_array.hh	/^    lcdf::inline_string* cols_[0];$/;"	m	class:value_array
cols_	masstree/value_versioned_array.hh	/^    lcdf::inline_string* cols_[0];$/;"	m	class:value_versioned_array
column_length	masstree/value_bag.hh	/^inline O value_bag<O>::column_length(int i) const {$/;"	f	class:value_bag
combine	benchmarks/results/make_graphs-6.py	/^    def combine(ylist):$/;"	f	function:merge
comm_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              comm_amount;$/;"	m	struct:TPCE::TTradeResultFrame5Input
comm_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double  comm_amount;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
comm_rate	benchmarks/egen/TxnHarnessStructs.h	/^    double  comm_rate;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
comm_rate	benchmarks/egen/TxnHarnessStructs.h	/^    double  comm_rate;$/;"	m	struct:TPCE::TTradeResultFrame4Output
command	masstree/log.cc	/^    static uint32_t command(const char *buf) {$/;"	f	struct:logrec_base
command	masstree/log.cc	/^    uint32_t command;$/;"	m	struct:logrecord	file:
command_	masstree/log.cc	/^    uint32_t command_;$/;"	m	struct:logrec_base	file:
command_	masstree/log.cc	/^    uint32_t command_;$/;"	m	struct:logrec_epoch	file:
command_	masstree/log.cc	/^    uint32_t command_;$/;"	m	struct:logrec_kv	file:
command_	masstree/log.cc	/^    uint32_t command_;$/;"	m	struct:logrec_kvdelta	file:
commissionRateTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CCommissionRateTable*			commissionRateTable;$/;"	m	class:TPCE::CGenerateAndLoad
commit	dbcore/sm-tx-log.cpp	/^sm_tx_log::commit(LSN *pdest) {$/;"	f	class:sm_tx_log
commit	txn_impl.h	/^transaction<Protocol, Traits>::commit()$/;"	f	class:transaction
commit_checkpoint	masstree/mtd.cc	/^commit_checkpoint(Json ckpj)$/;"	f	file:
commit_txn	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::commit_txn(void *txn)$/;"	f	class:ndb_wrapper
companyCompetitorTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CCompanyCompetitorTable*		companyCompetitorTable;$/;"	m	class:TPCE::CGenerateAndLoad
companyTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CCompanyTable*				companyTable;$/;"	m	class:TPCE::CGenerateAndLoad
compare	masstree/compiler.hh	/^inline int compare(T a, T b) {$/;"	f
compare	masstree/masstree_key.hh	/^    int compare(ikey_type ikey, int keylenx) const {$/;"	f	class:Masstree::key
compare	masstree/string.cc	/^String_generic::compare(const char* a, int a_len, const char* b, int b_len)$/;"	f	class:lcdf::String_generic
compare	masstree/string_base.hh	/^    int compare(const String_base<TT> &x) const {$/;"	f	class:lcdf::String_base
compare	masstree/string_base.hh	/^    int compare(const char *cstr) const {$/;"	f	class:lcdf::String_base
compare	masstree/string_base.hh	/^    int compare(const char *s, int len) const {$/;"	f	class:lcdf::String_base
compare	masstree/string_base.hh	/^    static inline int compare(const unsigned char* a, int a_len,$/;"	f	class:lcdf::String_generic
compare	masstree/string_base.hh	/^    static int compare(const String_base<TT> &a, const String_base<UU> &b) {$/;"	f	class:lcdf::String_base
compare	masstree/stringbag.hh	/^    int compare(int p, const char *s, int len) const {$/;"	f	class:stringbag
compare	masstree/stringbag.hh	/^    int compare(int p, lcdf::Str s) const {$/;"	f	class:stringbag
compare_int	masstree/kvtest.hh	/^inline int compare_int(const void *a, const void *b)$/;"	f
compare_options	masstree/clp.c	/^compare_options(Clp_Parser *clp, const Clp_Option *o1, Clp_InternOption *io1,$/;"	f	file:
compfn	benchmarks/tpcc.cc	/^bool compfn(unsigned long i, unsigned long j) {$/;"	f
compiler_barrier	scopedperf.hh	/^compiler_barrier()$/;"	f	namespace:scopedperf
compress_	persist_test.cc	/^  bool compress_;$/;"	m	class:epochbased_simulation	file:
compress_file	third-party/lz4/lz4c.c	/^int compress_file(char* input_filename, char* output_filename, int compressionlevel)$/;"	f
compress_file_blockDependency	third-party/lz4/lz4c.c	/^int compress_file_blockDependency(char* input_filename, char* output_filename, int compressionlevel)$/;"	f
compressedBuffer	third-party/lz4/bench.c	/^    char* compressedBuffer;$/;"	m	struct:chunkParameters	file:
compressedBuffer	third-party/lz4/fullbench.c	/^    char* compressedBuffer;$/;"	m	struct:chunkParameters	file:
compressedSize	third-party/lz4/bench.c	/^    int   compressedSize;$/;"	m	struct:chunkParameters	file:
compressedSize	third-party/lz4/fullbench.c	/^    int   compressedSize;$/;"	m	struct:chunkParameters	file:
compressionFunction	third-party/lz4/bench.c	/^    int (*compressionFunction)(const char*, char*, int);$/;"	m	struct:compressionParameters	file:
compressionParameters	third-party/lz4/bench.c	/^struct compressionParameters$/;"	s	file:
compressionTest	third-party/lz4/fullbench.c	/^static int compressionTest = 1;$/;"	v	file:
compute_end	record/cursor.h	/^  compute_end()$/;"	f	struct:write_record_cursor
compute_fields_mask	util.h	/^compute_fields_mask()$/;"	f	namespace:util
compute_fields_mask	util.h	/^compute_fields_mask(First f, Rest... rest)$/;"	f	namespace:util
compute_global_last_tick_exclusive	ticker.h	/^  compute_global_last_tick_exclusive() const$/;"	f	class:ticker
compute_needed	txn_btree.h	/^    compute_needed(const uint8_t *buf, size_t sz)$/;"	f	class:txn_btree_::value_writer
compute_needed	typed_txn_btree.h	/^    compute_needed(const uint8_t *buf, size_t sz)$/;"	f	class:typed_txn_btree_::value_writer
compute_needed_delta_standalone	typed_txn_btree.h	/^  compute_needed_delta_standalone($/;"	f	struct:typed_txn_btree_
compute_needed_standalone	typed_txn_btree.h	/^  compute_needed_standalone($/;"	f	struct:typed_txn_btree_
conc_checkpointer	masstree/mtd.cc	/^conc_checkpointer(void *xarg)$/;"	f
conc_filecheckpoint	masstree/mtd.cc	/^conc_filecheckpoint(threadinfo *ti)$/;"	f
concurrent	masstree/masstree.hh	/^    static constexpr bool concurrent = true;$/;"	m	struct:Masstree::nodeparams
concurrent	masstree/masstree_struct.hh	/^    static constexpr bool concurrent = P::concurrent;$/;"	m	class:Masstree::node_base
concurrent	masstree_btree.h	/^  static constexpr bool concurrent = false;$/;"	m	struct:masstree_single_threaded_params
concurrent_btree	btree.h	/^typedef btree<concurrent_btree_traits> concurrent_btree;$/;"	t
concurrent_btree	masstree_btree.h	/^typedef mbtree<masstree_params> concurrent_btree;$/;"	t
concurrent_btree_traits	btree.h	/^struct concurrent_btree_traits : public base_btree_config {$/;"	s
cond_	benchmarks/egen/threading_pthread.h	/^        mutable pthread_cond_t cond_;$/;"	m	class:TPCE::CCondition
config	benchmarks/runner.py	/^      config = {$/;"	v
configs	benchmarks/results/make_graphs-6.py	/^    configs = [$/;"	v
conn	masstree/mtclient.cc	/^    KVConn *conn;$/;"	m	struct:child	file:
conn	masstree/mtd.cc	/^    conn(int s)$/;"	f	struct:conn
conn	masstree/mtd.cc	/^struct conn {$/;"	s	file:
conninfo	masstree/mtd.cc	/^struct conninfo {$/;"	s	file:
conns_	masstree/mtd.cc	/^    std::vector<conn *> conns_;$/;"	m	class:tcpfds	file:
const_array_iterator	masstree/json.hh	/^    const_array_iterator() {$/;"	f	class:lcdf::Json::const_array_iterator
const_array_iterator	masstree/json.hh	/^    const_array_iterator(const Json* j, int i)$/;"	f	class:lcdf::Json::const_array_iterator
const_array_iterator	masstree/json.hh	/^class Json::const_array_iterator { public:$/;"	c	class:lcdf::Json
const_iterator	masstree/json.hh	/^    const_iterator()$/;"	f	class:lcdf::Json::const_iterator
const_iterator	masstree/json.hh	/^    const_iterator(const Json* j, int i)$/;"	f	class:lcdf::Json::const_iterator
const_iterator	masstree/json.hh	/^class Json::const_iterator { public:$/;"	c	class:lcdf::Json
const_iterator	masstree/local_vector.hh	/^    typedef const T* const_iterator;$/;"	t	class:local_vector
const_iterator	masstree/straccum.hh	/^    typedef const char *const_iterator;$/;"	t	class:lcdf::StringAccum
const_iterator	masstree/string_base.hh	/^    typedef const char* const_iterator;$/;"	t	class:lcdf::String_base
const_iterator	small_unordered_map.h	/^    const_iterator;$/;"	t	class:small_unordered_map
const_iterator	small_vector.h	/^  typedef iterator_<const T, const_small_iterator, const_large_iterator> const_iterator;$/;"	t	class:small_vector
const_iterator	static_unordered_map.h	/^  typedef iterator_<const bucket, const value_type> const_iterator;$/;"	t	class:static_unordered_map
const_iterator	static_vector.h	/^  typedef iterator_<const T> const_iterator;$/;"	t	class:static_vector
const_large_iterator	small_vector.h	/^  typedef typename large_vector_type::const_iterator const_large_iterator;$/;"	t	class:small_vector
const_object_iterator	masstree/json.hh	/^    const_object_iterator() {$/;"	f	class:lcdf::Json::const_object_iterator
const_object_iterator	masstree/json.hh	/^    const_object_iterator(const Json* j, int i)$/;"	f	class:lcdf::Json::const_object_iterator
const_object_iterator	masstree/json.hh	/^class Json::const_object_iterator { public:$/;"	c	class:lcdf::Json
const_reference	small_unordered_map.h	/^  typedef const T & const_reference;$/;"	t	class:small_unordered_map
const_reference	small_vector.h	/^  typedef const T & const_reference;$/;"	t	class:small_vector
const_reference	static_unordered_map.h	/^  typedef const T & const_reference;$/;"	t	class:static_unordered_map
const_reference	static_vector.h	/^  typedef const T & const_reference;$/;"	t	class:static_vector
const_reverse_iterator	masstree/local_vector.hh	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:local_vector
const_reverse_iterator	small_vector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:small_vector
const_reverse_iterator	static_vector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:static_vector
const_small_iterator	small_vector.h	/^  typedef small_iterator_<const T> const_small_iterator;$/;"	t	class:small_vector
const_unsigned_iterator	masstree/string_base.hh	/^    typedef const unsigned char* const_unsigned_iterator;$/;"	t	class:lcdf::String_base
constexpr	masstree/compiler.hh	36;"	d
construct	small_unordered_map.h	/^    construct(size_t hash, Args &&... args)$/;"	f	struct:small_unordered_map::bucket
construct	static_unordered_map.h	/^    construct(size_t hash, Args &&... args)$/;"	f	struct:static_unordered_map::bucket
consume	masstree/json.cc	/^Json::streaming_parser::consume(const uint8_t* first,$/;"	f	class:lcdf::Json::streaming_parser
consume	masstree/json.hh	/^inline const char* Json::streaming_parser::consume(const char* first,$/;"	f	class:lcdf::Json::streaming_parser
consume	masstree/json.hh	/^inline size_t Json::streaming_parser::consume(const char* first, size_t length,$/;"	f	class:lcdf::Json::streaming_parser
consume	masstree/msgpack.cc	/^const uint8_t* streaming_parser::consume(const uint8_t* first,$/;"	f	class:msgpack::streaming_parser
consume	masstree/msgpack.hh	/^inline const char* streaming_parser::consume(const char* first,$/;"	f	class:msgpack::streaming_parser
consume	masstree/msgpack.hh	/^inline size_t streaming_parser::consume(const char* first, size_t length,$/;"	f	class:msgpack::streaming_parser
consume_backslash	masstree/json.cc	/^Json::streaming_parser::consume_backslash(StringAccum& sa,$/;"	f	class:lcdf::Json::streaming_parser
consume_number	masstree/json.cc	/^Json::streaming_parser::consume_number(const uint8_t* first,$/;"	f	class:lcdf::Json::streaming_parser
consume_primitive	masstree/json.cc	/^Json::streaming_parser::consume_primitive(const uint8_t* first,$/;"	f	class:lcdf::Json::streaming_parser
consume_string	masstree/json.cc	/^Json::streaming_parser::consume_string(const uint8_t* first,$/;"	f	class:lcdf::Json::streaming_parser
consume_stringpart	masstree/json.cc	/^Json::streaming_parser::consume_stringpart(StringAccum& sa,$/;"	f	class:lcdf::Json::streaming_parser
consumer	benchmarks/queue.cc	/^  bool consumer;$/;"	m	class:queue_worker	file:
contains	dbcore/sm-log-file.h	/^        bool contains(LSN lsn) {$/;"	f	struct:sm_log_file_mgr::segment_id
contains	dbcore/sm-log-file.h	/^        bool contains(uint64_t lsn_offset) {$/;"	f	struct:sm_log_file_mgr::segment_id
contains	dbcore/sm-oid-alloc-impl.h	/^    bool contains(uint16_t i) {$/;"	f	struct:sparse_bitset
contexts	dbcore/xid.cpp	/^xid_context contexts[NCONTEXTS];$/;"	m	namespace:TXN	file:
cookie	dbcore/epoch.cpp	/^    void *cookie;$/;"	m	struct:epoch_mgr::thread_state	file:
cookie	dbcore/epoch.h	/^        void *cookie;$/;"	m	struct:epoch_mgr::callbacks
cooling_cookie	dbcore/epoch.cpp	/^    void *cooling_cookie = 0;$/;"	m	struct:epoch_mgr::private_state	file:
cooling_stash	dbcore/rcu.cpp	/^    pointer_list *cooling_stash;$/;"	m	struct:RCU::rcu_tcb	file:
copy	dbcore/rcu-slist.cpp	/^        next_ptr copy;$/;"	m	struct:__anon82::cached_next	file:
copy	dbcore/rcu-slist.h	/^        next_ptr copy() volatile {$/;"	f	struct:_rcu_slist::next_ptr
copy	dbcore/rcu-slist.h	/^        next_ptr copy() {$/;"	f	struct:_rcu_slist::next_ptr
copy_into	btree.h	/^  copy_into(T *dest, T *source, size_t p, size_t n)$/;"	f	class:btree
copy_string	masstree/clp.c	/^copy_string(char *buf, int buflen, int bufpos, const char *what)$/;"	f	file:
core	ticker.h	/^    core() const$/;"	f	class:ticker::guard
core_	ticker.h	/^    uint64_t core_;$/;"	m	class:ticker::guard
core_id	core.h	/^  core_id()$/;"	f	class:coreid
coreid	core.h	/^class coreid {$/;"	c
cores	masstree/mtd.cc	/^static std::vector<int> cores;$/;"	v	file:
cores	masstree/mttest.cc	/^static std::vector<int> cores;$/;"	v	file:
could_be_short	masstree/clp.c	/^    unsigned char could_be_short;$/;"	m	struct:Clp_Internal	file:
count	dbcore/test-sc-hash.cpp	/^    size_t count = 0;$/;"	m	struct:hasher	file:
count	masstree/checkpoint.hh	/^    uint64_t count; \/\/ total nodes written$/;"	m	struct:ckstate
count	masstree/json.hh	/^    Json::size_type count(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
count	masstree/json.hh	/^inline Json::size_type Json::count(Str key) const {$/;"	f	class:lcdf::Json
count	masstree/kvstats.hh	/^  long count;$/;"	m	struct:kvstats
count	scopedperf.hh	/^    uint64_t count;$/;"	m	struct:scopedperf::perfsum_ctr::stats
count	scopedperf.hh	/^    uint64_t count[nbuckets];$/;"	m	struct:scopedperf::perfsum_hist_tmpl::buckets
count_	counter.h	/^  uint64_t count_;$/;"	m	struct:counter_data
count_	masstree/compiler.hh	/^    int count_;$/;"	m	struct:backoff_fence_function
count_	masstree/masstree_remove.hh	/^    int count_;$/;"	m	struct:Masstree::destroy_rcu_callback
count_down	spinbarrier.h	/^  count_down()$/;"	f	class:spin_barrier
counter	masstree/kvthread.hh	/^    uint64_t counter(threadcounter ci) const {$/;"	f	class:threadinfo
counter	masstree_btree.h	/^    uint64_t counter(threadcounter ci) const {$/;"	f	class:simple_threadinfo
counter_data	counter.h	/^  counter_data()$/;"	f	struct:counter_data
counter_data	counter.h	/^struct counter_data {$/;"	s
counter_map	benchmarks/abstract_db.h	/^  typedef std::map<std::string, uint64_t> counter_map;$/;"	t	class:abstract_db
counter_map	benchmarks/bench.h	/^  typedef abstract_db::counter_map counter_map;$/;"	t	class:bench_worker
counters_	masstree/kvthread.hh	/^    uint64_t counters_[ncounters];$/;"	m	class:threadinfo
counts	dbcore/sm-alloc.h	/^		uint64_t counts;$/;"	m	struct:RA::thread_data
counts_	counter.h	/^    percore<uint64_t, false, false> counts_;$/;"	m	struct:private_::event_ctx
cp_co_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cp_co_name[max_comp_len][cCO_NAME_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
cp_in_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cp_in_name[max_comp_len][cIN_NAME_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
cpa	masstree/mtclient.cc	/^cpa(struct child *c)$/;"	f
cpb	masstree/mtclient.cc	/^cpb(struct child *c)$/;"	f
cpc	masstree/mtclient.cc	/^cpc(struct child *c)$/;"	f
cpd	masstree/mtclient.cc	/^cpd(struct child *c)$/;"	f
cpuid	scopedperf.hh	/^  const uint cpuid;$/;"	m	class:scopedperf::base_perf_region
create	dbcore/sm-oid.cpp	/^sm_oid_mgr::create(sm_heap_mgr *hm, log_tx_scan *chkpt_scan)$/;"	f	class:sm_oid_mgr
create	masstree/value_array.hh	/^inline value_array* value_array::create(const Json* first, const Json* last,$/;"	f	class:value_array
create	masstree/value_bag.hh	/^inline value_bag<O>* value_bag<O>::create(const Json* first, const Json* last,$/;"	f	class:value_bag
create	masstree/value_string.hh	/^inline value_string* value_string::create(const Json* first, const Json* last,$/;"	f	class:value_string
create	masstree/value_versioned_array.hh	/^inline value_versioned_array* value_versioned_array::create(const Json* first, const Json* last, kvtimestamp_t ts, threadinfo& ti) {$/;"	f	class:value_versioned_array
create1	masstree/value_array.hh	/^inline value_array* value_array::create1(Str value, kvtimestamp_t ts, threadinfo& ti) {$/;"	f	class:value_array
create1	masstree/value_bag.hh	/^inline value_bag<O>* value_bag<O>::create1(Str str, kvtimestamp_t ts,$/;"	f	class:value_bag
create1	masstree/value_string.hh	/^inline value_string* value_string::create1(Str value,$/;"	f	class:value_string
create1	masstree/value_versioned_array.hh	/^inline value_versioned_array* value_versioned_array::create1(Str value, kvtimestamp_t ts, threadinfo& ti) {$/;"	f	class:value_versioned_array
createDMInput	benchmarks/egen/DM.cpp	/^TDataMaintenanceTxnInput* CDM::createDMInput()$/;"	f	class:CDM
createTCInput	benchmarks/egen/DM.cpp	/^TTradeCleanupTxnInput* CDM::createTCInput()$/;"	f	class:CDM
create_file	dbcore/sm-oid.cpp	/^sm_oid_mgr::create_file(bool needs_alloc)$/;"	f	class:sm_oid_mgr
create_file	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::create_file(bool needs_alloc)$/;"	f	class:sm_oid_mgr_impl
create_memo	masstree/string.cc	/^inline String::memo_type* String::create_memo(int capacity, int dirty) {$/;"	f	class:lcdf::String
create_record	dbcore/test-sm-log.cpp	/^create_record(FID f, OID o, uint64_t vnum, size_t payload_size)$/;"	f	file:
create_segment	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::create_segment(segment_id *sid)$/;"	f	class:sm_log_file_mgr
created_at_	masstree/masstree_struct.hh	/^    kvtimestamp_t created_at_[P::debug_level > 0];$/;"	m	class:Masstree::internode
created_at_	masstree/masstree_struct.hh	/^    kvtimestamp_t created_at_[P::debug_level > 0];$/;"	m	class:Masstree::leaf
credit_check_order_line_scan_callback	benchmarks/tpcc.cc	/^		credit_check_order_line_scan_callback( str_arena* arena ) : _arena(arena) {}$/;"	f	class:credit_check_order_line_scan_callback
credit_check_order_line_scan_callback	benchmarks/tpcc.cc	/^class credit_check_order_line_scan_callback : public abstract_ordered_index::scan_callback {$/;"	c	file:
credit_check_order_scan_callback	benchmarks/tpcc.cc	/^		credit_check_order_scan_callback( str_arena* arena ) : _arena(arena) {}$/;"	f	class:credit_check_order_scan_callback
credit_check_order_scan_callback	benchmarks/tpcc.cc	/^class credit_check_order_scan_callback : public abstract_ordered_index::scan_callback {$/;"	c	file:
cs	masstree/clp.h	/^	char cs[Clp_ValSize];$/;"	m	union:Clp_Parser::__anon9
cslist	dbcore/cslist.h	/^    cslist()$/;"	f	struct:cslist
cslist	dbcore/cslist.h	/^struct cslist {$/;"	s
ctr	benchmarks/queue.cc	/^  uint64_t ctr;$/;"	m	class:queue_worker	file:
ctr	masstree/value_versioned_array.hh	/^            uint32_t ctr:31;$/;"	m	struct:rowversion::value_t::__anon16
ctr	scopedperf.hh	/^  const One *const ctr;$/;"	m	class:scopedperf::ctrgroup_chain
ctrgroup	scopedperf.hh	/^ctrgroup(Counters*... args)$/;"	f	namespace:scopedperf
ctrgroup_chain	scopedperf.hh	/^  ctrgroup_chain() {}$/;"	f	class:scopedperf::ctrgroup_chain
ctrgroup_chain	scopedperf.hh	/^  ctrgroup_chain(One *x, Others*... y)$/;"	f	class:scopedperf::ctrgroup_chain
ctrgroup_chain	scopedperf.hh	/^class ctrgroup_chain<> {$/;"	c	namespace:scopedperf
ctrgroup_chain	scopedperf.hh	/^class ctrgroup_chain<One, Others...> : ctrgroup_chain<Others...> {$/;"	c	namespace:scopedperf
ctx_	counter.h	/^  unmanaged<private_::event_ctx> ctx_;$/;"	m	class:event_counter
ctx_	counter.h	/^  unmanaged<private_::event_ctx_avg> ctx_;$/;"	m	class:event_avg_counter
ctz	masstree/compiler.hh	/^inline int ctz(int x) {$/;"	f
ctz	masstree/compiler.hh	/^inline int ctz(long long x) {$/;"	f
ctz	masstree/compiler.hh	/^inline int ctz(long x) {$/;"	f
ctz	masstree/compiler.hh	/^inline int ctz(unsigned long long x) {$/;"	f
ctz	masstree/compiler.hh	/^inline int ctz(unsigned long x) {$/;"	f
ctz	masstree/compiler.hh	/^inline int ctz(unsigned x) {$/;"	f
cur	benchmarks/egen/DriverParamSettings.h	/^    T   cur;$/;"	m	class:TPCE::CParametersWithDefaults
cur	benchmarks/egen/DriverParamSettings.h	/^    T   cur;$/;"	m	class:TPCE::CParametersWithoutDefaults
cur	dbcore/rcu-slist.h	/^        node *cur;$/;"	m	struct:_rcu_slist::iterator
cur_count	dbcore/rcu.cpp	/^    int cur_count;$/;"	m	struct:RCU::pointer_stash	file:
cur_lsn	dbcore/sm-log.cpp	/^sm_log::cur_lsn()$/;"	f	class:sm_log
cur_lsn_offset	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::cur_lsn_offset()$/;"	f	class:sm_log_alloc_mgr
cur_stash	dbcore/rcu.cpp	/^    pointer_list *cur_stash;$/;"	m	struct:RCU::rcu_tcb	file:
cur_usec	util.h	/^  cur_usec()$/;"	f	class:util::timer
curoff_	persist_test.cc	/^  size_t curoff_; \/\/ current offset into buf_, either for writing$/;"	m	struct:pbuffer	file:
current	benchmarks/egen/progressmeter.cpp	/^int ProgressMeter::current() const$/;"	f	class:TPCE::ProgressMeter
current	masstree/json.cc	/^inline Json* Json::streaming_parser::current() {$/;"	f	class:lcdf::Json::streaming_parser
current	masstree/kvthread.hh	/^    static threadinfo *current() {$/;"	f	class:threadinfo
current_option	masstree/clp.c	/^    int current_option;$/;"	m	struct:Clp_Internal	file:
current_option	masstree/clp.c	/^    int current_option;$/;"	m	struct:Clp_ParserState	file:
current_short	masstree/clp.c	/^    unsigned char current_short;$/;"	m	struct:Clp_Internal	file:
current_short	masstree/clp.c	/^    unsigned char current_short;$/;"	m	struct:Clp_ParserState	file:
current_test_name	masstree/mttest.cc	/^static const char *current_test_name;$/;"	v	file:
current_tick_	ticker.h	/^    std::atomic<uint64_t> current_tick_; \/\/ last RCU epoch this thread has seen$/;"	m	struct:ticker::tickinfo
current_tick_	ticker.h	/^  std::atomic<uint64_t> current_tick_; \/\/ which tick are we currenlty on?$/;"	m	class:ticker
current_trial	masstree/mttest.cc	/^static int current_trial;$/;"	v	file:
cursor_type	masstree/masstree.hh	/^    typedef tcursor<P> cursor_type;$/;"	t	class:Masstree::basic_table
cursor_type	masstree/query_masstree.hh	/^    typedef tcursor<P> cursor_type;$/;"	t	class:Masstree::query_table
cust_count	benchmarks/egen/EGenValidate.cpp	/^        TIdent  cust_count;$/;"	m	class:BucketSimOptions	file:
cust_f_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cust_f_name[cF_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
cust_f_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    cust_f_name[cF_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame1Output
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              cust_id;$/;"	m	struct:TPCE::TCustomerPositionFrame1Input
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              cust_id;$/;"	m	struct:TPCE::TCustomerPositionFrame1Output
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              cust_id;$/;"	m	struct:TPCE::TTradeResultFrame2Output
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent      cust_id;$/;"	m	struct:TPCE::TCustomerPositionTxnInput
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  cust_id;$/;"	m	struct:TPCE::TTradeOrderFrame1Output
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  cust_id;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  cust_id;$/;"	m	struct:TPCE::TTradeResultFrame3Input
cust_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent  cust_id;$/;"	m	struct:TPCE::TTradeResultFrame4Input
cust_l_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                cust_l_name[cL_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
cust_l_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    cust_l_name[cL_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame1Output
cust_tier	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   cust_tier;$/;"	m	struct:TPCE::TTradeOrderFrame1Output
cust_tier	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   cust_tier;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
customerAccountsAndPermissionsTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CCustomerAccountsAndPermissionsTable*   customerAccountsAndPermissionsTable;$/;"	m	class:TPCE::CGenerateAndLoad
customerTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CCustomerTable*				customerTable;$/;"	m	class:TPCE::CGenerateAndLoad
customerTaxratesTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CCustomerTaxratesTable*			customerTaxratesTable;$/;"	m	class:TPCE::CGenerateAndLoad
customer_position	benchmarks/tpce.cc	/^		txn_result customer_position()$/;"	f	class:tpce_worker
cvalue	masstree/json.hh	/^    const Json& cvalue() const {$/;"	f	class:lcdf::Json_array_proxy
cvalue	masstree/json.hh	/^    const Json& cvalue() const {$/;"	f	class:lcdf::Json_get_proxy
cvalue	masstree/json.hh	/^    const Json& cvalue() const {$/;"	f	class:lcdf::Json_object_proxy
cvalue	masstree/json.hh	/^    const Json& cvalue() const {$/;"	f	class:lcdf::Json_object_str_proxy
cvalue	masstree/json.hh	/^    const Json& cvalue() const {$/;"	f	class:lcdf::Json_proxy_base
cxx_typename	util.h	/^struct cxx_typename {$/;"	s	namespace:util
d	masstree/clp.h	/^	double d;$/;"	m	union:Clp_Parser::__anon9
d	masstree/json.hh	/^        Json_rep_item<double> d;$/;"	m	union:lcdf::Json::rep_type
d_	masstree/value_bag.hh	/^    bagdata d_;$/;"	m	class:value_bag
d_	stats_common.h	/^  counter_data d_;$/;"	m	struct:stats_command::get_counter_value_t
daemon_	thread.h	/^  const bool daemon_;$/;"	m	class:ndb_thread
dailyMarketTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CDailyMarketTable*			dailyMarketTable;$/;"	m	class:TPCE::CGenerateAndLoad
data	benchmarks/masstree/kvtest.cc	/^  data() const$/;"	f	struct:quick_istr
data	btree.cc	/^    kv_vec *data;$/;"	m	struct:mp_test7_ns::scan_callback	file:
data	btree.cc	/^    kv_vec *data;$/;"	m	struct:test6_ns::scan_callback	file:
data	dbcore/dynarray.h	/^    char *data() { return _data; }$/;"	f	struct:dynarray
data	dbcore/dynarray.h	/^    char const *data() const { return _data; }$/;"	f	struct:dynarray
data	dbcore/epoch.h	/^        char data[SIZE];$/;"	m	struct:epoch_mgr::tls_storage
data	dbcore/sc-hash.h	/^        char data[sizeof(value_type)];$/;"	m	struct:value_space
data	dbcore/sm-common.h	/^    char data[];$/;"	m	struct:version
data	dbcore/sm-log-defs.h	/^    char data[];$/;"	m	struct:log_record
data	dbcore/test-sm-log.cpp	/^    char data[];$/;"	m	struct:db_record	file:
data	dbcore/xid.cpp	/^    uint64_t data[NWORDS];$/;"	m	struct:TXN::bitmap	file:
data	imstring.h	/^  data() const$/;"	f	class:base_imstring
data	masstree/clp.c	/^    char* data;$/;"	m	struct:Clp_BuildString	file:
data	masstree/str.hh	/^    const char *data() const {$/;"	f	struct:lcdf::Str
data	masstree/str.hh	/^    const char *data() const {$/;"	f	struct:lcdf::inline_string
data	masstree/straccum.hh	/^inline char* StringAccum::data() {$/;"	f	class:lcdf::StringAccum
data	masstree/straccum.hh	/^inline const char* StringAccum::data() const {$/;"	f	class:lcdf::StringAccum
data	masstree/string.hh	/^	const char* data;$/;"	m	struct:lcdf::String::rep_type
data	masstree/string.hh	/^inline const char* String::data() const {$/;"	f	class:lcdf::String
data	masstree/string_base.hh	/^    const char* data() const {$/;"	f	class:lcdf::String_base
data	record/inline_str.h	/^  data() const$/;"	f	class:inline_str_base
data	record/inline_str.h	/^  data() const$/;"	f	class:inline_str_fixed
data	stats_common.h	/^  inline const char * data() const { return &data_[0]; }$/;"	f	class:stats_command::packet
data	varkey.h	/^  data() const$/;"	f	class:varkey
data_	stats_common.h	/^  char data_[MAX_DATA];$/;"	m	class:stats_command::packet
data_maintenance	benchmarks/tpce.cc	/^		txn_result data_maintenance()$/;"	f	class:tpce_worker
data_maintenance_init	benchmarks/egen/EGenLoader.cpp	/^	CDM*  data_maintenance_init(int customers, int sf, int wdays) $/;"	f
database_simulation	persist_test.cc	/^  database_simulation()$/;"	f	class:database_simulation
database_simulation	persist_test.cc	/^class database_simulation {$/;"	c	file:
datafromfile	benchmarks/results/make_graphs-5.py	/^def datafromfile(f, persist):$/;"	f
date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    date;$/;"	m	struct:TPCE::TDailyHistory
date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        date_ind;$/;"	m	struct:TPCE::TDailyHistory
day	benchmarks/egen/DateTime.h	/^        UINT16   day;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
day	benchmarks/egen/TxnHarnessStructs.h	/^    TDailyHistory       day[max_day_len];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
dayOfMonth	benchmarks/tpce.cc	/^int dayOfMonth(int64_t& t)$/;"	f
day_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               day_len;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
day_of_month	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   day_of_month;$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
dayno_1Jan1900	benchmarks/egen/DateTime.cpp	/^static const INT32 dayno_1Jan1900 = CDateTime::YMDtoDayno( 1900, 1, 1 );$/;"	v	file:
db	benchmarks/bench.h	/^  abstract_db *const db;$/;"	m	class:bench_loader
db	benchmarks/bench.h	/^  abstract_db *const db;$/;"	m	class:bench_runner
db	benchmarks/bench.h	/^  abstract_db *const db;$/;"	m	class:bench_worker
db	benchmarks/bench.h	/^  abstract_db *const db;$/;"	m	class:scoped_db_thread_ctx
db_extractor	benchmarks/results/make_graphs-6.py	/^    def db_extractor(db):$/;"	f
db_file	dbcore/test-sm-log.cpp	/^    db_file() {$/;"	f	struct:db_file
db_file	dbcore/test-sm-log.cpp	/^struct db_file {$/;"	s	file:
db_record	dbcore/test-sm-log.cpp	/^struct db_record {$/;"	s	file:
dbtuple	tuple.h	/^  dbtuple(size_type size)$/;"	f	struct:dbtuple
dbtuple	tuple.h	/^struct dbtuple {$/;"	s
deal_with_pos0_res	benchmarks/results/make_graphs-3.py	/^    def deal_with_pos0_res(x):$/;"	f
deal_with_pos1_res	benchmarks/results/make_graphs-3.py	/^    def deal_with_pos1_res(x):$/;"	f
deal_with_posK_res	benchmarks/results/make_graphs-3.py	/^    def deal_with_posK_res(k, x):$/;"	f
deal_with_posK_res	benchmarks/results/make_graphs-6.py	/^def deal_with_posK_res(k):$/;"	f
deal_with_posK_res_median	benchmarks/results/make_graphs-6.py	/^def deal_with_posK_res_median(k):$/;"	f
deal_with_posK_res_percore	benchmarks/results/make_graphs-6.py	/^def deal_with_posK_res_percore(k):$/;"	f
deallocate	dbcore/sm-alloc.cpp	/^	void deallocate( void* p )$/;"	f	namespace:RA
deallocate	masstree/kvthread.hh	/^    void deallocate(void* p, size_t sz, memtag tag) {$/;"	f	class:threadinfo
deallocate	masstree/masstree_struct.hh	/^    void deallocate(threadinfo& ti) {$/;"	f	class:Masstree::internode
deallocate	masstree/masstree_struct.hh	/^    void deallocate(threadinfo& ti) {$/;"	f	class:Masstree::leaf
deallocate	masstree/test_atomics.cc	/^    static void deallocate(void* p, size_t, memtag = memtag_none) {$/;"	f	struct:fake_threadinfo
deallocate	masstree/value_array.cc	/^void value_array::deallocate(threadinfo& ti) {$/;"	f	class:value_array
deallocate	masstree/value_bag.hh	/^inline void value_bag<O>::deallocate(ALLOC& ti) {$/;"	f	class:value_bag
deallocate	masstree/value_string.hh	/^inline void value_string::deallocate(ALLOC& ti) {$/;"	f	class:value_string
deallocate	masstree/value_versioned_array.cc	/^void value_versioned_array::deallocate(threadinfo &ti) {$/;"	f	class:value_versioned_array
deallocate	masstree_btree.h	/^    void deallocate(void* p, size_t sz, memtag) {$/;"	f	class:simple_threadinfo
deallocate_after_failed_update	masstree/value_array.cc	/^void value_array::deallocate_after_failed_update(const Json* first, const Json* last, threadinfo& ti) {$/;"	f	class:value_array
deallocate_after_failed_update	masstree/value_bag.hh	/^inline void value_bag<O>::deallocate_after_failed_update(const Json*, const Json*, ALLOC& ti) {$/;"	f	class:value_bag
deallocate_after_failed_update	masstree/value_string.hh	/^inline void value_string::deallocate_after_failed_update(const Json*, const Json*, threadinfo& ti) {$/;"	f	class:value_string
deallocate_after_failed_update	masstree/value_versioned_array.hh	/^inline void value_versioned_array::deallocate_after_failed_update(const Json*, const Json*, threadinfo&) {$/;"	f	class:value_versioned_array
deallocate_column	masstree/value_array.hh	/^inline void value_array::deallocate_column(lcdf::inline_string* col,$/;"	f	class:value_array
deallocate_column_rcu	masstree/value_array.hh	/^inline void value_array::deallocate_column_rcu(lcdf::inline_string* col,$/;"	f	class:value_array
deallocate_rcu	masstree/kvthread.hh	/^    void deallocate_rcu(void *p, size_t sz, memtag tag) {$/;"	f	class:threadinfo
deallocate_rcu	masstree/masstree_struct.hh	/^    void deallocate_rcu(threadinfo& ti) {$/;"	f	class:Masstree::internode
deallocate_rcu	masstree/masstree_struct.hh	/^    void deallocate_rcu(threadinfo& ti) {$/;"	f	class:Masstree::leaf
deallocate_rcu	masstree/value_array.cc	/^void value_array::deallocate_rcu(threadinfo& ti) {$/;"	f	class:value_array
deallocate_rcu	masstree/value_bag.hh	/^inline void value_bag<O>::deallocate_rcu(ALLOC& ti) {$/;"	f	class:value_bag
deallocate_rcu	masstree/value_string.hh	/^inline void value_string::deallocate_rcu(threadinfo& ti) {$/;"	f	class:value_string
deallocate_rcu	masstree/value_versioned_array.cc	/^void value_versioned_array::deallocate_rcu(threadinfo &ti) {$/;"	f	class:value_versioned_array
deallocate_rcu	masstree_btree.h	/^    void deallocate_rcu(void *p, size_t sz, memtag) {$/;"	f	class:simple_threadinfo
deallocate_rcu_after_update	masstree/value_array.cc	/^void value_array::deallocate_rcu_after_update(const Json* first, const Json* last, threadinfo& ti) {$/;"	f	class:value_array
deallocate_rcu_after_update	masstree/value_bag.hh	/^inline void value_bag<O>::deallocate_rcu_after_update(const Json*, const Json*, ALLOC& ti) {$/;"	f	class:value_bag
deallocate_rcu_after_update	masstree/value_string.hh	/^inline void value_string::deallocate_rcu_after_update(const Json*, const Json*, threadinfo& ti) {$/;"	f	class:value_string
deallocate_rcu_after_update	masstree/value_versioned_array.hh	/^inline void value_versioned_array::deallocate_rcu_after_update(const Json*, const Json*, threadinfo& ti) {$/;"	f	class:value_versioned_array
deassign_reader_bitmap_entry	dbcore/ssn.cpp	/^void deassign_reader_bitmap_entry() {$/;"	f	namespace:TXN
debug_level	masstree/masstree.hh	/^    static constexpr int debug_level = 0;$/;"	m	struct:Masstree::nodeparams
debug_level	masstree/masstree.hh	/^template <int LW, int IW> constexpr int nodeparams<LW, IW>::debug_level;$/;"	m	class:Masstree::nodeparams
dec_key_slots_used	btree.h	/^    dec_key_slots_used()$/;"	f	struct:btree::node
decay	dbcore/sm-log-recover.h	/^        struct decay {$/;"	s	struct:sm_log_recover_mgr::log_scanner
decode	record/serializer.h	/^  decode(uint32_t value)$/;"	f	struct:serializer
decodeFile	third-party/lz4/lz4c.c	/^int decodeFile(char* input_filename, char* output_filename)$/;"	f
decodeLZ4S	third-party/lz4/lz4c.c	/^unsigned long long decodeLZ4S(FILE* finput, FILE* foutput)$/;"	f
decodeLegacyStream	third-party/lz4/lz4c.c	/^unsigned long long decodeLegacyStream(FILE* finput, FILE* foutput)$/;"	f
decode_base64	masstree/string.cc	/^String String::decode_base64() const {$/;"	f	class:lcdf::String
decode_base64	masstree/string_base.hh	/^bool String_base<T>::decode_base64(E& enc) const {$/;"	f	class:lcdf::String_base
decode_size	dbcore/size-encode.cpp	/^size_t decode_size(uint8_t code) {$/;"	f
decode_size_aligned	dbcore/size-encode.h	/^decode_size_aligned(uint8_t code, size_t align_bits=DEFAULT_ALIGNMENT_BITS)$/;"	f
decode_size_helper	dbcore/size-encode.cpp	/^size_t constexpr decode_size_helper(uint8_t code) {$/;"	f
decode_table	dbcore/size-encode.cpp	/^static uint8_t constexpr decode_table[] = {$/;"	v	file:
decode_utf8	masstree/clp.c	/^decode_utf8(const char *s, const char **cp)$/;"	f	file:
decompressionFunction	third-party/lz4/bench.c	/^    int (*decompressionFunction)(const char*, char*, int);$/;"	m	struct:compressionParameters	file:
decompressionTest	third-party/lz4/fullbench.c	/^static int decompressionTest = 1;$/;"	v	file:
default_enabler	scopedperf.hh	/^class default_enabler {$/;"	c	namespace:scopedperf
default_manipulator	masstree/json.cc	/^Json::unparse_manipulator Json::default_manipulator;$/;"	m	class:lcdf::Json	file:
default_manipulator	masstree/json.hh	/^    static unparse_manipulator default_manipulator;$/;"	m	class:lcdf::Json
default_query_table_params	masstree/query_masstree.hh	/^struct default_query_table_params : public nodeparams<15, 15> {$/;"	s	namespace:Masstree
default_seed	benchmarks/masstree/kvrandom.hh	/^    enum { default_seed = 819234718U, a = 1664525U, c = 1013904223U };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon98
default_seed	masstree/kvrandom.hh	/^    enum { default_seed = 819234718U, a = 1664525U, c = 1013904223U };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon30
default_stable_transaction_traits	txn.h	/^struct default_stable_transaction_traits : public default_transaction_traits {$/;"	s
default_string_allocator	util.h	/^struct default_string_allocator {$/;"	s	namespace:util
default_table	masstree/query_masstree.hh	/^typedef query_table<default_query_table_params> default_table;$/;"	t	namespace:Masstree
default_transaction_traits	txn.h	/^struct default_transaction_traits {$/;"	s
defaultget	masstree/mtclient.cc	/^defaultget(struct child *, struct async *a, bool have_val, const Str &val)$/;"	f
delete_list_contents	dbcore/rcu.cpp	/^void delete_list_contents(pointer *p) {$/;"	f	namespace:RCU
delete_list_contents	dbcore/rcu.cpp	/^void delete_list_contents(pointer *p, Filter &do_delete) {$/;"	f	namespace:RCU
delete_memo	masstree/string.cc	/^String::delete_memo(memo_type *memo)$/;"	f	class:lcdf::String
delete_pointers	benchmarks/bench.cc	/^delete_pointers(const vector<T *> &pts)$/;"	f	file:
deleted	masstree/nodeversion.hh	/^    bool deleted() const {$/;"	f	class:basic_nodeversion
deleted	masstree/nodeversion.hh	/^    bool deleted() const {$/;"	f	class:basic_singlethreaded_nodeversion
deleted_bit	masstree/nodeversion.hh	/^	deleted_bit = (1U << 29),$/;"	e	enum:nodeversion32_parameters::__anon10
deleted_bit	masstree/nodeversion.hh	/^	deleted_bit = (1ULL << 61),$/;"	e	enum:nodeversion64_parameters::__anon11
deleted_layer	masstree/masstree_struct.hh	/^    bool deleted_layer() const {$/;"	f	class:Masstree::leaf
deleter	btree.h	/^    deleter(void *p)$/;"	f	struct:btree::internal_node
deleter	btree.h	/^    deleter(void *p)$/;"	f	struct:btree::leaf_node
deleter_array	rcu-wrapper.h	/^  deleter_array(void *p)$/;"	f	namespace:RCU
deleter_t	rcu-wrapper.h	/^  typedef void (*deleter_t)(void *);$/;"	t	namespace:RCU
depth	rcu-wrapper.h	/^  int depth(void) { return scoped_rcu_region::_depths.my(); }$/;"	f	class:scoped_rcu_region
depth	ticker.h	/^    depth() const$/;"	f	class:ticker::guard
depth_	ticker.h	/^    std::atomic<uint64_t> depth_; \/\/ 0 if not in RCU section$/;"	m	struct:ticker::tickinfo
depth_	ticker.h	/^    uint64_t depth_;$/;"	m	class:ticker::guard
deq	circbuf.h	/^  deq()$/;"	f	class:circbuf
deref	masstree/json.hh	/^inline void Json::ComplexJson::deref(json_type j) {$/;"	f	class:lcdf::Json::ComplexJson
deref	masstree/json.hh	/^inline void Json::deref() {$/;"	f	class:lcdf::Json
deref	masstree/string.hh	/^        inline void deref() const {$/;"	f	struct:lcdf::String::rep_type
deref	masstree/string.hh	/^    inline void deref() const {$/;"	f	class:lcdf::String
descs	benchmarks/results/make_graphs-3.py	/^    descs = [$/;"	v
destroy	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::destroy(sm_allocator *alloc)$/;"	f	class:sm_allocator
destroy	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::oid_array::destroy(oid_array *oa) {$/;"	f	class:sm_oid_mgr_impl::oid_array
destroy	masstree/json.cc	/^void Json::ArrayJson::destroy(ArrayJson* aj) {$/;"	f	class:lcdf::Json::ArrayJson
destroy	masstree/masstree_remove.hh	/^void basic_table<P>::destroy(threadinfo& ti) {$/;"	f	class:Masstree::basic_table
destroy	masstree/query_masstree.hh	/^    void destroy(threadinfo& ti) {$/;"	f	class:Masstree::query_table
destroy	small_unordered_map.h	/^    destroy()$/;"	f	struct:small_unordered_map::bucket
destroy	static_unordered_map.h	/^    destroy()$/;"	f	struct:static_unordered_map::bucket
destroy	util.h	/^  destroy()$/;"	f	class:unmanaged
destroy_file	dbcore/sm-oid.cpp	/^sm_oid_mgr::destroy_file(FID f)$/;"	f	class:sm_oid_mgr
destroy_file	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::destroy_file(FID f)$/;"	f	class:sm_oid_mgr_impl
destroy_rcu_callback	masstree/masstree_remove.hh	/^    destroy_rcu_callback(node_base<P>* root)$/;"	f	struct:Masstree::destroy_rcu_callback
destroy_rcu_callback	masstree/masstree_remove.hh	/^struct destroy_rcu_callback : public P::threadinfo_type::rcu_callback {$/;"	s	namespace:Masstree
destroyed_	util.h	/^  bool destroyed_;$/;"	m	class:unmanaged
dfd	dbcore/sm-log-file.h	/^    int dfd;$/;"	m	struct:sm_log_file_mgr
dft	benchmarks/egen/DriverParamSettings.h	/^    T   dft;$/;"	m	class:TPCE::CParametersWithDefaults
dicttokey	benchmarks/results/make_graphs-6.py	/^def dicttokey(d):$/;"	f
did_lock	benchmarks/tpcc.cc	/^  bool did_lock;$/;"	m	class:scoped_multilock	file:
die	dbcore/sm-common.cpp	/^die(char const *fmt, ...)$/;"	f
difference_type	masstree/circular_int.hh	/^    typedef typename mass::make_signed<T>::type difference_type;$/;"	t	class:circular_int
difference_type	masstree/json.hh	/^    typedef Json::size_type difference_type;$/;"	t	class:lcdf::Json::const_array_iterator
dilut_eps	benchmarks/egen/TxnHarnessStructs.h	/^    double              dilut_eps;$/;"	m	struct:TPCE::TFinInfo
dilut_eps_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        dilut_eps_ind;$/;"	m	struct:TPCE::TFinInfo
dirent_iterator	dbcore/sm-common.cpp	/^dirent_iterator::dirent_iterator(char const *dname)$/;"	f	class:dirent_iterator
dirent_iterator	dbcore/sm-common.h	/^struct dirent_iterator {$/;"	s
dirty	masstree/string.hh	/^	volatile uint32_t dirty;$/;"	m	struct:lcdf::String::memo_type
dirty	masstree/value_versioned_array.hh	/^            uint32_t dirty:1;$/;"	m	struct:rowversion::value_t::__anon16
dirty	masstree/value_versioned_array.hh	/^    bool dirty() {$/;"	f	struct:rowversion
dirty_mask	masstree/nodeversion.hh	/^	dirty_mask = inserting_bit | splitting_bit,$/;"	e	enum:nodeversion32_parameters::__anon10
dirty_mask	masstree/nodeversion.hh	/^	dirty_mask = inserting_bit | splitting_bit,$/;"	e	enum:nodeversion64_parameters::__anon11
disable_madv_willneed	benchmarks/runner.py	/^      disable_madv_willneed = MACHINE_CONFIG[node]['disable_madv_willneed']$/;"	v
disabled_rcu_region	rcu-wrapper.h	/^class disabled_rcu_region {};$/;"	c
discard	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::discard(log_allocation *x)$/;"	f	class:sm_log_alloc_mgr
discard	dbcore/sm-tx-log.cpp	/^sm_tx_log::discard() {$/;"	f	class:sm_tx_log
disk_addr	dbcore/sm-common.h	/^    fat_ptr disk_addr;$/;"	m	struct:version
disp	scopedperf.hh	/^  const display_opt disp;$/;"	m	class:scopedperf::perfsum_base
display	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::display() const {$/;"	f	class:TPCE::ProgressMeter
display	benchmarks/egen/progressmeterinterface.cpp	/^void ProgressMeterInterface::display() const$/;"	f	class:TPCE::ProgressMeterInterface
display_interval	benchmarks/egen/progressmeter.cpp	/^int ProgressMeter::display_interval() const {$/;"	f	class:TPCE::ProgressMeter
display_message	benchmarks/egen/bucketsimulator.cpp	/^void BucketProgress::display_message(std::ostream& out) const$/;"	f	class:TPCE::BucketProgress
display_message	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::display_message(std::ostream& out) const {$/;"	f	class:TPCE::ProgressMeter
display_opt	scopedperf.hh	/^  enum display_opt { show, hide };$/;"	g	class:scopedperf::perfsum_base
divid	benchmarks/egen/TxnHarnessStructs.h	/^    double              divid;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
dmark_file_name	dbcore/sm-log-file.cpp	/^    dmark_file_name(LSN start) {$/;"	f	struct:dmark_file_name
dmark_file_name	dbcore/sm-log-file.cpp	/^struct dmark_file_name {$/;"	s	file:
dname	dbcore/sm-common.h	/^    char dname[24];$/;"	m	struct:tmp_dir
do_allocation	memory.cc	/^do_allocation(size_t sz, bool do_throw)$/;"	f	file:
do_deletion	memory.cc	/^do_deletion(void *p)$/;"	f	file:
do_delta_write_standalone	typed_txn_btree.h	/^  do_delta_write_standalone($/;"	f	struct:typed_txn_btree_
do_error	masstree/clp.c	/^do_error(Clp_Parser *clp, Clp_BuildString *bs)$/;"	f	file:
do_frame1	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame1;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettings
do_frame1	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame1;  \/\/percentage$/;"	m	struct:TPCE::TTradeUpdateSettings
do_frame1	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame1;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettingsState
do_frame1	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame1;  \/\/percentage$/;"	m	struct:TPCE::TTradeUpdateSettingsState
do_frame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame2;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettings
do_frame2	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame2;  \/\/percentage$/;"	m	struct:TPCE::TTradeUpdateSettings
do_frame2	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame2;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettingsState
do_frame2	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame2;  \/\/percentage$/;"	m	struct:TPCE::TTradeUpdateSettingsState
do_frame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame3;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettings
do_frame3	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame3;  \/\/percentage$/;"	m	struct:TPCE::TTradeUpdateSettings
do_frame3	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame3;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettingsState
do_frame3	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame3;  \/\/percentage$/;"	m	struct:TPCE::TTradeUpdateSettingsState
do_frame4	benchmarks/egen/DriverParamSettings.h	/^    INT32   do_frame4;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettings
do_frame4	benchmarks/egen/DriverParamSettings.h	/^    bool    do_frame4;                      \/\/ percentage$/;"	m	struct:TPCE::TTradeLookupSettingsState
do_nothing	masstree/compiler.hh	/^struct do_nothing {$/;"	s
do_record_read	typed_txn_btree.h	/^  do_record_read(const uint8_t *data, size_t sz, uint64_t fields_mask, value_type *v)$/;"	f	struct:typed_txn_btree_
do_rsearch_range_call	base_txn_btree.h	/^base_txn_btree<Transaction, P>::do_rsearch_range_call($/;"	f	class:base_txn_btree
do_search	base_txn_btree.h	/^base_txn_btree<Transaction, P>::do_search($/;"	f	class:base_txn_btree
do_search_range_call	base_txn_btree.h	/^base_txn_btree<Transaction, P>::do_search_range_call($/;"	f	class:base_txn_btree
do_test	varint.cc	/^do_test(uint32_t v)$/;"	f	file:
do_tree_put	base_txn_btree.h	/^void base_txn_btree<Transaction, P>::do_tree_put($/;"	f	class:base_txn_btree
do_tuple_read	txn_impl.h	/^transaction<Protocol, Traits>::do_tuple_read($/;"	f	class:transaction
do_txn_epoch_sync	benchmarks/abstract_db.h	/^  virtual void do_txn_epoch_sync() const {}$/;"	f	class:abstract_db
do_txn_epoch_sync	benchmarks/ndb_wrapper.h	/^  do_txn_epoch_sync() const$/;"	f	class:ndb_wrapper
do_txn_finish	benchmarks/abstract_db.h	/^  virtual void do_txn_finish() const {}$/;"	f	class:abstract_db
do_txn_finish	benchmarks/ndb_wrapper.h	/^  do_txn_finish() const$/;"	f	class:ndb_wrapper
do_write_standalone	typed_txn_btree.h	/^  do_write_standalone($/;"	f	struct:typed_txn_btree_
doit	dbcore/test-sm-log-alloc.cpp	/^void doit(w_rand &rng) {$/;"	f
doit	dbcore/test-sm-log-offset.cpp	/^void doit(size_t nmax, size_t segment_size, bool verbose) {$/;"	f
doit	dbcore/test-sm-log-segments.cpp	/^void doit(size_t nmax, size_t segment_size, bool verbose) {$/;"	f
doit	dbcore/test-sm-log.cpp	/^void doit(w_rand &rng) {$/;"	f
done	dbcore/test-rcu-slist.cpp	/^bool done = false;$/;"	v
done	dbcore/test-sm-oid.cpp	/^bool done = false;$/;"	v
done	dbcore/test-xid.cpp	/^bool done = false;$/;"	v
done	masstree/json.hh	/^inline bool Json::streaming_parser::done() const {$/;"	f	class:lcdf::Json::streaming_parser
done	masstree/msgpack.hh	/^inline bool streaming_parser::done() const {$/;"	f	class:msgpack::streaming_parser
doprint	masstree/mtd.cc	/^static int doprint = 0;$/;"	v	file:
drain_cache	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::drain_cache(thread_cache *tc, uint32_t target)$/;"	f	class:sm_allocator
drand	dbcore/w_rand.cpp	/^double w_rand::drand() {$/;"	f	class:w_rand
dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    dts;$/;"	m	struct:TPCE::TNews
due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    due_date;$/;"	m	struct:TPCE::TTradeResultFrame6Input
dummy	dbcore/sc-hash.h	/^    struct dummy { };$/;"	s
dump_debug_info	txn_impl.h	/^transaction<Protocol, Traits>::dump_debug_info() const$/;"	f	class:transaction
dup	dbcore/sm-common.cpp	/^dirent_iterator::dup() {$/;"	f	class:dirent_iterator
dup	txn_btree.h	/^    dup(const std::string &vdup, StringAllocator &sa)$/;"	f	class:txn_btree_::single_value_reader
dup	txn_btree.h	/^    dup(const std::string &vdup, StringAllocator &sa)$/;"	f	class:txn_btree_::value_reader
dup	typed_txn_btree.h	/^    dup(const value_type &vdup, StringAllocator &sa)$/;"	f	class:typed_txn_btree_::single_value_reader
dup	typed_txn_btree.h	/^    dup(const value_type &vdup, StringAllocator &sa)$/;"	f	class:typed_txn_btree_::value_reader
dur_lsn_offset	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::dur_lsn_offset()$/;"	f	class:sm_log_alloc_mgr
durable_lsn	dbcore/sm-log.cpp	/^sm_log::durable_lsn()$/;"	f	class:sm_log
duration	masstree/mtclient.cc	/^double duration = 10;$/;"	v
duration	masstree/mtd.cc	/^double duration[2] = {10, 0};$/;"	v
duration	masstree/mttest.cc	/^double duration[2] = {10, 0};$/;"	v
duration2	masstree/mtclient.cc	/^double duration2 = 0;$/;"	v
dynarray	dbcore/dynarray.cpp	/^    : dynarray()$/;"	f
dynarray	dbcore/dynarray.cpp	/^dynarray::dynarray()$/;"	f	class:dynarray
dynarray	dbcore/dynarray.cpp	/^dynarray::dynarray(size_t capacity, size_t size)$/;"	f	class:dynarray
dynarray	dbcore/dynarray.h	/^struct dynarray {$/;"	s
eAMEX	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eAMEX,$/;"	e	enum:TPCE::eExchangeID
eAccountTaxStatus	benchmarks/egen/TradeGen.h	/^    eTaxStatus                      eAccountTaxStatus;$/;"	m	struct:TPCE::TAdditionalTradeInfo
eAction	benchmarks/egen/TxnHarnessStructs.h	/^    eMEETradeRequestAction      eAction;$/;"	m	struct:TPCE::TTradeRequest
eActive	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eActive,$/;"	e	enum:TPCE::eStatusTypeID
eCallNamedPipe	benchmarks/egen/error.h	/^        eCallNamedPipe,$/;"	e	enum:TPCE::CSystemErr::Action
eCanceled	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eCanceled,$/;"	e	enum:TPCE::eStatusTypeID
eCloseHandle	benchmarks/egen/error.h	/^        eCloseHandle,$/;"	e	enum:TPCE::CSystemErr::Action
eCompleted	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eCompleted = 0,$/;"	e	enum:TPCE::eStatusTypeID
eConnectNamedPipe	benchmarks/egen/error.h	/^        eConnectNamedPipe,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateEvent	benchmarks/egen/error.h	/^        eCreateEvent,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateFile	benchmarks/egen/error.h	/^        eCreateFile,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateFileMapping	benchmarks/egen/error.h	/^        eCreateFileMapping,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateMutex	benchmarks/egen/error.h	/^        eCreateMutex,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateNamedPipe	benchmarks/egen/error.h	/^        eCreateNamedPipe,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateProcess	benchmarks/egen/error.h	/^        eCreateProcess,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateSemaphore	benchmarks/egen/error.h	/^        eCreateSemaphore,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateThread	benchmarks/egen/error.h	/^        eCreateThread,$/;"	e	enum:TPCE::CSystemErr::Action
eCreateWindow	benchmarks/egen/error.h	/^        eCreateWindow,$/;"	e	enum:TPCE::CSystemErr::Action
eCustomerTier	benchmarks/egen/CustomerSelection.h	/^enum eCustomerTier$/;"	g	namespace:TPCE
eCustomerTierOne	benchmarks/egen/CustomerSelection.h	/^    eCustomerTierOne = 1,$/;"	e	enum:TPCE::eCustomerTier
eCustomerTierThree	benchmarks/egen/CustomerSelection.h	/^    eCustomerTierThree$/;"	e	enum:TPCE::eCustomerTier
eCustomerTierTwo	benchmarks/egen/CustomerSelection.h	/^    eCustomerTierTwo,$/;"	e	enum:TPCE::eCustomerTier
eDriverAll	benchmarks/egen/DriverTypes.h	/^  eDriverAll,$/;"	e	enum:TPCE::eDriverType
eDriverCE	benchmarks/egen/DriverTypes.h	/^  eDriverCE,$/;"	e	enum:TPCE::eDriverType
eDriverDM	benchmarks/egen/DriverTypes.h	/^  eDriverDM,$/;"	e	enum:TPCE::eDriverType
eDriverEGenLoader	benchmarks/egen/DriverTypes.h	/^  eDriverEGenLoader,$/;"	e	enum:TPCE::eDriverType
eDriverMEE	benchmarks/egen/DriverTypes.h	/^  eDriverMEE,$/;"	e	enum:TPCE::eDriverType
eDriverMax	benchmarks/egen/DriverTypes.h	/^  eDriverMax$/;"	e	enum:TPCE::eDriverType
eDriverType	benchmarks/egen/DriverTypes.h	/^enum eDriverType$/;"	g	namespace:TPCE
eExchangeID	benchmarks/egen/InputFlatFilesDeclarations.h	/^enum eExchangeID$/;"	g	namespace:TPCE
eFRead	benchmarks/egen/error.h	/^        eFRead,$/;"	e	enum:TPCE::CSystemErr::Action
eFSeek	benchmarks/egen/error.h	/^        eFSeek,$/;"	e	enum:TPCE::CSystemErr::Action
eFWrite	benchmarks/egen/error.h	/^        eFWrite,$/;"	e	enum:TPCE::CSystemErr::Action
eFixedArrayErrs	benchmarks/egen/FixedArray.h	/^    enum eFixedArrayErrs$/;"	g	class:TPCE::CFixedArrayErr
eFixedMapErrs	benchmarks/egen/FixedMap.h	/^    enum eFixedMapErrs$/;"	g	class:TPCE::CFixedMapErr
eIndexOutOfRange	benchmarks/egen/FixedArray.h	/^        eIndexOutOfRange,$/;"	e	enum:TPCE::CFixedArrayErr::eFixedArrayErrs
eInitializeSecurityDescriptor	benchmarks/egen/error.h	/^        eInitializeSecurityDescriptor,$/;"	e	enum:TPCE::CSystemErr::Action
eKeyOutOfRange	benchmarks/egen/FixedMap.h	/^        eKeyOutOfRange,$/;"	e	enum:TPCE::CFixedMapErr::eFixedMapErrs
eLimitBuy	benchmarks/egen/TradeTypeIDs.h	/^    eLimitBuy,$/;"	e	enum:TPCE::eTradeTypeID
eLimitSell	benchmarks/egen/TradeTypeIDs.h	/^    eLimitSell,$/;"	e	enum:TPCE::eTradeTypeID
eLoadImplementation	benchmarks/egen/EGenLoader.cpp	/^enum eLoadImplementation {$/;"	g	file:
eLogCustom	benchmarks/egen/BaseLogFormatter.h	/^    eLogCustom$/;"	e	enum:TPCE::eLogFormat
eLogFormat	benchmarks/egen/BaseLogFormatter.h	/^enum eLogFormat$/;"	g	namespace:TPCE
eLogTab	benchmarks/egen/BaseLogFormatter.h	/^    eLogTab,$/;"	e	enum:TPCE::eLogFormat
eMEEProcessOrder	benchmarks/egen/MEETradeRequestActions.h	/^    eMEEProcessOrder = 0,$/;"	e	enum:TPCE::eMEETradeRequestAction
eMEESetLimitOrderTrigger	benchmarks/egen/MEETradeRequestActions.h	/^    eMEESetLimitOrderTrigger$/;"	e	enum:TPCE::eMEETradeRequestAction
eMEETradeRequestAction	benchmarks/egen/MEETradeRequestActions.h	/^enum eMEETradeRequestAction$/;"	g	namespace:TPCE
eMapViewOfFile	benchmarks/egen/error.h	/^        eMapViewOfFile,$/;"	e	enum:TPCE::CSystemErr::Action
eMarketBuy	benchmarks/egen/TradeTypeIDs.h	/^    eMarketBuy = 0,$/;"	e	enum:TPCE::eTradeTypeID
eMarketSell	benchmarks/egen/TradeTypeIDs.h	/^    eMarketSell,$/;"	e	enum:TPCE::eTradeTypeID
eMaxStatusTypeID	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eMaxStatusTypeID    \/\/ should be the last - contains the number of items in the enumeration$/;"	e	enum:TPCE::eStatusTypeID
eMaxTradeTypeID	benchmarks/egen/TradeTypeIDs.h	/^    eMaxTradeTypeID \/\/ should be the last - contains the number of items in the enumeration$/;"	e	enum:TPCE::eTradeTypeID
eNASDAQ	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eNASDAQ,$/;"	e	enum:TPCE::eExchangeID
eNYSE	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eNYSE = 0,$/;"	e	enum:TPCE::eExchangeID
eNew	benchmarks/egen/error.h	/^        eNew,$/;"	e	enum:TPCE::CSystemErr::Action
eNonTaxable	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eNonTaxable = 0,$/;"	e	enum:TPCE::eTaxStatus
eNone	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eNone = -1,$/;"	e	enum:TPCE::eTaxStatus
eNone	benchmarks/egen/error.h	/^        eNone = 0,$/;"	e	enum:TPCE::CSystemErr::Action
eNotEnoughMemory	benchmarks/egen/FixedArray.h	/^        eNotEnoughMemory,$/;"	e	enum:TPCE::CFixedArrayErr::eFixedArrayErrs
eNotEnoughMemory	benchmarks/egen/FixedMap.h	/^        eNotEnoughMemory,$/;"	e	enum:TPCE::CFixedMapErr::eFixedMapErrs
eOutputQuiet	benchmarks/egen/InputFlatFilesStructure.h	/^  eOutputQuiet,$/;"	e	enum:TPCE::eOutputVerbosity
eOutputVerbose	benchmarks/egen/InputFlatFilesStructure.h	/^  eOutputVerbose$/;"	e	enum:TPCE::eOutputVerbosity
eOutputVerbosity	benchmarks/egen/InputFlatFilesStructure.h	/^enum eOutputVerbosity$/;"	g	namespace:TPCE
eOverflow	benchmarks/egen/FixedArray.h	/^        eOverflow$/;"	e	enum:TPCE::CFixedArrayErr::eFixedArrayErrs
eOverflow	benchmarks/egen/FixedMap.h	/^        eOverflow$/;"	e	enum:TPCE::CFixedMapErr::eFixedMapErrs
ePCX	benchmarks/egen/InputFlatFilesDeclarations.h	/^    ePCX$/;"	e	enum:TPCE::eExchangeID
ePending	benchmarks/egen/InputFlatFilesDeclarations.h	/^    ePending,$/;"	e	enum:TPCE::eStatusTypeID
eReadFile	benchmarks/egen/error.h	/^        eReadFile = 10,$/;"	e	enum:TPCE::CSystemErr::Action
eRegCreateKeyEx	benchmarks/egen/error.h	/^        eRegCreateKeyEx,$/;"	e	enum:TPCE::CSystemErr::Action
eRegEnumValue	benchmarks/egen/error.h	/^        eRegEnumValue,$/;"	e	enum:TPCE::CSystemErr::Action
eRegOpenKeyEx	benchmarks/egen/error.h	/^        eRegOpenKeyEx,$/;"	e	enum:TPCE::CSystemErr::Action
eRegQueryValueEx	benchmarks/egen/error.h	/^        eRegQueryValueEx = 20,$/;"	e	enum:TPCE::CSystemErr::Action
eRegSetValueEx	benchmarks/egen/error.h	/^        eRegSetValueEx,$/;"	e	enum:TPCE::CSystemErr::Action
eRegisterClassEx	benchmarks/egen/error.h	/^        eRegisterClassEx,$/;"	e	enum:TPCE::CSystemErr::Action
eReleaseMutex	benchmarks/egen/error.h	/^        eReleaseMutex$/;"	e	enum:TPCE::CSystemErr::Action
eReleaseSemaphore	benchmarks/egen/error.h	/^        eReleaseSemaphore,$/;"	e	enum:TPCE::CSystemErr::Action
eSetFilePointer	benchmarks/egen/error.h	/^        eSetFilePointer,$/;"	e	enum:TPCE::CSystemErr::Action
eSetNamedPipeHandleState	benchmarks/egen/error.h	/^        eSetNamedPipeHandleState,$/;"	e	enum:TPCE::CSystemErr::Action
eSetSecurityDescriptorDacl	benchmarks/egen/error.h	/^        eSetSecurityDescriptorDacl,$/;"	e	enum:TPCE::CSystemErr::Action
eStatusTypeID	benchmarks/egen/InputFlatFilesDeclarations.h	/^enum eStatusTypeID$/;"	g	namespace:TPCE
eStopLoss	benchmarks/egen/TradeTypeIDs.h	/^    eStopLoss,$/;"	e	enum:TPCE::eTradeTypeID
eSubmitted	benchmarks/egen/InputFlatFilesDeclarations.h	/^    eSubmitted,$/;"	e	enum:TPCE::eStatusTypeID
eTaxStatus	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^enum eTaxStatus$/;"	g	namespace:TPCE
eTaxableAndDontWithhold	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eTaxableAndDontWithhold$/;"	e	enum:TPCE::eTaxStatus
eTaxableAndWithhold	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eTaxableAndWithhold,$/;"	e	enum:TPCE::eTaxStatus
eTmpFile	benchmarks/egen/error.h	/^        eTmpFile,$/;"	e	enum:TPCE::CSystemErr::Action
eTradeStatus	benchmarks/egen/TradeGen.h	/^    eStatusTypeID   eTradeStatus;   \/\/integer representation of the TRADE row T_ST_ID$/;"	m	struct:TPCE::TTradeInfo
eTradeType	benchmarks/egen/TradeGen.h	/^    eTradeTypeID    eTradeType;     \/\/integer representation of the TRADE row T_TT_ID$/;"	m	struct:TPCE::TTradeInfo
eTradeTypeID	benchmarks/egen/TradeTypeIDs.h	/^enum eTradeTypeID$/;"	g	namespace:TPCE
eTransactNamedPipe	benchmarks/egen/error.h	/^        eTransactNamedPipe,$/;"	e	enum:TPCE::CSystemErr::Action
eVirtualAlloc	benchmarks/egen/error.h	/^        eVirtualAlloc,$/;"	e	enum:TPCE::CSystemErr::Action
eWaitForMultipleObjects	benchmarks/egen/error.h	/^        eWaitForMultipleObjects,$/;"	e	enum:TPCE::CSystemErr::Action
eWaitForSingleObject	benchmarks/egen/error.h	/^        eWaitForSingleObject,$/;"	e	enum:TPCE::CSystemErr::Action
eWaitNamedPipe	benchmarks/egen/error.h	/^        eWaitNamedPipe,$/;"	e	enum:TPCE::CSystemErr::Action
eWriteFile	benchmarks/egen/error.h	/^        eWriteFile,$/;"	e	enum:TPCE::CSystemErr::Action
e_	masstree/kvthread.hh	/^    limbo_element e_[capacity];$/;"	m	struct:limbo_group
ebeginthread	benchmarks/egen/error.h	/^        ebeginthread,$/;"	e	enum:TPCE::CSystemErr::Action
egen_init	benchmarks/egen/EGenLoader.cpp	/^	int egen_init(int argc, char* argv[])$/;"	f
egen_release	benchmarks/egen/EGenLoader.cpp	/^void egen_release()$/;"	f
elem	util.h	/^  T elem;$/;"	m	class:util::aligned_padded_elem
elems	core.h	/^  elems() const$/;"	f	class:percore
elems	core.h	/^  elems()$/;"	f	class:percore
elems	static_unordered_map.h	/^  bucket elems[StaticSize];$/;"	m	class:static_unordered_map
elems_buf	static_vector.h	/^  char elems_buf[sizeof(T) * StaticSize];$/;"	m	class:static_vector
elemwise_sum	benchmarks/bench.cc	/^elemwise_sum(const vector<T> &a, const vector<T> &b)$/;"	f	file:
emit_fields	masstree/kvrow.hh	/^void query<R>::emit_fields(const R* value, Json& req, threadinfo& ti) {$/;"	f	class:query
emit_fields1	masstree/kvrow.hh	/^void query<R>::emit_fields1(const R* value, Json& req, threadinfo& ti) {$/;"	f	class:query
emplace	dbcore/sc-hash.h	/^    emplace(Args && ...args) {$/;"	f
emplace_back	masstree/local_vector.hh	/^inline void local_vector<T, N, A>::emplace_back(Args&&... args) {$/;"	f	class:local_vector
emplace_back	small_vector.h	/^  emplace_back(Args &&... args)$/;"	f	class:small_vector
emplace_back	static_vector.h	/^  emplace_back(Args &&... args)$/;"	f	class:static_vector
empty	circbuf.h	/^  empty() const$/;"	f	class:circbuf
empty	dbcore/cslist.h	/^    bool empty() const {$/;"	f	struct:cslist
empty	masstree/json.hh	/^    bool empty() const {$/;"	f	class:lcdf::Json::unparse_manipulator
empty	masstree/json.hh	/^    bool empty() const {$/;"	f	class:lcdf::Json_proxy_base
empty	masstree/json.hh	/^inline bool Json::empty() const {$/;"	f	class:lcdf::Json
empty	masstree/local_vector.hh	/^inline bool local_vector<T, N, A>::empty() const {$/;"	f	class:local_vector
empty	masstree/masstree_key.hh	/^    bool empty() const {$/;"	f	class:Masstree::key
empty	masstree/masstree_struct.hh	/^    bool empty() const {$/;"	f	class:Masstree::leafvalue
empty	masstree/msgpack.hh	/^inline bool streaming_parser::empty() const {$/;"	f	class:msgpack::streaming_parser
empty	masstree/straccum.hh	/^inline bool StringAccum::empty() const {$/;"	f	class:lcdf::StringAccum
empty	masstree/string_base.hh	/^    bool empty() const {$/;"	f	class:lcdf::String_base
empty	small_unordered_map.h	/^  empty() const$/;"	f	class:small_unordered_map
empty	small_vector.h	/^  empty() const$/;"	f	class:small_vector
empty	static_unordered_map.h	/^  empty() const$/;"	f	class:static_unordered_map
empty	static_vector.h	/^  empty() const$/;"	f	class:static_vector
empty_data	masstree/string.cc	/^const char String_generic::empty_data[] = "";$/;"	m	class:lcdf::String_generic	file:
empty_data	masstree/string_base.hh	/^    static const char empty_data[1];$/;"	m	class:lcdf::String_generic
enable_parallel_loading	benchmarks/bench.cc	/^int enable_parallel_loading = false;$/;"	v
enable_rvalue_reference	masstree/compiler.hh	/^    typedef void enable_rvalue_reference;$/;"	t	struct:mass::fast_argument
enabled	scopedperf.hh	/^  bool enabled() const { return false; }$/;"	f	class:scopedperf::always_disabled
enabled	scopedperf.hh	/^  bool enabled() const { return true; }$/;"	f	class:scopedperf::always_enabled
enabled	scopedperf.hh	/^  bool enabled() const { return true; }$/;"	f	class:scopedperf::default_enabler
enabled	scopedperf.hh	/^  const bool enabled;$/;"	m	class:scopedperf::base_perf_region
enabled	util.h	/^  bool enabled;$/;"	m	class:util::scoped_timer
encode	record/serializer.h	/^  encode(int32_t value)$/;"	f	struct:serializer
encode_base64	masstree/string.cc	/^String String::encode_base64(bool pad) const {$/;"	f	class:lcdf::String
encode_base64	masstree/string_base.hh	/^void String_base<T>::encode_base64(E& enc, bool pad) const {$/;"	f	class:lcdf::String_base
encode_json	masstree/string.cc	/^String String::encode_json() const {$/;"	f	class:lcdf::String
encode_json	masstree/string_base.hh	/^inline void String_base<T>::encode_json(E& enc) const {$/;"	f	class:lcdf::String_base
encode_json_partial	masstree/string_base.hh	/^typename String_base<T>::const_iterator String_base<T>::encode_json_partial(E& enc) const {$/;"	f	class:lcdf::String_base
encode_size	dbcore/size-encode.cpp	/^uint8_t encode_size(size_t sz) {$/;"	f
encode_size_aligned	dbcore/size-encode.cpp	/^uint8_t encode_size_aligned(size_t &size, size_t align_bits) {$/;"	f
encode_utf8	masstree/clp.c	/^encode_utf8(char *s, int n, int c)$/;"	f	file:
encoder	record/encoder.h	/^template <typename T> struct encoder {};$/;"	s
encstress_bench_runner	benchmarks/encstress.cc	/^  encstress_bench_runner(abstract_db *db)$/;"	f	class:encstress_bench_runner
encstress_bench_runner	benchmarks/encstress.cc	/^class encstress_bench_runner : public bench_runner {$/;"	c	file:
encstress_do_test	benchmarks/encstress.cc	/^encstress_do_test(abstract_db *db, int argc, char **argv)$/;"	f
encstress_loader	benchmarks/encstress.cc	/^  encstress_loader(unsigned long seed,$/;"	f	class:encstress_loader
encstress_loader	benchmarks/encstress.cc	/^class encstress_loader : public bench_loader {$/;"	c	file:
encstress_worker	benchmarks/encstress.cc	/^  encstress_worker($/;"	f	class:encstress_worker
encstress_worker	benchmarks/encstress.cc	/^class encstress_worker : public bench_worker {$/;"	c	file:
end	btree.cc	/^  testing_concurrent_btree::key_type *end;$/;"	m	class:test_range_scan_helper	file:
end	dbcore/cslist.h	/^    iterator end() {$/;"	f	struct:cslist
end	dbcore/epoch.cpp	/^    epoch_num end = 1;$/;"	m	struct:epoch_mgr::private_state	file:
end	dbcore/epoch.cpp	/^    epoch_num end;$/;"	m	struct:epoch_mgr::thread_state	file:
end	dbcore/rcu-slist.h	/^    iterator end() { return self.end<Node>(); }$/;"	f	struct:rcu_slist
end	dbcore/rcu-slist.h	/^    iterator<Node> end() { return iterator<Node>(); }$/;"	f	struct:_rcu_slist
end	dbcore/rcu-slist.h	/^    iterator<node> end() { return end<node>(); }$/;"	f	struct:_rcu_slist
end	dbcore/sc-hash.h	/^    iterator end() { return iterator{this,N}; }$/;"	f
end	dbcore/sm-common.cpp	/^dirent_iterator::end() {$/;"	f	class:dirent_iterator
end	dbcore/sm-common.h	/^    LSN end;$/;"	m	struct:version
end	dbcore/sm-defs.h	/^    iterator end() { return iterator{0, iterable.end()}; }$/;"	f	struct:_enumerate_helper
end	dbcore/sm-defs.h	/^    iterator end() { return iterator{N, iterable+N}; }$/;"	f	struct:_enumerate_helper
end	dbcore/sm-oid-alloc-impl.h	/^    iterator end() { return iterator{as_array(), CAPACITY}; }$/;"	f	struct:sparse_bitset
end	dbcore/xid.h	/^    LSN end;$/;"	m	struct:TXN::xid_context
end	masstree/json.hh	/^    Json::const_iterator end() const {$/;"	f	class:lcdf::Json_proxy_base
end	masstree/json.hh	/^    Json::iterator end() {$/;"	f	class:lcdf::Json_proxy_base
end	masstree/json.hh	/^inline Json::const_iterator Json::end() const {$/;"	f	class:lcdf::Json
end	masstree/json.hh	/^inline Json::iterator Json::end() {$/;"	f	class:lcdf::Json
end	masstree/straccum.hh	/^inline StringAccum::const_iterator StringAccum::end() const {$/;"	f	class:lcdf::StringAccum
end	masstree/straccum.hh	/^inline StringAccum::iterator StringAccum::end() {$/;"	f	class:lcdf::StringAccum
end	masstree/string_base.hh	/^    const_iterator end() const {$/;"	f	class:lcdf::String_base
end	scopedperf.hh	/^end(const vector<T> &v)$/;"	f	namespace:scopedperf
end	small_unordered_map.h	/^  end() const$/;"	f	class:small_unordered_map
end	small_unordered_map.h	/^  end()$/;"	f	class:small_unordered_map
end	small_vector.h	/^  end() const$/;"	f	class:small_vector
end	small_vector.h	/^  end()$/;"	f	class:small_vector
end	static_unordered_map.h	/^  end() const$/;"	f	class:static_unordered_map
end	static_unordered_map.h	/^  end()$/;"	f	class:static_unordered_map
end	static_vector.h	/^  end() const$/;"	f	class:static_vector
end	static_vector.h	/^  end()$/;"	f	class:static_vector
end	third-party/lz4/lz4hc.c	/^    const BYTE* end;$/;"	m	struct:__anon7	file:
endOnInputSize	third-party/lz4/lz4.c	/^typedef enum { endOnOutputSize = 0, endOnInputSize = 1 } end_directive;$/;"	e	enum:__anon5	file:
endOnOutputSize	third-party/lz4/lz4.c	/^typedef enum { endOnOutputSize = 0, endOnInputSize = 1 } end_directive;$/;"	e	enum:__anon5	file:
end_array_cdata	masstree/json.hh	/^inline const Json* Json::end_array_cdata() const {$/;"	f	class:lcdf::Json
end_array_data	masstree/json.hh	/^inline Json* Json::end_array_data() {$/;"	f	class:lcdf::Json
end_array_data	masstree/json.hh	/^inline const Json* Json::end_array_data() const {$/;"	f	class:lcdf::Json
end_data	masstree/clp.c	/^    char* end_data;$/;"	m	struct:Clp_BuildString	file:
end_directive	third-party/lz4/lz4.c	/^typedef enum { endOnOutputSize = 0, endOnInputSize = 1 } end_directive;$/;"	t	typeref:enum:__anon5	file:
end_offset	dbcore/sm-log-file.h	/^        uint64_t end_offset;$/;"	m	struct:sm_log_file_mgr::segment_id
end_offset	dbcore/sm-log-segments.h	/^    uint64_t end_offset;$/;"	m	struct:log_segment_desc
end_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    end_trade_dts;$/;"	m	struct:TPCE::TTradeLookupFrame2Input
end_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    end_trade_dts;$/;"	m	struct:TPCE::TTradeLookupFrame3Input
end_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    end_trade_dts;$/;"	m	struct:TPCE::TTradeLookupTxnInput
end_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    end_trade_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame2Input
end_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    end_trade_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame3Input
end_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    end_trade_dts;$/;"	m	struct:TPCE::TTradeUpdateTxnInput
ending_co_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              ending_co_id;$/;"	m	struct:TPCE::TMarketWatchTxnInput
endkey	masstree/checkpoint.hh	/^    Str endkey;$/;"	m	struct:ckstate
endptr	static_vector.h	/^  endptr() const$/;"	f	class:static_vector
endptr	static_vector.h	/^  endptr()$/;"	f	class:static_vector
enq	benchmarks/tpcc.cc	/^  enq(T &t)$/;"	f	class:scoped_multilock
enq	circbuf.h	/^  enq(Tp *p)$/;"	f	class:circbuf
ensure_active	txn.h	/^  ensure_active()$/;"	f	class:transaction
ensure_buffer_with_space	persist_test.cc	/^  ensure_buffer_with_space(unsigned id, pbuffer *cur, size_t space_needed)$/;"	f	class:onecopy_logbased_simulation	file:
ensure_size	dbcore/dynarray.cpp	/^dynarray::ensure_size(size_t min_size)$/;"	f	class:dynarray
ensure_size	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::oid_array::ensure_size(size_t n) {$/;"	f	class:sm_oid_mgr_impl::oid_array
ensure_suffixes	btree.h	/^    ensure_suffixes()$/;"	f	struct:btree::leaf_node
enter	masstree/kvthread.hh	/^    void enter() {$/;"	f	class:threadinfo
enter_count	dbcore/rcu.cpp	/^    int enter_count;$/;"	m	struct:RCU::rcu_tcb	file:
enter_precommit	dbcore/sm-tx-log.cpp	/^void sm_tx_log_impl::enter_precommit() {$/;"	f	class:sm_tx_log_impl
entries	dbcore/sm-oid-alloc-impl.h	/^        OID entries[N];$/;"	m	struct:sm_allocator::thread_cache
entries	dbcore/sm-oid-alloc-impl.h	/^        uint16_t *entries;$/;"	m	struct:sparse_bitset::iterator
entries	dbcore/sm-oid-alloc-impl.h	/^    v8hi entries[2];$/;"	m	struct:sparse_bitset
enumerate	dbcore/sm-defs.h	/^_enumerate_helper<T> enumerate(T &iterable) {$/;"	f
env	benchmarks/stats_runner.py	/^  env = dict(os.environ)$/;"	v
epoch	dbcore/sm-common.h	/^    uint32_t epoch() const { return _val >> 32; }$/;"	f	struct:XID
epoch	dbcore/xid.cpp	/^    epoch_mgr::epoch_num epoch;$/;"	m	struct:TXN::thread_data	file:
epoch	masstree/log.cc	/^    kvepoch_t epoch;$/;"	m	struct:logrecord	file:
epoch	masstree/log.hh	/^        kvepoch_t epoch;$/;"	m	struct:loginfo::query_times
epoch_	masstree/kvthread.hh	/^    uint64_t epoch_;$/;"	m	struct:limbo_element
epoch_	masstree/log.cc	/^    kvepoch_t epoch_;$/;"	m	struct:logrec_epoch	file:
epoch_ended	dbcore/epoch.h	/^        void *(*epoch_ended)(void*, epoch_num);$/;"	m	struct:epoch_mgr::callbacks
epoch_ended	dbcore/sm-alloc.cpp	/^    epoch_ended(void *cookie, epoch_num e)$/;"	f	namespace:RA
epoch_ended	dbcore/test-epoch.cpp	/^epoch_ended(void*, epoch_mgr::epoch_num x)$/;"	f
epoch_ended	dbcore/xid.cpp	/^epoch_ended(void*, epoch_mgr::epoch_num)$/;"	f	namespace:TXN
epoch_ended_thread	dbcore/epoch.h	/^        void *(*epoch_ended_thread)(void *cookie, void *epoch_cookie, void *thread_cookie);$/;"	m	struct:epoch_mgr::callbacks
epoch_ended_thread	dbcore/sm-alloc.cpp	/^    epoch_ended_thread(void *cookie, void *epoch_cookie, void *thread_cookie)$/;"	f	namespace:RA
epoch_ended_thread	dbcore/test-epoch.cpp	/^epoch_ended_thread(void *cookie, void *epoch_cookie, void *thread_cookie)$/;"	f
epoch_ended_thread	dbcore/xid.cpp	/^epoch_ended_thread(void *, void *epoch_cookie, void *)$/;"	f	namespace:TXN
epoch_enter	dbcore/sm-alloc.cpp	/^    epoch_enter(void)$/;"	f	namespace:RA
epoch_exit	dbcore/sm-alloc.cpp	/^    epoch_exit(void)$/;"	f	namespace:RA
epoch_mgr	dbcore/epoch.h	/^    epoch_mgr(callbacks const &c) : cb(c) { }$/;"	f	struct:epoch_mgr
epoch_mgr	dbcore/epoch.h	/^struct epoch_mgr {$/;"	s
epoch_num	dbcore/epoch.h	/^    typedef uint64_t epoch_num;$/;"	t	struct:epoch_mgr
epoch_num	dbcore/sm-alloc.h	/^typedef epoch_mgr::epoch_num epoch_num;$/;"	t
epoch_number_	persist_test.cc	/^  aligned_padded_elem<atomic<uint64_t>> epoch_number_;$/;"	m	class:database_simulation	file:
epoch_reclaimed	dbcore/epoch.h	/^        void (*epoch_reclaimed)(void *cookie, void *epoch_cookie);$/;"	m	struct:epoch_mgr::callbacks
epoch_reclaimed	dbcore/sm-alloc.cpp	/^    epoch_reclaimed(void *cookie, void *epoch_cookie)$/;"	f	namespace:RA
epoch_reclaimed	dbcore/test-epoch.cpp	/^epoch_reclaimed(void *cookie, void *epoch_cookie)$/;"	f
epoch_reclaimed	dbcore/xid.cpp	/^epoch_reclaimed(void *, void *)$/;"	f	namespace:TXN
epoch_thread	persist_test.cc	/^  epoch_thread()$/;"	f	class:database_simulation
epoch_thread_	persist_test.cc	/^  thread epoch_thread_;$/;"	m	class:database_simulation	file:
epoch_thread_quiesce	dbcore/sm-alloc.cpp	/^    epoch_thread_quiesce(void)$/;"	f	namespace:RA
epoch_tls	dbcore/sm-alloc.cpp	/^    static __thread struct thread_data epoch_tls;$/;"	m	namespace:RA	typeref:struct:RA::thread_data	file:
epochbased_simulation	persist_test.cc	/^  epochbased_simulation(bool compress)$/;"	f	class:epochbased_simulation
epochbased_simulation	persist_test.cc	/^class epochbased_simulation : public onecopy_logbased_simulation {$/;"	c	file:
epochinc	masstree/mtd.cc	/^epochinc(int)$/;"	f
epochs_	persist_test.cc	/^    atomic<uint64_t> epochs_[NMAXCORES];$/;"	m	struct:database_simulation::__anon1	file:
epollfd	masstree/mtd.cc	/^    int epollfd;$/;"	m	struct:tcpfds	file:
eqcnt	dbcore/test-sc-hash.cpp	/^static size_t eqcnt = 0;$/;"	v	file:
equals	masstree/string_base.hh	/^    bool equals(const String_base<TT> &x) const {$/;"	f	class:lcdf::String_base
equals	masstree/string_base.hh	/^    bool equals(const char *cstr) const {$/;"	f	class:lcdf::String_base
equals	masstree/string_base.hh	/^    bool equals(const char *s, int len) const {$/;"	f	class:lcdf::String_base
equals	masstree/string_base.hh	/^    static bool equals(const char* a, int a_len, const char* b, int b_len) {$/;"	f	class:lcdf::String_generic
equals	masstree/stringbag.hh	/^    bool equals(int p, const char *s, int len) const {$/;"	f	class:stringbag
equals	masstree/stringbag.hh	/^    bool equals(int p, lcdf::Str s) const {$/;"	f	class:stringbag
equals_function	dbcore/sc-hash.h	/^    typedef typename std::conditional<std::is_same<void,Equals>::value, cmpeq, Equals>::type equals_function;$/;"	t	struct:sc_hash_set
equals_sloppy	masstree/string_slice.hh	/^    static bool equals_sloppy(const char *a, const char *b, int len) {$/;"	f	struct:string_slice
equals_sloppy	masstree/stringbag.hh	/^    bool equals_sloppy(int p, const char *s, int len) const {$/;"	f	class:stringbag
equals_sloppy	masstree/stringbag.hh	/^    bool equals_sloppy(int p, lcdf::Str s) const {$/;"	f	class:stringbag
erase	dbcore/sc-hash.h	/^    erase(Key const &k) {$/;"	f
erase	dbcore/sc-hash.h	/^    erase(iterator const &it)$/;"	f
erase	masstree/json.cc	/^Json::array_iterator Json::erase(array_iterator first, array_iterator last) {$/;"	f	class:lcdf::Json
erase	masstree/json.cc	/^Json::size_type Json::ObjectJson::erase(Str key) {$/;"	f	class:lcdf::Json::ObjectJson
erase	masstree/json.cc	/^void Json::ObjectJson::erase(int p) {$/;"	f	class:lcdf::Json::ObjectJson
erase	masstree/json.hh	/^    Json::array_iterator erase(Json::array_iterator first, Json::array_iterator last) {$/;"	f	class:lcdf::Json_proxy_base
erase	masstree/json.hh	/^    Json::array_iterator erase(Json::array_iterator position) {$/;"	f	class:lcdf::Json_proxy_base
erase	masstree/json.hh	/^    Json::object_iterator erase(Json::object_iterator it) {$/;"	f	class:lcdf::Json_proxy_base
erase	masstree/json.hh	/^    Json::size_type erase(Str key) {$/;"	f	class:lcdf::Json_proxy_base
erase	masstree/json.hh	/^inline Json::array_iterator Json::erase(array_iterator position) {$/;"	f	class:lcdf::Json
erase	masstree/json.hh	/^inline Json::object_iterator Json::erase(Json::object_iterator it) {$/;"	f	class:lcdf::Json
erase	masstree/json.hh	/^inline Json::size_type Json::erase(Str key) {$/;"	f	class:lcdf::Json
err	dbcore/sm-exceptions.h	/^    int err;$/;"	m	struct:os_error
errno_	masstree/log.hh	/^    int errno_;$/;"	m	class:logreplay
error	masstree/json.hh	/^inline bool Json::streaming_parser::error() const {$/;"	f	class:lcdf::Json::streaming_parser
error	masstree/msgpack.hh	/^inline bool streaming_parser::error() const {$/;"	f	class:msgpack::streaming_parser
error_at	masstree/json.cc	/^inline const uint8_t* Json::streaming_parser::error_at(const uint8_t* here) {$/;"	f	class:lcdf::Json::streaming_parser
error_handler	masstree/clp.c	/^    void (*error_handler)(Clp_Parser *, const char *);$/;"	m	struct:Clp_Internal	file:
event_avg_counter	counter.cc	/^event_avg_counter::event_avg_counter(const string &name)$/;"	f	class:event_avg_counter
event_avg_counter	counter.h	/^class event_avg_counter {$/;"	c
event_conn	masstree/mtd.cc	/^    conn *event_conn(eventset &es, int i) const {$/;"	f	class:tcpfds
event_conn	masstree/mtd.cc	/^    conn *event_conn(eventset &es, int i) const {$/;"	f	struct:tcpfds
event_counter	counter.cc	/^event_counter::event_counter(const string &name)$/;"	f	class:event_counter
event_counter	counter.h	/^class event_counter {$/;"	c
event_counters	counter.cc	/^event_ctx::event_counters()$/;"	f	class:event_ctx
event_counters_lock	counter.cc	/^event_ctx::event_counters_lock()$/;"	f	class:event_ctx
event_ctx	counter.h	/^    event_ctx(const std::string &name, bool avg_tag)$/;"	f	struct:private_::event_ctx
event_ctx	counter.h	/^  struct event_ctx {$/;"	s	namespace:private_
event_ctx_avg	counter.h	/^    event_ctx_avg(const std::string &name) : event_ctx(name, true) {}$/;"	f	struct:private_::event_ctx_avg
event_ctx_avg	counter.h	/^  struct event_ctx_avg : public event_ctx {$/;"	s	namespace:private_
eventset	masstree/mtd.cc	/^    typedef fd_set eventset;$/;"	t	class:tcpfds	file:
eventset	masstree/mtd.cc	/^    typedef struct epoll_event eventset[max_events];$/;"	t	struct:tcpfds	typeref:struct:tcpfds::epoll_event	file:
everyone	dbcore/test-rcu-slist.cpp	/^std::set<pthread_t> everyone, in_flight;$/;"	v
evt_dbtuple_latest_replacement	txn.h	/^  static event_counter evt_dbtuple_latest_replacement;$/;"	m	class:transaction_base
evt_local_search_lookups	txn.h	/^  static event_counter evt_local_search_lookups;$/;"	m	class:transaction_base
ex	benchmarks/results/make_graphs-3.py	/^      def ex(p):$/;"	f	function:extract_pct
ex	benchmarks/results/make_graphs-6.py	/^  def ex(p):$/;"	f	function:extract_pct
ex	btree.cc	/^    test_range_scan_helper::expect ex;$/;"	m	class:mp_test_long_keys_ns::scan_worker	file:
ex_ad_cty	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_ad_cty[cAD_CTRY_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_ad_div	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_ad_div[cAD_DIV_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_ad_line1	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_ad_line1[cAD_LINE_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_ad_line2	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_ad_line2[cAD_LINE_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_ad_town	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_ad_town[cAD_TOWN_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_ad_zip	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_ad_zip[cAD_ZIP_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_close	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               ex_close;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    ex_date;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_desc	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_desc[cEX_DESC_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_name[cEX_NAME_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                ex_name[max_trade_status_len][cEX_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
ex_num_symb	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               ex_num_symb;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_open	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               ex_open;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
ex_type	btree.cc	/^  ExpectType ex_type;$/;"	m	class:test_range_scan_helper	file:
exchange	masstree/kpermuter.hh	/^    void exchange(int i, int j) {$/;"	f	class:kpermuter
exchangeTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CExchangeTable*				exchangeTable;$/;"	m	class:TPCE::CGenerateAndLoad
exchange_values	masstree/kpermuter.hh	/^    void exchange_values(int x, int y) {$/;"	f	class:kpermuter
exec_f_name	benchmarks/egen/TxnHarnessStructs.h	/^    char            exec_f_name[cF_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
exec_f_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    exec_f_name[cF_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame2Input
exec_is_owner	benchmarks/egen/DriverParamSettings.h	/^    INT32   exec_is_owner;$/;"	m	struct:TPCE::TTradeOrderSettings
exec_is_owner	benchmarks/egen/DriverParamSettings.h	/^    bool    exec_is_owner;$/;"	m	struct:TPCE::TTradeOrderSettingsState
exec_l_name	benchmarks/egen/TxnHarnessStructs.h	/^    char            exec_l_name[cL_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
exec_l_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    exec_l_name[cL_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame2Input
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                exec_name[max_trade_status_len][cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
exec_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    exec_name[cEXEC_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame4Input
exec_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        exec_name_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
exec_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        exec_name_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
exec_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        exec_name_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
exec_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        exec_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
exec_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        exec_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
exec_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        exec_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
exec_tax_id	benchmarks/egen/TxnHarnessStructs.h	/^    char            exec_tax_id[cTAX_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
exec_tax_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    exec_tax_id[cTAX_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame2Input
exit_directive	third-party/lz4/lz4.c	/^typedef enum { full = 0, partial = 1 } exit_directive;$/;"	t	typeref:enum:__anon6	file:
expect	btree.cc	/^    expect() : tag(), expected_size() {}$/;"	f	struct:test_range_scan_helper::expect
expect	btree.cc	/^    expect(const set<string> &expected_keys)$/;"	f	struct:test_range_scan_helper::expect
expect	btree.cc	/^    expect(size_t expected_size)$/;"	f	struct:test_range_scan_helper::expect
expect	btree.cc	/^  struct expect {$/;"	s	class:test_range_scan_helper	file:
expect	third-party/lz4/lz4.c	144;"	d	file:
expect	third-party/lz4/lz4.c	146;"	d	file:
expectation	btree.cc	/^  expect expectation;$/;"	m	class:test_range_scan_helper	file:
expected_keys	btree.cc	/^    set<string> expected_keys;$/;"	m	struct:test_range_scan_helper::expect	file:
expected_size	btree.cc	/^    size_t expected_size;$/;"	m	struct:test_range_scan_helper::expect	file:
experiment_run_test_table	masstree/mttest.cc	/^static String experiment_run_test_table(const String &key) {$/;"	f	file:
experiment_stats	masstree/mttest.cc	/^static Json experiment_stats;$/;"	v	file:
experiment_test_table	masstree/mttest.cc	/^static String experiment_test_table(const String &key) {$/;"	f	file:
experiment_test_table_trial	masstree/mttest.cc	/^static String experiment_test_table_trial(const String &key) {$/;"	f	file:
explicit_deptracking_simulation	persist_test.cc	/^class explicit_deptracking_simulation : public onecopy_logbased_simulation {$/;"	c	file:
ext_segment	dbcore/sm-common.h	/^    int ext_segment() const {$/;"	f	struct:fat_ptr
extend	masstree/straccum.hh	/^inline char *StringAccum::extend(int nadjust, int nreserve) {$/;"	f	class:lcdf::StringAccum
extra_ptr	dbcore/sm-log-defs.h	/^    fat_ptr extra_ptr;$/;"	m	struct:log_request
extract	masstree/log.cc	/^logrecord::extract(const char *buf, const char *end)$/;"	f	class:logrecord
extract_from_files	benchmarks/results/make_graphs-6.py	/^    def extract_from_files(f):$/;"	f
extract_latency	benchmarks/results/make_graphs-4.py	/^def extract_latency(results, persist):$/;"	f
extract_latency	benchmarks/results/make_graphs-5.py	/^    def extract_latency(results, persist):$/;"	f	function:datafromfile
extract_latency	benchmarks/results/make_graphs-6.py	/^def extract_latency(x):$/;"	f
extract_nthreads	benchmarks/results/make_graphs-6.py	/^def extract_nthreads(x):$/;"	f
extract_p	benchmarks/results/make_graphs-3.py	/^    def extract_p(x):$/;"	f
extract_pct	benchmarks/results/make_graphs-3.py	/^    def extract_pct(x):$/;"	f
extract_pct	benchmarks/results/make_graphs-6.py	/^def extract_pct(x):$/;"	f
extract_raw_pct	benchmarks/results/make_graphs-6.py	/^def extract_raw_pct(x):$/;"	f
extract_result_position	benchmarks/results/make_graphs-4.py	/^def extract_result_position(k, res):$/;"	f
extract_result_position	benchmarks/results/make_graphs-5.py	/^    def extract_result_position(k, res):$/;"	f	function:datafromfile
extract_throughput	benchmarks/results/make_graphs-4.py	/^def extract_throughput(results, persist):$/;"	f
extract_throughput	benchmarks/results/make_graphs-5.py	/^    def extract_throughput(results, persist):$/;"	f	function:datafromfile
extrasize64_	masstree/masstree_struct.hh	/^    int8_t extrasize64_;$/;"	m	class:Masstree::leaf
f	dbcore/sm-oid-alloc-impl.h	/^        FID f;$/;"	m	struct:sm_allocator::thread_cache
fAccountInitialNegativeBalanceMin	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const double    fAccountInitialNegativeBalanceMin = -9999999.99;$/;"	m	namespace:TPCE
fAccountInitialPositiveBalanceMax	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const double    fAccountInitialPositiveBalanceMax = 9999999.99;$/;"	m	namespace:TPCE
fBidPrice	benchmarks/egen/TradeGen.h	/^    CMoney          fBidPrice;  \/\/ bid price for market orders or limit price for limit ones$/;"	m	struct:TPCE::TTradeInfo
fBrokerInitialCommissionYTDMax	benchmarks/egen/Brokers.h	/^const double    fBrokerInitialCommissionYTDMax = 100000.0;$/;"	m	namespace:TPCE
fBrokerInitialCommissionYTDMin	benchmarks/egen/Brokers.h	/^const double    fBrokerInitialCommissionYTDMin = 10000.0;$/;"	m	namespace:TPCE
fBuyValue	benchmarks/egen/TradeGen.h	/^    CMoney                          fBuyValue;$/;"	m	struct:TPCE::TAdditionalTradeInfo
fCompletionSUTDelay	benchmarks/egen/MEESecurity.cpp	/^const double fCompletionSUTDelay = 1.0; \/\/ seconds$/;"	v
fDailyMarketCloseMax	benchmarks/egen/DailyMarketTable.h	/^const double    fDailyMarketCloseMax = fMaxSecPrice;$/;"	m	namespace:TPCE
fDailyMarketCloseMin	benchmarks/egen/DailyMarketTable.h	/^const double    fDailyMarketCloseMin = fMinSecPrice;$/;"	m	namespace:TPCE
fDailyMarketHighRelativeToClose	benchmarks/egen/DailyMarketTable.h	/^const double    fDailyMarketHighRelativeToClose = 1.05;$/;"	m	namespace:TPCE
fDailyMarketLowRelativeToClose	benchmarks/egen/DailyMarketTable.h	/^const double    fDailyMarketLowRelativeToClose = 0.92;$/;"	m	namespace:TPCE
fDilutedSharesMultiplier	benchmarks/egen/FinancialTable.h	/^const double fDilutedSharesMultiplier = 1.1;$/;"	m	namespace:TPCE
fFinDataDownMult	benchmarks/egen/FinancialTable.h	/^const double fFinDataDownMult = 0.9;$/;"	m	namespace:TPCE
fFinDataIncr	benchmarks/egen/FinancialTable.h	/^const double fFinDataIncr = 0.00000000000001;$/;"	m	namespace:TPCE
fFinDataUpMult	benchmarks/egen/FinancialTable.h	/^const double fFinDataUpMult = 1.15;$/;"	m	namespace:TPCE
fFinancialAssetsMax	benchmarks/egen/FinancialTable.h	/^const double fFinancialAssetsMax = 65000000000.00;$/;"	m	namespace:TPCE
fFinancialAssetsMin	benchmarks/egen/FinancialTable.h	/^const double fFinancialAssetsMin = 100000.00;$/;"	m	namespace:TPCE
fFinancialEarningsMax	benchmarks/egen/FinancialTable.h	/^const double fFinancialEarningsMax = 3000000000.00;$/;"	m	namespace:TPCE
fFinancialEarningsMin	benchmarks/egen/FinancialTable.h	/^const double fFinancialEarningsMin = -300000000.00;$/;"	m	namespace:TPCE
fFinancialInventMax	benchmarks/egen/FinancialTable.h	/^const double fFinancialInventMax = 2000000000.00;$/;"	m	namespace:TPCE
fFinancialInventMin	benchmarks/egen/FinancialTable.h	/^const double fFinancialInventMin = 0.00;$/;"	m	namespace:TPCE
fFinancialLiabMax	benchmarks/egen/FinancialTable.h	/^const double fFinancialLiabMax = 35000000000.00;$/;"	m	namespace:TPCE
fFinancialLiabMin	benchmarks/egen/FinancialTable.h	/^const double fFinancialLiabMin = 100000.00;$/;"	m	namespace:TPCE
fFinancialRevenueMax	benchmarks/egen/FinancialTable.h	/^const double fFinancialRevenueMax = 16000000000.00;$/;"	m	namespace:TPCE
fFinancialRevenueMin	benchmarks/egen/FinancialTable.h	/^const double fFinancialRevenueMin = 100000.00;$/;"	m	namespace:TPCE
fMaxSecPrice	benchmarks/egen/SecurityPriceRange.h	/^const double fMaxSecPrice = 30.00;$/;"	m	namespace:TPCE
fMeanCompletionTimeDelay	benchmarks/egen/MEESecurity.cpp	/^const double fMeanCompletionTimeDelay = 1.0;$/;"	v
fMinSecPrice	benchmarks/egen/SecurityPriceRange.h	/^const double fMinSecPrice = 20.00;$/;"	m	namespace:TPCE
fS_DIVIDMax	benchmarks/egen/SecurityTable.h	/^const double    fS_DIVIDMax = 10.0;$/;"	m	namespace:TPCE
fS_DIVIDNonZeroMin	benchmarks/egen/SecurityTable.h	/^const double    fS_DIVIDNonZeroMin = 0.01;$/;"	m	namespace:TPCE
fS_PEMax	benchmarks/egen/SecurityTable.h	/^const double    fS_PEMax = 120.0;$/;"	m	namespace:TPCE
fS_PEMin	benchmarks/egen/SecurityTable.h	/^const double    fS_PEMin = 1.0;$/;"	m	namespace:TPCE
fS_YIELDMax	benchmarks/egen/SecurityTable.h	/^const double    fS_YIELDMax = 120.0;$/;"	m	namespace:TPCE
fS_YIELDNonZeroMin	benchmarks/egen/SecurityTable.h	/^const double    fS_YIELDNonZeroMin = 0.01;$/;"	m	namespace:TPCE
fSellValue	benchmarks/egen/TradeGen.h	/^    CMoney                          fSellValue;$/;"	m	struct:TPCE::TAdditionalTradeInfo
fTradePrice	benchmarks/egen/TradeGen.h	/^    CMoney          fTradePrice;$/;"	m	struct:TPCE::THoldingInfo
fTradePrice	benchmarks/egen/TradeGen.h	/^    CMoney          fTradePrice;\/\/ price that the trade completed at$/;"	m	struct:TPCE::TTradeInfo
f_	masstree/kvrow.hh	/^    std::vector<typename R::index_type> f_;$/;"	m	class:query
f_	masstree/log.hh	/^    front f_;$/;"	m	class:loginfo
fail	masstree/mtd.cc	/^void kvtest_client::fail(const char *fmt, ...) {$/;"	f	class:kvtest_client
fail	masstree/mttest.cc	/^void kvtest_client<T>::fail(const char *fmt, ...) {$/;"	f	class:kvtest_client
fail_always_assert	masstree/compiler.cc	/^void fail_always_assert(const char* file, int line,$/;"	f
fail_masstree_invariant	masstree/compiler.cc	/^void fail_masstree_invariant(const char* file, int line,$/;"	f
fail_masstree_precondition	masstree/compiler.cc	/^void fail_masstree_precondition(const char* file, int line,$/;"	f
failed	benchmarks/runner.py	/^  failed = []$/;"	v
failing	masstree/mtd.cc	/^    static volatile int failing;$/;"	m	struct:kvtest_client	file:
failing	masstree/mtd.cc	/^volatile int kvtest_client::failing;$/;"	m	class:kvtest_client	file:
failsafe_read	record/inline_str.h	/^  failsafe_read(const uint8_t *buf, size_t nbytes, obj_type *obj)$/;"	f	struct:serializer
failsafe_read	record/serializer.h	/^  failsafe_read(const uint8_t *buf, size_t nbytes, T *obj)$/;"	f	struct:serializer
failsafe_read	record/serializer.h	/^  failsafe_read(const uint8_t *buf, size_t nbytes, int32_t *obj)$/;"	f	struct:serializer
failsafe_read	record/serializer.h	/^  failsafe_read(const uint8_t *buf, size_t nbytes, uint32_t *obj)$/;"	f	struct:serializer
failsafe_read	record/serializer.h	/^  failsafe_read(const uint8_t *buf, size_t nbytes, uint8_t *obj)$/;"	f	struct:generic_serializer
failsafe_read_uvint32	varint.h	/^failsafe_read_uvint32($/;"	f
failsafe_read_uvint32_slow	varint.h	/^failsafe_read_uvint32_slow($/;"	f
failsafe_skip	record/inline_str.h	/^  failsafe_skip(const uint8_t *stream, size_t nbytes, uint8_t *oldv)$/;"	f	struct:serializer
failsafe_skip	record/serializer.h	/^  failsafe_skip(const uint8_t *stream, size_t nbytes, uint8_t *rawv)$/;"	f	struct:generic_serializer
failsafe_skip	record/serializer.h	/^  failsafe_skip(const uint8_t *stream, size_t nbytes, uint8_t *rawv)$/;"	f	struct:serializer
failsafe_skip_uvint32	varint.h	/^failsafe_skip_uvint32(const uint8_t *stream, size_t nbytes, uint8_t *rawv)$/;"	f
fake_threadinfo	masstree/test_atomics.cc	/^struct fake_threadinfo {$/;"	s	file:
false_type	masstree/compiler.hh	/^typedef integral_constant<bool, false> false_type;$/;"	t	namespace:mass
false_type	masstree/compiler.hh	/^typedef std::false_type false_type;$/;"	t	namespace:mass
falsy	masstree/json.hh	/^    bool falsy() const {$/;"	f	class:lcdf::Json_proxy_base
falsy	masstree/json.hh	/^inline bool Json::falsy() const {$/;"	f	class:lcdf::Json
farray16	masstree/msgpack.hh	/^    farray16 = 0xDC, farray32 = 0xDD,$/;"	e	enum:msgpack::format::__anon35
farray32	masstree/msgpack.hh	/^    farray16 = 0xDC, farray32 = 0xDD,$/;"	e	enum:msgpack::format::__anon35
fast_argument	masstree/compiler.hh	/^template <typename T> struct fast_argument<T, false> {$/;"	s	namespace:mass
fast_argument	masstree/compiler.hh	/^template <typename T> struct fast_argument<T, true> {$/;"	s	namespace:mass
fast_func_param	small_unordered_map.h	/^  struct fast_func_param {$/;"	s	namespace:private_
fast_random	util.h	/^  fast_random(unsigned long seed)$/;"	f	class:util::fast_random
fast_random	util.h	/^class fast_random {$/;"	c	namespace:util
fast_substring	masstree/str.hh	/^    Str fast_substring(const char *first, const char *last) const {$/;"	f	struct:lcdf::Str
fast_substring	masstree/str.hh	/^    Str fast_substring(const unsigned char *first, const unsigned char *last) const {$/;"	f	struct:lcdf::Str
fast_substring	masstree/string.hh	/^inline String String::fast_substring(const char* first, const char* last) const {$/;"	f	class:lcdf::String
fast_substring	masstree/string.hh	/^inline String String::fast_substring(const unsigned char* first, const unsigned char* last) const {$/;"	f	class:lcdf::String
fast_worker	dbcore/test-xid.cpp	/^fast_worker( void* t)$/;"	f
fat_ptr	dbcore/sm-common.h	/^struct fat_ptr {$/;"	s
fbin16	masstree/msgpack.hh	/^    fbin8 = 0xC4, fbin16 = 0xC5, fbin32 = 0xC6,$/;"	e	enum:msgpack::format::__anon35
fbin32	masstree/msgpack.hh	/^    fbin8 = 0xC4, fbin16 = 0xC5, fbin32 = 0xC6,$/;"	e	enum:msgpack::format::__anon35
fbin8	masstree/msgpack.hh	/^    fbin8 = 0xC4, fbin16 = 0xC5, fbin32 = 0xC6,$/;"	e	enum:msgpack::format::__anon35
fd	dbcore/sm-log-file.h	/^        int fd;$/;"	m	struct:sm_log_file_mgr::segment_id
fd	masstree/kvio.hh	/^    int fd;$/;"	m	struct:kvout
fd	masstree/mtd.cc	/^    int fd;$/;"	m	struct:conn	file:
fdtoclose_	masstree/mtclient.hh	/^    int fdtoclose_;$/;"	m	class:KVConn
fence	masstree/compiler.hh	/^inline void fence() {$/;"	f
fence_function	masstree/compiler.hh	/^struct fence_function {$/;"	s
fetch_and_add	masstree/compiler.hh	/^    static inline type fetch_and_add(type *object, type addend) {$/;"	f	struct:sized_compiler_operations
fetch_and_add	masstree/compiler.hh	/^    static inline type fetch_and_add(type* object, type addend) {$/;"	f	struct:sized_compiler_operations
fetch_and_add	masstree/compiler.hh	/^inline T fetch_and_add(T* object, T addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline T* fetch_and_add(T** object, int addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline int16_t fetch_and_add(int16_t* object, int addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline int8_t fetch_and_add(int8_t* object, int addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline uint16_t fetch_and_add(uint16_t* object, int addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline uint8_t fetch_and_add(uint8_t* object, int addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline unsigned fetch_and_add(unsigned* object, int addend) {$/;"	f
fetch_and_add	masstree/compiler.hh	/^inline unsigned long fetch_and_add(unsigned long* object, int addend) {$/;"	f
fetch_committed_version_at	masstree/masstree.hh	/^    dbtuple *fetch_committed_version_at(oid_type oid, XID xid, LSN at_clsn) const$/;"	f	class:Masstree::basic_table
fetch_committed_version_at	masstree_btree.h	/^  dbtuple* fetch_committed_version_at(oid_type oid, XID xid, LSN at_clsn) const$/;"	f	class:mbtree
fetch_latest_version	masstree/masstree.hh	/^	inline dbtuple *fetch_latest_version( oid_type oid ) const$/;"	f	class:Masstree::basic_table
fetch_latest_version	masstree_btree.h	/^  inline dbtuple * fetch_latest_version( oid_type oid ) const$/;"	f	class:mbtree
fetch_node	masstree/masstree.hh	/^	inline node_type* fetch_node( oid_type oid ) const$/;"	f	class:Masstree::basic_table
fetch_node	masstree/masstree_struct.hh	/^	inline base_type* fetch_node( oid_type oid ) const$/;"	f	class:Masstree::node_base
fetch_node	masstree_btree.h	/^  inline node_base_type* fetch_node( oid_type oid ) const$/;"	f	class:mbtree
fetch_overwriter	masstree/masstree.hh	/^    dbtuple *fetch_overwriter(oid_type oid, LSN rlsn) const$/;"	f	class:Masstree::basic_table
fetch_overwriter	masstree_btree.h	/^  dbtuple* fetch_overwriter(oid_type oid, LSN rlsn) const$/;"	f	class:mbtree
fetch_version	masstree/masstree.hh	/^	dbtuple *fetch_version( oid_type oid, XID xid ) const$/;"	f	class:Masstree::basic_table
fetch_version	masstree_btree.h	/^  dbtuple* fetch_version( oid_type oid, XID xid ) const$/;"	f	class:mbtree
fext16	masstree/msgpack.hh	/^    fext8 = 0xC7, fext16 = 0xC8, fext32 = 0xC9,$/;"	e	enum:msgpack::format::__anon35
fext32	masstree/msgpack.hh	/^    fext8 = 0xC7, fext16 = 0xC8, fext32 = 0xC9,$/;"	e	enum:msgpack::format::__anon35
fext8	masstree/msgpack.hh	/^    fext8 = 0xC7, fext16 = 0xC8, fext32 = 0xC9,$/;"	e	enum:msgpack::format::__anon35
ffalse	masstree/msgpack.hh	/^    ffalse = 0xC2, ftrue = 0xC3,$/;"	e	enum:msgpack::format::__anon35
ffixarray	masstree/msgpack.hh	/^    ffixarray = 0x90, nfixarray = 0x10,$/;"	e	enum:msgpack::format::__anon35
ffixext1	masstree/msgpack.hh	/^    ffixext1 = 0xD4, ffixext2 = 0xD5, ffixext4 = 0xD6,$/;"	e	enum:msgpack::format::__anon35
ffixext16	masstree/msgpack.hh	/^    ffixext8 = 0xD7, ffixext16 = 0xD8,$/;"	e	enum:msgpack::format::__anon35
ffixext2	masstree/msgpack.hh	/^    ffixext1 = 0xD4, ffixext2 = 0xD5, ffixext4 = 0xD6,$/;"	e	enum:msgpack::format::__anon35
ffixext4	masstree/msgpack.hh	/^    ffixext1 = 0xD4, ffixext2 = 0xD5, ffixext4 = 0xD6,$/;"	e	enum:msgpack::format::__anon35
ffixext8	masstree/msgpack.hh	/^    ffixext8 = 0xD7, ffixext16 = 0xD8,$/;"	e	enum:msgpack::format::__anon35
ffixmap	masstree/msgpack.hh	/^    ffixmap = 0x80, nfixmap = 0x10,$/;"	e	enum:msgpack::format::__anon35
ffixnegint	masstree/msgpack.hh	/^    ffixnegint = 0xE0, nfixnegint = 0x20,$/;"	e	enum:msgpack::format::__anon35
ffixstr	masstree/msgpack.hh	/^    ffixstr = 0xA0, nfixstr = 0x20,$/;"	e	enum:msgpack::format::__anon35
ffixuint	masstree/msgpack.hh	/^    ffixuint = 0x00, nfixuint = 0x80,$/;"	e	enum:msgpack::format::__anon35
ffloat32	masstree/msgpack.hh	/^    ffloat32 = 0xCA, ffloat64 = 0xCB,$/;"	e	enum:msgpack::format::__anon35
ffloat64	masstree/msgpack.hh	/^    ffloat32 = 0xCA, ffloat64 = 0xCB,$/;"	e	enum:msgpack::format::__anon35
ffs_msb	masstree/compiler.hh	/^inline int ffs_msb(unsigned long long x) {$/;"	f
ffs_msb	masstree/compiler.hh	/^inline int ffs_msb(unsigned long x) {$/;"	f
ffs_msb	masstree/compiler.hh	/^inline int ffs_msb(unsigned x) {$/;"	f
fhs	benchmarks/egen/EGenGenerateAndLoad.cpp	/^FILE *fsec, *fhs;$/;"	v
fid	dbcore/sm-log-defs.h	/^            FID fid;$/;"	m	struct:log_record::__anon91::__anon92
fid	dbcore/sm-log-defs.h	/^    FID fid;$/;"	m	struct:log_request
fid	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::fid()$/;"	f	class:sm_log_scan_mgr::header_scan
fid	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::fid()$/;"	f	class:sm_log_scan_mgr::record_scan
fid	dbcore/test-sm-log.cpp	/^    FID fid;$/;"	m	struct:db_record	file:
field	record/cursor.h	/^  field() const$/;"	f	struct:read_record_cursor
field	record/cursor.h	/^  field() const$/;"	f	struct:write_record_cursor
fields	typed_txn_btree.h	/^    uint64_t fields;$/;"	m	class:typed_txn_btree_::value_writer
fields_mask	typed_txn_btree.h	/^    uint64_t fields_mask;$/;"	m	class:typed_txn_btree_::single_value_reader
fields_mask	typed_txn_btree.h	/^    uint64_t fields_mask;$/;"	m	class:typed_txn_btree_::value_reader
file	masstree/kvthread.hh	/^    const char* file;$/;"	m	struct:memdebug
file_mutex	dbcore/sm-log-file.h	/^    os_mutex file_mutex;$/;"	m	struct:sm_log_file_mgr
filename_	masstree/log.hh	/^	lcdf::String::rep_type filename_;$/;"	m	struct:loginfo::front
filename_	masstree/log.hh	/^    lcdf::String filename_;$/;"	m	class:logreplay
files	benchmarks/results/make_graphs-2.py	/^  files = sys.argv[1:]$/;"	v
files	benchmarks/results/make_graphs-3.py	/^  files = sys.argv[1:]$/;"	v
files	benchmarks/results/make_graphs-4.py	/^  files = sys.argv[1:]$/;"	v
files	benchmarks/results/make_graphs.py	/^  files = sys.argv[1:]$/;"	v
files	dbcore/sm-oid-impl.h	/^    oid_array *files;$/;"	m	struct:sm_oid_mgr_impl
fileutils	fileutils.h	/^class fileutils {$/;"	c
fill_cache	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::fill_cache(thread_cache *tc)$/;"	f	class:sm_allocator
fill_header	dbcore/sm-trace.cpp	/^fill_header(uint64_t xid, char op, uintptr_t oid_array, uint32_t oid)$/;"	f	namespace:TRACER
fill_skip_record	dbcore/sm-log-defs.h	/^fill_skip_record(log_record *r, LSN next_lsn, size_t payload_end, bool has_payload) {$/;"	f
fillcounts	masstree/query_masstree.cc	/^static uint64_t heightcounts[300], fillcounts[100];$/;"	m	namespace:Masstree	file:
fillkey	persist_test.cc	/^fillkey(std::string &s, uint64_t idx, size_t sz, PRNG &prng)$/;"	f	file:
fillvalue	persist_test.cc	/^fillvalue(std::string &s, uint64_t idx, size_t sz, PRNG &prng)$/;"	f	file:
filter_delete_all	dbcore/rcu.cpp	/^bool filter_delete_all(pointer *) { return true; }$/;"	f	namespace:RCU
filter_name	benchmarks/results/make_graphs-4.py	/^def filter_name(results, name):$/;"	f
filter_name	benchmarks/results/make_graphs-5.py	/^    def filter_name(results, name):$/;"	f	function:datafromfile
fin	benchmarks/egen/TxnHarnessStructs.h	/^    TFinInfo            fin[max_fin_len];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
fin_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               fin_len;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
financialTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CFinancialTable*			financialTable;$/;"	m	class:TPCE::CGenerateAndLoad
find	dbcore/sc-hash.h	/^    find(Key const &x) {$/;"	f
find	dbcore/test-sc-hash.cpp	/^    bool find(int x) {$/;"	f	struct:hinstance
find	masstree/json.hh	/^    int find(const char* s, int len) const {$/;"	f	struct:lcdf::Json::ObjectJson
find	masstree/testrunner.hh	/^    static testrunner* find(const lcdf::String& name) {$/;"	f	class:testrunner
find	masstree/testrunner.hh	/^    static testrunner_base* find(const lcdf::String& name) {$/;"	f	class:testrunner_base
find	small_unordered_map.h	/^  find(const key_type &k) const$/;"	f	class:small_unordered_map
find	small_unordered_map.h	/^  find(const key_type &k)$/;"	f	class:small_unordered_map
find	static_unordered_map.h	/^  find(const key_type &k) const$/;"	f	class:static_unordered_map
find	static_unordered_map.h	/^  find(const key_type &k)$/;"	f	class:static_unordered_map
find_and_emplace	dbcore/sc-hash.h	/^    find_and_emplace(Key const &x, Args && ...args) {$/;"	f
find_bucket	small_unordered_map.h	/^  find_bucket(const key_type &k, size_t *hash_value) const$/;"	f	class:small_unordered_map
find_bucket	small_unordered_map.h	/^  find_bucket(const key_type &k, size_t *hash_value)$/;"	f	class:small_unordered_map
find_bucket	static_unordered_map.h	/^  find_bucket(const key_type &k, size_t *hash_value) const$/;"	f	class:static_unordered_map
find_bucket	static_unordered_map.h	/^  find_bucket(const key_type &k, size_t *hash_value)$/;"	f	class:static_unordered_map
find_initial	masstree/masstree_scan.hh	/^int scanstackelt<P>::find_initial(H& helper, key_type& ka, bool emit_equal,$/;"	f	class:Masstree::scanstackelt
find_insert	masstree/json.cc	/^int Json::ObjectJson::find_insert(const String &key, const Json &value)$/;"	f	class:lcdf::Json::ObjectJson
find_insert	masstree/masstree_insert.hh	/^bool tcursor<P>::find_insert(threadinfo& ti)$/;"	f	class:Masstree::tcursor
find_left	masstree/string.cc	/^String_generic::find_left(const char *s, int len, int start,$/;"	f	class:lcdf::String_generic
find_left	masstree/string_base.hh	/^    int find_left(char x, int start = 0) const {$/;"	f	class:lcdf::String_base
find_left	masstree/string_base.hh	/^    int find_left(const String_base<TT> &x, int start = 0) const {$/;"	f	class:lcdf::String_base
find_left	masstree/string_base.hh	/^    int find_left(const char *cstr, int start = 0) const {$/;"	f	class:lcdf::String_base
find_live_successor	dbcore/rcu-slist.cpp	/^    node* find_live_successor(cached_next const &point) {$/;"	f	namespace:__anon82
find_locked	masstree/masstree_get.hh	/^bool tcursor<P>::find_locked(threadinfo& ti)$/;"	f	class:Masstree::tcursor
find_long	masstree/clp.c	/^find_long(Clp_Parser *clp, const char *arg)$/;"	f	file:
find_lowest_zero_nibble	masstree/compiler.hh	/^inline int find_lowest_zero_nibble(T x) {$/;"	f
find_next	masstree/masstree_scan.hh	/^int scanstackelt<P>::find_next(H &helper, key_type &ka, leafvalue_type &entry)$/;"	f	class:Masstree::scanstackelt
find_prefix_opt	masstree/clp.c	/^find_prefix_opt(Clp_Parser *clp, const char *arg,$/;"	f	file:
find_retry	masstree/masstree_scan.hh	/^int scanstackelt<P>::find_retry(H& helper, key_type& ka, threadinfo& ti)$/;"	f	class:Masstree::scanstackelt
find_right	masstree/string.cc	/^String_generic::find_right(const char *s, int len, int start,$/;"	f	class:lcdf::String_generic
find_right	masstree/string_base.hh	/^    int find_right(char c, int start = INT_MAX) const {$/;"	f	class:lcdf::String_base
find_right	masstree/string_base.hh	/^    int find_right(const String_base<TT> &x, int start = INT_MAX) const {$/;"	f	class:lcdf::String_base
find_right	masstree/string_base.hh	/^    int find_right(const char *cstr, int start = INT_MAX) const {$/;"	f	class:lcdf::String_base
find_short	masstree/clp.c	/^find_short(Clp_Parser *clp, const char *text)$/;"	f	file:
find_unlocked	masstree/masstree_get.hh	/^bool unlocked_tcursor<P>::find_unlocked(threadinfo& ti)$/;"	f	class:Masstree::unlocked_tcursor
find_write_set	txn.h	/^  find_write_set(dbtuple *k)$/;"	f	class:transaction
findpivots	masstree/query_masstree.cc	/^void query_table<P>::findpivots(Str *pv, int npv) const$/;"	f	class:Masstree::query_table
findpv	masstree/query_masstree.cc	/^static Str findpv(N *n, int pvi, int npv)$/;"	f	namespace:Masstree
finish	masstree/masstree_insert.hh	/^inline void tcursor<P>::finish(int state, threadinfo& ti)$/;"	f	class:Masstree::tcursor
finish_insert	masstree/masstree_insert.hh	/^void tcursor<P>::finish_insert()$/;"	f	class:Masstree::tcursor
finish_remove	masstree/masstree_remove.hh	/^bool tcursor<P>::finish_remove(threadinfo& ti)$/;"	f	class:Masstree::tcursor
finish_split	masstree/masstree_split.hh	/^node_base<P>* tcursor<P>::finish_split(threadinfo& ti)$/;"	f	class:Masstree::tcursor
finish_string_list	masstree/clp.c	/^finish_string_list(Clp_Parser *clp, int val_type, int flags,$/;"	f	file:
fint16	masstree/msgpack.hh	/^    fint8 = 0xD0, fint16 = 0xD1, fint32 = 0xD2, fint64 = 0xD3,$/;"	e	enum:msgpack::format::__anon35
fint32	masstree/msgpack.hh	/^    fint8 = 0xD0, fint16 = 0xD1, fint32 = 0xD2, fint64 = 0xD3,$/;"	e	enum:msgpack::format::__anon35
fint64	masstree/msgpack.hh	/^    fint8 = 0xD0, fint16 = 0xD1, fint32 = 0xD2, fint64 = 0xD3,$/;"	e	enum:msgpack::format::__anon35
fint8	masstree/msgpack.hh	/^    fint8 = 0xD0, fint16 = 0xD1, fint32 = 0xD2, fint64 = 0xD3,$/;"	e	enum:msgpack::format::__anon35
first	benchmarks/MEESUT.h	/^    int size, first, last;$/;"	m	class:TPCE::InputBuffer
first	masstree/testrunner.hh	/^    static testrunner* first() {$/;"	f	class:testrunner
first	masstree/testrunner.hh	/^    static testrunner_base* first() {$/;"	f	class:testrunner_base
first	scopedperf.hh	/^  A first;$/;"	m	struct:scopedperf::pair
first_	masstree/masstree_key.hh	/^    const char* first_;$/;"	m	class:Masstree::key
first_	masstree/query_masstree.cc	/^    bool first_;$/;"	m	struct:Masstree::__anon23::scan_tester	file:
first_epoch	masstree/log.hh	/^	kvepoch_t first_epoch;$/;"	m	struct:logreplay::info_type
first_local_port	masstree/mtclient.cc	/^int first_local_port = 0;$/;"	v
first_pos_diff	util.h	/^first_pos_diff(const char *p0, size_t sz0,$/;"	f	namespace:util
first_server_port	masstree/mtclient.cc	/^int first_server_port = 2117;$/;"	v
fix	masstree/json.hh	/^    void fix() {$/;"	f	class:lcdf::Json::const_iterator
fix	masstree/json.hh	/^    void fix() {$/;"	f	class:lcdf::Json::const_object_iterator
fix_root	masstree/masstree_struct.hh	/^inline node_base<P>* basic_table<P>::fix_root() {$/;"	f	class:Masstree::basic_table
flags	dbcore/sm-common.h	/^    uint16_t flags() const { return _ptr & FLAG_MASK; }$/;"	f	struct:fat_ptr
flags	dbcore/sm-common.h	/^    uint16_t flags() const { return _val & fat_ptr::ASI_FLAG_MASK; }$/;"	f	struct:LSN
flags	dbcore/sm-common.h	/^    uint16_t flags() const { return _val & fat_ptr::FLAG_MASK; }$/;"	f	struct:XID
flags	masstree/clp.c	/^    int flags;$/;"	m	struct:__anon42	file:
flags	masstree/clp.h	/^    int flags;			\/**< Option parsing flags. *\/$/;"	m	struct:Clp_Option
flags	txn.h	/^  const uint64_t flags;$/;"	m	class:transaction_base
flags	txn_proto2_impl.h	/^    constexpr flags() : g_gc_init(false), g_disable_snapshots(false) {}$/;"	f	struct:transaction_proto2_static::flags
flags	txn_proto2_impl.h	/^  struct flags {$/;"	s	class:transaction_proto2_static
flags_	core.h	/^  bool flags_[NMAXCORES];$/;"	m	class:percore_lazy
flush	masstree/mtclient.hh	/^    void flush() {$/;"	f	class:KVConn
flushed_epoch	masstree/log.hh	/^inline kvepoch_t loginfo::flushed_epoch() const {$/;"	f	class:loginfo
flushed_epoch_	masstree/log.hh	/^    kvepoch_t flushed_epoch_;   \/\/ epoch fsync()ed to disk$/;"	m	class:loginfo
fmap16	masstree/msgpack.hh	/^    fmap16 = 0xDE, fmap32 = 0xDF,$/;"	e	enum:msgpack::format::__anon35
fmap32	masstree/msgpack.hh	/^    fmap16 = 0xDE, fmap32 = 0xDF,$/;"	e	enum:msgpack::format::__anon35
fn	benchmarks/bench.h	/^    txn_fn_t fn;$/;"	m	struct:bench_worker::workload_desc
fn	benchmarks/results/make_graphs-6.py	/^      def fn(x):$/;"	f	function:.AND
fn	benchmarks/results/make_graphs-6.py	/^      def fn(x):$/;"	f	function:.OR
fn	benchmarks/results/make_graphs-6.py	/^    def fn(x):$/;"	f	function:deal_with_posK_res
fn	benchmarks/results/make_graphs-6.py	/^    def fn(x):$/;"	f	function:deal_with_posK_res_median
fn	benchmarks/results/make_graphs-6.py	/^    def fn(x):$/;"	f	function:deal_with_posK_res_percore
fn	dbcore/burt-hash.h	/^    function *fn;$/;"	m	struct:burt_hash
fn	dbcore/burt-hash.h	/^    function *fn;$/;"	m	struct:burt_hash4
fn	dbcore/defer.h	/^    T &fn;$/;"	m	struct:__defer
fnull	masstree/msgpack.hh	/^    fnull = 0xC0,$/;"	e	enum:msgpack::format::__anon35
folder	benchmarks/runner.py	/^      folder = binary.split(os.sep)[1]$/;"	v
force_double	masstree/json.hh	/^inline void Json::force_double() {$/;"	f	class:lcdf::Json
force_number	masstree/json.hh	/^inline void Json::force_number() {$/;"	f	class:lcdf::Json
forceinline	third-party/lz4/lz4.c	119;"	d	file:
forceinline	third-party/lz4/lz4.c	131;"	d	file:
forceinline	third-party/lz4/lz4.c	133;"	d	file:
forceinline	third-party/lz4/lz4hc.c	103;"	d	file:
forceinline	third-party/lz4/lz4hc.c	116;"	d	file:
forceinline	third-party/lz4/lz4hc.c	118;"	d	file:
format	masstree/msgpack.hh	/^namespace format {$/;"	n	namespace:msgpack
format_extra_ptr	dbcore/sm-tx-log.cpp	/^format_extra_ptr(log_request &req)$/;"	f	file:
format_list	util.h	/^format_list(ForwardIterator begin, ForwardIterator end)$/;"	f	namespace:util
forward_scan_helper	masstree/masstree_scan.hh	/^struct forward_scan_helper {$/;"	s	namespace:Masstree
found	masstree/masstree_scan.hh	/^    void found() const {$/;"	f	struct:Masstree::forward_scan_helper
found	masstree/masstree_scan.hh	/^    void found() const {$/;"	f	struct:Masstree::reverse_scan_helper
found_marker	masstree/masstree_tcursor.hh	/^    static inline node_type* found_marker() {$/;"	f	class:Masstree::tcursor
fraction	benchmarks/egen/DateTime.h	/^        UINT32   fraction;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
frame_executed	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               frame_executed;                     \/\/ confirmation of which frame was executed$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
frame_executed	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               frame_executed;             \/\/ confirmation of which frame was executed$/;"	m	struct:TPCE::TTradeLookupTxnOutput
frame_to_execute	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               frame_to_execute;                   \/\/ which of the frames to execute$/;"	m	struct:TPCE::TTradeUpdateTxnInput
frame_to_execute	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               frame_to_execute;           \/\/ which of the frames to execute$/;"	m	struct:TPCE::TTradeLookupTxnInput
free	masstree/log.cc	/^void logset::free(logset* ls) {$/;"	f	class:logset
free	masstree/mttest.cc	/^    long long free;$/;"	m	struct:mttest_numainfo	file:
free	masstree/perfstat.cc	/^  long long free;$/;"	m	struct:Perf::__anon54	file:
free_array	rcu-wrapper.h	/^  free_array(T *p)$/;"	f	namespace:RCU
free_bytes	dbcore/rcu.cpp	/^    size_t free_bytes;$/;"	m	struct:RCU::rcu_tcb	file:
free_checks	masstree/kvthread.hh	/^    static void free_checks(const memdebug *m, size_t size, int freetype,$/;"	f	struct:memdebug
free_count	dbcore/rcu.cpp	/^    size_t free_count;$/;"	m	struct:RCU::rcu_tcb	file:
free_kvout	masstree/kvio.cc	/^void free_kvout(kvout* kv) {$/;"	f
free_list	dbcore/rcu.cpp	/^    pointer_list * free_list;$/;"	m	struct:RCU::rcu_tcb	file:
free_msg	dbcore/sm-exceptions.h	/^    char *free_msg;$/;"	m	struct:illegal_argument
free_msg	dbcore/sm-exceptions.h	/^    char *free_msg;$/;"	m	struct:log_file_error
free_msg	dbcore/sm-exceptions.h	/^    char *free_msg;$/;"	m	struct:os_error
free_oid	dbcore/sm-oid.cpp	/^sm_oid_mgr::free_oid(FID f, OID o)$/;"	f	class:sm_oid_mgr
free_oid	dbcore/test-sm-log.cpp	/^    void free_oid(iterator it) {$/;"	f	struct:db_file
free_oids	dbcore/test-sm-log.cpp	/^    std::set<OID> free_oids;$/;"	m	struct:db_file	file:
free_rcu	masstree/kvthread.hh	/^    void free_rcu(void *p, int freetype) {$/;"	f	class:threadinfo
free_with_fn	rcu-wrapper.h	/^  inline void free_with_fn(void *p, deleter_t fn)$/;"	f	namespace:RCU
freetype	masstree/kvthread.hh	/^    int freetype;$/;"	m	struct:memdebug
freetype_	masstree/kvthread.hh	/^    int freetype_;$/;"	m	struct:limbo_element
frequency	benchmarks/bench.h	/^    double frequency;$/;"	m	struct:bench_worker::workload_desc
from_ptr	dbcore/sm-common.h	/^    LSN from_ptr(fat_ptr const &p) {$/;"	f	struct:LSN
from_ptr	dbcore/sm-common.h	/^    XID from_ptr(fat_ptr const &p) {$/;"	f	struct:XID
front	masstree/local_vector.hh	/^inline T& local_vector<T, N, A>::front() {$/;"	f	class:local_vector
front	masstree/local_vector.hh	/^inline const T& local_vector<T, N, A>::front() const {$/;"	f	class:local_vector
front	masstree/log.hh	/^    struct front {$/;"	s	class:loginfo
front	masstree/straccum.hh	/^inline char &StringAccum::front() {$/;"	f	class:lcdf::StringAccum
front	masstree/straccum.hh	/^inline char StringAccum::front() const {$/;"	f	class:lcdf::StringAccum
front	masstree/string_base.hh	/^    const char& front() const {$/;"	f	class:lcdf::String_base
front	small_vector.h	/^  front() const$/;"	f	class:small_vector
front	small_vector.h	/^  front()$/;"	f	class:small_vector
front	static_vector.h	/^  front() const$/;"	f	class:static_vector
front	static_vector.h	/^  front()$/;"	f	class:static_vector
fsec	benchmarks/egen/EGenGenerateAndLoad.cpp	/^FILE *fsec, *fhs;$/;"	v
fstr16	masstree/msgpack.hh	/^    fstr8 = 0xD9, fstr16 = 0xDA, fstr32 = 0xDB,$/;"	e	enum:msgpack::format::__anon35
fstr32	masstree/msgpack.hh	/^    fstr8 = 0xD9, fstr16 = 0xDA, fstr32 = 0xDB,$/;"	e	enum:msgpack::format::__anon35
fstr8	masstree/msgpack.hh	/^    fstr8 = 0xD9, fstr16 = 0xDA, fstr32 = 0xDB,$/;"	e	enum:msgpack::format::__anon35
fsyncer	persist_test.cc	/^  fsyncer(unsigned id, int fd, one_way_post<int> &channel)$/;"	f	class:onecopy_logbased_simulation	file:
ftrue	masstree/msgpack.hh	/^    ffalse = 0xC2, ftrue = 0xC3,$/;"	e	enum:msgpack::format::__anon35
fuint16	masstree/msgpack.hh	/^    fuint8 = 0xCC, fuint16 = 0xCD, fuint32 = 0xCE, fuint64 = 0xCF,$/;"	e	enum:msgpack::format::__anon35
fuint32	masstree/msgpack.hh	/^    fuint8 = 0xCC, fuint16 = 0xCD, fuint32 = 0xCE, fuint64 = 0xCF,$/;"	e	enum:msgpack::format::__anon35
fuint64	masstree/msgpack.hh	/^    fuint8 = 0xCC, fuint16 = 0xCD, fuint32 = 0xCE, fuint64 = 0xCF,$/;"	e	enum:msgpack::format::__anon35
fuint8	masstree/msgpack.hh	/^    fuint8 = 0xCC, fuint16 = 0xCD, fuint32 = 0xCE, fuint64 = 0xCF,$/;"	e	enum:msgpack::format::__anon35
full	dbcore/test-sc-hash.cpp	/^    bool full;$/;"	m	struct:hinstance	file:
full	third-party/lz4/lz4.c	/^typedef enum { full = 0, partial = 1 } exit_directive;$/;"	e	enum:__anon6	file:
fullSpeedBench	third-party/lz4/fullbench.c	/^int fullSpeedBench(char** fileNamesTable, int nbFiles)$/;"	f
full_checksum	dbcore/sm-log-defs.h	/^    uint32_t full_checksum() {$/;"	f	struct:log_block
full_size	dbcore/sm-log-offset.h	/^        bool full_size;$/;"	m	struct:sm_log_offset_mgr::segment_assignment
full_string	masstree/masstree_key.hh	/^    Str full_string() const {$/;"	f	class:Masstree::key
full_value	masstree/kpermuter.hh	/^	   full_value = (uint64_t) 0xEDCBA98765432100ULL };$/;"	e	enum:sized_kpermuter_info::__anon39
full_value	masstree/kpermuter.hh	/^    enum { initial_value = 0x0120U, full_value = 0x2100U };$/;"	e	enum:sized_kpermuter_info::__anon37
full_value	masstree/kpermuter.hh	/^    enum { initial_value = 0x01234560U, full_value = 0x65432100U };$/;"	e	enum:sized_kpermuter_info::__anon38
full_version_value	masstree/masstree_scan.hh	/^    typename nodeversion_type::value_type full_version_value() const {$/;"	f	class:Masstree::scanstackelt
full_version_value	masstree/masstree_struct.hh	/^    typename nodeversion_type::value_type full_version_value() const {$/;"	f	class:Masstree::leaf
full_version_value	masstree/masstree_tcursor.hh	/^    inline nodeversion_value_type full_version_value() const {$/;"	f	class:Masstree::unlocked_tcursor
fully_materialize	txn_btree.h	/^    fully_materialize(bool stable_input, StringAllocator &sa)$/;"	f	class:txn_btree_::key_writer
fully_materialize	txn_btree.h	/^    fully_materialize(bool stable_input, StringAllocator &sa)$/;"	f	class:txn_btree_::value_writer
fully_materialize	typed_txn_btree.h	/^    fully_materialize(bool stable_input, StringAllocator &sa)$/;"	f	class:typed_txn_btree_::key_writer
fully_materialize	typed_txn_btree.h	/^    fully_materialize(bool stable_input, StringAllocator &sa)$/;"	f	class:typed_txn_btree_::value_writer
func	masstree/clp.c	/^    Clp_ValParseFunc func;$/;"	m	struct:__anon42	file:
func	masstree/mttest.cc	/^    void *(*func)(void *);$/;"	m	struct:__anon63	file:
func_param_type	ndb_type_traits.h	/^  struct primitive_typeutil { typedef T func_param_type; };$/;"	t	struct:private_::primitive_typeutil
func_param_type	ndb_type_traits.h	/^  struct typeutil { typedef const T & func_param_type; };$/;"	t	struct:private_::typeutil
function	dbcore/burt-hash.h	/^    typedef __v4si (function)(__v4si);$/;"	t	struct:burt_hash4
function	dbcore/burt-hash.h	/^    typedef uint32_t (function)(uint32_t);$/;"	t	struct:burt_hash
g_all_buffers	persist_test.cc	/^  onecopy_logbased_simulation::g_all_buffers[NMAXCORES];$/;"	m	class:onecopy_logbased_simulation	file:
g_all_buffers	persist_test.cc	/^  static circbuf<pbuffer, g_perthread_buffers> g_all_buffers[NMAXCORES];$/;"	m	class:onecopy_logbased_simulation	file:
g_buffer_size	persist_test.cc	/^  static const size_t g_buffer_size = (1<<20); \/\/ in bytes$/;"	m	class:onecopy_logbased_simulation	file:
g_bytes_written	persist_test.cc	/^static atomic<uint64_t> g_bytes_written[g_nmax_loggers];$/;"	v	file:
g_database	persist_test.cc	/^static vector<uint64_t> g_database;$/;"	v	file:
g_disable_read_only_scans	benchmarks/tpcc.cc	/^static int g_disable_read_only_scans = 0;$/;"	v	file:
g_disable_snapshots	txn_proto2_impl.h	/^    std::atomic<bool> g_disable_snapshots;$/;"	m	struct:transaction_proto2_static::flags
g_disable_xpartition_txn	benchmarks/tpcc.cc	/^static int g_disable_xpartition_txn = 0;$/;"	v	file:
g_district_ids	benchmarks/tpcc.cc	/^static aligned_padded_elem<atomic<uint64_t>> *g_district_ids = nullptr;$/;"	v	file:
g_enable_partition_locks	benchmarks/tpcc.cc	/^static int g_enable_partition_locks = 0;$/;"	v	file:
g_enable_separate_tree_per_partition	benchmarks/tpcc.cc	/^static int g_enable_separate_tree_per_partition = 0;$/;"	v	file:
g_epoch_time_ns	persist_test.cc	/^  static const unsigned long g_epoch_time_ns = 30000000; \/* 30ms in ns *\/$/;"	m	class:database_simulation	file:
g_evt_avg_dbtuple_read_retries	tuple.h	/^  static event_avg_counter g_evt_avg_dbtuple_read_retries;$/;"	m	struct:dbtuple
g_evt_avg_imstring_len	imstring.h	/^  static event_avg_counter g_evt_avg_imstring_len;$/;"	m	class:base_imstring
g_evt_avg_proto_gc_queue_len	txn_proto2_impl.h	/^  static event_avg_counter g_evt_avg_proto_gc_queue_len;$/;"	m	class:transaction_proto2_static
g_evt_dbtuple_bytes_allocated	tuple.h	/^  static event_counter g_evt_dbtuple_bytes_allocated;$/;"	m	struct:dbtuple
g_evt_dbtuple_bytes_freed	tuple.h	/^  static event_counter g_evt_dbtuple_bytes_freed;$/;"	m	struct:dbtuple
g_evt_dbtuple_creates	tuple.h	/^  static event_counter g_evt_dbtuple_creates;$/;"	m	struct:dbtuple
g_evt_dbtuple_no_space_for_delkey	txn_proto2_impl.h	/^  static event_counter g_evt_dbtuple_no_space_for_delkey;$/;"	m	class:transaction_proto2_static
g_evt_dbtuple_write_insert_failed	txn.h	/^  static event_counter g_evt_dbtuple_write_insert_failed;$/;"	m	class:transaction_base
g_evt_dbtuple_write_search_failed	txn.h	/^  static event_counter g_evt_dbtuple_write_search_failed;$/;"	m	class:transaction_base
g_evt_imstring_bytes_allocated	imstring.h	/^  static event_counter g_evt_imstring_bytes_allocated;$/;"	m	class:base_imstring
g_evt_imstring_bytes_freed	imstring.h	/^  static event_counter g_evt_imstring_bytes_freed;$/;"	m	class:base_imstring
g_evt_proto_gc_delete_requeue	txn_proto2_impl.h	/^  static event_counter g_evt_proto_gc_delete_requeue;$/;"	m	class:transaction_proto2_static
g_evt_read_logical_deleted_node_scan	txn.h	/^  static event_counter g_evt_read_logical_deleted_node_scan;$/;"	m	class:transaction_base
g_evt_read_logical_deleted_node_search	txn.h	/^  static event_counter g_evt_read_logical_deleted_node_search;$/;"	m	class:transaction_base
g_evt_worker_thread_wait_log_buffer	txn_proto2_impl.h	/^  static event_counter g_evt_worker_thread_wait_log_buffer;$/;"	m	class:transaction_proto2_static
g_flags	txn_proto2_impl.cc	/^  transaction_proto2_static::g_flags;$/;"	m	class:transaction_proto2_static	file:
g_flags	txn_proto2_impl.h	/^  static util::aligned_padded_elem<flags> g_flags;$/;"	m	class:transaction_proto2_static
g_fsync_background	persist_test.cc	/^static int g_fsync_background = 0;$/;"	v	file:
g_gc_init	txn_proto2_impl.h	/^    std::atomic<bool> g_gc_init;$/;"	m	struct:transaction_proto2_static::flags
g_hack	txn_proto2_impl.cc	/^  transaction_proto2_static::g_hack;$/;"	m	class:transaction_proto2_static	file:
g_horizon_size	persist_test.cc	/^  static const size_t g_horizon_size = (1<<16); \/\/ in bytes, for compression only$/;"	m	class:onecopy_logbased_simulation	file:
g_keysize	persist_test.cc	/^static size_t g_keysize = 8; \/\/ in bytes$/;"	v	file:
g_microbench_random	benchmarks/tpcc.cc	/^static int g_microbench_random = 0;$/;"	v	file:
g_microbench_rows	benchmarks/tpcc.cc	/^static uint g_microbench_rows = 100000;  \/\/ this many rows$/;"	v	file:
g_microbench_simple	benchmarks/tpcc.cc	/^static int g_microbench_simple = 0;$/;"	v	file:
g_microbench_static	benchmarks/tpcc.cc	/^static int g_microbench_static = 0;$/;"	v	file:
g_microbench_wr_ratio	benchmarks/tpcc.cc	/^static double g_microbench_wr_ratio = 0; \/\/ this % of writes$/;"	v	file:
g_microbench_wr_rows	benchmarks/tpcc.cc	/^static uint g_microbench_wr_rows = 0; \/\/ this number of rows to write$/;"	v	file:
g_new_order_fast_id_gen	benchmarks/tpcc.cc	/^static int g_new_order_fast_id_gen = 0;$/;"	v	file:
g_new_order_remote_item_pct	benchmarks/tpcc.cc	/^static int g_new_order_remote_item_pct = 1;$/;"	v	file:
g_nmax_loggers	persist_test.cc	/^static const size_t g_nmax_loggers = 16;$/;"	v	file:
g_nrecords	persist_test.cc	/^static const size_t g_nrecords = 1000000;$/;"	v	file:
g_ntxns_worker	persist_test.cc	/^static const size_t g_ntxns_worker = 1000000;$/;"	v	file:
g_nworkers	persist_test.cc	/^static size_t g_nworkers = 1;$/;"	v	file:
g_order_status_scan_hack	benchmarks/tpcc.cc	/^static int g_order_status_scan_hack = 0;$/;"	v	file:
g_partition_locks	benchmarks/tpcc.cc	/^static aligned_padded_elem<spinlock> *g_partition_locks = nullptr;$/;"	v	file:
g_persist_buffers	persist_test.cc	/^  onecopy_logbased_simulation::g_persist_buffers[NMAXCORES];$/;"	m	class:onecopy_logbased_simulation	file:
g_persist_buffers	persist_test.cc	/^  static circbuf<pbuffer, g_perthread_buffers> g_persist_buffers[NMAXCORES];$/;"	m	class:onecopy_logbased_simulation	file:
g_persistence_vc	persist_test.cc	/^  static uint64_t g_persistence_vc[NMAXCORES];$/;"	m	class:explicit_deptracking_simulation	file:
g_persistence_vc	persist_test.cc	/^uint64_t explicit_deptracking_simulation::g_persistence_vc[NMAXCORES] = {0};$/;"	m	class:explicit_deptracking_simulation	file:
g_perthread_buffers	persist_test.cc	/^  static const size_t g_perthread_buffers = 64; \/\/ 64 outstanding buffers$/;"	m	class:onecopy_logbased_simulation	file:
g_proto_version_str	txn.cc	/^string (*g_proto_version_str)(uint64_t v) = proto2_version_str;$/;"	v
g_readset	persist_test.cc	/^static size_t g_readset = 30;$/;"	v	file:
g_txn_workload_mix	benchmarks/tpcc.cc	/^static unsigned g_txn_workload_mix[] = { 41, 43, 4, 4, 4, 4, 0, 0, 0 }; \/\/ default TPC-C workload mix$/;"	v	file:
g_txn_workload_mix	benchmarks/tpce.cc	/^static double g_txn_workload_mix[] = { 4.9, 13, 1, 18, 14, 8, 10.1, 10, 19, 2 }; $/;"	v	file:
g_uniform_item_dist	benchmarks/tpcc.cc	/^static int g_uniform_item_dist = 0;$/;"	v	file:
g_valuesize	persist_test.cc	/^static size_t g_valuesize = 32; \/\/ in bytes$/;"	v	file:
g_verbose	persist_test.cc	/^static int g_verbose = 0;$/;"	v	file:
g_wh_spread	benchmarks/tpcc.cc	/^static double g_wh_spread = 0;$/;"	v	file:
g_writeset	persist_test.cc	/^static size_t g_writeset = 16;$/;"	v	file:
gc_epoch	masstree/kvthread.hh	/^	    uint64_t gc_epoch;$/;"	m	struct:threadinfo::__anon72::__anon73
gc_extractor	benchmarks/results/make_graphs-6.py	/^    def gc_extractor(enabled):$/;"	f
gc_layer	masstree/masstree_remove.hh	/^bool tcursor<P>::gc_layer(threadinfo& ti)$/;"	f	class:Masstree::tcursor
gc_layer_rcu_callback	masstree/masstree_remove.hh	/^    gc_layer_rcu_callback(node_base<P>* root, Str prefix)$/;"	f	struct:Masstree::gc_layer_rcu_callback
gc_layer_rcu_callback	masstree/masstree_remove.hh	/^struct gc_layer_rcu_callback : public P::threadinfo_type::rcu_callback {$/;"	s	namespace:Masstree
gc_nfree	masstree/perfstat.hh	/^    int gc_nfree;$/;"	m	struct:Perf::stat
gc_passes	dbcore/rcu.h	/^    size_t gc_passes;$/;"	m	struct:RCU::rcu_gc_info
generic_failsafe_read_fn	record/serializer.h	/^typedef const uint8_t *(*generic_failsafe_read_fn)(const uint8_t *, size_t, uint8_t *);$/;"	t
generic_failsafe_skip_fn	record/serializer.h	/^typedef size_t (*generic_failsafe_skip_fn)(const uint8_t *, size_t, uint8_t *);$/;"	t
generic_nbytes_fn	record/serializer.h	/^typedef size_t (*generic_nbytes_fn)(const uint8_t *);$/;"	t
generic_read_fn	record/serializer.h	/^typedef const uint8_t *(*generic_read_fn)(const uint8_t *, uint8_t *);$/;"	t
generic_serializer	record/serializer.h	/^struct generic_serializer {$/;"	s
generic_skip_fn	record/serializer.h	/^typedef size_t (*generic_skip_fn)(const uint8_t *, uint8_t *);$/;"	t
generic_write_fn	record/serializer.h	/^typedef uint8_t *(*generic_write_fn)(uint8_t *, const uint8_t *);$/;"	t
get	benchmarks/MEESUT.h	/^    T* get(){$/;"	f	class:TPCE::InputBuffer
get	benchmarks/egen/shore_tpce_egen.h	/^    T* get(int i){cnt++; return &buffer[i]; }$/;"	f	class:TPCE::EgenTupleContainer
get	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::get($/;"	f	class:ndb_ordered_index
get	core.h	/^  get(unsigned i, Args &&... args)$/;"	f	class:percore_lazy
get	dbcore/rcu-slist.cpp	/^_rcu_slist::node *_rcu_slist::next_ptr::get() {$/;"	f	class:_rcu_slist::next_ptr
get	dbcore/rcu-slist.h	/^        Node *get() { return (Node*) cur; }$/;"	f	struct:_rcu_slist::iterator
get	dbcore/sm-log-recover.h	/^        log_block *get() { return valid()? _block : NULL; }$/;"	f	struct:sm_log_recover_mgr::block_scanner
get	dbcore/sm-log-recover.h	/^        log_record *get() { return valid()? &_bscan->records[_i] : 0; }$/;"	f	struct:sm_log_recover_mgr::log_scanner
get	dbcore/sm-oid-impl.h	/^        fat_ptr *get(OID o) { return &_entries[o]; }$/;"	f	struct:sm_oid_mgr_impl::oid_array
get	marked_ptr.h	/^  get() const$/;"	f	class:marked_ptr
get	masstree/json.hh	/^    const Json& get(Json::size_type x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^    const Json& get(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json& Json::get(Str key) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json& Json::get(size_type x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, Json& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, Str& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, String& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, bool& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, double& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, int &x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, long long& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, long& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, unsigned long long& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, unsigned long& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json::get(Str key, unsigned& x) const {$/;"	f	class:lcdf::Json
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, Json& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, Str& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, String& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, bool& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, double& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, int& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, long long& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, long& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, unsigned long long& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, unsigned long& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/json.hh	/^inline const Json_get_proxy Json_proxy_base<T>::get(Str key, unsigned& x) const {$/;"	f	class:lcdf::Json_proxy_base
get	masstree/masstree_get.hh	/^inline bool basic_table<P>::get(Str key, value_type &value,$/;"	f	class:Masstree::basic_table
get	masstree/mtclient.cc	/^    void get(const Str &key, int *ivalue) {$/;"	f	struct:kvtest_client
get	masstree/mtclient.cc	/^    void get(long ikey, Str *value) {$/;"	f	struct:kvtest_client
get	masstree/mtclient.cc	/^get(struct child *c, const Str &key, char *val, int max)$/;"	f
get	masstree/mtd.cc	/^    void get(long ikey) {$/;"	f	struct:kvtest_client
get	masstree/mtd.cc	/^void kvtest_client::get(const Str &key)$/;"	f	class:kvtest_client
get	masstree/mtd.cc	/^void kvtest_client::get(long ikey, Str *value)$/;"	f	class:kvtest_client
get	masstree/mttest.cc	/^void kvtest_client<T>::get(long ikey) {$/;"	f	class:kvtest_client
get	masstree/stringbag.hh	/^    lcdf::Str get(int p) const {$/;"	f	class:stringbag
get	str_arena.h	/^  get()$/;"	f	class:scoped_str_arena
get16	masstree/string.cc	160;"	d	file:
get16	masstree/string.cc	171;"	d	file:
get16	masstree/string.cc	175;"	d	file:
get16	masstree/string.cc	190;"	d	file:
getAccountPermissionRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PACCOUNT_PERMISSION_ROW CGenerateAndLoad::getAccountPermissionRow(int i) $/;"	f	class:CGenerateAndLoad
getAddressRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PADDRESS_ROW CGenerateAndLoad::getAddressRow()$/;"	f	class:CGenerateAndLoad
getBrokerRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PBROKER_ROW CGenerateAndLoad::getBrokerRow()$/;"	f	class:CGenerateAndLoad
getCapacity	benchmarks/egen/shore_tpce_egen.h	/^    int getCapacity() {return capacity;}$/;"	f	class:TPCE::EgenTupleContainer
getCashTransactionRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCASH_TRANSACTION_ROW CGenerateAndLoad::getCashTransactionRow()$/;"	f	class:CGenerateAndLoad
getChargeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCHARGE_ROW CGenerateAndLoad::getChargeRow() $/;"	f	class:CGenerateAndLoad
getCnt	benchmarks/egen/shore_tpce_egen.h	/^    long getCnt() {return cnt;}$/;"	f	class:TPCE::EgenTupleContainer
getCommissionRateRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCOMMISSION_RATE_ROW CGenerateAndLoad::getCommissionRateRow() $/;"	f	class:CGenerateAndLoad
getCompanyCompetitorRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCOMPANY_COMPETITOR_ROW CGenerateAndLoad::getCompanyCompetitorRow() $/;"	f	class:CGenerateAndLoad
getCompanyRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCOMPANY_ROW CGenerateAndLoad::getCompanyRow() $/;"	f	class:CGenerateAndLoad
getCustomerAccountRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCUSTOMER_ACCOUNT_ROW CGenerateAndLoad::getCustomerAccountRow() $/;"	f	class:CGenerateAndLoad
getCustomerRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCUSTOMER_ROW CGenerateAndLoad::getCustomerRow() $/;"	f	class:CGenerateAndLoad
getCustomerTaxrateRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PCUSTOMER_TAXRATE_ROW CGenerateAndLoad::getCustomerTaxrateRow(int i) $/;"	f	class:CGenerateAndLoad
getDailyMarketRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PDAILY_MARKET_ROW CGenerateAndLoad::getDailyMarketRow() $/;"	f	class:CGenerateAndLoad
getExchangeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PEXCHANGE_ROW CGenerateAndLoad::getExchangeRow() $/;"	f	class:CGenerateAndLoad
getFinancialRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PFINANCIAL_ROW CGenerateAndLoad::getFinancialRow() $/;"	f	class:CGenerateAndLoad
getHoldingHistoryRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PHOLDING_HISTORY_ROW CGenerateAndLoad::getHoldingHistoryRow(int i)$/;"	f	class:CGenerateAndLoad
getHoldingHistoryRowCount	benchmarks/egen/EGenGenerateAndLoad.cpp	/^int CGenerateAndLoad::getHoldingHistoryRowCount()$/;"	f	class:CGenerateAndLoad
getHoldingRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PHOLDING_ROW CGenerateAndLoad::getHoldingRow()$/;"	f	class:CGenerateAndLoad
getHoldingSummaryRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PHOLDING_SUMMARY_ROW CGenerateAndLoad::getHoldingSummaryRow()$/;"	f	class:CGenerateAndLoad
getIndustryRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PINDUSTRY_ROW CGenerateAndLoad::getIndustryRow() $/;"	f	class:CGenerateAndLoad
getLastTradeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PLAST_TRADE_ROW CGenerateAndLoad::getLastTradeRow() $/;"	f	class:CGenerateAndLoad
getNewsItemRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PNEWS_ITEM_ROW CGenerateAndLoad::getNewsItemRow() $/;"	f	class:CGenerateAndLoad
getNewsXRefRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PNEWS_XREF_ROW CGenerateAndLoad::getNewsXRefRow() $/;"	f	class:CGenerateAndLoad
getRowSize	benchmarks/egen/shore_tpce_egen.h	/^    int getRowSize() {return sizeof(T);}$/;"	f	class:TPCE::EgenTupleContainer
getSectorRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PSECTOR_ROW CGenerateAndLoad::getSectorRow() $/;"	f	class:CGenerateAndLoad
getSecurityRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PSECURITY_ROW CGenerateAndLoad::getSecurityRow() $/;"	f	class:CGenerateAndLoad
getSettlementRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PSETTLEMENT_ROW CGenerateAndLoad::CGenerateAndLoad::getSettlementRow ()$/;"	f	class:CGenerateAndLoad::CGenerateAndLoad
getSize	benchmarks/egen/shore_tpce_egen.h	/^    int getSize() {return size;}$/;"	f	class:TPCE::EgenTupleContainer
getStatusTypeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PSTATUS_TYPE_ROW CGenerateAndLoad::getStatusTypeRow() $/;"	f	class:CGenerateAndLoad
getTaxrateRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PTAXRATE_ROW CGenerateAndLoad::getTaxrateRow() $/;"	f	class:CGenerateAndLoad
getTaxratesCount	benchmarks/egen/EGenGenerateAndLoad.cpp	/^int CGenerateAndLoad::getTaxratesCount()$/;"	f	class:CGenerateAndLoad
getTradeHistoryRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PTRADE_HISTORY_ROW CGenerateAndLoad::getTradeHistoryRow(int i)$/;"	f	class:CGenerateAndLoad
getTradeHistoryRowCount	benchmarks/egen/EGenGenerateAndLoad.cpp	/^int CGenerateAndLoad::getTradeHistoryRowCount()$/;"	f	class:CGenerateAndLoad
getTradeRequestRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PTRADE_REQUEST_ROW CGenerateAndLoad::getTradeRequestRow()$/;"	f	class:CGenerateAndLoad
getTradeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PTRADE_ROW CGenerateAndLoad::getTradeRow()$/;"	f	class:CGenerateAndLoad
getTradeTypeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PTRADE_TYPE_ROW CGenerateAndLoad::getTradeTypeRow() $/;"	f	class:CGenerateAndLoad
getWatchItemRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PWATCH_ITEM_ROW CGenerateAndLoad::getWatchItemRow(int i) $/;"	f	class:CGenerateAndLoad
getWatchListRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PWATCH_LIST_ROW CGenerateAndLoad::getWatchListRow() $/;"	f	class:CGenerateAndLoad
getZipCodeRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^PZIP_CODE_ROW CGenerateAndLoad::getZipCodeRow() $/;"	f	class:CGenerateAndLoad
get_all_counters	counter.cc	/^event_counter::get_all_counters()$/;"	f	class:event_counter
get_allocator	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::get_allocator(FID f)$/;"	f	class:sm_oid_mgr_impl
get_array	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::get_array(FID f)$/;"	f	class:sm_oid_mgr_impl
get_async_cb	masstree/mtclient.cc	/^typedef void (*get_async_cb)(struct child *c, struct async *a,$/;"	t	file:
get_avg_latency_us	benchmarks/bench.h	/^  get_avg_latency_us() const$/;"	f	class:bench_worker
get_b	masstree/json.hh	/^    bool get_b(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
get_b	masstree/json.hh	/^inline bool Json::get_b(Str key) const {$/;"	f	class:lcdf::Json
get_check	masstree/mtclient.cc	/^    void get_check(const Str &key, const Str &val) {$/;"	f	struct:kvtest_client
get_check	masstree/mtclient.cc	/^    void get_check(const char *key, const char *val) {$/;"	f	struct:kvtest_client
get_check	masstree/mtclient.cc	/^    void get_check(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check	masstree/mtd.cc	/^    void get_check(const char *key, const char *expected) {$/;"	f	struct:kvtest_client
get_check	masstree/mtd.cc	/^    void get_check(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check	masstree/mtd.cc	/^void kvtest_client::get_check(const Str &key, const Str &expected)$/;"	f	class:kvtest_client
get_check	masstree/mttest.cc	/^    void get_check(const Str &key, long iexpected) {$/;"	f	struct:kvtest_client
get_check	masstree/mttest.cc	/^    void get_check(const char *key, const char *expected) {$/;"	f	struct:kvtest_client
get_check	masstree/mttest.cc	/^    void get_check(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check	masstree/mttest.cc	/^void kvtest_client<T>::get_check(const Str &key, const Str &expected) {$/;"	f	class:kvtest_client
get_check_key10	masstree/mtclient.cc	/^    void get_check_key10(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check_key10	masstree/mtd.cc	/^    void get_check_key10(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check_key8	masstree/mtclient.cc	/^    void get_check_key8(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check_key8	masstree/mtd.cc	/^    void get_check_key8(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check_key8	masstree/mttest.cc	/^    void get_check_key8(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_check_sync	masstree/mtclient.cc	/^    void get_check_sync(long ikey, long iexpected) {$/;"	f	struct:kvtest_client
get_chkpt_end	dbcore/sm-log-file.h	/^    LSN get_chkpt_end() { return _chkpt_end_lsn; }$/;"	f	struct:sm_log_file_mgr
get_chkpt_start	dbcore/sm-log-file.h	/^    LSN get_chkpt_start() { return _chkpt_start_lsn; }$/;"	f	struct:sm_log_file_mgr
get_clsn	dbcore/sm-tx-log.cpp	/^sm_tx_log::get_clsn() {$/;"	f	class:sm_tx_log
get_col_check	masstree/mtclient.cc	/^    void get_col_check(const Str &key, int col, const Str &value) {$/;"	f	struct:kvtest_client
get_col_check	masstree/mtclient.cc	/^    void get_col_check(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
get_col_check	masstree/mtd.cc	/^void kvtest_client::get_col_check(const Str &key, int col, const Str &expected)$/;"	f	class:kvtest_client
get_col_check	masstree/mttest.cc	/^    void get_col_check(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
get_col_check	masstree/mttest.cc	/^void kvtest_client<T>::get_col_check(const Str &key, int col,$/;"	f	class:kvtest_client
get_col_check_key10	masstree/mtclient.cc	/^    void get_col_check_key10(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
get_col_check_key10	masstree/mtd.cc	/^    void get_col_check_key10(long ikey, int col, long iexpected) {$/;"	f	struct:kvtest_client
get_col_check_key10	masstree/mttest.cc	/^    void get_col_check_key10(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
get_counter_value_t	stats_common.h	/^struct get_counter_value_t {$/;"	s	class:stats_command
get_cur_epoch	dbcore/epoch.cpp	/^epoch_mgr::get_cur_epoch()$/;"	f	class:epoch_mgr
get_d	masstree/json.hh	/^    double get_d(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
get_d	masstree/json.hh	/^inline double Json::get_d(Str key) const {$/;"	f	class:lcdf::Json
get_durable_mark	dbcore/sm-log-file.h	/^    LSN get_durable_mark() { return _durable_lsn; }$/;"	f	struct:sm_log_file_mgr
get_fileHandle	third-party/lz4/lz4c.c	/^int get_fileHandle(char* input_filename, char* output_filename, FILE** pfinput, FILE** pfoutput)$/;"	f
get_flags	marked_ptr.h	/^  get_flags() const$/;"	f	class:marked_ptr
get_flags	txn.h	/^  get_flags() const$/;"	f	class:transaction_base
get_fn	masstree/mtclient.cc	/^	get_async_cb get_fn;$/;"	m	union:async::__anon18	file:
get_hack_status	txn_proto2_impl.h	/^  get_hack_status()$/;"	f	class:transaction_proto2_static
get_history	benchmarks/egen/DriverParamSettings.h	/^    INT32   get_history;    \/\/ percentage$/;"	m	struct:TPCE::TCustomerPositionSettings
get_history	benchmarks/egen/DriverParamSettings.h	/^    bool    get_history;    \/\/ percentage$/;"	m	struct:TPCE::TCustomerPositionSettingsState
get_history	benchmarks/egen/TxnHarnessStructs.h	/^    bool        get_history;$/;"	m	struct:TPCE::TCustomerPositionTxnInput
get_i	masstree/json.hh	/^    long get_i(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
get_i	masstree/json.hh	/^inline long Json::get_i(Str key) const {$/;"	f	class:lcdf::Json
get_impl	dbcore/stub-impl.h	/^typename _impl_of<T>::type *get_impl(T* ptr) {$/;"	f
get_impl	dbcore/stub-impl.h	/^typename _impl_of<T>::type const *get_impl(T const *ptr) {$/;"	f	class:_impl_of
get_insert	masstree/json.cc	/^Json &Json::ObjectJson::get_insert(Str key)$/;"	f	class:lcdf::Json::ObjectJson
get_insert	masstree/json.hh	/^    Json& get_insert(Json::size_type x) {$/;"	f	class:lcdf::Json_proxy_base
get_insert	masstree/json.hh	/^    Json& get_insert(Str key) {$/;"	f	class:lcdf::Json_proxy_base
get_insert	masstree/json.hh	/^    Json& get_insert(const String& key) {$/;"	f	class:lcdf::Json_proxy_base
get_insert	masstree/json.hh	/^    Json& get_insert(const char* key) {$/;"	f	class:lcdf::Json_proxy_base
get_insert	masstree/json.hh	/^    inline Json& get_insert(const String& key) {$/;"	f	struct:lcdf::Json::ObjectJson
get_insert	masstree/json.hh	/^inline Json& Json::get_insert(Str key) {$/;"	f	class:lcdf::Json
get_insert	masstree/json.hh	/^inline Json& Json::get_insert(const String &key) {$/;"	f	class:lcdf::Json
get_insert	masstree/json.hh	/^inline Json& Json::get_insert(const char *key) {$/;"	f	class:lcdf::Json
get_insert	masstree/json.hh	/^inline Json& Json::get_insert(size_type x) {$/;"	f	class:lcdf::Json
get_key	benchmarks/tpcc.cc	/^  get_key() const$/;"	f	class:new_order_scan_callback
get_key	masstree/masstree_struct.hh	/^    key_type get_key(int p) const {$/;"	f	class:Masstree::internode
get_key	masstree/masstree_struct.hh	/^    key_type get_key(int p) const {$/;"	f	class:Masstree::leaf
get_latency_numer_us	benchmarks/bench.h	/^  inline uint64_t get_latency_numer_us() const { return latency_numer_us; }$/;"	f	class:bench_worker
get_leaf_locked	masstree/masstree_get.hh	/^inline node_base<P>* tcursor<P>::get_leaf_locked(node_type* root,$/;"	f	class:Masstree::tcursor
get_local_txn_counters	benchmarks/bench.h	/^  get_local_txn_counters() const$/;"	f	class:bench_worker
get_log_impl	dbcore/sm-tx-log.cpp	/^    get_log_impl(sm_tx_log *x)$/;"	f	namespace:__anon94
get_name	thread.h	/^  get_name() const$/;"	f	class:ndb_thread
get_names	scopedperf.hh	/^  vector<const char*> get_names() const { return {}; }$/;"	f	class:scopedperf::ctrgroup_chain
get_names	scopedperf.hh	/^  vector<const char*> get_names() const {$/;"	f	class:scopedperf::ctrgroup_chain
get_node_vector	masstree/masstree.hh	/^	inline node_vector_type* get_node_vector()$/;"	f	class:Masstree::basic_table
get_node_vector	masstree_btree.h	/^  inline node_vector_type* get_node_vector()$/;"	f	class:mbtree
get_ntxn_aborts	benchmarks/bench.h	/^  inline size_t get_ntxn_aborts() const { return ntxn_aborts; }$/;"	f	class:bench_worker
get_ntxn_commits	benchmarks/bench.h	/^  inline size_t get_ntxn_commits() const { return ntxn_commits; }$/;"	f	class:bench_worker
get_ntxn_persisted	benchmarks/abstract_db.h	/^    get_ntxn_persisted() const { return std::make_tuple(0, 0, 0.0); }$/;"	f	class:abstract_db
get_oclass	masstree/clp.c	/^get_oclass(Clp_Parser *clp, const char *text, int *ocharskip)$/;"	f	file:
get_offset_segment	dbcore/sm-log-offset.cpp	/^sm_log_offset_mgr::get_offset_segment(uint64_t lsn_offset)$/;"	f	class:sm_log_offset_mgr
get_payload_ptr	dbcore/sm-log-recover.cpp	/^get_payload_ptr(sm_log_recover_mgr *lm, sm_log_recover_mgr::log_scanner &s, bool follow_ext)$/;"	f	file:
get_payload_size	dbcore/sm-log-recover.cpp	/^get_payload_size(sm_log_recover_mgr::log_scanner &s)$/;"	f	file:
get_reason	txn.h	/^  get_reason() const$/;"	f	class:transaction_abort_exception
get_s	masstree/json.hh	/^    String get_s(Str key) const {$/;"	f	class:lcdf::Json_proxy_base
get_s	masstree/json.hh	/^inline String Json::get_s(Str key) const {$/;"	f	class:lcdf::Json
get_samples	scopedperf.hh	/^  void get_samples(uint64_t *s) const {$/;"	f	class:scopedperf::perfsum_ctr
get_samples	scopedperf.hh	/^  void get_samples(uint64_t *s) const {$/;"	f	class:scopedperf::perfsum_hist_tmpl
get_scale_threads	benchmarks/runner.py	/^def get_scale_threads(stride):$/;"	f
get_scan_mgr	dbcore/sm-log.cpp	/^sm_log::get_scan_mgr()$/;"	f	class:sm_log
get_seed	util.h	/^  get_seed()$/;"	f	class:util::fast_random
get_segment	dbcore/sm-log-offset.cpp	/^sm_log_offset_mgr::get_segment(uint32_t mod_segnum) {$/;"	f	class:sm_log_offset_mgr
get_segment	dbcore/sm-log-segments.cpp	/^log_segment_mgr::get_segment(int segnum) {$/;"	f	class:log_segment_mgr
get_size	btree.h	/^    inline size_t get_size() const { return size_; }$/;"	f	class:btree::size_walk_callback
get_size_delta	benchmarks/bench.h	/^  inline ssize_t get_size_delta() const { return size_delta; }$/;"	f	class:bench_worker
get_starting_byte_offset	dbcore/sm-log-alloc.cpp	/^    get_starting_byte_offset(sm_log_recover_mgr *lm)$/;"	f	namespace:__anon88
get_sums	scopedperf.hh	/^  static vector<perfsum_base*> *get_sums() {$/;"	f	class:scopedperf::perfsum_base
get_sums_lock	scopedperf.hh	/^  static spinlock *get_sums_lock() {$/;"	f	class:scopedperf::perfsum_base
get_sync	masstree/mtclient.cc	/^    bool get_sync(long ikey) {$/;"	f	struct:kvtest_client
get_sync	masstree/mtd.cc	/^bool kvtest_client::get_sync(long ikey) {$/;"	f	class:kvtest_client
get_sync	masstree/mttest.cc	/^    bool get_sync(long ikey) {$/;"	f	struct:kvtest_client
get_sync	masstree/mttest.cc	/^bool kvtest_client<T>::get_sync(const Str &key, Str &value) {$/;"	f	class:kvtest_client
get_sync	masstree/mttest.cc	/^bool kvtest_client<T>::get_sync(const Str& key) {$/;"	f	class:kvtest_client
get_sync_key16	masstree/mttest.cc	/^    bool get_sync_key16(long ikey) {$/;"	f	struct:kvtest_client
get_system_memory_info	benchmarks/bench.cc	/^get_system_memory_info()$/;"	f	file:
get_tls	dbcore/epoch.cpp	/^get_tls(epoch_mgr *em)$/;"	f	file:
get_tls	dbcore/epoch.h	/^        tls_storage *(*get_tls)(void*);$/;"	m	struct:epoch_mgr::callbacks
get_tls	dbcore/sm-alloc.cpp	/^    get_tls(void*)$/;"	f	namespace:RA
get_tls	dbcore/test-epoch.cpp	/^get_tls(void*)$/;"	f
get_tls	dbcore/xid.cpp	/^get_tls(void*)$/;"	f	namespace:TXN
get_tuple_vector	masstree/masstree.hh	/^	inline tuple_vector_type* get_tuple_vector()$/;"	f	class:Masstree::basic_table
get_tuple_vector	masstree_btree.h	/^  inline tuple_vector_type* get_tuple_vector()$/;"	f	class:mbtree
get_txn_counters	benchmarks/abstract_db.h	/^  get_txn_counters(void *txn) const$/;"	f	class:abstract_db
get_txn_counts	benchmarks/bench.cc	/^bench_worker::get_txn_counts() const$/;"	f	class:bench_worker
get_type	dbcore/sm-log-recover.cpp	/^get_type(log_record_type tp)$/;"	f	file:
get_value_size_hint	base_txn_btree.h	/^  get_value_size_hint() const$/;"	f	class:base_txn_btree
get_value_start	tuple.h	/^  get_value_start() const$/;"	f	struct:dbtuple
get_value_start	tuple.h	/^  get_value_start()$/;"	f	struct:dbtuple
get_workload	benchmarks/bid.cc	/^  get_workload() const$/;"	f	class:bid_worker
get_workload	benchmarks/encstress.cc	/^  get_workload() const$/;"	f	class:encstress_worker
get_workload	benchmarks/queue.cc	/^  get_workload() const$/;"	f	class:queue_worker
get_workload	benchmarks/tpcc.cc	/^  get_workload() const$/;"	f	class:tpcc_worker
get_workload	benchmarks/tpce.cc	/^			get_workload() const$/;"	f	class:tpce_worker
getbuffer	persist_test.cc	/^  getbuffer(unsigned id)$/;"	f	class:onecopy_logbased_simulation
getcpu_fn	scopedperf.hh	/^typedef int(*getcpu_fn)(void);$/;"	t	namespace:scopedperf
geterr	benchmarks/results/make_graphs-6.py	/^        def geterr(ypts):$/;"	f	function:mkbar
getratio	masstree/mtclient.cc	/^    int getratio() const {$/;"	f	struct:kvtest_client
getratio	masstree/mtclient.cc	/^static int getratio = -1;$/;"	v	file:
gid	masstree/mttest.cc	/^static const char *gid = NULL;$/;"	v	file:
give	dbcore/rcu.cpp	/^bool pointer_stash::give(pointer *p) {$/;"	f	class:RCU::pointer_stash
glob_match	masstree/string.cc	/^bool String_generic::glob_match(const char* sbegin, int slen,$/;"	f	class:lcdf::String_generic
glob_match	masstree/string_base.hh	/^    bool glob_match(const String_base<TT>& pattern) const {$/;"	f	class:lcdf::String_base
glob_match	masstree/string_base.hh	/^    bool glob_match(const char* pattern) const {$/;"	f	class:lcdf::String_base
global_current_tick	ticker.h	/^  global_current_tick() const$/;"	f	class:ticker
global_init	dbcore/epoch.h	/^        void (*global_init)(void*);$/;"	m	struct:epoch_mgr::callbacks
global_init	dbcore/sm-alloc.cpp	/^    void global_init(void*)$/;"	f	namespace:RA
global_init	dbcore/test-epoch.cpp	/^global_init(void* arg)$/;"	f
global_init	dbcore/xid.cpp	/^global_init(void*)$/;"	f	namespace:TXN
global_last_tick_exclusive	ticker.h	/^  global_last_tick_exclusive() const$/;"	f	class:ticker
global_last_tick_inclusive	ticker.h	/^  global_last_tick_inclusive() const$/;"	f	class:ticker
global_log_epoch	masstree/mttest.cc	/^kvepoch_t global_log_epoch = 0;$/;"	v
global_mutex	dbcore/test-rcu-slist.cpp	/^pthread_mutex_t global_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
global_quiesce	dbcore/epoch.cpp	/^global_quiesce(epoch_mgr *em)$/;"	f	file:
global_tid_	txn_proto2_impl.h	/^    std::atomic<uint64_t> global_tid_;$/;"	m	struct:transaction_proto2_static::hackstruct
global_wake_epoch	masstree/log.cc	/^kvepoch_t global_wake_epoch;$/;"	v
globalepoch	masstree/mtd.cc	/^volatile uint64_t globalepoch = 1;     \/\/ global epoch, updated by main thread regularly$/;"	v
globalepoch	masstree/mttest.cc	/^volatile uint64_t globalepoch = 1;     \/\/ global epoch, updated by main thread regularly$/;"	v
gnuplot_info	masstree/mttest.cc	/^    gnuplot_info(int nt)$/;"	f	struct:__anon67::gnuplot_info
gnuplot_info	masstree/mttest.cc	/^struct gnuplot_info {$/;"	s	namespace:__anon67	file:
go	benchmarks/masstree/kvtest.cc	/^  go()$/;"	f	class:kvtest_runner
go	masstree/mttest.cc	/^    static void *go(void *arg) {$/;"	f	struct:test_thread
go_quit	masstree/mtd.cc	/^static volatile sig_atomic_t go_quit = 0;$/;"	v	file:
grids	benchmarks/runner.py	/^grids = []$/;"	v
grow	masstree/json.cc	/^void Json::ObjectJson::grow(bool copy)$/;"	f	class:lcdf::Json::ObjectJson
grow	masstree/kvio.cc	/^void kvout::grow(unsigned want) {$/;"	f	class:kvout
grow	masstree/local_vector.hh	/^void local_vector<T, N, A>::grow() {$/;"	f	class:local_vector
grow	masstree/straccum.cc	/^char* StringAccum::grow(int ncap) {$/;"	f	class:lcdf::StringAccum
guard	ticker.h	/^    guard(ticker &impl)$/;"	f	class:ticker::guard
guard	ticker.h	/^  class guard {$/;"	c	class:ticker
h	dbcore/test-sc-hash.cpp	/^    burt_hash h;$/;"	m	struct:hasher	file:
h	small_unordered_map.h	/^    size_t h;$/;"	m	struct:small_unordered_map::bucket
h	static_unordered_map.h	/^    size_t h;$/;"	m	struct:static_unordered_map::bucket
hOutFile	benchmarks/egen/FlatFileLoader.h	/^    FILE            *hOutFile;$/;"	m	class:TPCE::CFlatFileLoader
hackstruct	txn_proto2_impl.h	/^    constexpr hackstruct() : status_(false), global_tid_(0) {}$/;"	f	struct:transaction_proto2_static::hackstruct
hackstruct	txn_proto2_impl.h	/^  struct hackstruct {$/;"	s	class:transaction_proto2_static
handle_cmd_get_counter_value	stats_server.cc	/^stats_server::handle_cmd_get_counter_value(const string &name, packet &pkt)$/;"	f	class:stats_server
handle_scale_tpcc	benchmarks/results/make_graphs-4.py	/^def handle_scale_tpcc(f, results):$/;"	f
handler	dbcore/test-dynarray.cpp	/^void handler(int, siginfo_t *si, void*) {$/;"	f
handshake	masstree/mtclient.hh	/^    void handshake(int target_core) {$/;"	f	class:KVConn
handshake	masstree/mtd.cc	/^    Json handshake;$/;"	m	struct:conninfo	file:
handshake	masstree/mtd.cc	/^int handshake(Json& request, threadinfo& ti) {$/;"	f
hard_append	masstree/straccum.cc	/^StringAccum::hard_append(const char *s, int len)$/;"	f	class:lcdf::StringAccum
hard_append_cstr	masstree/straccum.cc	/^StringAccum::hard_append_cstr(const char *cstr)$/;"	f	class:lcdf::StringAccum
hard_assert_use	masstree/kvthread.cc	/^memdebug::hard_assert_use(const void *ptr, memtag tag1, memtag tag2) {$/;"	f	class:memdebug
hard_assign_ksuf	masstree/masstree_struct.hh	/^void leaf<P>::hard_assign_ksuf(int p, Str s, bool initializing,$/;"	f	class:Masstree::leaf
hard_c_str	masstree/string.cc	/^String::hard_c_str() const$/;"	f	class:lcdf::String
hard_check	masstree/mtclient.cc	/^void KVConn::hard_check(int tryhard) {$/;"	f	class:KVConn
hard_check	masstree/mtd.cc	/^void conn::hard_check(int tryhard) {$/;"	f	class:conn
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = false;$/;"	m	struct:hint_kv_scan_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = false;$/;"	m	struct:hint_tpcc_credit_check_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = false;$/;"	m	struct:hint_tpcc_delivery_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = false;$/;"	m	struct:hint_tpcc_order_status_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = false;$/;"	m	struct:hint_tpcc_payment_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = false;$/;"	m	struct:hint_tpcc_stock_level_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = true;$/;"	m	struct:hint_kv_get_put_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = true;$/;"	m	struct:hint_read_only_traits
hard_expected_sizes	benchmarks/ndb_wrapper_impl.h	/^  static const bool hard_expected_sizes = true;$/;"	m	struct:hint_tpcc_new_order_traits
hard_expected_sizes	txn.h	/^  static const bool hard_expected_sizes = false; \/\/ true if the expected sizes are hard maximums$/;"	m	struct:default_transaction_traits
hard_extend	masstree/straccum.cc	/^StringAccum::hard_extend(int nadjust, int nreserve)$/;"	f	class:lcdf::StringAccum
hard_free_checks	masstree/kvthread.cc	/^memdebug::hard_free_checks(const memdebug *m, size_t size, int freetype,$/;"	f	class:memdebug
hard_get	masstree/json.cc	/^const Json& Json::hard_get(Str key) const {$/;"	f	class:lcdf::Json
hard_get	masstree/json.cc	/^const Json& Json::hard_get(size_type x) const {$/;"	f	class:lcdf::Json
hard_get_insert	masstree/json.cc	/^Json& Json::hard_get_insert(size_type x) {$/;"	f	class:lcdf::Json
hard_lower	masstree/string.cc	/^hard_lower(const String &s, int pos)$/;"	f	namespace:lcdf
hard_make_stable	masstree/string.cc	/^String::hard_make_stable(const char *s, int len)$/;"	f	class:lcdf::String
hard_printable	masstree/string.cc	/^hard_printable(const String &s, int pos, int type)$/;"	f	namespace:lcdf
hard_rcu_quiesce	masstree/kvthread.cc	/^void threadinfo::hard_rcu_quiesce()$/;"	f	class:threadinfo
hard_read_int	masstree/msgpack.hh	/^void parser::hard_read_int(T& x) {$/;"	f	class:msgpack::parser
hard_to_b	masstree/json.cc	/^bool Json::hard_to_b() const {$/;"	f	class:lcdf::Json
hard_to_d	masstree/json.cc	/^double Json::hard_to_d() const {$/;"	f	class:lcdf::Json
hard_to_i	masstree/json.cc	/^int64_t Json::hard_to_i() const {$/;"	f	class:lcdf::Json
hard_to_s	masstree/json.cc	/^String Json::hard_to_s() const {$/;"	f	class:lcdf::Json
hard_to_u	masstree/json.cc	/^uint64_t Json::hard_to_u() const {$/;"	f	class:lcdf::Json
hard_uniqueify_array	masstree/json.cc	/^void Json::hard_uniqueify_array(bool convert, int ncap_in) {$/;"	f	class:lcdf::Json
hard_uniqueify_object	masstree/json.cc	/^void Json::hard_uniqueify_object(bool convert) {$/;"	f	class:lcdf::Json
hard_unparse	masstree/json.cc	/^void Json::hard_unparse(StringAccum &sa, const unparse_manipulator &m, int depth) const$/;"	f	class:lcdf::Json
hard_upper	masstree/string.cc	/^hard_upper(const String &s, int pos)$/;"	f	namespace:lcdf
hasMoreToRead	benchmarks/egen/shore_tpce_egen.h	/^    bool hasMoreToRead() {return moreToRead;}$/;"	f	class:TPCE::EgenTupleContainer
hasNextAddress	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextAddress()$/;"	f	class:CGenerateAndLoad
hasNextBroker	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextBroker()$/;"	f	class:CGenerateAndLoad
hasNextCompany	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextCompany()$/;"	f	class:CGenerateAndLoad
hasNextCompanyCompetitor	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextCompanyCompetitor()$/;"	f	class:CGenerateAndLoad
hasNextCustomer	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextCustomer()$/;"	f	class:CGenerateAndLoad
hasNextCustomerAccount	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextCustomerAccount()$/;"	f	class:CGenerateAndLoad
hasNextCustomerTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextCustomerTaxrate()$/;"	f	class:CGenerateAndLoad
hasNextDailyMarket	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextDailyMarket()$/;"	f	class:CGenerateAndLoad
hasNextFinancial	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextFinancial()$/;"	f	class:CGenerateAndLoad
hasNextHolding	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextHolding()$/;"	f	class:CGenerateAndLoad
hasNextHoldingSummary	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool  CGenerateAndLoad::hasNextHoldingSummary()$/;"	f	class:CGenerateAndLoad
hasNextLastTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextLastTrade()$/;"	f	class:CGenerateAndLoad
hasNextLoadUnit	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextLoadUnit()$/;"	f	class:CGenerateAndLoad
hasNextNewsItemAndNewsXRef	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextNewsItemAndNewsXRef()$/;"	f	class:CGenerateAndLoad
hasNextSecurity	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextSecurity()$/;"	f	class:CGenerateAndLoad
hasNextTaxrate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextTaxrate()$/;"	f	class:CGenerateAndLoad
hasNextTrade	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextTrade()$/;"	f	class:CGenerateAndLoad
hasNextWatchList	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextWatchList()$/;"	f	class:CGenerateAndLoad
hasNextZipCode	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::hasNextZipCode()$/;"	f	class:CGenerateAndLoad
hasSpace	benchmarks/egen/shore_tpce_egen.h	/^    bool hasSpace(){return (size<capacity-2);}$/;"	f	class:TPCE::EgenTupleContainer
has_changed	masstree/masstree_struct.hh	/^    bool has_changed(nodeversion_type oldv,$/;"	f	class:Masstree::leaf
has_changed	masstree/nodeversion.hh	/^    bool has_changed(basic_nodeversion<P> x) const {$/;"	f	class:basic_nodeversion
has_changed	masstree/nodeversion.hh	/^    bool has_changed(basic_singlethreaded_nodeversion<P>) const {$/;"	f	class:basic_singlethreaded_nodeversion
has_changed	masstree/value_versioned_array.hh	/^    bool has_changed(rowversion x) const {$/;"	f	struct:rowversion
has_counter	masstree/kvthread.hh	/^    bool has_counter(threadcounter ci) const {$/;"	f	class:threadinfo
has_counter	masstree_btree.h	/^    bool has_counter(threadcounter) const {$/;"	f	class:simple_threadinfo
has_fast_int_multiply	masstree/compiler.hh	/^struct has_fast_int_multiply : public mass::false_type {$/;"	s
has_fast_int_multiply	masstree/compiler.hh	/^template <> struct has_fast_int_multiply<unsigned long long> : public mass::true_type {};$/;"	s
has_fast_int_multiply	masstree/compiler.hh	/^template <> struct has_fast_int_multiply<unsigned long> : public mass::true_type {};$/;"	s
has_fast_int_multiply	masstree/compiler.hh	/^template <> struct has_fast_int_multiply<unsigned> : public mass::true_type {};$/;"	s
has_ksuf	masstree/masstree_struct.hh	/^    bool has_ksuf(int p) const {$/;"	f	class:Masstree::leaf
has_parent	masstree/masstree_struct.hh	/^    inline bool has_parent() const {$/;"	f	class:Masstree::node_base
has_payloads	dbcore/sm-log-recover.h	/^        bool has_payloads;$/;"	m	struct:sm_log_recover_mgr::log_scanner
has_permuter_type	masstree/kpermuter.hh	/^template <typename T> struct has_permuter_type {$/;"	s
has_split	masstree/nodeversion.hh	/^    bool has_split() const {$/;"	f	class:basic_nodeversion
has_split	masstree/nodeversion.hh	/^    bool has_split() const {$/;"	f	class:basic_singlethreaded_nodeversion
has_split	masstree/nodeversion.hh	/^    bool has_split(basic_nodeversion<P> x) const {$/;"	f	class:basic_nodeversion
has_split	masstree/nodeversion.hh	/^    bool has_split(basic_singlethreaded_nodeversion<P>) const {$/;"	f	class:basic_singlethreaded_nodeversion
has_suffix	masstree/masstree_key.hh	/^    bool has_suffix() const {$/;"	f	class:Masstree::key
has_threadcounter	masstree/kvthread.hh	/^template <> struct has_threadcounter<0> {$/;"	s
has_threadcounter	masstree/kvthread.hh	/^template <int N> struct has_threadcounter {$/;"	s
has_value	masstree/masstree_tcursor.hh	/^    inline bool has_value() const {$/;"	f	class:Masstree::tcursor
hash	marked_ptr.h	/^  struct hash<marked_ptr<T>> {$/;"	s	namespace:std
hashTable	third-party/lz4/lz4hc.c	/^    HTYPE hashTable[HASHTABLESIZE];$/;"	m	struct:__anon7	file:
hash_	masstree/json.hh	/^    std::vector<int> hash_;$/;"	m	struct:lcdf::Json::ObjectJson
hash_function	dbcore/sc-hash.h	/^    typedef Hash hash_function;$/;"	t	struct:sc_hash_set
hash_type	dbcore/sc-hash.h	/^    typedef decltype(std::declval<hash_function>()(std::declval<T>())) hash_type;$/;"	t	struct:sc_hash_set
hash_value	masstree/string_base.hh	/^inline size_t hash_value(const String_base<T>& x) {$/;"	f	namespace:lcdf
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(T * const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(T const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(char const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(int const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(int64_t const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(long const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(long long const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(short const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(signed char const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(uint64_t const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(unsigned char const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(unsigned const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(unsigned long const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(unsigned long long const &x) {$/;"	f
hashcode	masstree/hashcode.hh	/^inline hashcode_t hashcode(unsigned short const &x) {$/;"	f
hashcode	masstree/string.cc	/^String_generic::hashcode(const char *s, int len)$/;"	f	class:lcdf::String_generic
hashcode	masstree/string_base.hh	/^    hashcode_t hashcode() const {$/;"	f	class:lcdf::String_base
hashcode	masstree/string_base.hh	/^    static hashcode_t hashcode(const char *first, const char *last) {$/;"	f	class:lcdf::String_base
hashcode	masstree/string_base.hh	/^    static hashcode_t hashcode(const char *first, const char *last) {$/;"	f	class:lcdf::String_generic
hashcode	masstree/string_base.hh	/^inline hashcode_t hashcode(const String_base<T>& x) {$/;"	f	namespace:lcdf
hashcode_t	masstree/hashcode.hh	/^typedef size_t hashcode_t;	\/\/\/< Typical type for a hashcode() value.$/;"	t
hasher	dbcore/sm-oid.cpp	/^    struct hasher : burt_hash {$/;"	s	struct:__anon93::thread_data	file:
hasher	dbcore/test-sc-hash.cpp	/^struct hasher {$/;"	s	file:
hasher	small_unordered_map.h	/^  typedef Hash hasher;$/;"	t	class:small_unordered_map
hasher	static_unordered_map.h	/^  typedef Hash hasher;$/;"	t	class:static_unordered_map
hashkey	masstree/hashcode.hh	/^inline typename T::key_const_reference hashkey(const T &x) {$/;"	f
have_val	masstree/clp.h	/^    int have_val;		\/**< Whether the last option had a value. *\/$/;"	m	struct:Clp_Parser
hdr_	btree.h	/^    typename P::VersionType hdr_;$/;"	m	struct:btree::node
head	dbcore/rcu-slist.h	/^    next_ptr volatile head;$/;"	m	struct:_rcu_slist
head	dbcore/rcu.cpp	/^    pointer *head;$/;"	m	struct:RCU::pointer_stash	file:
head	dbcore/rcu.h	/^    pointer *head;$/;"	m	struct:RCU::pointer_list
head	dbcore/sm-oid-alloc-impl.h	/^    header_data head;$/;"	m	struct:sm_allocator
head_	circbuf.h	/^  std::atomic<unsigned> head_;$/;"	m	class:circbuf
head_	masstree/kvthread.hh	/^    int head_;$/;"	m	struct:limbo_group
header	persist_test.cc	/^  header() const$/;"	f	struct:pbuffer
header	persist_test.cc	/^  header()$/;"	f	struct:pbuffer
header_data	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::header_data::header_data(dynarray &&self)$/;"	f	class:sm_allocator::header_data
header_data	dbcore/sm-oid-alloc-impl.h	/^        void operator=(header_data)=delete;$/;"	m	struct:sm_allocator::header_data
header_data	dbcore/sm-oid-alloc-impl.h	/^    struct header_data {$/;"	s	struct:sm_allocator
header_scan	dbcore/sm-log.h	/^        header_scan() { }$/;"	f	struct:sm_log_scan_mgr::header_scan
header_scan	dbcore/sm-log.h	/^    struct header_scan {$/;"	s	struct:sm_log_scan_mgr
headline	benchmarks/egen/TxnHarnessStructs.h	/^    char                headline[cNI_HEADLINE_len+1];$/;"	m	struct:TPCE::TNews
heap_prefault	benchmarks/bench.h	/^  void heap_prefault()$/;"	f	class:bench_runner
heap_segment	dbcore/sm-common.h	/^    int heap_segment() const {$/;"	f	struct:fat_ptr
heightcounts	masstree/query_masstree.cc	/^static uint64_t heightcounts[300], fillcounts[100];$/;"	m	namespace:Masstree	file:
held	scopedperf.hh	/^  bool held;$/;"	m	class:scopedperf::scoped_spinlock
help	masstree/mttest.cc	/^static void help() {$/;"	f	file:
helper	util.h	/^  struct helper {$/;"	s	namespace:private_
helper	util.h	/^  struct helper<Idx, false, Types...> {$/;"	s	namespace:private_
helper_	masstree/kvrow.hh	/^    query_helper<R> helper_;$/;"	m	class:query
helplevel	benchmarks/egen/EGenValidate.cpp	/^        int     helplevel;$/;"	m	class:BucketSimOptions	file:
hexify	util.h	/^hexify(const T &t)$/;"	f	namespace:util
hexify	util.h	/^hexify(const std::string &input)$/;"	f	namespace:util
hexify_buf	util.h	/^hexify_buf(const char *buf, size_t len)$/;"	f	namespace:util
hide	scopedperf.hh	/^  enum display_opt { show, hide };$/;"	e	enum:scopedperf::perfsum_base::display_opt
high	benchmarks/egen/TxnHarnessStructs.h	/^    double              high;$/;"	m	struct:TPCE::TDailyHistory
high_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        high_ind;$/;"	m	struct:TPCE::TDailyHistory
highs_	counter.h	/^    percore<uint64_t, false, false> highs_;$/;"	m	struct:private_::event_ctx_avg
hinstance	dbcore/test-sc-hash.cpp	/^    hinstance()$/;"	f	struct:hinstance
hinstance	dbcore/test-sc-hash.cpp	/^struct hinstance {$/;"	s	file:
hint	benchmarks/ndb_wrapper.h	/^    abstract_db::TxnProfileHint hint;$/;"	m	struct:private_::ndbtxn
hint_default_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_default_traits : public default_transaction_traits {$/;"	s
hint_kv_get_put_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_kv_get_put_traits {$/;"	s
hint_kv_rmw_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_kv_rmw_traits : public hint_kv_get_put_traits {};$/;"	s
hint_kv_scan_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_kv_scan_traits {$/;"	s
hint_read_only_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_read_only_traits {$/;"	s
hint_tpcc_credit_check_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_credit_check_traits {$/;"	s
hint_tpcc_delivery_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_delivery_traits {$/;"	s
hint_tpcc_new_order_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_new_order_traits {$/;"	s
hint_tpcc_order_status_read_only_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_order_status_read_only_traits : public hint_read_only_traits {};$/;"	s
hint_tpcc_order_status_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_order_status_traits {$/;"	s
hint_tpcc_payment_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_payment_traits {$/;"	s
hint_tpcc_stock_level_read_only_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_stock_level_read_only_traits : public hint_read_only_traits {};$/;"	s
hint_tpcc_stock_level_traits	benchmarks/ndb_wrapper_impl.h	/^struct hint_tpcc_stock_level_traits {$/;"	s
hist	scopedperf.hh	/^    struct buckets hist[perfsum_tmpl<Enabler, Counters...>::ps_nctr];$/;"	m	struct:scopedperf::perfsum_hist_tmpl::stats	typeref:struct:scopedperf::perfsum_hist_tmpl::stats::buckets
hist_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    hist_dts[max_hist_len];$/;"	m	struct:TPCE::TCustomerPositionFrame2Output
hist_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    hist_dts[max_hist_len];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
hist_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               hist_len;$/;"	m	struct:TPCE::TCustomerPositionFrame2Output
hist_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               hist_len;$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
hiwater_mark	dbcore/sm-oid-alloc-impl.h	/^        OID hiwater_mark;$/;"	m	struct:sm_allocator::header_data
holding_history_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              holding_history_id;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
holding_history_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        holding_history_id_ind;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
holding_history_trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              holding_history_trade_id;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
holding_history_trade_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        holding_history_trade_id_ind;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
home_warehouse_id	benchmarks/tpcc.cc	/^  const uint home_warehouse_id;$/;"	m	class:tpcc_worker	file:
host_endian_trfm	util.h	/^struct host_endian_trfm {$/;"	s	namespace:util
host_endian_trfm	util.h	/^struct host_endian_trfm<int16_t> {$/;"	s	namespace:util
host_endian_trfm	util.h	/^struct host_endian_trfm<int32_t> {$/;"	s	namespace:util
host_endian_trfm	util.h	/^struct host_endian_trfm<int64_t> {$/;"	s	namespace:util
host_endian_trfm	util.h	/^struct host_endian_trfm<uint16_t> {$/;"	s	namespace:util
host_endian_trfm	util.h	/^struct host_endian_trfm<uint32_t> {$/;"	s	namespace:util
host_endian_trfm	util.h	/^struct host_endian_trfm<uint64_t> {$/;"	s	namespace:util
host_to_net_order	masstree/compiler.hh	/^inline char host_to_net_order(char x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline double host_to_net_order(double x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline double host_to_net_order(float x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline int host_to_net_order(int x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline int64_t host_to_net_order(int64_t x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline long host_to_net_order(long x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline long long host_to_net_order(long long x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline short host_to_net_order(short x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline signed char host_to_net_order(signed char x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline uint64_t host_to_net_order(uint64_t x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline unsigned char host_to_net_order(unsigned char x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline unsigned host_to_net_order(unsigned x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline unsigned long host_to_net_order(unsigned long x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline unsigned long long host_to_net_order(unsigned long long x) {$/;"	f
host_to_net_order	masstree/compiler.hh	/^inline unsigned short host_to_net_order(unsigned short x) {$/;"	f
hour	benchmarks/egen/DateTime.h	/^        UINT16   hour;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
hs_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               hs_qty;$/;"	m	struct:TPCE::TTradeResultFrame2Input
hs_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   hs_qty;$/;"	m	struct:TPCE::TTradeResultFrame1Output
hset	dbcore/test-sc-hash.cpp	/^    sc_hash_set<256, obj, hasher, void, 2,4,true,true> hset;$/;"	m	struct:hinstance	file:
htonq	masstree/compiler.hh	/^inline uint64_t htonq(uint64_t val) {$/;"	f
i	dbcore/sm-defs.h	/^        size_t i;$/;"	m	struct:_enumerate_helper::iterator
i	dbcore/sm-oid-alloc-impl.h	/^        size_t i;$/;"	m	struct:sparse_bitset::iterator
i	masstree/clp.h	/^	int i;$/;"	m	union:Clp_Parser::__anon9
i	masstree/json.hh	/^        Json_rep_item<int64_t> i;$/;"	m	union:lcdf::Json::rep_type
i64	masstree/clp.h	/^	int64_t i64;$/;"	m	union:Clp_Parser::__anon9
iAbortTrade	benchmarks/egen/MiscConsts.h	/^const int       iAbortTrade = 101;$/;"	m	namespace:TPCE
iAbortedTradeModFactor	benchmarks/egen/MiscConsts.h	/^const int       iAbortedTradeModFactor = 51;$/;"	m	namespace:TPCE
iAccountPermissionIDRange	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const TIdent    iAccountPermissionIDRange = INT64_CONST(4024) * 1024 * 1024 - iDefaultStartFromCustomer;$/;"	m	namespace:TPCE
iActiveCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iActiveCustomerCount;$/;"	m	struct:TPCE::TDriverGlobalSettings
iActiveCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iActiveCustomerCount;$/;"	m	struct:TPCE::TLoaderSettings
iActiveCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    bool    iActiveCustomerCount;$/;"	m	struct:TPCE::TDriverGlobalSettingsState
iActiveCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    bool    iActiveCustomerCount;$/;"	m	struct:TPCE::TLoaderSettingsState
iApartmentNumberMax	benchmarks/egen/AddressTable.cpp	/^const int iApartmentNumberMax = 1000;$/;"	v
iApartmentNumberMin	benchmarks/egen/AddressTable.cpp	/^const int iApartmentNumberMin = 1;$/;"	v
iBaseCompanyCompetitorCount	benchmarks/egen/InputFlatFilesDeclarations.h	/^const int   iBaseCompanyCompetitorCount = 3 * iBaseCompanyCount;    \/\/ number of base company competitor rows$/;"	m	namespace:TPCE
iBaseCompanyCount	benchmarks/egen/InputFlatFilesDeclarations.h	/^const int   iBaseCompanyCount           = 5000;                     \/\/ number of base companies in the flat file$/;"	m	namespace:TPCE
iBrokerInitialTradesYTDMax	benchmarks/egen/Brokers.h	/^const int       iBrokerInitialTradesYTDMax = 100000;$/;"	m	namespace:TPCE
iBrokerInitialTradesYTDMin	benchmarks/egen/Brokers.h	/^const int       iBrokerInitialTradesYTDMin = 10000;$/;"	m	namespace:TPCE
iBrokerNameIDShift	benchmarks/egen/Brokers.h	/^const TIdent    iBrokerNameIDShift = 1000*1000; \/\/starting ID to generate names from for brokers$/;"	m	namespace:TPCE
iBrokersDiv	benchmarks/egen/MiscConsts.h	/^const TIdent        iBrokersDiv = 100;  \/\/ by what number to divide the customer count to get the broker count$/;"	m	namespace:TPCE
iCEOMult	benchmarks/egen/CompanyTable.h	/^const int iCEOMult=1000;    \/\/for generating CEO name$/;"	m	namespace:TPCE
iCanadaCtryCode	benchmarks/egen/AddressTable.cpp	/^const UINT iCanadaCtryCode = 2;  \/\/must be the same as the code in country tax rates file$/;"	v
iConfiguredCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iConfiguredCustomerCount;$/;"	m	struct:TPCE::TDriverGlobalSettings
iConfiguredCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iConfiguredCustomerCount;$/;"	m	struct:TPCE::TLoaderSettings
iConfiguredCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    bool    iConfiguredCustomerCount;$/;"	m	struct:TPCE::TDriverGlobalSettingsState
iConfiguredCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    bool    iConfiguredCustomerCount;$/;"	m	struct:TPCE::TLoaderSettingsState
iCurrentBrokerId	benchmarks/egen/TradeGen.h	/^    TIdent                          iCurrentBrokerId;$/;"	m	struct:TPCE::TAdditionalTradeInfo
iCustomer	benchmarks/egen/TradeGen.h	/^    TIdent          iCustomer;  \/\/ customer executing this trade$/;"	m	struct:TPCE::TTradeInfo
iCustomerAccount	benchmarks/egen/TradeGen.h	/^    TIdent          iCustomerAccount; \/\/ customer account in which the trade executes$/;"	m	struct:TPCE::TTradeInfo
iCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iCustomerCount;$/;"	m	struct:TPCE::TLoaderSettings
iCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    bool    iCustomerCount;$/;"	m	struct:TPCE::TLoaderSettingsState
iCustomerCount	benchmarks/egen/EGenLoader.cpp	/^TIdent              iCustomerCount = iDefaultCustomerCount;         \/\/ # of customers for this instance$/;"	v
iCustomerTier	benchmarks/egen/TradeGen.h	/^    eCustomerTier   iCustomerTier; \/\/ customer tier for the customer executing this trade$/;"	m	struct:TPCE::TTradeInfo
iDailyMarketBaseDay	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseDay     = 3;$/;"	m	namespace:TPCE
iDailyMarketBaseHour	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseHour    = 0;$/;"	m	namespace:TPCE
iDailyMarketBaseMinute	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseMinute  = 0;$/;"	m	namespace:TPCE
iDailyMarketBaseMonth	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseMonth   = 1;$/;"	m	namespace:TPCE
iDailyMarketBaseMsec	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseMsec    = 0;$/;"	m	namespace:TPCE
iDailyMarketBaseSecond	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseSecond  = 0;$/;"	m	namespace:TPCE
iDailyMarketBaseYear	benchmarks/egen/MiscConsts.h	/^const int       iDailyMarketBaseYear    = 2000;$/;"	m	namespace:TPCE
iDailyMarketTotalRows	benchmarks/egen/DailyMarketTable.h	/^const int iDailyMarketTotalRows = iDailyMarketYears * iTradeDaysInYear;$/;"	m	namespace:TPCE
iDailyMarketVolumeMax	benchmarks/egen/DailyMarketTable.h	/^const INT64     iDailyMarketVolumeMax = 10000;$/;"	m	namespace:TPCE
iDailyMarketVolumeMin	benchmarks/egen/DailyMarketTable.h	/^const INT64     iDailyMarketVolumeMin = 1000;$/;"	m	namespace:TPCE
iDailyMarketYears	benchmarks/egen/DailyMarketTable.h	/^const int iDailyMarketYears = 5;    \/\/number of years of history in DAILY_MARKET$/;"	m	namespace:TPCE
iDataMaintenanceTableCount	benchmarks/egen/DM.cpp	/^const INT32     iDataMaintenanceTableCount = 12;$/;"	v
iDaysOfInitialTrades	benchmarks/egen/DriverParamSettings.h	/^    INT32   iDaysOfInitialTrades;$/;"	m	struct:TPCE::TDriverGlobalSettings
iDaysOfInitialTrades	benchmarks/egen/DriverParamSettings.h	/^    INT32   iDaysOfInitialTrades;$/;"	m	struct:TPCE::TLoaderSettings
iDaysOfInitialTrades	benchmarks/egen/DriverParamSettings.h	/^    bool    iDaysOfInitialTrades;$/;"	m	struct:TPCE::TDriverGlobalSettingsState
iDaysOfInitialTrades	benchmarks/egen/DriverParamSettings.h	/^    bool    iDaysOfInitialTrades;$/;"	m	struct:TPCE::TLoaderSettingsState
iDaysOfInitialTrades	benchmarks/egen/EGenLoader.cpp	/^UINT                iDaysOfInitialTrades = 300;$/;"	v
iDaysPerWeek	benchmarks/egen/SecurityTable.h	/^const int   iDaysPerWeek = 7;$/;"	m	namespace:TPCE
iDefaultCustomerCount	benchmarks/egen/MiscConsts.h	/^const TIdent        iDefaultCustomerCount = 5000;$/;"	m	namespace:TPCE
iDefaultLoadUnitSize	benchmarks/egen/MiscConsts.h	/^const TIdent        iDefaultLoadUnitSize = 1000;$/;"	m	namespace:TPCE
iDefaultStartFromCustomer	benchmarks/egen/MiscConsts.h	/^static const TIdent iDefaultStartFromCustomer = 1;$/;"	m	namespace:TPCE
iDivisionTaxKey	benchmarks/egen/InputFlatFilesDeclarations.h	/^    UINT    iDivisionTaxKey;$/;"	m	struct:TPCE::TZipCodeInputRow
iEGenBetaLevel	benchmarks/egen/EGenVersion.cpp	/^static INT32    iEGenBetaLevel      = 0;    \/\/ beta version (for maintenance only)$/;"	m	namespace:TPCE	file:
iEGenMajorVersion	benchmarks/egen/EGenVersion.cpp	/^static INT32    iEGenMajorVersion   = 1;    \/\/ major revision number$/;"	m	namespace:TPCE	file:
iEGenMinorVersion	benchmarks/egen/EGenVersion.cpp	/^static INT32    iEGenMinorVersion   = 11;   \/\/ minor revision number$/;"	m	namespace:TPCE	file:
iEGenRevisionNumber	benchmarks/egen/EGenVersion.cpp	/^static INT32    iEGenRevisionNumber = 0;    \/\/ third-tier revision number$/;"	m	namespace:TPCE	file:
iFinQtrPerYear	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 iFinQtrPerYear = 4;$/;"	m	namespace:TPCE
iFinYears	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 iFinYears = 5;$/;"	m	namespace:TPCE
iFinancialOutBasicMax	benchmarks/egen/FinancialTable.h	/^const INT64 iFinancialOutBasicMax = 9500000000;$/;"	m	namespace:TPCE
iFinancialOutBasicMin	benchmarks/egen/FinancialTable.h	/^const INT64 iFinancialOutBasicMin = 400000;$/;"	m	namespace:TPCE
iFinsPerCompany	benchmarks/egen/FinancialTable.h	/^const int iFinsPerCompany = iYearsForFins * iQuartersInYear;    \/\/5 years of 4 quaters each year$/;"	m	namespace:TPCE
iLoadUnitSize	benchmarks/egen/EGenLoader.cpp	/^UINT                iLoadUnitSize = iDefaultLoadUnitSize;           \/\/ # of customers in one load unit$/;"	v
iMaxAccountsPerCust	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iMaxAccountsPerCust = 10;   \/\/ must be the biggest number in iMaxAccountsPerCustRange array$/;"	m	namespace:TPCE
iMaxAccountsPerCustRange	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iMaxAccountsPerCustRange[3] = {4, 8, 10};$/;"	m	namespace:TPCE
iMaxCAPerms	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iMaxCAPerms=3;  \/\/maximum # of customers having permissions to the same account$/;"	m	namespace:TPCE
iMaxDBName	benchmarks/egen/MiscConsts.h	/^const int       iMaxDBName = 64;$/;"	m	namespace:TPCE
iMaxDailyHistory	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 iMaxDailyHistory = 10;$/;"	m	namespace:TPCE
iMaxDivOrCtryName	benchmarks/egen/CustomerTaxratesTable.h	/^const int iMaxDivOrCtryName = 6;$/;"	m	namespace:TPCE
iMaxHoldingHistoryRowsPerTrade	benchmarks/egen/TradeGen.h	/^const int   iMaxHoldingHistoryRowsPerTrade = 800 \/ 100;$/;"	m	namespace:TPCE
iMaxHostname	benchmarks/egen/MiscConsts.h	/^const int       iMaxHostname = 64;$/;"	m	namespace:TPCE
iMaxItemsInWL	benchmarks/egen/WatchListsAndItemsTable.h	/^const UINT iMaxItemsInWL = 150;$/;"	m	namespace:TPCE
iMaxNews	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 iMaxNews = 10;$/;"	m	namespace:TPCE
iMaxPath	benchmarks/egen/MiscConsts.h	/^const int       iMaxPath = 512;$/;"	m	namespace:TPCE
iMaxSecuritiesPerAccount	benchmarks/egen/HoldingsAndTradesTable.h	/^const int iMaxSecuritiesPerAccount = 18;    \/\/ maximum number of securities in a customer account$/;"	m	namespace:TPCE
iMaxSecuritiesPerAccountRange	benchmarks/egen/HoldingsAndTradesTable.h	/^const int iMaxSecuritiesPerAccountRange[3][10] =$/;"	m	namespace:TPCE
iMinAccountsPerCustRange	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iMinAccountsPerCustRange[3] = {1, 2, 5};$/;"	m	namespace:TPCE
iMinItemsInWL	benchmarks/egen/WatchListsAndItemsTable.h	/^const UINT iMinItemsInWL = 50;$/;"	m	namespace:TPCE
iMinSecIdx	benchmarks/egen/WatchListsAndItemsTable.h	/^const UINT iMinSecIdx = 0;   \/\/this should always be 0$/;"	m	namespace:TPCE
iMinSecuritiesPerAccountRange	benchmarks/egen/HoldingsAndTradesTable.h	/^const int iMinSecuritiesPerAccountRange[3][10] =$/;"	m	namespace:TPCE
iMyCustomerCount	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iMyCustomerCount;$/;"	m	struct:TPCE::TDriverCEPartitionSettings
iMyStartingCustomerId	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iMyStartingCustomerId;$/;"	m	struct:TPCE::TDriverCEPartitionSettings
iNewsItemMaxDaysAgo	benchmarks/egen/NewsItemAndXRefTable.h	/^const int   iNewsItemMaxDaysAgo = 50;   \/\/ how many days ago can a news item be dated$/;"	m	namespace:TPCE
iNewsItemsPerCompany	benchmarks/egen/NewsItemAndXRefTable.h	/^const int   iNewsItemsPerCompany = 2;$/;"	m	namespace:TPCE
iNumEMAIL_DOMAINs	benchmarks/egen/CustomerTable.h	/^const int       iNumEMAIL_DOMAINs = 6;$/;"	m	namespace:TPCE
iOneLoadUnitCompanyCompetitorCount	benchmarks/egen/InputFlatFilesDeclarations.h	/^const int   iOneLoadUnitCompanyCompetitorCount  = 3 * iOneLoadUnitCompanyCount;$/;"	m	namespace:TPCE
iOneLoadUnitCompanyCount	benchmarks/egen/InputFlatFilesDeclarations.h	/^const int   iOneLoadUnitCompanyCount    = 500;$/;"	m	namespace:TPCE
iOneLoadUnitSecurityCount	benchmarks/egen/InputFlatFilesDeclarations.h	/^const int   iOneLoadUnitSecurityCount   = 685;$/;"	m	namespace:TPCE
iPartitionPercent	benchmarks/egen/DriverParamSettings.h	/^    INT32   iPartitionPercent;$/;"	m	struct:TPCE::TDriverCEPartitionSettings
iPartitionPercent	benchmarks/egen/DriverParamSettings.h	/^    bool    iPartitionPercent;$/;"	m	struct:TPCE::TDriverCEPartitionSettingsState
iPctCustomersWithAptAD_LINE_2	benchmarks/egen/AddressTable.cpp	/^const int iPctCustomersWithAptAD_LINE_2 = 75;$/;"	v
iPctCustomersWithNullAD_LINE_2	benchmarks/egen/AddressTable.cpp	/^const int iPctCustomersWithNullAD_LINE_2 = 60;$/;"	v
iPercentAccountAdditionalPermissions_0	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountAdditionalPermissions_0 = 60;$/;"	m	namespace:TPCE
iPercentAccountAdditionalPermissions_1	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountAdditionalPermissions_1 = 38;$/;"	m	namespace:TPCE
iPercentAccountAdditionalPermissions_2	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountAdditionalPermissions_2 = 2;$/;"	m	namespace:TPCE
iPercentAccountTaxStatusNonTaxable	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountTaxStatusNonTaxable = 20;$/;"	m	namespace:TPCE
iPercentAccountTaxStatusTaxableAndDontWithhold	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountTaxStatusTaxableAndDontWithhold = 30;$/;"	m	namespace:TPCE
iPercentAccountTaxStatusTaxableAndWithhold	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountTaxStatusTaxableAndWithhold = 50;$/;"	m	namespace:TPCE
iPercentAccountsWithPositiveInitialBalance	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT      iPercentAccountsWithPositiveInitialBalance = 80;$/;"	m	namespace:TPCE
iPercentBetween19And24	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween19And24  = 16;$/;"	v
iPercentBetween25And34	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween25And34  = 17;$/;"	v
iPercentBetween35And44	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween35And44  = 19;$/;"	v
iPercentBetween45And54	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween45And54  = 16;$/;"	v
iPercentBetween55And64	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween55And64  = 11;$/;"	v
iPercentBetween65And74	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween65And74  = 8;$/;"	v
iPercentBetween75And84	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentBetween75And84  = 7;$/;"	v
iPercentBuysOnMargin	benchmarks/egen/HoldingsAndTradesTable.h	/^const int iPercentBuysOnMargin = 16;$/;"	m	namespace:TPCE
iPercentCompaniesWithNonZeroDividend	benchmarks/egen/SecurityTable.h	/^const int   iPercentCompaniesWithNonZeroDividend = 60;$/;"	m	namespace:TPCE
iPercentCustomersInC_TIER_1	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentCustomersInC_TIER_1 = 20;$/;"	v
iPercentCustomersInC_TIER_2	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentCustomersInC_TIER_2 = 60;$/;"	v
iPercentCustomersInC_TIER_3	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentCustomersInC_TIER_3 = 100 - iPercentCustomersInC_TIER_1 - iPercentCustomersInC_TIER_2;$/;"	v
iPercentGenderIsMale	benchmarks/egen/Person.cpp	/^const int   iPercentGenderIsMale = 49;$/;"	v
iPercentOver85	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentOver85          = 1;$/;"	v
iPercentTradeIsLIFO	benchmarks/egen/HoldingsAndTradesTable.h	/^const int   iPercentTradeIsLIFO = 35;$/;"	m	namespace:TPCE
iPercentUnder18	benchmarks/egen/CustomerTable.cpp	/^const int   iPercentUnder18         = 5;$/;"	v
iPercentWatchList	benchmarks/egen/WatchListsAndItemsTable.h	/^const UINT iPercentWatchList = 100;$/;"	m	namespace:TPCE
iQuartersInYear	benchmarks/egen/FinancialTable.h	/^const int iQuartersInYear = 4;$/;"	m	namespace:TPCE
iRNGSkipOneRowAddress	benchmarks/egen/AddressTable.cpp	/^const int iRNGSkipOneRowAddress = 10;   \/\/ real number in 3.5: 7$/;"	v
iRNGSkipOneRowCompany	benchmarks/egen/CompanyTable.h	/^const int iRNGSkipOneRowCompany = 2; \/\/ one for SP rate and one for CO_OPEN_DATE$/;"	m	namespace:TPCE
iRNGSkipOneRowCustomer	benchmarks/egen/CustomerTable.cpp	/^const int iRNGSkipOneRowCustomer = 35;  \/\/ real max count in v3.5: 29$/;"	v
iRNGSkipOneRowCustomerAccount	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const UINT iRNGSkipOneRowCustomerAccount = 10;   \/\/ real max count in v3.5: 7$/;"	m	namespace:TPCE
iRNGSkipOneRowCustomerTaxrate	benchmarks/egen/CustomerTaxratesTable.h	/^const int iRNGSkipOneRowCustomerTaxrate = 5;    \/\/ real max count in v3.5: 2$/;"	m	namespace:TPCE
iRNGSkipOneRowDailyMarket	benchmarks/egen/DailyMarketTable.h	/^const int       iRNGSkipOneRowDailyMarket = 2;    \/\/ number of RNG calls for one row$/;"	m	namespace:TPCE
iRNGSkipOneRowFinancial	benchmarks/egen/FinancialTable.h	/^const int iRNGSkipOneRowFinancial = 6 + iFinsPerCompany * 6;$/;"	m	namespace:TPCE
iRNGSkipOneRowNews	benchmarks/egen/NewsItemAndXRefTable.h	/^const int   iRNGSkipOneRowNews = 4 + cNI_ITEM_len; \/\/ number of RNG calls for one row$/;"	m	namespace:TPCE
iRNGSkipOneRowSecurity	benchmarks/egen/SecurityTable.h	/^const int   iRNGSkipOneRowSecurity = 11;    \/\/ number of RNG calls for one row$/;"	m	namespace:TPCE
iRNGSkipOneRowWatchListAndWatchItem	benchmarks/egen/WatchListsAndItemsTable.h	/^const UINT iRNGSkipOneRowWatchListAndWatchItem = 15; \/\/ real max count in v3.5: 13$/;"	m	namespace:TPCE
iRNGSkipOneTrade	benchmarks/egen/HoldingsAndTradesTable.h	/^const int iRNGSkipOneTrade = 11;    \/\/ average count for v3.5: 6.5$/;"	m	namespace:TPCE
iRNGSkipOneTrade	benchmarks/egen/TradeGen.cpp	/^const int iRNGSkipOneTrade = 11;    \/\/ average count for v3.5: 6.5$/;"	v
iS_NUM_OUTMax	benchmarks/egen/SecurityTable.h	/^const INT64     iS_NUM_OUTMax = INT64_CONST(9500000000);$/;"	m	namespace:TPCE
iS_NUM_OUTMin	benchmarks/egen/SecurityTable.h	/^const INT64     iS_NUM_OUTMin = INT64_CONST(4000000);$/;"	m	namespace:TPCE
iScaleFactor	benchmarks/egen/DriverParamSettings.h	/^    INT32   iScaleFactor;$/;"	m	struct:TPCE::TDriverGlobalSettings
iScaleFactor	benchmarks/egen/DriverParamSettings.h	/^    INT32   iScaleFactor;$/;"	m	struct:TPCE::TLoaderSettings
iScaleFactor	benchmarks/egen/DriverParamSettings.h	/^    bool    iScaleFactor;$/;"	m	struct:TPCE::TDriverGlobalSettingsState
iScaleFactor	benchmarks/egen/DriverParamSettings.h	/^    bool    iScaleFactor;$/;"	m	struct:TPCE::TLoaderSettingsState
iScaleFactor	benchmarks/egen/EGenLoader.cpp	/^UINT                iScaleFactor = 500;                             \/\/ # of customers for 1 tpsE$/;"	v
iSecPricePeriod	benchmarks/egen/MEESecurity.cpp	/^const int iSecPricePeriod = 900;  \/\/ 15 minutes$/;"	v
iSecPricePeriod	benchmarks/egen/TradeGen.cpp	/^const int   iSecPricePeriod = 15 * SecondsPerMinute;    \/\/ set to 15 minutes, in seconds$/;"	v
iSecurityCounts	benchmarks/egen/ExchangeTable.h	/^const int iSecurityCounts[4][11] = { { 0, 153, 307, 491, 688, 859, 1028, 1203, 1360, 1532, 1704 },$/;"	m	namespace:TPCE
iSecurityDetailMaxRows	benchmarks/egen/MiscConsts.h	/^const int       iSecurityDetailMaxRows = 20;    \/\/ max_fin_len$/;"	m	namespace:TPCE
iSecurityDetailMinRows	benchmarks/egen/MiscConsts.h	/^const int       iSecurityDetailMinRows = 5;$/;"	m	namespace:TPCE
iStartingBrokerID	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^const TIdent    iStartingBrokerID = 1;$/;"	m	namespace:TPCE
iStartingCustomer	benchmarks/egen/DriverParamSettings.h	/^    TIdent  iStartingCustomer;$/;"	m	struct:TPCE::TLoaderSettings
iStartingCustomer	benchmarks/egen/DriverParamSettings.h	/^    bool    iStartingCustomer;$/;"	m	struct:TPCE::TLoaderSettingsState
iStreetNumberMax	benchmarks/egen/AddressTable.cpp	/^const int iStreetNumberMax = 25000;$/;"	v
iStreetNumberMin	benchmarks/egen/AddressTable.cpp	/^const int iStreetNumberMin = 100;$/;"	v
iSuiteNumberMax	benchmarks/egen/AddressTable.cpp	/^const int iSuiteNumberMax = 500;$/;"	v
iSuiteNumberMin	benchmarks/egen/AddressTable.cpp	/^const int iSuiteNumberMin = 1;$/;"	v
iSymbolIndex	benchmarks/egen/TradeGen.h	/^    TIdent          iSymbolIndex;   \/\/ stock symbol index in the input flat file - stored for performance$/;"	m	struct:TPCE::THoldingInfo
iSymbolIndex	benchmarks/egen/TradeGen.h	/^    TIdent          iSymbolIndex;   \/\/ stock symbol index in the input flat file$/;"	m	struct:TPCE::TTradeInfo
iSymbolIndexInAccount	benchmarks/egen/TradeGen.h	/^    UINT            iSymbolIndexInAccount;  \/\/ stock symbol index in the account basket$/;"	m	struct:TPCE::TTradeInfo
iTIdentShift	benchmarks/egen/MiscConsts.h	/^const TIdent iTIdentShift = INT64_CONST(4300000000);       \/\/ 4.3 billion$/;"	m	namespace:TPCE
iTTradeShift	benchmarks/egen/MiscConsts.h	/^const TTrade iTTradeShift = INT64_CONST(200000000000000);  \/\/ 200 trillion (2 * 10^14)$/;"	m	namespace:TPCE
iTaxRatesPerCust	benchmarks/egen/CustomerTaxratesTable.h	/^const UINT iTaxRatesPerCust = 2; \/\/number of tax rates per customer$/;"	m	namespace:TPCE
iTotalCustomerCount	benchmarks/egen/EGenLoader.cpp	/^TIdent              iTotalCustomerCount = iDefaultCustomerCount;    \/\/ total number of customers in the database$/;"	v
iTradeDaysInYear	benchmarks/egen/DailyMarketTable.h	/^const int iTradeDaysInYear = 261;   \/\/the number of trading days in a year (for DAILY_MARKET)$/;"	m	namespace:TPCE
iTradeId	benchmarks/egen/TradeGen.h	/^    TTrade          iTradeId;$/;"	m	struct:TPCE::THoldingInfo
iTradeId	benchmarks/egen/TradeGen.h	/^    TTrade          iTradeId;$/;"	m	struct:TPCE::TTradeInfo
iTradeQty	benchmarks/egen/TradeGen.h	/^    int             iTradeQty;  \/\/ number of shares in the trade$/;"	m	struct:TPCE::TTradeInfo
iTradeQty	benchmarks/egen/TradeGen.h	/^    int             iTradeQty;$/;"	m	struct:TPCE::THoldingInfo
iUSACtryCode	benchmarks/egen/AddressTable.cpp	/^const UINT iUSACtryCode = 1;     \/\/must be the same as the code in country tax rates file$/;"	v
iWatchListIdOffset	benchmarks/egen/WatchListsAndItemsTable.h	/^static const UINT iWatchListIdOffset = 97;$/;"	m	namespace:TPCE
iWatchListIdPrime	benchmarks/egen/WatchListsAndItemsTable.h	/^static const UINT iWatchListIdPrime = 631;$/;"	m	namespace:TPCE
iWeeksPerYear	benchmarks/egen/SecurityTable.h	/^const int   iWeeksPerYear = 52;$/;"	m	namespace:TPCE
iYearsForFins	benchmarks/egen/FinancialTable.h	/^const int iYearsForFins = 5;$/;"	m	namespace:TPCE
i_	masstree/json.hh	/^    int i_;$/;"	m	class:lcdf::Json::const_array_iterator
i_	masstree/json.hh	/^    int i_;$/;"	m	class:lcdf::Json::const_iterator
i_	masstree/json.hh	/^    int i_;$/;"	m	class:lcdf::Json::const_object_iterator
iceil	masstree/compiler.hh	/^inline T iceil(T x, U y) {$/;"	f
iceil	util.h	/^iceil(T x, U y)$/;"	f	namespace:util
iceil_log2	masstree/compiler.hh	/^inline T iceil_log2(T x) {$/;"	f
id	benchmarks/masstree/kvtest.cc	/^  unsigned int id;$/;"	m	class:kvtest_worker	file:
id	benchmarks/queue.cc	/^  uint64_t id;$/;"	m	class:queue_worker	file:
id	masstree/mtclient.cc	/^    int id() const {$/;"	f	struct:kvtest_client
id	masstree/mtd.cc	/^    int id() const {$/;"	f	struct:kvtest_client
id	masstree/mttest.cc	/^    int id() const {$/;"	f	struct:kvtest_client
id	third-party/lz4/bench.c	/^    U32   id;$/;"	m	struct:chunkParameters	file:
id	third-party/lz4/fullbench.c	/^    U32   id;$/;"	m	struct:chunkParameters	file:
identity_kpermuter	masstree/kpermuter.hh	/^    identity_kpermuter(int size)$/;"	f	class:identity_kpermuter
identity_kpermuter	masstree/kpermuter.hh	/^class identity_kpermuter {$/;"	c
ifloor_log2	masstree/compiler.hh	/^inline T ifloor_log2(T x) {$/;"	f
ignore_key	benchmarks/bench.h	/^  bool ignore_key;$/;"	m	class:static_limit_callback
ikey	masstree/masstree_key.hh	/^    ikey_type ikey() const {$/;"	f	class:Masstree::key
ikey	masstree/masstree_struct.hh	/^    ikey_type ikey(int p) const {$/;"	f	class:Masstree::internode
ikey	masstree/masstree_struct.hh	/^    ikey_type ikey(int p) const {$/;"	f	class:Masstree::leaf
ikey0_	masstree/masstree_key.hh	/^    ikey_type ikey0_;$/;"	m	class:Masstree::key
ikey0_	masstree/masstree_struct.hh	/^    ikey_type ikey0_[width];$/;"	m	class:Masstree::internode
ikey0_	masstree/masstree_struct.hh	/^    ikey_type ikey0_[width];$/;"	m	class:Masstree::leaf
ikey_after_insert	masstree/masstree_split.hh	/^leaf<P>::ikey_after_insert(const permuter_type& perm, int i,$/;"	f	class:Masstree::leaf
ikey_bound	masstree/masstree_struct.hh	/^    ikey_type ikey_bound() const {$/;"	f	class:Masstree::leaf
ikey_size	masstree/masstree_key.hh	/^    static constexpr int ikey_size = sizeof(ikey_type);$/;"	m	class:Masstree::key
ikey_size	masstree/masstree_key.hh	/^template <typename I> constexpr int key<I>::ikey_size;$/;"	m	class:Masstree::key
ikey_type	masstree/masstree.hh	/^    typedef uint64_t ikey_type;$/;"	t	struct:Masstree::nodeparams
ikey_type	masstree/masstree_key.hh	/^    typedef I ikey_type;$/;"	t	class:Masstree::key
ikey_type	masstree/masstree_scan.hh	/^    typedef typename P::ikey_type ikey_type;$/;"	t	class:Masstree::scanstackelt
ikey_type	masstree/masstree_struct.hh	/^    typedef typename P::ikey_type ikey_type;$/;"	t	class:Masstree::internode
ikey_type	masstree/masstree_struct.hh	/^    typedef typename P::ikey_type ikey_type;$/;"	t	class:Masstree::leaf
ikey_type	masstree/masstree_struct.hh	/^    typedef typename P::ikey_type ikey_type;$/;"	t	class:Masstree::node_base
ikey_type	masstree/masstree_tcursor.hh	/^    typedef typename P::ikey_type ikey_type;$/;"	t	class:Masstree::tcursor
ikeylen	masstree/masstree_key.hh	/^    int ikeylen() const {$/;"	f	class:Masstree::key
ikeylen	masstree/masstree_struct.hh	/^    int ikeylen(int p) const {$/;"	f	class:Masstree::leaf
iksuf_	masstree/masstree_struct.hh	/^    stringbag<uint16_t> iksuf_[0];$/;"	m	class:Masstree::leaf
illegal_argument	dbcore/sm-exceptions.cpp	/^illegal_argument::illegal_argument(char const volatile *m, ...)$/;"	f	class:illegal_argument
illegal_argument	dbcore/sm-exceptions.h	/^    illegal_argument(char const *m="Illegal argument") : msg(m), free_msg(0) { }$/;"	f	struct:illegal_argument
illegal_argument	dbcore/sm-exceptions.h	/^struct illegal_argument {$/;"	s
ilong	masstree/clp.c	/^    unsigned ilong : 1;$/;"	m	struct:__anon43	file:
ilongoff	masstree/clp.c	/^    unsigned char ilongoff;$/;"	m	struct:__anon43	file:
imandatory	masstree/clp.c	/^    unsigned imandatory : 1;$/;"	m	struct:__anon43	file:
impl	ticker.h	/^    impl() const$/;"	f	class:ticker::guard
impl_	ticker.h	/^    ticker *impl_;$/;"	m	class:ticker::guard
imstring	imstring.h	/^typedef base_imstring<false> imstring;$/;"	t
in_flight	dbcore/test-rcu-slist.cpp	/^std::set<pthread_t> everyone, in_flight;$/;"	v
in_range	masstree/json.cc	/^static inline bool in_range(int x, unsigned low, unsigned high) {$/;"	f	namespace:lcdf
in_range	masstree/json.cc	/^static inline bool in_range(uint8_t x, unsigned low, unsigned high) {$/;"	f	namespace:lcdf
in_range	masstree/msgpack.hh	/^inline bool in_range(uint8_t x, unsigned low, unsigned n) {$/;"	f	namespace:msgpack::format
in_wrapped_range	masstree/msgpack.hh	/^inline bool in_wrapped_range(uint8_t x, unsigned low, unsigned n) {$/;"	f	namespace:msgpack::format
inactive	masstree/mtd.cc	/^inactive(void)$/;"	f
inbuf_	masstree/mtclient.hh	/^    char* inbuf_;$/;"	m	class:KVConn
inbuf_	masstree/mtd.cc	/^    char* inbuf_;$/;"	m	struct:conn	file:
inbuflen_	masstree/mtclient.hh	/^    int inbuflen_;$/;"	m	class:KVConn
inbuflen_	masstree/mtd.cc	/^    int inbuflen_;$/;"	m	struct:conn	file:
inbufpos_	masstree/mtclient.hh	/^    int inbufpos_;$/;"	m	class:KVConn
inbufpos_	masstree/mtd.cc	/^    int inbufpos_;$/;"	m	struct:conn	file:
inbufrefill	masstree/mtclient.hh	/^    enum { inbufsz = 64 * 1024, inbufrefill = 56 * 1024 };$/;"	e	enum:KVConn::__anon15
inbufrefill	masstree/mtd.cc	/^    enum { inbufsz = 20 * 1024, inbufrefill = 16 * 1024 };$/;"	e	enum:conn::__anon56	file:
inbufsz	masstree/mtclient.hh	/^    enum { inbufsz = 64 * 1024, inbufrefill = 56 * 1024 };$/;"	e	enum:KVConn::__anon15
inbufsz	masstree/mtd.cc	/^    enum { inbufsz = 20 * 1024, inbufrefill = 16 * 1024 };$/;"	e	enum:conn::__anon56	file:
inbuftotal_	masstree/mtd.cc	/^    uint64_t inbuftotal_;$/;"	m	struct:conn	file:
inc	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::inc(int count) {$/;"	f	class:TPCE::ProgressMeter
inc	benchmarks/egen/progressmeterinterface.cpp	/^void ProgressMeterInterface::inc(int count UNUSED)$/;"	f	class:TPCE::ProgressMeterInterface
inc	counter.h	/^  inc(uint64_t i = 1)$/;"	f	class:event_counter
inc_key_slots_used	btree.h	/^    inc_key_slots_used()$/;"	f	struct:btree::node
increment	masstree/masstree_key.hh	/^    bool increment() {$/;"	f	class:Masstree::key
increment_timestamp	masstree/kvthread.hh	/^    void increment_timestamp() {$/;"	f	class:threadinfo
increment_timestamp	masstree_btree.h	/^    void increment_timestamp() {$/;"	f	class:simple_threadinfo
indent_depth	masstree/json.hh	/^    int indent_depth() const {$/;"	f	class:lcdf::Json::unparse_manipulator
indent_depth	masstree/json.hh	/^    unparse_manipulator indent_depth(int x) const {$/;"	f	class:lcdf::Json::unparse_manipulator
indent_depth	masstree/json.hh	/^inline Json::unparse_manipulator Json::indent_depth(int x) {$/;"	f	class:lcdf::Json
indent_depth_	masstree/json.hh	/^    int indent_depth_;$/;"	m	class:lcdf::Json::unparse_manipulator
index_has_stable_put_memory	benchmarks/abstract_db.h	/^  virtual bool index_has_stable_put_memory() const { return false; }$/;"	f	class:abstract_db
index_last_offset	masstree/value_string.hh	/^inline unsigned value_string::index_last_offset(index_type idx) {$/;"	f	class:value_string
index_length	masstree/value_string.hh	/^inline unsigned value_string::index_length(index_type idx) {$/;"	f	class:value_string
index_offset	masstree/value_string.hh	/^inline unsigned value_string::index_offset(index_type idx) {$/;"	f	class:value_string
index_type	masstree/value_array.hh	/^    typedef short index_type;$/;"	t	class:value_array
index_type	masstree/value_bag.hh	/^    typedef short index_type;$/;"	t	class:value_bag
index_type	masstree/value_string.hh	/^    typedef unsigned index_type;$/;"	t	class:value_string
index_type	masstree/value_versioned_array.hh	/^    typedef value_array::index_type index_type;$/;"	t	class:value_versioned_array
industryTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CIndustryTable*				industryTable;$/;"	m	class:TPCE::CGenerateAndLoad
industry_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    industry_name[cIN_NAME_len+1];$/;"	m	struct:TPCE::TMarketWatchTxnInput
ineg	masstree/clp.c	/^    unsigned ineg : 1;$/;"	m	struct:__anon43	file:
infd_	masstree/mtclient.hh	/^    int infd_;$/;"	m	class:KVConn
info	benchmarks/runner.py	/^        info = MACHINE_CONFIG[node]['logfiles']$/;"	v
info	masstree/kpermuter.hh	/^    typedef sized_kpermuter_info<(width > 3) + (width > 7) + (width > 15)> info;$/;"	m	class:kpermuter
info	masstree/log.cc	/^logreplay::info() const$/;"	f	class:logreplay
info_	masstree/stringbag.hh	/^	    info_type info_[0];$/;"	m	struct:stringbag::__anon27::__anon28
info_len	masstree/stringbag.hh	/^    static int info_len(info_type info) {$/;"	f	class:stringbag
info_pos	masstree/stringbag.hh	/^    static int info_pos(info_type info) {$/;"	f	class:stringbag
info_type	masstree/log.hh	/^    struct info_type {$/;"	s	class:logreplay
info_type	masstree/stringbag.hh	/^    typedef L info_type;$/;"	t	class:stringbag
init	dbcore/sm-trace.cpp	/^init()$/;"	f	namespace:TRACER
init	persist_test.cc	/^  init()$/;"	f	class:database_simulation
init	tuple.h	/^  init(char*p ,size_type sz)$/;"	f	struct:dbtuple
init1	dbcore/sm-oid-alloc-impl.h	/^    void init1(int16_t i) {$/;"	f	struct:sparse_bitset
init_l2	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::init_l2()$/;"	f	class:sm_allocator
init_l3	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::init_l3(uint32_t end_word)$/;"	f	class:sm_allocator
initial_ksuf_match	masstree/masstree_scan.hh	/^    bool initial_ksuf_match(int ksuf_compare, bool emit_equal) const {$/;"	f	struct:Masstree::forward_scan_helper
initial_ksuf_match	masstree/masstree_scan.hh	/^    bool initial_ksuf_match(int ksuf_compare, bool emit_equal) const {$/;"	f	struct:Masstree::reverse_scan_helper
initial_timestamp	masstree/mtd.cc	/^kvtimestamp_t initial_timestamp;$/;"	v
initial_timestamp	masstree/mttest.cc	/^kvtimestamp_t initial_timestamp;$/;"	v
initial_value	masstree/kpermuter.hh	/^    enum { initial_value = (uint64_t) 0x0123456789ABCDE0ULL,$/;"	e	enum:sized_kpermuter_info::__anon39
initial_value	masstree/kpermuter.hh	/^    enum { initial_value = 0x0120U, full_value = 0x2100U };$/;"	e	enum:sized_kpermuter_info::__anon37
initial_value	masstree/kpermuter.hh	/^    enum { initial_value = 0x01234560U, full_value = 0x65432100U };$/;"	e	enum:sized_kpermuter_info::__anon38
initialize	masstree/log.cc	/^void loginfo::initialize(const String& logfile) {$/;"	f	class:loginfo
initialize	masstree/masstree_struct.hh	/^void basic_table<P>::initialize(threadinfo& ti) {$/;"	f	class:Masstree::basic_table
initialize	masstree/perfstat.hh	/^    void initialize(int cid) {$/;"	f	struct:Perf::stat
initialize	masstree/query_masstree.hh	/^    void initialize(threadinfo& ti) {$/;"	f	class:Masstree::query_table
initialize	masstree/string.hh	/^inline void String::memo_type::initialize(uint32_t capacity, uint32_t dirty) {$/;"	f	class:lcdf::String::memo_type
initialize_pool	masstree/kvthread.cc	/^static void initialize_pool(void* pool, size_t sz, size_t unit) {$/;"	f	file:
initialized	dbcore/epoch.cpp	/^    bool initialized;$/;"	m	struct:epoch_mgr::thread_state	file:
initialized	dbcore/sm-alloc.h	/^        bool initialized;$/;"	m	struct:RA::thread_data
initialized	dbcore/xid.cpp	/^    bool initialized;$/;"	m	struct:TXN::thread_data	file:
initmain	masstree/perfstat.cc	/^stat::initmain(bool pinthreads) {$/;"	f	class:Perf::stat
inline	third-party/lz4/lz4.h	45;"	d
inline	third-party/lz4/xxhash.c	67;"	d	file:
inline_str_16	record/inline_str.h	/^  inline_str_16() : super_type() {}$/;"	f	class:inline_str_16
inline_str_16	record/inline_str.h	/^  inline_str_16(const char *s) : super_type(s) {}$/;"	f	class:inline_str_16
inline_str_16	record/inline_str.h	/^  inline_str_16(const char *s, size_t n) : super_type(s, n) {}$/;"	f	class:inline_str_16
inline_str_16	record/inline_str.h	/^  inline_str_16(const std::string &s) : super_type(s) {}$/;"	f	class:inline_str_16
inline_str_16	record/inline_str.h	/^class inline_str_16 : public inline_str_base<uint16_t, N> {$/;"	c
inline_str_8	record/inline_str.h	/^  inline_str_8() : super_type() {}$/;"	f	class:inline_str_8
inline_str_8	record/inline_str.h	/^  inline_str_8(const char *s) : super_type(s) {}$/;"	f	class:inline_str_8
inline_str_8	record/inline_str.h	/^  inline_str_8(const char *s, size_t n) : super_type(s, n) {}$/;"	f	class:inline_str_8
inline_str_8	record/inline_str.h	/^  inline_str_8(const std::string &s) : super_type(s) {}$/;"	f	class:inline_str_8
inline_str_8	record/inline_str.h	/^class inline_str_8 : public inline_str_base<uint8_t, N> {$/;"	c
inline_str_base	record/inline_str.h	/^  inline_str_base() : sz(0) {}$/;"	f	class:inline_str_base
inline_str_base	record/inline_str.h	/^  inline_str_base(const char *s)$/;"	f	class:inline_str_base
inline_str_base	record/inline_str.h	/^  inline_str_base(const char *s, size_t n)$/;"	f	class:inline_str_base
inline_str_base	record/inline_str.h	/^  inline_str_base(const inline_str_base &that)$/;"	f	class:inline_str_base
inline_str_base	record/inline_str.h	/^  inline_str_base(const std::string &s)$/;"	f	class:inline_str_base
inline_str_base	record/inline_str.h	/^class inline_str_base {$/;"	c
inline_str_fixed	record/inline_str.h	/^  inline_str_fixed()$/;"	f	class:inline_str_fixed
inline_str_fixed	record/inline_str.h	/^  inline_str_fixed(const char *s)$/;"	f	class:inline_str_fixed
inline_str_fixed	record/inline_str.h	/^  inline_str_fixed(const char *s, size_t n)$/;"	f	class:inline_str_fixed
inline_str_fixed	record/inline_str.h	/^  inline_str_fixed(const inline_str_fixed &that)$/;"	f	class:inline_str_fixed
inline_str_fixed	record/inline_str.h	/^  inline_str_fixed(const std::string &s)$/;"	f	class:inline_str_fixed
inline_str_fixed	record/inline_str.h	/^class inline_str_fixed {$/;"	c
inline_string	masstree/str.hh	/^struct inline_string : public String_base<inline_string> {$/;"	s	namespace:lcdf
inplace_update_persistent_info	persist_test.cc	/^  inplace_update_persistent_info($/;"	f	class:onecopy_logbased_simulation	file:
input	masstree/mtclient.cc	/^const char *input = NULL;$/;"	v
inputBuffer	third-party/lz4/lz4hc.c	/^    const BYTE* inputBuffer;$/;"	m	struct:__anon7	file:
inputFiles	benchmarks/egen/EGenLoader.cpp	/^CInputFiles*						inputFiles = NULL;	$/;"	v
ins0_worker	btree.cc	/^    ins0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test1_ns::ins0_worker
ins0_worker	btree.cc	/^    ins0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test3_ns::ins0_worker
ins0_worker	btree.cc	/^    ins0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test4_ns::ins0_worker
ins0_worker	btree.cc	/^  class ins0_worker : public btree_worker {$/;"	c	namespace:mp_test1_ns	file:
ins0_worker	btree.cc	/^  class ins0_worker : public btree_worker {$/;"	c	namespace:mp_test3_ns	file:
ins0_worker	btree.cc	/^  class ins0_worker : public btree_worker {$/;"	c	namespace:mp_test4_ns	file:
ins1_worker	btree.cc	/^    ins1_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test1_ns::ins1_worker
ins1_worker	btree.cc	/^  class ins1_worker : public btree_worker {$/;"	c	namespace:mp_test1_ns	file:
insert	benchmarks/abstract_ordered_index.h	/^  insert(void *txn,$/;"	f	class:abstract_ordered_index
insert	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::insert($/;"	f	class:ndb_ordered_index
insert	btree.h	/^  insert(const key_type &k, value_type v,$/;"	f	class:btree
insert	dbcore/sc-hash.h	/^    insert(U &&elem) {$/;"	f
insert	dbcore/sm-oid-alloc-impl.h	/^    int insert(uint16_t i) {$/;"	f	struct:sparse_bitset
insert	masstree/checkpoint.hh	/^void ckstate::insert(T& table, msgpack::parser& par, threadinfo& ti) {$/;"	f	class:ckstate
insert	masstree/json.hh	/^    Json::array_iterator insert(Json::array_iterator position, Json x) {$/;"	f	class:lcdf::Json_proxy_base
insert	masstree/json.hh	/^    Json::object_iterator insert(Json::object_iterator position, const Json::object_value_type &x) {$/;"	f	class:lcdf::Json_proxy_base
insert	masstree/json.hh	/^    std::pair<Json::object_iterator, bool> insert(const Json::object_value_type &x) {$/;"	f	class:lcdf::Json_proxy_base
insert	masstree/json.hh	/^    template <typename Q> Json::array_iterator insert(Json::array_iterator position, const Json_proxy_base<Q>& x) {$/;"	f	class:lcdf::Json_proxy_base
insert	masstree/json.hh	/^inline Json::array_iterator Json::insert(array_iterator position, Json x) {$/;"	f	class:lcdf::Json
insert	masstree/json.hh	/^inline Json::object_iterator Json::insert(object_iterator position, const object_value_type& x) {$/;"	f	class:lcdf::Json
insert	masstree/json.hh	/^inline std::pair<Json::object_iterator, bool> Json::insert(const object_value_type& x) {$/;"	f	class:lcdf::Json
insert	masstree/json.hh	/^template <typename P> inline Json::array_iterator Json::insert(array_iterator position, const Json_proxy_base<P>& x) {$/;"	f	class:lcdf::Json
insert	masstree_btree.h	/^inline bool mbtree<P>::insert(const key_type &k, dbtuple * v,$/;"	f	class:mbtree
insert	txn_btree.h	/^  insert(Transaction<Traits> &t, const key_type &k, const uint8_t *v, size_type sz)$/;"	f	class:txn_btree
insert	txn_btree.h	/^  insert(Transaction<Traits> &t, const key_type &k, const value_type &v)$/;"	f	class:txn_btree
insert	txn_btree.h	/^  insert(Transaction<Traits> &t, const varkey &k, const uint8_t *v, size_type sz)$/;"	f	class:txn_btree
insert	typed_txn_btree.h	/^typed_txn_btree<Transaction, Schema>::insert($/;"	f	class:typed_txn_btree
insert0	btree_impl.h	/^btree<P>::insert0(node *np,$/;"	f	class:btree
insert_from_back	masstree/kpermuter.hh	/^    int insert_from_back(int i) {$/;"	f	class:kpermuter
insert_front	scopedperf.hh	/^  void insert_front(T e) {$/;"	f	struct:scopedperf::vector
insert_if_absent	btree.h	/^  insert_if_absent(const key_type &k, value_type v,$/;"	f	class:btree
insert_if_absent	masstree_btree.h	/^inline bool mbtree<P>::insert_if_absent(const key_type &k, oid_type o, dbtuple * v,$/;"	f	class:mbtree
insert_info_t	btree.h	/^  struct insert_info_t {$/;"	s	class:btree
insert_info_t	masstree_btree.h	/^  struct insert_info_t {$/;"	s	class:mbtree
insert_marker	masstree/masstree_tcursor.hh	/^    static inline node_type* insert_marker() {$/;"	f	class:Masstree::tcursor
insert_object	txn_btree.h	/^  insert_object(Transaction<Traits> &t, const key_type &k, const T &obj)$/;"	f	class:txn_btree
insert_object	txn_btree.h	/^  insert_object(Transaction<Traits> &t, const varkey &k, const T &obj)$/;"	f	class:txn_btree
insert_parent_entry	btree.h	/^  typedef std::pair<node *, uint64_t> insert_parent_entry;$/;"	t	class:btree
insert_selected	masstree/kpermuter.hh	/^    void insert_selected(int di, int si) {$/;"	f	class:kpermuter
insert_stable_location	btree_impl.h	/^btree<P>::insert_stable_location($/;"	f	class:btree
insert_status	btree.h	/^  enum insert_status {$/;"	g	class:btree
insert_trace_record	dbcore/sm-trace.cpp	/^struct insert_trace_record {$/;"	s	namespace:TRACER	file:
insert_worker	btree.cc	/^    insert_worker(const vector<string> &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test8_ns::insert_worker
insert_worker	btree.cc	/^    insert_worker(const vector<string> &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test_long_keys_ns::insert_worker
insert_worker	btree.cc	/^    insert_worker(const vector<typename testing_concurrent_btree::key_slice> &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test6_ns::insert_worker
insert_worker	btree.cc	/^  class insert_worker : public btree_worker {$/;"	c	namespace:mp_test6_ns	file:
insert_worker	btree.cc	/^  class insert_worker : public btree_worker {$/;"	c	namespace:mp_test8_ns	file:
insert_worker	btree.cc	/^  class insert_worker : public btree_worker {$/;"	c	namespace:mp_test_long_keys_ns	file:
inserting	masstree/nodeversion.hh	/^    bool inserting() const {$/;"	f	class:basic_nodeversion
inserting	masstree/nodeversion.hh	/^    bool inserting() const {$/;"	f	class:basic_singlethreaded_nodeversion
inserting_bit	masstree/nodeversion.hh	/^	inserting_bit = (1U << 1),$/;"	e	enum:nodeversion32_parameters::__anon10
inserting_bit	masstree/nodeversion.hh	/^	inserting_bit = (1ULL << 9),$/;"	e	enum:nodeversion64_parameters::__anon11
inserting_shift	masstree/nodeversion.hh	/^	inserting_shift = 1,$/;"	e	enum:nodeversion32_parameters::__anon10
inserting_shift	masstree/nodeversion.hh	/^	inserting_shift = 9,$/;"	e	enum:nodeversion64_parameters::__anon11
inserts	btree.cc	/^    bool inserts;$/;"	m	class:mp_test_inserts_removes_ns::worker	file:
inserts	btree.cc	/^    key_set inserts;$/;"	m	struct:mp_test5_ns::summary	file:
install_segment	dbcore/sm-log-segments.cpp	/^log_segment_mgr::install_segment(log_segment_desc* sd, uint64_t lsn_offset)$/;"	f	class:log_segment_mgr
install_successor	dbcore/rcu-slist.cpp	/^    bool install_successor(cached_next &point, node *dead_end, node *n, owner_status s) {$/;"	f	namespace:__anon82
int64totimestr	benchmarks/egen/strutil.cpp	/^std::string int64totimestr(INT64 val) {$/;"	f	namespace:TPCE
int_data	masstree/string.cc	/^const char String::int_data[] = "0\\0001\\0002\\0003\\0004\\0005\\0006\\0007\\0008\\0009";$/;"	m	class:lcdf::String	file:
int_data	masstree/string.hh	/^    static const char int_data[20];$/;"	m	class:lcdf::String
int_multiply	masstree/compiler.hh	/^inline void int_multiply(unsigned a, unsigned b, unsigned &xlow, unsigned &xhigh)$/;"	f
int_multiply	masstree/compiler.hh	/^inline void int_multiply(unsigned long a, unsigned long b, unsigned long &xlow, unsigned long &xhigh)$/;"	f
int_multiply	masstree/compiler.hh	/^inline void int_multiply(unsigned long long a, unsigned long long b, unsigned long long &xlow, unsigned long long &xhigh)$/;"	f
integral_constant	masstree/compiler.hh	/^struct integral_constant {$/;"	s	namespace:mass
integral_type	varkey.h	/^    integral_type;$/;"	t	class:obj_varkey
internal	masstree/clp.h	/^    struct Clp_Internal *internal;$/;"	m	struct:Clp_Parser	typeref:struct:Clp_Parser::Clp_Internal
internal_node	btree.h	/^  struct internal_node : public node {$/;"	s	class:btree
internal_node	btree_impl.h	/^btree<P>::internal_node::internal_node()$/;"	f	class:btree::internal_node
internal_rep	masstree/string.hh	/^    const rep_type& internal_rep() const {$/;"	f	class:lcdf::String
internal_size_type	imstring.h	/^  typedef uint16_t internal_size_type;$/;"	t	class:base_imstring
internode	masstree/masstree_struct.hh	/^    internode()$/;"	f	class:Masstree::internode
internode	masstree/masstree_struct.hh	/^class internode : public node_base<P> {$/;"	c	namespace:Masstree
internode_type	masstree/masstree_remove.hh	/^    typedef typename node_base<P>::internode_type internode_type;$/;"	t	struct:Masstree::destroy_rcu_callback
internode_type	masstree/masstree_struct.hh	/^    typedef internode<P> internode_type;$/;"	t	class:Masstree::node_base
internode_type	masstree/masstree_tcursor.hh	/^    typedef internode<P> internode_type;$/;"	t	class:Masstree::tcursor
internode_type	masstree_btree.h	/^  typedef Masstree::internode<P> internode_type;$/;"	t	class:mbtree
internode_width	masstree/masstree.hh	/^    static constexpr int internode_width = IW;$/;"	m	struct:Masstree::nodeparams
internode_width	masstree/masstree.hh	/^template <int LW, int IW> constexpr int nodeparams<LW, IW>::internode_width;$/;"	m	class:Masstree::nodeparams
interval_time	benchmarks/egen/EGenValidate.cpp	/^        UINT    interval_time;$/;"	m	class:BucketSimOptions	file:
invalid_block	dbcore/sm-log-recover.h	/^        invalid_block() {$/;"	f	struct:sm_log_recover_mgr::block_scanner
invariant	masstree/config.h	317;"	d
invariant_checker	btree.h	/^  invariant_checker() const$/;"	f	class:btree
invariant_checker	btree_impl.h	/^btree<P>::node::invariant_checker(const key_slice *min_key,$/;"	f	class:btree::node
invariant_checker	masstree_btree.h	/^  inline void invariant_checker() const {$/;"	f	class:mbtree
invariant_checker	masstree_btree.h	/^  void invariant_checker() {} \/\/ stub for now$/;"	f	class:mbtree
invariant_checker_impl	btree_impl.h	/^btree<P>::internal_node::invariant_checker_impl(const key_slice *min_key,$/;"	f	class:btree::internal_node
invariant_checker_impl	btree_impl.h	/^btree<P>::leaf_node::invariant_checker_impl(const key_slice *min_key,$/;"	f	class:btree::leaf_node
invent	benchmarks/egen/TxnHarnessStructs.h	/^    double              invent;$/;"	m	struct:TPCE::TFinInfo
invent_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        invent_ind;$/;"	m	struct:TPCE::TFinInfo
invoke	base_txn_btree.h	/^  ::invoke($/;"	f	class:base_txn_btree::txn_search_range_callback
invoke	benchmarks/bench.h	/^  virtual bool invoke($/;"	f	class:latest_key_callback
invoke	benchmarks/bench.h	/^  virtual bool invoke($/;"	f	class:limit_callback
invoke	benchmarks/bench.h	/^  virtual bool invoke($/;"	f	class:static_limit_callback
invoke	benchmarks/egen/threading.h	/^        void invoke() {$/;"	f	class:TPCE::Thread
invoke	benchmarks/egen/threading_pthread.h	/^        void invoke() {$/;"	f	class:TPCE::Thread
invoke	benchmarks/ndb_wrapper_impl.h	/^  invoke(const typename txn_btree<Transaction>::keystring_type &k,$/;"	f	class:ndb_wrapper_search_range_callback
invoke	benchmarks/tpcc.cc	/^		virtual bool invoke( const char *keyp, size_t keylen, const string &value)$/;"	f	class:credit_check_order_line_scan_callback
invoke	benchmarks/tpcc.cc	/^		virtual bool invoke( const char *keyp, size_t keylen, const string &value)$/;"	f	class:credit_check_order_scan_callback
invoke	benchmarks/tpcc.cc	/^  virtual bool invoke($/;"	f	class:new_order_scan_callback
invoke	benchmarks/tpcc.cc	/^  virtual bool invoke($/;"	f	class:order_line_nop_callback
invoke	benchmarks/tpcc.cc	/^  virtual bool invoke($/;"	f	class:order_line_scan_callback
invoke	benchmarks/tpce.cc	/^		virtual bool invoke( const char *keyp, size_t keylen, const string &value)$/;"	f	class:sector_scan_callback
invoke	btree.cc	/^  invoke(const typename testing_concurrent_btree::string_type &k,$/;"	f	class:test_range_scan_helper
invoke	btree.h	/^    invoke(const string_type &k, value_type v)$/;"	f	class:btree::type_callback_wrapper
invoke	btree.h	/^    invoke(const string_type &k, value_type v,$/;"	f	class:btree::search_range_callback
invoke	masstree_btree.h	/^    invoke(const string_type &k, value_type v,$/;"	f	class:mbtree::search_range_callback
invoke	txn_btree.h	/^    invoke(const keystring_type &k, const string_type &v)$/;"	f	class:txn_btree::type_callback_wrapper
io_scheduled_	persist_test.cc	/^  bool io_scheduled_; \/\/ has the logger scheduled IO yet?$/;"	m	struct:pbuffer	file:
iopt	masstree/clp.c	/^    Clp_InternOption *iopt;$/;"	m	struct:Clp_Internal	file:
iopt	masstree/clp.c	/^    Clp_InternOption *iopt;$/;"	m	struct:Clp_StringList	file:
ioptional	masstree/clp.c	/^    unsigned ioptional : 1;$/;"	m	struct:__anon43	file:
ipos	masstree/clp.c	/^    unsigned ipos : 1;$/;"	m	struct:__anon43	file:
iprefmatch	masstree/clp.c	/^    unsigned iprefmatch : 1;$/;"	m	struct:__anon43	file:
is	masstree/clp.h	/^	int is[Clp_ValIntSize];$/;"	m	union:Clp_Parser::__anon9
isEmpty	benchmarks/MEESUT.h	/^    bool isEmpty(){$/;"	f	class:TPCE::InputBuffer
isLastCharge	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastCharge()$/;"	f	class:CGenerateAndLoad
isLastCommissionRate	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastCommissionRate()$/;"	f	class:CGenerateAndLoad
isLastExchange	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastExchange()$/;"	f	class:CGenerateAndLoad
isLastIndustry	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastIndustry()$/;"	f	class:CGenerateAndLoad
isLastSector	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastSector()$/;"	f	class:CGenerateAndLoad
isLastStatusType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastStatusType()$/;"	f	class:CGenerateAndLoad
isLastTradeType	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::isLastTradeType()$/;"	f	class:CGenerateAndLoad
is_a	masstree/json.hh	/^    bool is_a() const {$/;"	f	class:lcdf::Json_proxy_base
is_a	masstree/json.hh	/^inline bool Json::is_a() const {$/;"	f	class:lcdf::Json
is_aligned	dbcore/sm-defs.h	/^bool is_aligned(T val, U amount=DEFAULT_ALIGNMENT) {$/;"	f
is_array	masstree/json.hh	/^    bool is_array() const {$/;"	f	class:lcdf::Json_proxy_base
is_array	masstree/json.hh	/^inline bool Json::is_array() const {$/;"	f	class:lcdf::Json
is_b	masstree/json.hh	/^    bool is_b() const {$/;"	f	class:lcdf::Json_proxy_base
is_b	masstree/json.hh	/^inline bool Json::is_b() const {$/;"	f	class:lcdf::Json
is_binary	masstree/ksearch.hh	/^    static constexpr bool is_binary = false;$/;"	m	struct:key_bound_linear
is_binary	masstree/ksearch.hh	/^    static constexpr bool is_binary = true;$/;"	m	struct:key_bound_binary
is_bool	masstree/json.hh	/^    bool is_bool() const {$/;"	f	class:lcdf::Json_proxy_base
is_bool	masstree/json.hh	/^inline bool Json::is_bool() const {$/;"	f	class:lcdf::Json
is_bool	masstree/msgpack.hh	/^inline bool is_bool(uint8_t x) {$/;"	f	namespace:msgpack::format
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   is_cash;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash[TradeLookupMaxRows];$/;"	m	struct:TPCE::TTradeLookupTxnOutput
is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_cash[TradeUpdateMaxRows];$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
is_cash_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_cash_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
is_cash_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_cash_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
is_cash_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_cash_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
is_cash_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_cash_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
is_cash_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_cash_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
is_cash_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_cash_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
is_d	masstree/json.hh	/^    bool is_d() const {$/;"	f	class:lcdf::Json_proxy_base
is_d	masstree/json.hh	/^inline bool Json::is_d() const {$/;"	f	class:lcdf::Json
is_deleting	btree.h	/^    is_deleting() const$/;"	f	struct:btree::node
is_dirty	dbcore/sm-common.h	/^    uint16_t is_dirty() const { return _ptr & DIRTY_MASK; }$/;"	f	struct:fat_ptr
is_double	masstree/json.hh	/^    bool is_double() const {$/;"	f	class:lcdf::Json_proxy_base
is_double	masstree/json.hh	/^inline bool Json::is_double() const {$/;"	f	class:lcdf::Json
is_duplicate	masstree/masstree_scan.hh	/^    template <typename K> bool is_duplicate(const K &k,$/;"	f	struct:Masstree::forward_scan_helper
is_duplicate	masstree/masstree_scan.hh	/^    template <typename K> bool is_duplicate(const K &k,$/;"	f	struct:Masstree::reverse_scan_helper
is_eq_expensive	small_unordered_map.h	/^  struct is_eq_expensive { static const bool value = true; };$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<bool>     : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<int16_t>  : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<int32_t>  : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<int64_t>  : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<int8_t>   : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<uint16_t> : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<uint32_t> : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<uint64_t> : public cheap_eq {};$/;"	s	namespace:private_
is_eq_expensive	small_unordered_map.h	/^  template <> struct is_eq_expensive<uint8_t>  : public cheap_eq {};$/;"	s	namespace:private_
is_first_layer	masstree/masstree_tcursor.hh	/^    inline bool is_first_layer() const {$/;"	f	class:Masstree::tcursor
is_fixarray	masstree/msgpack.hh	/^inline bool is_fixarray(uint8_t x) {$/;"	f	namespace:msgpack::format
is_fixint	masstree/msgpack.hh	/^inline bool is_fixint(uint8_t x) {$/;"	f	namespace:msgpack::format
is_fixmap	masstree/msgpack.hh	/^inline bool is_fixmap(uint8_t x) {$/;"	f	namespace:msgpack::format
is_fixstr	masstree/msgpack.hh	/^inline bool is_fixstr(uint8_t x) {$/;"	f	namespace:msgpack::format
is_i	masstree/json.hh	/^    bool is_i() const {$/;"	f	class:lcdf::Json_proxy_base
is_i	masstree/json.hh	/^inline bool Json::is_i() const {$/;"	f	class:lcdf::Json
is_int	masstree/json.hh	/^    bool is_int() const {$/;"	f	class:lcdf::Json_proxy_base
is_int	masstree/json.hh	/^inline bool Json::is_int() const {$/;"	f	class:lcdf::Json
is_internal_node	btree.h	/^    is_internal_node() const$/;"	f	struct:btree::node
is_leaf_node	btree.h	/^    is_leaf_node() const$/;"	f	struct:btree::node
is_lifo	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               is_lifo;$/;"	m	struct:TPCE::TTradeResultFrame2Input
is_lifo	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           is_lifo;$/;"	m	struct:TPCE::TTradeOrderTxnInput
is_lifo	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   is_lifo;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
is_lifo	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   is_lifo;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
is_lifo	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   is_lifo;$/;"	m	struct:TPCE::TTradeResultFrame1Output
is_locally_guarded	ticker.h	/^  is_locally_guarded() const$/;"	f	class:ticker
is_locally_guarded	ticker.h	/^  is_locally_guarded(uint64_t &cur_epoch) const$/;"	f	class:ticker
is_lock_owner	btree.h	/^    is_lock_owner() const$/;"	f	struct:btree::node
is_locked	btree.h	/^    is_locked() const$/;"	f	struct:btree::node
is_locked	spinlock.h	/^  is_locked() const$/;"	f	class:spinlock
is_marked	masstree/btree_leaflink.hh	/^    static inline bool is_marked(N *n) {$/;"	f	struct:btree_leaflink
is_market	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_market;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
is_market	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_market;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
is_market	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_market[TradeLookupMaxRows];$/;"	m	struct:TPCE::TTradeLookupTxnOutput
is_market	benchmarks/egen/TxnHarnessStructs.h	/^    bool                is_market[TradeUpdateMaxRows];$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
is_market_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_market_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
is_market_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        is_market_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
is_modifying	btree.h	/^    is_modifying() const$/;"	f	struct:btree::node
is_n	masstree/json.hh	/^    bool is_n() const {$/;"	f	class:lcdf::Json_proxy_base
is_n	masstree/json.hh	/^inline bool Json::is_n() const {$/;"	f	class:lcdf::Json
is_null	masstree/json.hh	/^    bool is_null() const {$/;"	f	class:lcdf::Json_proxy_base
is_null	masstree/json.hh	/^inline bool Json::is_null() const {$/;"	f	class:lcdf::Json
is_null_or_bool	masstree/msgpack.hh	/^inline bool is_null_or_bool(uint8_t x) {$/;"	f	namespace:msgpack::format
is_number	masstree/json.hh	/^    bool is_number() const {$/;"	f	class:lcdf::Json_proxy_base
is_number	masstree/json.hh	/^inline bool Json::is_number() const {$/;"	f	class:lcdf::Json
is_o	masstree/json.hh	/^    bool is_o() const {$/;"	f	class:lcdf::Json_proxy_base
is_o	masstree/json.hh	/^inline bool Json::is_o() const {$/;"	f	class:lcdf::Json
is_object	masstree/json.hh	/^    bool is_object() const {$/;"	f	class:lcdf::Json_proxy_base
is_object	masstree/json.hh	/^inline bool Json::is_object() const {$/;"	f	class:lcdf::Json
is_primitive	masstree/json.hh	/^    bool is_primitive() const {$/;"	f	class:lcdf::Json_proxy_base
is_primitive	masstree/json.hh	/^inline bool Json::is_primitive() const {$/;"	f	class:lcdf::Json
is_reference	masstree/compiler.hh	/^    static constexpr bool is_reference = false;$/;"	m	struct:mass::fast_argument
is_reference	masstree/compiler.hh	/^    static constexpr bool is_reference = true;$/;"	m	struct:mass::fast_argument
is_reference	masstree/compiler.hh	/^template <typename T> constexpr bool fast_argument<T, false>::is_reference;$/;"	m	class:mass::fast_argument
is_reference	masstree/compiler.hh	/^template <typename T> constexpr bool fast_argument<T, true>::is_reference;$/;"	m	class:mass::fast_argument
is_root	btree.h	/^    is_root() const$/;"	f	struct:btree::node
is_s	masstree/json.hh	/^    bool is_s() const {$/;"	f	class:lcdf::Json_proxy_base
is_s	masstree/json.hh	/^inline bool Json::is_s() const {$/;"	f	class:lcdf::Json
is_shared	masstree/string.hh	/^inline bool String::is_shared() const {$/;"	f	class:lcdf::String
is_shifted	masstree/masstree_key.hh	/^    bool is_shifted() const {$/;"	f	class:Masstree::key
is_short	masstree/clp.c	/^    unsigned char is_short;$/;"	m	struct:Clp_Internal	file:
is_short	masstree/clp.c	/^    unsigned char is_short;$/;"	m	struct:Clp_ParserState	file:
is_small_type	small_unordered_map.h	/^  inline bool is_small_type() const { return !large_elems; }$/;"	f	class:small_unordered_map
is_small_type	small_vector.h	/^  inline bool is_small_type() const { return !large_elems; }$/;"	f	class:small_vector
is_small_type	static_unordered_map.h	/^  inline bool is_small_type() const { return true; }$/;"	f	class:static_unordered_map
is_small_type	static_vector.h	/^  inline bool is_small_type() const { return true; }$/;"	f	class:static_vector
is_stable	masstree/string.hh	/^inline bool String::is_stable() const {$/;"	f	class:lcdf::String
is_string	masstree/json.hh	/^    bool is_string() const {$/;"	f	class:lcdf::Json_proxy_base
is_string	masstree/json.hh	/^inline bool Json::is_string() const {$/;"	f	class:lcdf::Json
is_trivially_copyable	ndb_type_traits.h	/^  struct is_trivially_copyable : public is_trivially_destructible<T> {};$/;"	s	namespace:private_
is_trivially_copyable	small_vector.h	/^  static const bool is_trivially_copyable = std::is_scalar<T>::value;$/;"	m	class:small_vector
is_trivially_copyable	static_vector.h	/^  static const bool is_trivially_copyable = std::is_scalar<T>::value;$/;"	m	class:static_vector
is_trivially_destructible	ndb_type_traits.h	/^  struct is_trivially_destructible {$/;"	s	namespace:private_
is_trivially_destructible	ndb_type_traits.h	/^  struct is_trivially_destructible<std::pair<K, V>> {$/;"	s	namespace:private_
is_trivially_destructible	small_unordered_map.h	/^  static const bool is_trivially_destructible =$/;"	m	class:small_unordered_map
is_trivially_destructible	small_vector.h	/^  static const bool is_trivially_destructible =$/;"	m	class:small_vector
is_trivially_destructible	static_unordered_map.h	/^  static const bool is_trivially_destructible =$/;"	m	class:static_unordered_map
is_trivially_destructible	static_vector.h	/^  static const bool is_trivially_destructible =$/;"	m	class:static_vector
is_u	masstree/json.hh	/^    bool is_u() const {$/;"	f	class:lcdf::Json_proxy_base
is_u	masstree/json.hh	/^inline bool Json::is_u() const {$/;"	f	class:lcdf::Json
is_unsigned	masstree/json.hh	/^    bool is_unsigned() const {$/;"	f	class:lcdf::Json_proxy_base
is_unsigned	masstree/json.hh	/^inline bool Json::is_unsigned() const {$/;"	f	class:lcdf::Json
ishort	masstree/clp.c	/^    unsigned ishort : 1;$/;"	m	struct:__anon43	file:
isleaf	masstree/nodeversion.hh	/^    bool isleaf() const {$/;"	f	class:basic_nodeversion
isleaf	masstree/nodeversion.hh	/^    bool isleaf() const {$/;"	f	class:basic_singlethreaded_nodeversion
isleaf_bit	masstree/nodeversion.hh	/^	isleaf_bit = (1U << 31),$/;"	e	enum:nodeversion32_parameters::__anon10
isleaf_bit	masstree/nodeversion.hh	/^	isleaf_bit = (1ULL << 63),$/;"	e	enum:nodeversion64_parameters::__anon11
issue	benchmarks/egen/TxnHarnessStructs.h	/^    char            issue[cS_ISSUE_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
issue	benchmarks/egen/TxnHarnessStructs.h	/^    char    issue[cS_ISSUE_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame3Input
it	dbcore/sm-defs.h	/^        T* it;$/;"	m	struct:_enumerate_helper::iterator
it	dbcore/sm-defs.h	/^        typename T::iterator it;$/;"	m	struct:_enumerate_helper::iterator
item	benchmarks/egen/TxnHarnessStructs.h	/^    char                item[cNI_ITEM_len+1];$/;"	m	struct:TPCE::TNews
item	masstree/json.hh	/^    ObjectItem& item(int p) const {$/;"	f	struct:lcdf::Json::ObjectJson
items	masstree/clp.c	/^    Clp_Option *items;$/;"	m	struct:Clp_StringList	file:
iterable	dbcore/sm-defs.h	/^    T &iterable;$/;"	m	struct:_enumerate_helper
iterable	dbcore/sm-defs.h	/^    T *iterable;$/;"	m	struct:_enumerate_helper
iterator	dbcore/cslist.h	/^    struct iterator {$/;"	s	struct:cslist
iterator	dbcore/rcu-slist.h	/^        iterator() : cur(0), next(0, OWNER_LIVE) { }$/;"	f	struct:_rcu_slist::iterator
iterator	dbcore/rcu-slist.h	/^        iterator(next_ptr volatile *head)$/;"	f	struct:_rcu_slist::iterator
iterator	dbcore/rcu-slist.h	/^    struct iterator {$/;"	s	struct:_rcu_slist
iterator	dbcore/rcu-slist.h	/^    typedef typename _rcu_slist::iterator<Node> iterator;$/;"	t	struct:rcu_slist
iterator	dbcore/sc-hash.h	/^    struct iterator {$/;"	s
iterator	dbcore/sm-common.h	/^    struct iterator {$/;"	s	struct:dirent_iterator
iterator	dbcore/sm-defs.h	/^    struct iterator {$/;"	s	struct:_enumerate_helper
iterator	dbcore/sm-oid-alloc-impl.h	/^    struct iterator {$/;"	s	struct:sparse_bitset
iterator	dbcore/test-sm-log.cpp	/^    typedef decltype(records.begin()) iterator;$/;"	t	struct:db_file	file:
iterator	masstree/json.hh	/^    iterator() {$/;"	f	class:lcdf::Json::iterator
iterator	masstree/json.hh	/^    iterator(Json *j, int i)$/;"	f	class:lcdf::Json::iterator
iterator	masstree/json.hh	/^class Json::iterator : public const_iterator { public:$/;"	c	class:lcdf::Json
iterator	masstree/local_vector.hh	/^    typedef T* iterator;$/;"	t	class:local_vector
iterator	masstree/straccum.hh	/^    typedef char *iterator;$/;"	t	class:lcdf::StringAccum
iterator	masstree/string_base.hh	/^    typedef const_iterator iterator;$/;"	t	class:lcdf::String_base
iterator	small_unordered_map.h	/^    iterator;$/;"	t	class:small_unordered_map
iterator	small_vector.h	/^  typedef iterator_<T, small_iterator, large_iterator> iterator;$/;"	t	class:small_vector
iterator	static_unordered_map.h	/^  typedef iterator_<bucket, value_type> iterator;$/;"	t	class:static_unordered_map
iterator	static_vector.h	/^  typedef iterator_<T> iterator;$/;"	t	class:static_vector
iterator_	small_unordered_map.h	/^    inline iterator_() : large(false), b(0) {}$/;"	f	class:small_unordered_map::iterator_
iterator_	small_unordered_map.h	/^    inline iterator_(LargeIterType large_it)$/;"	f	class:small_unordered_map::iterator_
iterator_	small_unordered_map.h	/^    inline iterator_(SmallIterType *b)$/;"	f	class:small_unordered_map::iterator_
iterator_	small_unordered_map.h	/^    inline iterator_(const iterator_<S, L, V> &other)$/;"	f	class:small_unordered_map::iterator_
iterator_	small_unordered_map.h	/^  class iterator_ : public std::iterator<std::forward_iterator_tag, ValueType> {$/;"	c	class:small_unordered_map
iterator_	small_vector.h	/^    inline iterator_() : large(false) {}$/;"	f	class:small_vector::iterator_
iterator_	small_vector.h	/^    inline iterator_(const iterator_<O, S, L> &other)$/;"	f	class:small_vector::iterator_
iterator_	small_vector.h	/^    iterator_(LargeTypeIter large_it)$/;"	f	class:small_vector::iterator_
iterator_	small_vector.h	/^    iterator_(SmallTypeIter small_it)$/;"	f	class:small_vector::iterator_
iterator_	small_vector.h	/^  class iterator_ : public std::iterator<std::bidirectional_iterator_tag, ObjType> {$/;"	c	class:small_vector
iterator_	static_unordered_map.h	/^    inline iterator_() : b(0) {}$/;"	f	class:static_unordered_map::iterator_
iterator_	static_unordered_map.h	/^    inline iterator_(BucketType *b)$/;"	f	class:static_unordered_map::iterator_
iterator_	static_unordered_map.h	/^    inline iterator_(const iterator_<B, V> &other)$/;"	f	class:static_unordered_map::iterator_
iterator_	static_unordered_map.h	/^  class iterator_ : public std::iterator<std::forward_iterator_tag, ValueType> {$/;"	c	class:static_unordered_map
iterator_	static_vector.h	/^    inline iterator_() : p(0) {}$/;"	f	class:static_vector::iterator_
iterator_	static_vector.h	/^    inline iterator_(ObjType *p) : p(p) {}$/;"	f	class:static_vector::iterator_
iterator_	static_vector.h	/^    inline iterator_(const iterator_<O> &other)$/;"	f	class:static_vector::iterator_
iterator_	static_vector.h	/^  class iterator_ : public std::iterator<std::bidirectional_iterator_tag, ObjType> {$/;"	c	class:static_vector
iterator_category	masstree/json.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:lcdf::Json::const_iterator
iterator_category	masstree/json.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:lcdf::Json::const_object_iterator
iterator_category	masstree/json.hh	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:lcdf::Json::const_array_iterator
j_	masstree/json.hh	/^    const Json* j_;$/;"	m	class:lcdf::Json::const_array_iterator
j_	masstree/json.hh	/^    const Json* j_;$/;"	m	class:lcdf::Json::const_iterator
j_	masstree/json.hh	/^    const Json* j_;$/;"	m	class:lcdf::Json::const_object_iterator
j_	masstree/mtclient.hh	/^    Json j_;$/;"	m	class:KVConn
j_array	masstree/json.hh	/^        j_array = 1, j_object = 2,$/;"	e	enum:lcdf::Json::json_type
j_bool	masstree/json.hh	/^        j_int = 3, j_unsigned = 4, j_double = 5, j_bool = 6$/;"	e	enum:lcdf::Json::json_type
j_double	masstree/json.hh	/^        j_int = 3, j_unsigned = 4, j_double = 5, j_bool = 6$/;"	e	enum:lcdf::Json::json_type
j_int	masstree/json.hh	/^        j_int = 3, j_unsigned = 4, j_double = 5, j_bool = 6$/;"	e	enum:lcdf::Json::json_type
j_null	masstree/json.hh	/^        j_string = -1, j_null = 0,$/;"	e	enum:lcdf::Json::json_type
j_object	masstree/json.hh	/^        j_array = 1, j_object = 2,$/;"	e	enum:lcdf::Json::json_type
j_string	masstree/json.hh	/^        j_string = -1, j_null = 0,$/;"	e	enum:lcdf::Json::json_type
j_unsigned	masstree/json.hh	/^        j_int = 3, j_unsigned = 4, j_double = 5, j_bool = 6$/;"	e	enum:lcdf::Json::json_type
jbuf	dbcore/test-dynarray.cpp	/^sigjmp_buf jbuf;$/;"	v
join	thread.cc	/^ndb_thread::join()$/;"	f	class:ndb_thread
jokey_	masstree/msgpack.hh	/^    Json jokey_;$/;"	m	class:msgpack::streaming_parser
jp	masstree/msgpack.hh	/^        Json* jp;$/;"	m	struct:msgpack::streaming_parser::selem
json_	masstree/json.hh	/^    Json json_;$/;"	m	class:lcdf::Json::streaming_parser
json_	masstree/msgpack.hh	/^    Json json_;$/;"	m	class:msgpack::streaming_parser
json_	masstree/mtd.cc	/^    Json json_;$/;"	m	struct:kvtest_client	file:
json_	masstree/mttest.cc	/^    Json json_;$/;"	m	struct:kvtest_client	file:
json_stats	masstree/mttest.cc	/^static bool json_stats = false;$/;"	v	file:
json_stats	masstree/query_masstree.cc	/^void query_table<P>::json_stats(lcdf::Json& j, threadinfo& ti)$/;"	f	class:Masstree::query_table
json_stats1	masstree/query_masstree.cc	/^static void json_stats1(node_base<P>* n, lcdf::Json& j, int layer, int depth,$/;"	f	namespace:Masstree
json_type	masstree/json.hh	/^    enum json_type { \/\/ order matters$/;"	g	class:lcdf::Json
just_one	dbcore/sm-log-impl.h	/^    bool just_one;$/;"	m	struct:sm_log_record_scan_impl
k	benchmarks/bench.h	/^  std::string *k;$/;"	m	class:latest_key_callback
k	dbcore/test-sc-hash.cpp	/^    size_t k;$/;"	m	struct:mvar_tracker	file:
k	txn_btree.h	/^    const std::string *k;$/;"	m	class:txn_btree_::key_writer
k	typed_txn_btree.h	/^    const key_type *k;$/;"	m	class:typed_txn_btree_::key_writer
k	typed_txn_btree.h	/^    key_type k;$/;"	m	class:typed_txn_btree_::key_reader
k_no	benchmarks/tpcc.cc	/^  const new_order::key *k_no;$/;"	m	class:new_order_scan_callback	file:
k_no_temp	benchmarks/tpcc.cc	/^  new_order::key k_no_temp;$/;"	m	class:new_order_scan_callback	file:
ka_	masstree/masstree_tcursor.hh	/^    key_type ka_;$/;"	m	class:Masstree::tcursor
ka_	masstree/masstree_tcursor.hh	/^    key_type ka_;$/;"	m	class:Masstree::unlocked_tcursor
keep_going_	persist_test.cc	/^  aligned_padded_elem<atomic<bool>> keep_going_;$/;"	m	class:database_simulation	file:
key	benchmarks/masstree/kvtest.cc	/^  key() const$/;"	f	struct:quick_istr
key	masstree/json.hh	/^    const String& key() const {$/;"	f	class:lcdf::Json::const_iterator
key	masstree/json.hh	/^    const String& key() const {$/;"	f	class:lcdf::Json::const_object_iterator
key	masstree/kvthread.cc	/^pthread_key_t threadinfo::key;$/;"	m	class:threadinfo	file:
key	masstree/kvthread.hh	/^    static pthread_key_t key;$/;"	m	class:threadinfo
key	masstree/log.cc	/^    Str key;$/;"	m	struct:logrecord	file:
key	masstree/masstree_key.hh	/^    explicit key(ikey_type ikey)$/;"	f	class:Masstree::key
key	masstree/masstree_key.hh	/^    key() {$/;"	f	class:Masstree::key
key	masstree/masstree_key.hh	/^    key(Str s)$/;"	f	class:Masstree::key
key	masstree/masstree_key.hh	/^    key(const char* s, int len)$/;"	f	class:Masstree::key
key	masstree/masstree_key.hh	/^    key(ikey_type ikey, Str suf)$/;"	f	class:Masstree::key
key	masstree/masstree_key.hh	/^    key(ikey_type ikey, int len)$/;"	f	class:Masstree::key
key	masstree/masstree_key.hh	/^class key {$/;"	c	namespace:Masstree
key	masstree/mtclient.cc	/^    char key[16]; \/\/ just first 16 bytes$/;"	m	struct:async	file:
key_	btree.h	/^    key_slice key_; \/\/ in host endian$/;"	m	struct:btree::leaf_kvinfo
key_	masstree/json.hh	/^    Str key_;$/;"	m	class:lcdf::Json_object_str_proxy
key_	masstree/json.hh	/^    String key_;$/;"	m	class:lcdf::Json_object_proxy
key_	masstree/json.hh	/^    int key_;$/;"	m	class:lcdf::Json_array_proxy
key_	masstree/query_masstree.cc	/^    char key_[32];$/;"	m	struct:Masstree::__anon23::scan_tester	file:
key_big_endian_	btree.h	/^    key_slice key_big_endian_;$/;"	m	struct:btree::leaf_kvinfo
key_bound	masstree/ksearch.hh	/^template <int max_size, int method = bound_method_fast> struct key_bound {};$/;"	s
key_bound	masstree/ksearch.hh	/^template <int max_size> struct key_bound<max_size, bound_method_binary> {$/;"	s
key_bound	masstree/ksearch.hh	/^template <int max_size> struct key_bound<max_size, bound_method_fast> {$/;"	s
key_bound	masstree/ksearch.hh	/^template <int max_size> struct key_bound<max_size, bound_method_linear> {$/;"	s
key_bound_binary	masstree/ksearch.hh	/^struct key_bound_binary {$/;"	s
key_bound_linear	masstree/ksearch.hh	/^struct key_bound_linear {$/;"	s
key_comparator	masstree/ksearch.hh	/^struct key_comparator {$/;"	s
key_compare	masstree/masstree_key.hh	/^inline int key_compare(const Masstree::key<I>& a,$/;"	f
key_compare	masstree/masstree_key.hh	/^inline int key_compare(const Masstree::key<typename P::ikey_type>& a,$/;"	f
key_compare	masstree/masstree_key.hh	/^inline int key_compare(typename P::ikey_type a,$/;"	f
key_encoder	typed_txn_btree.h	/^  key_encoder_type key_encoder;$/;"	m	class:typed_txn_btree
key_encoder_type	record/encoder.h	/^  typedef encoder<key_type> key_encoder_type;$/;"	t	struct:schema
key_encoder_type	typed_txn_btree.h	/^  typedef typename Schema::key_encoder_type key_encoder_type;$/;"	t	class:typed_txn_btree
key_encoder_type	typed_txn_btree.h	/^  typedef typename Schema::key_encoder_type key_encoder_type;$/;"	t	struct:typed_txn_btree_
key_find_lower_bound_by	masstree/ksearch.hh	/^int key_find_lower_bound_by(const KA &ka, const T &n, F comparator)$/;"	f
key_find_lower_bound_with_position_by	masstree/ksearch.hh	/^int key_find_lower_bound_with_position_by(const KA &ka, const T &n, int &position, F comparator)$/;"	f
key_find_upper_bound_by	masstree/ksearch.hh	/^int key_find_upper_bound_by(const KA &ka, const T &n, F comparator)$/;"	f
key_lower_bound	masstree/ksearch.hh	/^inline int key_lower_bound(const KA &ka, const T &n)$/;"	f
key_lower_bound_by	masstree/ksearch.hh	/^int key_lower_bound_by(const KA &ka, const T &n, F comparator)$/;"	f
key_lower_bound_search	btree.h	/^    key_lower_bound_search(key_slice k) const$/;"	f	struct:btree::internal_node
key_lower_bound_search	btree.h	/^    key_lower_bound_search(key_slice k, size_t len) const$/;"	f	struct:btree::leaf_node
key_lower_bound_with_position	masstree/ksearch.hh	/^inline int key_lower_bound_with_position(const KA &ka, const T &n, int &position)$/;"	f
key_lower_bound_with_position_by	masstree/ksearch.hh	/^int key_lower_bound_with_position_by(const KA &ka, const T &n, int &position, F comparator)$/;"	f
key_permuter	masstree/kpermuter.hh	/^template <typename T, bool HP = has_permuter_type<T>::value> struct key_permuter {};$/;"	s
key_permuter	masstree/kpermuter.hh	/^template <typename T> struct key_permuter<T, false> {$/;"	s
key_permuter	masstree/kpermuter.hh	/^template <typename T> struct key_permuter<T, true> {$/;"	s
key_reader	base_txn_btree.h	/^    KeyReader *const key_reader;$/;"	m	struct:base_txn_btree::txn_search_range_callback
key_reader	txn_btree.h	/^  class key_reader {$/;"	c	struct:txn_btree_
key_reader	typed_txn_btree.h	/^    constexpr key_reader(bool no_key_results) : no_key_results(no_key_results) {}$/;"	f	class:typed_txn_btree_::key_reader
key_reader	typed_txn_btree.h	/^    key_reader;$/;"	t	class:typed_txn_btree
key_reader	typed_txn_btree.h	/^  class key_reader {$/;"	c	struct:typed_txn_btree_
key_reader_type	txn_btree.h	/^  typedef txn_btree_::KeyReader key_reader_type;$/;"	t	class:txn_btree
key_search	btree.h	/^    key_search(key_slice k) const$/;"	f	struct:btree::internal_node
key_search	btree.h	/^    key_search(key_slice k, size_t len) const$/;"	f	struct:btree::leaf_node
key_search_ret	btree.h	/^  typedef std::pair<ssize_t, size_t> key_search_ret;$/;"	t	class:btree
key_set	btree.cc	/^  typedef set<typename testing_concurrent_btree::key_slice> key_set;$/;"	t	namespace:mp_test5_ns	file:
key_slice	btree.h	/^  typedef uint64_t key_slice;$/;"	t	class:btree
key_slice	masstree_btree.h	/^  typedef uint64_t key_slice;$/;"	t	class:mbtree
key_slots_used	btree.h	/^    key_slots_used() const$/;"	f	struct:btree::node
key_type	btree.h	/^  typedef varkey key_type;$/;"	t	class:btree
key_type	masstree/masstree_scan.hh	/^    typedef key<ikey_type> key_type;$/;"	t	class:Masstree::scanstackelt
key_type	masstree/masstree_struct.hh	/^    typedef key<ikey_type> key_type;$/;"	t	class:Masstree::node_base
key_type	masstree/masstree_struct.hh	/^    typedef key<typename P::ikey_type> key_type;$/;"	t	class:Masstree::internode
key_type	masstree/masstree_struct.hh	/^    typedef key<typename P::ikey_type> key_type;$/;"	t	class:Masstree::leaf
key_type	masstree/masstree_tcursor.hh	/^    typedef key<ikey_type> key_type;$/;"	t	class:Masstree::tcursor
key_type	masstree/masstree_tcursor.hh	/^    typedef key<typename P::ikey_type> key_type;$/;"	t	class:Masstree::unlocked_tcursor
key_type	masstree_btree.h	/^  typedef varkey key_type;$/;"	t	class:mbtree
key_type	record/encoder.h	/^  typedef typename T::key key_type;$/;"	t	struct:schema
key_type	small_unordered_map.h	/^  typedef Key key_type;$/;"	t	class:small_unordered_map
key_type	static_unordered_map.h	/^  typedef Key key_type;$/;"	t	class:static_unordered_map
key_type	txn_btree.h	/^  typedef txn_btree_::Key key_type;$/;"	t	class:txn_btree
key_type	typed_txn_btree.h	/^  typedef typename Schema::key_type key_type;$/;"	t	class:typed_txn_btree
key_type	typed_txn_btree.h	/^  typedef typename Schema::key_type key_type;$/;"	t	struct:typed_txn_btree_
key_upper_bound	masstree/ksearch.hh	/^inline int key_upper_bound(const KA &ka, const T &n)$/;"	f
key_upper_bound_by	masstree/ksearch.hh	/^int key_upper_bound_by(const KA &ka, const T &n, F comparator)$/;"	f
key_vec	btree.cc	/^  typedef vector<string> key_vec;$/;"	t	namespace:mp_test8_ns	file:
key_vec	btree.cc	/^  typedef vector<string> key_vec;$/;"	t	namespace:mp_test_long_keys_ns	file:
key_vec	btree.cc	/^  typedef vector<typename testing_concurrent_btree::key_slice> key_vec;$/;"	t	namespace:mp_test6_ns	file:
key_vec	btree.cc	/^  typedef vector<typename testing_concurrent_btree::key_slice> key_vec;$/;"	t	namespace:mp_test7_ns	file:
key_writer	txn_btree.h	/^    constexpr key_writer(const std::string *k)$/;"	f	class:txn_btree_::key_writer
key_writer	txn_btree.h	/^  class key_writer {$/;"	c	struct:txn_btree_
key_writer	typed_txn_btree.h	/^    constexpr key_writer(const key_type *k) : k(k) {}$/;"	f	class:typed_txn_btree_::key_writer
key_writer	typed_txn_btree.h	/^    key_writer;$/;"	t	class:typed_txn_btree
key_writer	typed_txn_btree.h	/^  class key_writer {$/;"	c	struct:typed_txn_btree_
key_writer_type	txn_btree.h	/^  typedef txn_btree_::KeyWriter key_writer_type;$/;"	t	class:txn_btree
keylen	masstree/mtclient.cc	/^    int keylen() const {$/;"	f	struct:kvtest_client
keylen	masstree/mtclient.cc	/^static int keylen = 0;$/;"	v	file:
keylen_	masstree/log.cc	/^    uint32_t keylen_;$/;"	m	struct:logrec_kv	file:
keylen_	masstree/log.cc	/^    uint32_t keylen_;$/;"	m	struct:logrec_kvdelta	file:
keylen_	masstree/query_masstree.cc	/^    int keylen_;$/;"	m	struct:Masstree::__anon23::scan_tester	file:
keylenx_	masstree/masstree_struct.hh	/^    uint8_t keylenx_[width];$/;"	m	class:Masstree::leaf
keylenx_has_ksuf	masstree/masstree_struct.hh	/^    static bool keylenx_has_ksuf(int keylenx) {$/;"	f	class:Masstree::leaf
keylenx_ikeylen	masstree/masstree_struct.hh	/^    static int keylenx_ikeylen(int keylenx) {$/;"	f	class:Masstree::leaf
keylenx_is_layer	masstree/masstree_struct.hh	/^    static bool keylenx_is_layer(int keylenx) {$/;"	f	class:Masstree::leaf
keylenx_is_stable_layer	masstree/masstree_struct.hh	/^    static bool keylenx_is_stable_layer(int keylenx) {$/;"	f	class:Masstree::leaf
keylenx_is_unstable_layer	masstree/masstree_struct.hh	/^    static bool keylenx_is_unstable_layer(int keylenx) {$/;"	f	class:Masstree::leaf
keys	btree.cc	/^    key_vec keys;$/;"	m	class:mp_test7_ns::lookup_worker	file:
keys	btree.cc	/^    key_vec keys;$/;"	m	class:mp_test7_ns::mod_worker	file:
keys	btree.cc	/^    key_vec keys;$/;"	m	class:mp_test7_ns::scan_worker	file:
keys	btree.cc	/^    vector<string> keys;$/;"	m	class:mp_test8_ns::insert_worker	file:
keys	btree.cc	/^    vector<string> keys;$/;"	m	class:mp_test8_ns::remove_worker	file:
keys	btree.cc	/^    vector<string> keys;$/;"	m	class:mp_test_long_keys_ns::insert_worker	file:
keys	btree.cc	/^    vector<string> keys;$/;"	m	class:mp_test_long_keys_ns::remove_worker	file:
keys	btree.cc	/^    vector<typename testing_concurrent_btree::key_slice> keys;$/;"	m	class:mp_test6_ns::insert_worker	file:
keys	btree.cc	/^    vector<typename testing_concurrent_btree::key_slice> keys;$/;"	m	class:mp_test6_ns::remove_worker	file:
keys	btree.cc	/^  vector<string> keys;$/;"	m	class:test_range_scan_helper	file:
keys_	btree.h	/^    key_slice keys_[NKeysPerNode];$/;"	m	struct:btree::node
keys_per_thread	btree.cc	/^  static const size_t keys_per_thread = 10000;$/;"	m	namespace:mp_test_inserts_removes_ns	file:
keys_per_thread	btree.cc	/^  static const size_t keys_per_thread = 1000;$/;"	m	namespace:mp_test_pinning_ns	file:
keyslice	btree.h	/^    keyslice() const$/;"	f	struct:btree::leaf_kvinfo
keyslice_length	btree.h	/^    keyslice_length(size_t n) const$/;"	f	struct:btree::leaf_node
keyslice_set_length	btree.h	/^    keyslice_set_length(size_t n, size_t len, bool layer)$/;"	f	struct:btree::leaf_node
keystring_type	base_txn_btree.h	/^  typedef concurrent_btree::string_type keystring_type;$/;"	t	class:base_txn_btree
keystring_type	txn_btree.h	/^  typedef typename super_type::keystring_type keystring_type;$/;"	t	class:txn_btree
keytodict	benchmarks/results/make_graphs-6.py	/^def keytodict(k):$/;"	f
ki_	masstree/masstree_scan.hh	/^    int ki_;$/;"	m	class:Masstree::scanstackelt
ki_	masstree/masstree_tcursor.hh	/^    int ki_;$/;"	m	class:Masstree::tcursor
kill	dbcore/rcu-slist.cpp	/^bool _rcu_slist::kill() {$/;"	f	class:_rcu_slist
kill	dbcore/rcu-slist.h	/^    bool kill() { return self.kill(); }$/;"	f	struct:rcu_slist
kill	scopedperf.hh	/^  void kill() { active = false; }$/;"	f	class:scopedperf::killable_perf_region
killable_perf_region	scopedperf.hh	/^  killable_perf_region(Perfsum *psarg, getcpu_fn getcpu)$/;"	f	class:scopedperf::killable_perf_region
killable_perf_region	scopedperf.hh	/^class killable_perf_region : public base_perf_region<Perfsum> {$/;"	c	namespace:scopedperf
killable_region	scopedperf.hh	/^killable_region(Perfsum *ps, getcpu_fn getcpu = sched_getcpu)$/;"	f	namespace:scopedperf
kp	masstree/masstree_scan.hh	/^    int kp() const {$/;"	f	class:Masstree::scanstackelt
kp_	masstree/masstree_tcursor.hh	/^    int kp_;$/;"	m	class:Masstree::tcursor
kpermuter	masstree/kpermuter.hh	/^    kpermuter() {$/;"	f	class:kpermuter
kpermuter	masstree/kpermuter.hh	/^    kpermuter(value_type x)$/;"	f	class:kpermuter
kpermuter	masstree/kpermuter.hh	/^template <int width> class kpermuter {$/;"	c
kstr	benchmarks/bench.h	/^  inline std::string &kstr() { return *k; }$/;"	f	class:latest_key_callback
ksuf	masstree/masstree_struct.hh	/^    Str ksuf(int p) const {$/;"	f	class:Masstree::leaf
ksuf_	masstree/masstree_struct.hh	/^    stringbag<uint32_t>* ksuf_;	\/\/ a real rockstar would save this space$/;"	m	class:Masstree::leaf
ksuf_compare	masstree/masstree_struct.hh	/^    int ksuf_compare(int p, const key_type& ka) {$/;"	f	class:Masstree::leaf
ksuf_equals	masstree/masstree_struct.hh	/^    bool ksuf_equals(int p, const key_type& ka) {$/;"	f	class:Masstree::leaf
ksuf_equals	masstree/masstree_struct.hh	/^    bool ksuf_equals(int p, const key_type& ka, int keylenx) {$/;"	f	class:Masstree::leaf
ksuf_size	masstree/masstree_struct.hh	/^    size_t ksuf_size() const {$/;"	f	class:Masstree::leaf
kv_pair	benchmarks/bench.h	/^  typedef std::pair<const std::string *, const std::string *> kv_pair;$/;"	t	class:static_limit_callback
kv_pair	benchmarks/bench.h	/^  typedef std::pair<std::string, std::string> kv_pair;$/;"	t	class:limit_callback
kv_vec	btree.cc	/^            typename testing_concurrent_btree::value_type > > kv_vec;$/;"	t	struct:test6_ns::scan_callback	file:
kv_vec	btree.cc	/^      pair< std::string, typename testing_concurrent_btree::value_type > > kv_vec;$/;"	t	struct:mp_test7_ns::scan_callback	file:
kvepoch_t	masstree/circular_int.hh	/^typedef circular_int<uint64_t> kvepoch_t;$/;"	t
kvflush	masstree/kvio.cc	/^void kvflush(kvout* kv) {$/;"	f
kvo_	masstree/mtd.cc	/^    struct kvout *kvo_;$/;"	m	struct:kvtest_client	typeref:struct:kvtest_client::kvout	file:
kvo_	masstree/mttest.cc	/^    kvout *kvo_;$/;"	m	struct:kvtest_client	file:
kvout	masstree/kvio.hh	/^struct kvout {$/;"	s
kvout	masstree/mtd.cc	/^    struct kvout *kvout;$/;"	m	struct:conn	typeref:struct:conn::kvout	file:
kvout_reset	masstree/kvio.cc	/^void kvout_reset(kvout* kv) {$/;"	f
kvrandom_lcg_nr	benchmarks/masstree/kvrandom.hh	/^    kvrandom_lcg_nr(seed_type seed) : kvrandom_lcg_nr_simple(seed) {}$/;"	f	class:kvrandom_lcg_nr
kvrandom_lcg_nr	benchmarks/masstree/kvrandom.hh	/^class kvrandom_lcg_nr : public kvrandom_lcg_nr_simple { public:$/;"	c
kvrandom_lcg_nr	masstree/kvrandom.hh	/^class kvrandom_lcg_nr : public kvrandom_lcg_nr_simple { public:$/;"	c
kvrandom_lcg_nr_simple	benchmarks/masstree/kvrandom.hh	/^    explicit kvrandom_lcg_nr_simple(seed_type seed)$/;"	f	class:kvrandom_lcg_nr_simple
kvrandom_lcg_nr_simple	benchmarks/masstree/kvrandom.hh	/^    kvrandom_lcg_nr_simple()$/;"	f	class:kvrandom_lcg_nr_simple
kvrandom_lcg_nr_simple	benchmarks/masstree/kvrandom.hh	/^class kvrandom_lcg_nr_simple { public:$/;"	c
kvrandom_lcg_nr_simple	masstree/kvrandom.hh	/^    explicit kvrandom_lcg_nr_simple(seed_type seed)$/;"	f	class:kvrandom_lcg_nr_simple
kvrandom_lcg_nr_simple	masstree/kvrandom.hh	/^    kvrandom_lcg_nr_simple()$/;"	f	class:kvrandom_lcg_nr_simple
kvrandom_lcg_nr_simple	masstree/kvrandom.hh	/^class kvrandom_lcg_nr_simple { public:$/;"	c
kvrandom_psdes_nr	benchmarks/masstree/kvrandom.hh	/^    explicit kvrandom_psdes_nr(seed_type seed) {$/;"	f	class:kvrandom_psdes_nr
kvrandom_psdes_nr	benchmarks/masstree/kvrandom.hh	/^    kvrandom_psdes_nr() {$/;"	f	class:kvrandom_psdes_nr
kvrandom_psdes_nr	benchmarks/masstree/kvrandom.hh	/^class kvrandom_psdes_nr { public:$/;"	c
kvrandom_psdes_nr	masstree/kvrandom.hh	/^    explicit kvrandom_psdes_nr(seed_type seed) {$/;"	f	class:kvrandom_psdes_nr
kvrandom_psdes_nr	masstree/kvrandom.hh	/^    kvrandom_psdes_nr() {$/;"	f	class:kvrandom_psdes_nr
kvrandom_psdes_nr	masstree/kvrandom.hh	/^class kvrandom_psdes_nr { public:$/;"	c
kvrandom_random	benchmarks/masstree/kvrandom.hh	/^    kvrandom_random() {$/;"	f	class:kvrandom_random
kvrandom_random	benchmarks/masstree/kvrandom.hh	/^class kvrandom_random { public:$/;"	c
kvrandom_random	masstree/kvrandom.hh	/^    kvrandom_random() {$/;"	f	class:kvrandom_random
kvrandom_random	masstree/kvrandom.hh	/^class kvrandom_random { public:$/;"	c
kvstats	masstree/kvstats.hh	/^  kvstats()$/;"	f	struct:kvstats
kvstats	masstree/kvstats.hh	/^struct kvstats {$/;"	s
kvstats_name	masstree/mtd.cc	/^static const char * const kvstats_name[] = {$/;"	v	file:
kvstats_name	masstree/mttest.cc	/^static const char * const kvstats_name[] = {$/;"	v	file:
kvtest_bdb	masstree/kvtest.hh	/^kvtest_bdb(C &client)$/;"	f
kvtest_client	masstree/mtclient.cc	/^    kvtest_client(struct child& c)$/;"	f	struct:kvtest_client
kvtest_client	masstree/mtclient.cc	/^struct kvtest_client {$/;"	s	file:
kvtest_client	masstree/mtd.cc	/^    kvtest_client()$/;"	f	struct:kvtest_client
kvtest_client	masstree/mtd.cc	/^    kvtest_client(const char *testname)$/;"	f	struct:kvtest_client
kvtest_client	masstree/mtd.cc	/^struct kvtest_client {$/;"	s	file:
kvtest_client	masstree/mttest.cc	/^    kvtest_client()$/;"	f	struct:kvtest_client
kvtest_client	masstree/mttest.cc	/^struct kvtest_client {$/;"	s	file:
kvtest_first_seed	masstree/mtclient.cc	/^int kvtest_first_seed = 0;$/;"	v
kvtest_first_seed	masstree/mtd.cc	/^int kvtest_first_seed = 31949;$/;"	v
kvtest_first_seed	masstree/mttest.cc	/^int kvtest_first_seed = 31949;$/;"	v
kvtest_json_stats	masstree/mttest.cc	/^template <typename T> inline void kvtest_json_stats(T& table, Json& j, threadinfo& ti) {$/;"	f
kvtest_long_go	masstree/kvtest.hh	/^kvtest_long_go(C &client)$/;"	f
kvtest_long_init	masstree/kvtest.hh	/^kvtest_long_init(C &client)$/;"	f
kvtest_palma	masstree/kvtest.hh	/^void kvtest_palma(C &client)$/;"	f
kvtest_palmb	masstree/kvtest.hh	/^void kvtest_palmb(C &client)$/;"	f
kvtest_palmb_seed	masstree/kvtest.hh	/^void kvtest_palmb_seed(C &client, int seed)$/;"	f
kvtest_print	masstree/mttest.cc	/^template <typename T> inline void kvtest_print(const T &table, FILE *f, int indent, threadinfo *ti) {$/;"	f
kvtest_printing	masstree/mttest.cc	/^static volatile int kvtest_printing;$/;"	v	file:
kvtest_r1_seed	masstree/kvtest.hh	/^void kvtest_r1_seed(C &client, int seed)$/;"	f
kvtest_rcol1at	masstree/kvtest.hh	/^void kvtest_rcol1at(C &client, int col, int seed, long maxkeys)$/;"	f
kvtest_remove	masstree/mttest.cc	/^template <typename T> inline bool kvtest_remove(kvtest_client<T> &client, const Str &key) {$/;"	f
kvtest_rscale	masstree/kvtest.hh	/^kvtest_rscale(C &client)$/;"	f
kvtest_rscan1	masstree/kvtest.hh	/^void kvtest_rscan1(C &client, double writer_quiet)$/;"	f
kvtest_runner	benchmarks/masstree/kvtest.cc	/^  kvtest_runner(unsigned int nthreads)$/;"	f	class:kvtest_runner
kvtest_runner	benchmarks/masstree/kvtest.cc	/^class kvtest_runner {$/;"	c	file:
kvtest_ruscale_init	masstree/kvtest.hh	/^kvtest_ruscale_init(C &client)$/;"	f
kvtest_rw1	benchmarks/masstree/kvtest.cc	/^struct kvtest_rw1 {$/;"	s	file:
kvtest_rw1	masstree/kvtest.hh	/^void kvtest_rw1(C &client)$/;"	f
kvtest_rw16	masstree/kvtest.hh	/^void kvtest_rw16(C &client)$/;"	f
kvtest_rw16_seed	masstree/kvtest.hh	/^void kvtest_rw16_seed(C &client, int seed)$/;"	f
kvtest_rw1_seed	masstree/kvtest.hh	/^void kvtest_rw1_seed(C &client, int seed)$/;"	f
kvtest_rw1fixed	masstree/kvtest.hh	/^void kvtest_rw1fixed(C &client)$/;"	f
kvtest_rw1fixed_seed	masstree/kvtest.hh	/^void kvtest_rw1fixed_seed(C &client, int seed)$/;"	f
kvtest_rw1long	masstree/kvtest.hh	/^void kvtest_rw1long(C &client)$/;"	f
kvtest_rw1long_seed	masstree/kvtest.hh	/^void kvtest_rw1long_seed(C &client, int seed)$/;"	f
kvtest_rw2	masstree/kvtest.hh	/^void kvtest_rw2(C &client)$/;"	f
kvtest_rw2_seed	masstree/kvtest.hh	/^void kvtest_rw2_seed(C &client, int seed, double getfrac)$/;"	f
kvtest_rw2fixed	masstree/kvtest.hh	/^void kvtest_rw2fixed(C &client)$/;"	f
kvtest_rw2fixed_seed	masstree/kvtest.hh	/^void kvtest_rw2fixed_seed(C &client, int seed, double getfrac)$/;"	f
kvtest_rw2fixedg90	masstree/kvtest.hh	/^void kvtest_rw2fixedg90(C &client)$/;"	f
kvtest_rw2fixedg98	masstree/kvtest.hh	/^void kvtest_rw2fixedg98(C &client)$/;"	f
kvtest_rw2g90	masstree/kvtest.hh	/^void kvtest_rw2g90(C &client)$/;"	f
kvtest_rw2g98	masstree/kvtest.hh	/^void kvtest_rw2g98(C &client)$/;"	f
kvtest_rw3	masstree/kvtest.hh	/^void kvtest_rw3(C &client)$/;"	f
kvtest_rw4	masstree/kvtest.hh	/^void kvtest_rw4(C &client)$/;"	f
kvtest_rw4fixed	masstree/kvtest.hh	/^void kvtest_rw4fixed(C &client)$/;"	f
kvtest_rwsep24	masstree/kvtest.hh	/^void kvtest_rwsep24(C &client)$/;"	f
kvtest_rwsep_seed	masstree/kvtest.hh	/^void kvtest_rwsep_seed(C &client, int nkeys, int clientid, int seed)$/;"	f
kvtest_rwsmall24	masstree/kvtest.hh	/^void kvtest_rwsmall24(C &client)$/;"	f
kvtest_rwsmall_seed	masstree/kvtest.hh	/^void kvtest_rwsmall_seed(C &client, int nkeys, int seed)$/;"	f
kvtest_same	masstree/kvtest.hh	/^void kvtest_same(C &client)$/;"	f
kvtest_same_seed	masstree/kvtest.hh	/^void kvtest_same_seed(C &client, int seed)$/;"	f
kvtest_scan1	masstree/kvtest.hh	/^void kvtest_scan1(C &client, double writer_quiet)$/;"	f
kvtest_set_time	masstree/kvtest.hh	/^inline Json &kvtest_set_time(Json &result, const lcdf::String &base, N n, double delta_t)$/;"	f
kvtest_splitremove1	masstree/kvtest.hh	/^void kvtest_splitremove1(C &client)$/;"	f
kvtest_sync_rw1	masstree/kvtest.hh	/^void kvtest_sync_rw1(C &client)$/;"	f
kvtest_sync_rw1_seed	masstree/kvtest.hh	/^void kvtest_sync_rw1_seed(C &client, int seed)$/;"	f
kvtest_tri1	masstree/kvtest.hh	/^void kvtest_tri1(unsigned initial_pos, int incr, C &client)$/;"	f
kvtest_tri1_check	masstree/kvtest.hh	/^void kvtest_tri1_check(unsigned initial_pos, int incr, C &client)$/;"	f
kvtest_udp1	masstree/kvtest.hh	/^void kvtest_udp1(C &client)$/;"	f
kvtest_udp1_seed	masstree/kvtest.hh	/^void kvtest_udp1_seed(C &client, int seed)$/;"	f
kvtest_uscale	masstree/kvtest.hh	/^kvtest_uscale(C &client)$/;"	f
kvtest_w1_seed	masstree/kvtest.hh	/^void kvtest_w1_seed(C &client, int seed)$/;"	f
kvtest_wcol1at	masstree/kvtest.hh	/^void kvtest_wcol1at(C &client, int col, int seed, long maxkeys)$/;"	f
kvtest_wd1	masstree/kvtest.hh	/^void kvtest_wd1(unsigned initial_pos, int incr, C &client)$/;"	f
kvtest_wd1_check	masstree/kvtest.hh	/^void kvtest_wd1_check(unsigned initial_pos, int incr, C &client)$/;"	f
kvtest_wd2	masstree/kvtest.hh	/^void kvtest_wd2(C &client)$/;"	f
kvtest_wd2_check	masstree/kvtest.hh	/^void kvtest_wd2_check(C &client)$/;"	f
kvtest_worker	benchmarks/masstree/kvtest.cc	/^  kvtest_worker(btree &btr,$/;"	f	class:kvtest_worker
kvtest_worker	benchmarks/masstree/kvtest.cc	/^class kvtest_worker : public ndb_thread {$/;"	c	file:
kvtest_wscale	masstree/kvtest.hh	/^kvtest_wscale(C &client)$/;"	f
kvtest_ycsbk	masstree/kvtest.hh	/^void kvtest_ycsbk(C &client)$/;"	f
kvtest_ycsbk_seed	masstree/kvtest.hh	/^void kvtest_ycsbk_seed(C &client, int seed)$/;"	f
kvtimestamp_t	masstree/timestamp.hh	/^typedef uint64_t kvtimestamp_t;$/;"	t
kvwrite	masstree/kvio.cc	/^int kvwrite(kvout* kv, const void* buf, unsigned n) {$/;"	f
l	benchmarks/tpcc.cc	/^  T *l;$/;"	m	class:scoped_lock_guard	file:
l	imstring.h	/^  internal_size_type l;$/;"	m	class:base_imstring
l	lockguard.h	/^  BasicLockable *l;$/;"	m	class:lock_guard
l	masstree/clp.h	/^        long l;$/;"	m	union:Clp_Parser::__anon9
l	scopedperf.hh	/^  spinlock *const l;$/;"	m	class:scopedperf::scoped_spinlock
l	varkey.h	/^  size_t l;$/;"	m	class:varkey
l1	dbcore/sm-oid-alloc-impl.h	/^    OID l1[L1_CAPACITY];$/;"	m	struct:sm_allocator
l1_alloc_size	dbcore/sm-oid-alloc-impl.h	/^    size_t l1_alloc_size() {$/;"	f	struct:sm_allocator
l1_size	dbcore/sm-oid-alloc-impl.h	/^        uint16_t l1_size;$/;"	m	struct:sm_allocator::header_data
l2	dbcore/sm-oid-alloc-impl.h	/^    uint32_t l2[L2_CAPACITY];$/;"	m	struct:sm_allocator
l2_alloc_size	dbcore/sm-oid-alloc-impl.h	/^    size_t l2_alloc_size() {$/;"	f	struct:sm_allocator
l2_assignments	dbcore/sm-oid-alloc-impl.h	/^    uint16_t l2_assignments[L2_CAPACITY];$/;"	m	struct:sm_allocator
l2_first_unused	dbcore/sm-oid-alloc-impl.h	/^        uint16_t l2_first_unused;$/;"	m	struct:sm_allocator::header_data
l2_loose_oids	dbcore/sm-oid-alloc-impl.h	/^        uint32_t l2_loose_oids;$/;"	m	struct:sm_allocator::header_data
l2_maps	dbcore/sm-oid-alloc-impl.h	/^    sparse_bitset l2_maps[L2_CAPACITY];$/;"	m	struct:sm_allocator
l2_scan_hand	dbcore/sm-oid-alloc-impl.h	/^        uint16_t l2_scan_hand;$/;"	m	struct:sm_allocator::header_data
l2_size	dbcore/sm-oid-alloc-impl.h	/^        uint16_t l2_size;$/;"	m	struct:sm_allocator::header_data
l2_valid	dbcore/sm-oid-alloc-impl.h	/^    bool l2_valid() const { return head.l2_first_unused; }$/;"	f	struct:sm_allocator
l3_alloc_size	dbcore/sm-oid-alloc-impl.h	/^    size_t l3_alloc_size(uint32_t end_word=L3_MAX_WORDS) {$/;"	f	struct:sm_allocator
l3_capacity	dbcore/sm-oid-alloc-impl.h	/^        uint32_t l3_capacity;$/;"	m	struct:sm_allocator::header_data
l3_end	dbcore/sm-oid-alloc-impl.h	/^    OID l3_end() const { return head.l3_capacity*L3_BITS_PER_WORD; }$/;"	f	struct:sm_allocator
l3_loose_oids	dbcore/sm-oid-alloc-impl.h	/^        uint32_t l3_loose_oids;$/;"	m	struct:sm_allocator::header_data
l3_scan_hand	dbcore/sm-oid-alloc-impl.h	/^        uint32_t l3_scan_hand;$/;"	m	struct:sm_allocator::header_data
l3_valid	dbcore/sm-oid-alloc-impl.h	/^    bool l3_valid() const { return head.l3_capacity; }$/;"	f	struct:sm_allocator
l3_words	dbcore/sm-oid-alloc-impl.h	/^    uint64_t l3_words[];$/;"	m	struct:sm_allocator
label_transform	benchmarks/results/make_graphs-3.py	/^    def label_transform(x):$/;"	f
landmark	masstree/kvthread.cc	/^void memdebug::landmark(char* buf, size_t size) const {$/;"	f	class:memdebug
lap	scopedperf.hh	/^  void lap() {$/;"	f	class:scopedperf::base_perf_region
lap	util.h	/^  lap()$/;"	f	class:util::timer
lap_ms	util.h	/^  lap_ms()$/;"	f	class:util::timer
large	small_unordered_map.h	/^    bool large;$/;"	m	class:small_unordered_map::iterator_
large	small_vector.h	/^    bool large;$/;"	m	class:small_vector::iterator_
large_elems	small_unordered_map.h	/^  large_table_type *large_elems;$/;"	m	class:small_unordered_map
large_elems	small_vector.h	/^  large_vector_type *large_elems;$/;"	m	class:small_vector
large_it	small_unordered_map.h	/^    LargeIterType large_it;$/;"	m	class:small_unordered_map::iterator_
large_it	small_vector.h	/^    LargeTypeIter large_it;$/;"	m	class:small_vector::iterator_
large_iterator	small_vector.h	/^  typedef typename large_vector_type::iterator large_iterator;$/;"	t	class:small_vector
large_table_const_iterator	small_unordered_map.h	/^  typedef typename large_table_type::const_iterator large_table_const_iterator;$/;"	t	class:small_unordered_map
large_table_iterator	small_unordered_map.h	/^  typedef typename large_table_type::iterator large_table_iterator;$/;"	t	class:small_unordered_map
large_table_type	small_unordered_map.h	/^  typedef std::unordered_map<Key, T, Hash> large_table_type;$/;"	t	class:small_unordered_map
large_table_type	static_unordered_map.h	/^  typedef std::unordered_map<Key, T, Hash> large_table_type;$/;"	t	class:static_unordered_map
large_vector_type	small_vector.h	/^  typedef std::vector<T> large_vector_type;$/;"	t	class:small_vector
last	benchmarks/MEESUT.h	/^    int size, first, last;$/;"	m	class:TPCE::InputBuffer
lastTradeTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CLastTradeTable*			lastTradeTable;$/;"	m	class:TPCE::CGenerateAndLoad
last_epoch	masstree/log.hh	/^	kvepoch_t last_epoch;$/;"	m	struct:logreplay::info_type
last_no_o_ids	benchmarks/tpcc.cc	/^  int32_t last_no_o_ids[10]; \/\/ XXX(stephentu): hack$/;"	m	class:tpcc_worker	file:
last_open	benchmarks/egen/TxnHarnessStructs.h	/^    double              last_open;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
last_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              last_price;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
last_test	masstree/mttest.cc	/^    String last_test;$/;"	m	struct:__anon67::gnuplot_info	file:
last_tick_inclusive_	ticker.h	/^  std::atomic<uint64_t> last_tick_inclusive_;$/;"	m	class:ticker
last_tid_	persist_test.cc	/^  uint64_t last_tid_; \/\/ TID of the last commit$/;"	m	struct:logbuf_header	file:
last_vol	benchmarks/egen/TxnHarnessStructs.h	/^    INT64               last_vol;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
last_vol	benchmarks/egen/TxnHarnessStructs.h	/^    INT64               last_vol;$/;"	m	struct:TPCE::TSecurityDetailTxnOutput
latency_numer_us	benchmarks/bench.h	/^  uint64_t latency_numer_us;$/;"	m	class:bench_worker
latest_key_callback	benchmarks/bench.h	/^  latest_key_callback(std::string &k, ssize_t limit = -1)$/;"	f	class:latest_key_callback
latest_key_callback	benchmarks/bench.h	/^class latest_key_callback : public abstract_ordered_index::scan_callback {$/;"	c
layer	masstree/masstree_struct.hh	/^    oid_type layer() const {$/;"	f	class:Masstree::leafvalue
layer_	btree.h	/^    bool layer_;$/;"	m	struct:btree::leaf_kvinfo
lazy_timer	masstree/mttest.cc	/^static bool lazy_timer = false;$/;"	v	file:
lcdf	masstree/json.cc	/^namespace lcdf {$/;"	n	file:
lcdf	masstree/json.hh	/^namespace lcdf {$/;"	n
lcdf	masstree/log.hh	/^namespace lcdf { class Json; }$/;"	n
lcdf	masstree/query_masstree.hh	/^namespace lcdf { class Json; }$/;"	n
lcdf	masstree/str.cc	/^namespace lcdf {$/;"	n	file:
lcdf	masstree/str.hh	/^namespace lcdf {$/;"	n
lcdf	masstree/straccum.cc	/^namespace lcdf {$/;"	n	file:
lcdf	masstree/straccum.hh	/^namespace lcdf {$/;"	n
lcdf	masstree/string.cc	/^namespace lcdf {$/;"	n	file:
lcdf	masstree/string.hh	/^namespace lcdf {$/;"	n
lcdf	masstree/string_base.hh	/^namespace lcdf {$/;"	n
leaf	masstree/masstree_struct.hh	/^    leaf(size_t sz, kvtimestamp_t node_ts)$/;"	f	class:Masstree::leaf
leaf	masstree/masstree_struct.hh	/^class leaf : public node_base<P> {$/;"	c	namespace:Masstree
leaf_kvinfo	btree.h	/^    leaf_kvinfo() {} \/\/ for STL$/;"	f	struct:btree::leaf_kvinfo
leaf_kvinfo	btree.h	/^    leaf_kvinfo(key_slice key,$/;"	f	struct:btree::leaf_kvinfo
leaf_kvinfo	btree.h	/^  struct leaf_kvinfo {$/;"	s	class:btree
leaf_node	btree.h	/^  struct leaf_node : public node {$/;"	s	class:btree
leaf_node	btree_impl.h	/^btree<P>::leaf_node::leaf_node()$/;"	f	class:btree::leaf_node
leaf_type	masstree/masstree.hh	/^    typedef leaf<P> leaf_type;$/;"	t	class:Masstree::basic_table
leaf_type	masstree/masstree_remove.hh	/^    typedef typename node_base<P>::leaf_type leaf_type;$/;"	t	struct:Masstree::destroy_rcu_callback
leaf_type	masstree/masstree_scan.hh	/^    typedef leaf<P> leaf_type;$/;"	t	class:Masstree::scanstackelt
leaf_type	masstree/masstree_struct.hh	/^    typedef leaf<P> leaf_type;$/;"	t	class:Masstree::node_base
leaf_type	masstree/masstree_tcursor.hh	/^    typedef leaf<P> leaf_type;$/;"	t	class:Masstree::tcursor
leaf_type	masstree_btree.h	/^  typedef Masstree::leaf<P> leaf_type;$/;"	t	class:mbtree
leaf_width	masstree/masstree.hh	/^    static constexpr int leaf_width = LW;$/;"	m	struct:Masstree::nodeparams
leaf_width	masstree/masstree.hh	/^template <int LW, int IW> constexpr int nodeparams<LW, IW>::leaf_width;$/;"	m	class:Masstree::nodeparams
leafvalue	masstree/masstree_struct.hh	/^    leafvalue() {$/;"	f	class:Masstree::leafvalue
leafvalue	masstree/masstree_struct.hh	/^    leafvalue(node_base<P>* n) {$/;"	f	class:Masstree::leafvalue
leafvalue	masstree/masstree_struct.hh	/^    leafvalue(value_type v) {$/;"	f	class:Masstree::leafvalue
leafvalue	masstree/masstree_struct.hh	/^class leafvalue {$/;"	c	namespace:Masstree
leafvalue_type	masstree/masstree_scan.hh	/^    typedef typename leaf_type::leafvalue_type leafvalue_type;$/;"	t	class:Masstree::scanstackelt
leafvalue_type	masstree/masstree_struct.hh	/^    typedef leafvalue<P> leafvalue_type;$/;"	t	class:Masstree::node_base
leafvalue_type	masstree/masstree_struct.hh	/^    typedef typename node_base<P>::leafvalue_type leafvalue_type;$/;"	t	class:Masstree::leaf
leafvalue_type	masstree/masstree_tcursor.hh	/^    typedef leafvalue<P> leafvalue_type;$/;"	t	class:Masstree::tcursor
leftmost	masstree/masstree_struct.hh	/^    inline leaf_type* leftmost() const {$/;"	f	class:Masstree::node_base
leftmost_descend_layer	btree_impl.h	/^btree<P>::leftmost_descend_layer(node *n) const$/;"	f	class:btree
leftmost_descend_layer	masstree_btree.h	/^mbtree<P>::leftmost_descend_layer(node_base_type *n)$/;"	f	class:mbtree
legacy_compress_file	third-party/lz4/lz4c.c	/^int legacy_compress_file(char* input_filename, char* output_filename, int compressionlevel)$/;"	f
len	masstree/str.hh	/^    int len;$/;"	m	struct:lcdf::Str
len	masstree/str.hh	/^    int len;$/;"	m	struct:lcdf::inline_string
len	masstree/straccum.hh	/^	int len;$/;"	m	struct:lcdf::StringAccum::rep_t
len_	masstree/log.hh	/^            uint32_t len_;$/;"	m	struct:loginfo::__anon78::__anon79
len_	masstree/masstree_key.hh	/^    int len_;$/;"	m	class:Masstree::key
len_	masstree/masstree_remove.hh	/^    int len_;$/;"	m	struct:Masstree::gc_layer_rcu_callback
length	masstree/masstree_key.hh	/^    int length() const {$/;"	f	class:Masstree::key
length	masstree/str.hh	/^    int length() const {$/;"	f	struct:lcdf::Str
length	masstree/str.hh	/^    int length() const {$/;"	f	struct:lcdf::inline_string
length	masstree/straccum.hh	/^inline int StringAccum::length() const {$/;"	f	class:lcdf::StringAccum
length	masstree/string.hh	/^	int length;$/;"	m	struct:lcdf::String::rep_type
length	masstree/string.hh	/^inline int String::length() const {$/;"	f	class:lcdf::String
length	masstree/string_base.hh	/^    int length() const {$/;"	f	class:lcdf::String_base
length	varkey.h	/^  inline int length() const {$/;"	f	class:varkey
length_	btree.h	/^    size_t length_;$/;"	m	struct:btree::leaf_kvinfo
lengths_	btree.h	/^    uint8_t lengths_[NKeysPerNode];$/;"	m	struct:btree::leaf_node
less	masstree/circular_int.hh	/^    static bool less(value_type a, value_type b) {$/;"	f	class:circular_int
less_equal	masstree/circular_int.hh	/^    static bool less_equal(value_type a, value_type b) {$/;"	f	class:circular_int
level	masstree/mttest.cc	/^static double level(const std::vector<double> &v, double frac) {$/;"	f	file:
li_	masstree/log.hh	/^    loginfo li_[0];$/;"	m	class:logset
liab	benchmarks/egen/TxnHarnessStructs.h	/^    double              liab;$/;"	m	struct:TPCE::TFinInfo
liab_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        liab_ind;$/;"	m	struct:TPCE::TFinInfo
lifo	benchmarks/egen/DriverParamSettings.h	/^    INT32   lifo;$/;"	m	struct:TPCE::TTradeOrderSettings
lifo	benchmarks/egen/DriverParamSettings.h	/^    bool    lifo;$/;"	m	struct:TPCE::TTradeOrderSettingsState
likely	macros.h	54;"	d
likely	masstree/compiler.hh	28;"	d
likely	third-party/lz4/lz4.c	149;"	d	file:
limbo_element	masstree/kvthread.hh	/^struct limbo_element {$/;"	s
limbo_epoch_	masstree/kvthread.hh	/^	    uint64_t limbo_epoch_;$/;"	m	struct:threadinfo::__anon72::__anon73
limbo_group	masstree/kvthread.hh	/^    limbo_group()$/;"	f	struct:limbo_group
limbo_group	masstree/kvthread.hh	/^struct limbo_group {$/;"	s
limbo_head_	masstree/kvthread.hh	/^    limbo_group *limbo_head_;$/;"	m	class:threadinfo
limbo_tail_	masstree/kvthread.hh	/^    limbo_group *limbo_tail_;$/;"	m	class:threadinfo
limit	benchmarks/bench.h	/^  const ssize_t limit;$/;"	m	class:limit_callback
limit	benchmarks/bench.h	/^  ssize_t limit;$/;"	m	class:latest_key_callback
limit	benchmarks/egen/DriverParamSettings.h	/^    INT32   limit;$/;"	m	struct:TPCE::TTradeOrderSettings
limit	benchmarks/egen/DriverParamSettings.h	/^    bool    limit;$/;"	m	struct:TPCE::TTradeOrderSettingsState
limit	masstree/mtclient.cc	/^    uint64_t limit() const {$/;"	f	struct:kvtest_client
limit	masstree/mtclient.cc	/^static uint64_t limit = ~uint64_t(0);$/;"	v	file:
limit	masstree/mtd.cc	/^    uint64_t limit() const {$/;"	f	struct:kvtest_client
limit	masstree/mttest.cc	/^    uint64_t limit() const {$/;"	f	struct:kvtest_client
limit_	masstree/mttest.cc	/^    uint64_t limit_;$/;"	m	struct:kvtest_client	file:
limit_callback	benchmarks/bench.h	/^  limit_callback(ssize_t limit = -1)$/;"	f	class:limit_callback
limit_callback	benchmarks/bench.h	/^class limit_callback : public abstract_ordered_index::scan_callback {$/;"	c
line	masstree/kvthread.hh	/^    int line;$/;"	m	struct:memdebug
link_split	masstree/btree_leaflink.hh	/^    static void link_split(N *n, N *nr) {$/;"	f	struct:btree_leaflink
link_split	masstree/btree_leaflink.hh	/^    static void link_split(N *n, N *nr, SF spin_function) {$/;"	f	struct:btree_leaflink
link_split	masstree/btree_leaflink.hh	/^    static void link_split(N *n, N *nr, SF) {$/;"	f	struct:btree_leaflink
list	dbcore/test-rcu-slist.cpp	/^my_list list;$/;"	v
list	dbcore/test-rcu.cpp	/^my_list list;$/;"	v
list_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           list_len;$/;"	m	struct:TPCE::TBrokerVolumeFrame1Output
list_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           list_len;$/;"	m	struct:TPCE::TBrokerVolumeTxnOutput
list_push	dbcore/rcu-slist.cpp	/^    bool list_push(cached_next &point, node *n, _rcu_slist::push_callback_fn *cb, void *x) {$/;"	f	namespace:__anon83
list_visitor	dbcore/test-rcu-slist.cpp	/^    list_visitor(FILE *out)$/;"	f	struct:list_visitor
list_visitor	dbcore/test-rcu-slist.cpp	/^struct list_visitor {$/;"	s	file:
list_visitor	dbcore/test-rcu.cpp	/^    list_visitor(FILE *out)$/;"	f	struct:list_visitor
list_visitor	dbcore/test-rcu.cpp	/^struct list_visitor {$/;"	s	file:
live	masstree/json.hh	/^    bool live() const {$/;"	f	class:lcdf::Json::const_array_iterator
live	masstree/json.hh	/^    bool live() const {$/;"	f	class:lcdf::Json::const_iterator
live	masstree/json.hh	/^    bool live() const {$/;"	f	class:lcdf::Json::const_object_iterator
live_memo_bytes	masstree/string.cc	/^uint64_t String::live_memo_bytes[55];$/;"	m	class:lcdf::String	file:
live_memo_bytes	masstree/string.hh	/^    static uint64_t live_memo_bytes[55];$/;"	m	class:lcdf::String
live_memo_count	masstree/string.cc	/^uint64_t String::live_memo_count;$/;"	m	class:lcdf::String	file:
live_memo_count	masstree/string.hh	/^    static uint64_t live_memo_count;$/;"	m	class:lcdf::String
live_memo_sizes	masstree/string.cc	/^uint64_t String::live_memo_sizes[55];$/;"	m	class:lcdf::String	file:
live_memo_sizes	masstree/string.hh	/^    static uint64_t live_memo_sizes[55];$/;"	m	class:lcdf::String
live_memos	masstree/string.cc	/^String::memo_type *String::live_memos[55];$/;"	m	class:lcdf::String	file:
live_memos	masstree/string.hh	/^    static memo_t *live_memos[55];$/;"	m	class:lcdf::String
ll	third-party/lz4/xxhash.h	/^typedef struct { long long ll[(XXH32_SIZEOFSTATE+(sizeof(long long)-1))\/sizeof(long long)]; } XXH32_stateSpace_t;$/;"	m	struct:__anon3
lm	dbcore/sm-log-impl.h	/^    sm_log_recover_mgr *lm;$/;"	m	struct:sm_log_header_scan_impl
lm	dbcore/sm-log-impl.h	/^    sm_log_recover_mgr *lm;$/;"	m	struct:sm_log_record_scan_impl
lm	dbcore/sm-log-impl.h	/^    sm_log_recover_mgr *lm;$/;"	m	struct:sm_log_scan_mgr_impl
lmmneg	masstree/clp.c	/^    int lmmneg;$/;"	m	struct:__anon43	file:
lmmneg_short	masstree/clp.c	/^    unsigned lmmneg_short : 1;$/;"	m	struct:__anon43	file:
lmmpos	masstree/clp.c	/^    int lmmpos;$/;"	m	struct:__anon43	file:
lmmpos_short	masstree/clp.c	/^    unsigned lmmpos_short : 1;$/;"	m	struct:__anon43	file:
load	benchmarks/bid.cc	/^  load()$/;"	f	class:bid_loader
load	benchmarks/encstress.cc	/^  load()$/;"	f	class:encstress_loader
load	benchmarks/queue.cc	/^  load()$/;"	f	class:queue_table_loader
load	benchmarks/tpcc.cc	/^  load()$/;"	f	class:tpcc_customer_loader
load	benchmarks/tpcc.cc	/^  load()$/;"	f	class:tpcc_district_loader
load	benchmarks/tpcc.cc	/^  load()$/;"	f	class:tpcc_item_loader
load	benchmarks/tpcc.cc	/^  load()$/;"	f	class:tpcc_order_loader
load	benchmarks/tpcc.cc	/^  load()$/;"	f	class:tpcc_stock_loader
load	benchmarks/tpcc.cc	/^  load()$/;"	f	class:tpcc_warehouse_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_address_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_ca_and_ap_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_charge_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_commission_rate_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_company_competitor_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_company_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_customer_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_customer_taxrate_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_daily_market_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_exchange_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_financial_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_growing_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_industry_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_last_trade_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_ni_and_nx_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_sector_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_security_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_status_type_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_tax_rate_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_trade_type_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_wl_and_wi_loader
load	benchmarks/tpce.cc	/^			load()$/;"	f	class:tpce_zip_code_loader
loadUnit	benchmarks/tpce.cc	/^const int loadUnit = 1000;$/;"	v
load_ext_pointer	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::load_ext_pointer(fat_ptr ext_ptr)$/;"	f	class:sm_log_recover_mgr
load_ext_pointer	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::load_ext_pointer(fat_ptr ptr)$/;"	f	class:sm_log_scan_mgr
load_ext_pointer	dbcore/sm-log.cpp	/^sm_log::load_ext_pointer(fat_ptr ptr)$/;"	f	class:sm_log
load_object	dbcore/sm-log-recover.cpp	/^load_object(sm_log_recover_mgr *lm, sm_log_recover_mgr::log_scanner &s,$/;"	f	file:
load_object	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::load_object(char *buf, size_t bufsz, fat_ptr ptr, int align_bits)$/;"	f	class:sm_log_recover_mgr
load_object	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::load_object(fat_ptr &pdest, char *buf, size_t bufsz)$/;"	f	class:sm_log_scan_mgr::header_scan
load_object	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::load_object(char *buf, size_t bufsz, fat_ptr ptr, size_t align_bits)$/;"	f	class:sm_log_scan_mgr
load_object	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::load_object(char *buf, size_t bufsz)$/;"	f	class:sm_log_scan_mgr::record_scan
load_object	dbcore/sm-log.cpp	/^sm_log::load_object(char *buf, size_t bufsz, fat_ptr ptr, size_t align_bits)$/;"	f	class:sm_log
load_unit	benchmarks/egen/TxnHarnessStructs.h	/^    INT32       load_unit;$/;"	m	struct:TPCE::TTradeResultTxnOutput
loading	dbcore/sm-trace.cpp	/^bool loading = true;$/;"	m	namespace:TRACER	file:
local	dbcore/sm-common.h	/^    uint16_t local() const { return _val >> 16; }$/;"	f	struct:XID
local_LZ4_compressHC_limitedOutput	third-party/lz4/fullbench.c	/^static inline int local_LZ4_compressHC_limitedOutput(const char* in, char* out, int inSize)$/;"	f	file:
local_LZ4_compress_limitedOutput	third-party/lz4/fullbench.c	/^static inline int local_LZ4_compress_limitedOutput(const char* in, char* out, int inSize)$/;"	f	file:
local_LZ4_decompress_fast	third-party/lz4/fullbench.c	/^static inline int local_LZ4_decompress_fast(const char* in, char* out, int inSize, int outSize)$/;"	f	file:
local_LZ4_decompress_fast_withPrefix64k	third-party/lz4/fullbench.c	/^static inline int local_LZ4_decompress_fast_withPrefix64k(const char* in, char* out, int inSize, int outSize)$/;"	f	file:
local_LZ4_decompress_safe_partial	third-party/lz4/fullbench.c	/^static inline int local_LZ4_decompress_safe_partial(const char* in, char* out, int inSize, int outSize)$/;"	f	file:
local_txn_counters	benchmarks/bench.h	/^  txn_counter_map local_txn_counters;$/;"	m	class:bench_worker
local_vector	masstree/local_vector.hh	/^class local_vector {$/;"	c
local_vector	masstree/local_vector.hh	/^inline local_vector<T, N, A>::local_vector(const A& allocator)$/;"	f	class:local_vector
local_vector	masstree/local_vector.hh	/^local_vector<T, N, A>::local_vector(const local_vector<T, N, A>& x)$/;"	f	class:local_vector
local_vector	masstree/local_vector.hh	/^local_vector<T, N, A>::local_vector(const local_vector<T, NN, AA>& x)$/;"	f	class:local_vector
lock	benchmarks/egen/locking.cpp	/^void CMutex::lock()$/;"	f	class:TPCE::CMutex
lock	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::lock() const$/;"	f	class:TPCE::ProgressMeter
lock	btree.h	/^    lock()$/;"	f	struct:btree::node
lock	dbcore/sm-common.h	/^    void lock() {$/;"	f	struct:os_mutex_pod
lock	masstree/nodeversion.hh	/^    basic_nodeversion<P> lock() {$/;"	f	class:basic_nodeversion
lock	masstree/nodeversion.hh	/^    basic_nodeversion<P> lock(basic_nodeversion<P> expected) {$/;"	f	class:basic_nodeversion
lock	masstree/nodeversion.hh	/^    basic_nodeversion<P> lock(basic_nodeversion<P> expected, SF spin_function) {$/;"	f	class:basic_nodeversion
lock	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> lock() {$/;"	f	class:basic_singlethreaded_nodeversion
lock	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> lock(basic_singlethreaded_nodeversion<P>) {$/;"	f	class:basic_singlethreaded_nodeversion
lock	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> lock(basic_singlethreaded_nodeversion<P>, SF) {$/;"	f	class:basic_singlethreaded_nodeversion
lock	spinlock.h	/^  lock()$/;"	f	class:spinlock
lock_	masstree/log.hh	/^	uint32_t lock_;$/;"	m	struct:loginfo::front
lock_	ticker.h	/^    spinlock lock_; \/\/ guards current_tick_ and depth_$/;"	m	struct:ticker::tickinfo
lock_bit	masstree/nodeversion.hh	/^	lock_bit = (1U << 0),$/;"	e	enum:nodeversion32_parameters::__anon10
lock_bit	masstree/nodeversion.hh	/^	lock_bit = (1ULL << 8),$/;"	e	enum:nodeversion64_parameters::__anon11
lock_fence	masstree/kvthread.hh	/^    accounting_relax_fence_function lock_fence(threadcounter ci) {$/;"	f	class:threadinfo
lock_fence	masstree_btree.h	/^    relax_fence_function lock_fence(threadcounter) {$/;"	f	class:simple_threadinfo
lock_file	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::lock_file(FID f)$/;"	f	class:sm_oid_mgr_impl
lock_for	ticker.h	/^  lock_for(uint64_t core_id)$/;"	f	class:ticker
lock_guard	lockguard.h	/^  lock_guard(BasicLockable &l, Args &&... args)$/;"	f	class:lock_guard
lock_guard	lockguard.h	/^  lock_guard(BasicLockable *l, Args &&... args)$/;"	f	class:lock_guard
lock_guard	lockguard.h	/^class lock_guard {$/;"	c
lock_next	masstree/btree_leaflink.hh	/^    static inline N *lock_next(N *n, SF spin_function) {$/;"	f	struct:btree_leaflink
lock_owner_	btree.h	/^    std::thread::id lock_owner_;$/;"	m	struct:btree::node
locked	masstree/nodeversion.hh	/^    bool locked() const {$/;"	f	class:basic_nodeversion
locked	masstree/nodeversion.hh	/^    bool locked() const {$/;"	f	class:basic_singlethreaded_nodeversion
locked_parent	masstree/masstree_struct.hh	/^internode<P>* node_base<P>::locked_parent(threadinfo& ti) const$/;"	f	class:Masstree::node_base
locks	benchmarks/tpcc.cc	/^  typename util::vec<T *, 64>::type locks;$/;"	m	class:scoped_multilock	file:
log	masstree/log.hh	/^inline const loginfo& logset::log(int i) const {$/;"	f	class:logset
log	masstree/log.hh	/^inline loginfo& logset::log(int i) {$/;"	f	class:logset
log	txn.h	/^  sm_tx_log* log;$/;"	m	class:transaction
log2	scopedperf.hh	/^log2(T v)$/;"	f	namespace:scopedperf
log2r	scopedperf.hh	/^log2r(T v)$/;"	f	namespace:scopedperf
log2table	scopedperf.hh	/^static const uint8_t log2table[256] = {$/;"	m	namespace:scopedperf
log_allocation	dbcore/sm-log-defs.h	/^struct log_allocation {$/;"	s
log_block	dbcore/sm-log-defs.h	/^struct LOG_ALIGN log_block {$/;"	s
log_chkpt	dbcore/sm-oid.cpp	/^sm_oid_mgr::log_chkpt(sm_heap_mgr *hm, sm_tx_log *tx)$/;"	f	class:sm_oid_mgr
log_compress_extractor	benchmarks/results/make_graphs-6.py	/^    def log_compress_extractor(enabled):$/;"	f
log_delete	dbcore/sm-tx-log.cpp	/^sm_tx_log::log_delete(FID f, OID o) {$/;"	f	class:sm_tx_log
log_epoch_	masstree/log.hh	/^    kvepoch_t log_epoch_;       \/\/ epoch written to log (non-quiescent)$/;"	m	class:loginfo
log_epoch_interval	masstree/log.cc	/^struct timeval log_epoch_interval;$/;"	v	typeref:struct:timeval
log_epoch_time	masstree/log.cc	/^static struct timeval log_epoch_time;$/;"	v	typeref:struct:timeval	file:
log_file_error	dbcore/sm-exceptions.cpp	/^log_file_error::log_file_error(char const volatile *m, ...)$/;"	f	class:log_file_error
log_file_error	dbcore/sm-exceptions.h	/^    log_file_error(char const *m) : msg(m), free_msg(0) { }$/;"	f	struct:log_file_error
log_file_error	dbcore/sm-exceptions.h	/^struct log_file_error {$/;"	s
log_filename	masstree/mtd.cc	/^static String log_filename(const char* logdir, int logindex) {$/;"	f	file:
log_init	masstree/mtd.cc	/^void log_init() {$/;"	f
log_insert	dbcore/sm-tx-log.cpp	/^sm_tx_log::log_insert(FID f, OID o, fat_ptr ptr, int abits, fat_ptr *pdest) {$/;"	f	class:sm_tx_log
log_is_full	dbcore/sm-exceptions.h	/^struct log_is_full {$/;"	s
log_record	dbcore/sm-log-defs.h	/^struct LOG_ALIGN log_record {$/;"	s
log_relocate	dbcore/sm-tx-log.cpp	/^sm_tx_log::log_relocate(FID f, OID o, fat_ptr ptr, int abits) {$/;"	f	class:sm_tx_log
log_request	dbcore/sm-log-defs.h	/^struct LOG_ALIGN log_request {$/;"	s
log_scanner	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::log_scanner::log_scanner(sm_log_recover_mgr *lm, LSN start, bool fetch_payloads)$/;"	f	class:sm_log_recover_mgr::log_scanner
log_scanner	dbcore/sm-log-recover.h	/^    struct log_scanner {$/;"	s	struct:sm_log_recover_mgr
log_segment	dbcore/sm-common.h	/^    int log_segment() const {$/;"	f	struct:fat_ptr
log_segment_array	dbcore/sm-log-segments.h	/^        log_segment_array() {$/;"	f	struct:log_segment_mgr::log_segment_array
log_segment_array	dbcore/sm-log-segments.h	/^    struct log_segment_array {$/;"	s	struct:log_segment_mgr
log_segment_desc	dbcore/sm-log-segments.h	/^struct log_segment_desc {$/;"	s
log_segment_mgr	dbcore/sm-log-segments.cpp	/^log_segment_mgr::log_segment_mgr(uint64_t ssize, uint64_t scsize)$/;"	f	class:log_segment_mgr
log_segment_mgr	dbcore/sm-log-segments.h	/^struct log_segment_mgr {$/;"	s
log_update	dbcore/sm-tx-log.cpp	/^sm_tx_log::log_update(FID f, OID o, fat_ptr ptr, int abits, fat_ptr *pdest) {$/;"	f	class:sm_tx_log
log_write_daemon_thunk	dbcore/sm-log-alloc.cpp	/^    log_write_daemon_thunk(void *arg)$/;"	f	namespace:__anon88
logbuf_header	persist_test.cc	/^struct logbuf_header {$/;"	s	file:
logcmd_epoch	masstree/log.hh	/^    logcmd_epoch = 0x4F50456B,		\/\/ "kEPO"$/;"	e	enum:logcommand
logcmd_modify	masstree/log.hh	/^    logcmd_modify = 0x444F4D6B,		\/\/ "kMOD"$/;"	e	enum:logcommand
logcmd_none	masstree/log.hh	/^    logcmd_none = 0,$/;"	e	enum:logcommand
logcmd_put	masstree/log.hh	/^    logcmd_put = 0x5455506B,		\/\/ "kPUT" in little endian$/;"	e	enum:logcommand
logcmd_quiesce	masstree/log.hh	/^    logcmd_quiesce = 0x4955516B,	\/\/ "kQUI"$/;"	e	enum:logcommand
logcmd_remove	masstree/log.hh	/^    logcmd_remove = 0x4D45526B,		\/\/ "kREM"$/;"	e	enum:logcommand
logcmd_replace	masstree/log.hh	/^    logcmd_replace = 0x3155506B,	\/\/ "kPU1"$/;"	e	enum:logcommand
logcmd_wake	masstree/log.hh	/^    logcmd_wake = 0x4B41576B		\/\/ "kWAK"$/;"	e	enum:logcommand
logcommand	masstree/log.hh	/^enum logcommand {$/;"	g
logdirs	masstree/mtd.cc	/^static std::vector<const char*> logdirs;$/;"	v	file:
logfile_cmds	scripts/tester.py	/^  logfile_cmds = list(itertools.chain.from_iterable([['--logfile', f] for f, _ in LOGGERS]))$/;"	v
logger	benchmarks/ndb_wrapper_impl.h	/^sm_log* transaction_base::logger = NULL;$/;"	m	class:transaction_base
logger	masstree/log.cc	/^void *logger(void *xarg) {$/;"	f
logger	masstree/log.cc	/^void loginfo::logger() {$/;"	f	class:loginfo
logger	txn.h	/^  static sm_log *logger;$/;"	m	class:transaction_base
logger_on_io_completion	persist_test.cc	/^  logger_on_io_completion() {}$/;"	f	class:onecopy_logbased_simulation
logging	masstree/mtd.cc	/^static bool logging = true;$/;"	v	file:
logindex_	masstree/log.hh	/^            int logindex_;$/;"	m	struct:loginfo::__anon78::__anon79
loginfo	masstree/log.cc	/^loginfo::loginfo(logset* ls, int logindex) {$/;"	f	class:loginfo
loginfo	masstree/log.hh	/^class loginfo {$/;"	c
logmsg	benchmarks/egen/EGenLogFormatterTab.h	/^    ostringstream logmsg;$/;"	m	class:TPCE::CLogFormatTab
logrec_base	masstree/log.cc	/^struct logrec_base {$/;"	s	file:
logrec_epoch	masstree/log.cc	/^struct logrec_epoch {$/;"	s	file:
logrec_kv	masstree/log.cc	/^struct logrec_kv {$/;"	s	file:
logrec_kvdelta	masstree/log.cc	/^struct logrec_kvdelta {$/;"	s	file:
logrecord	masstree/log.cc	/^struct logrecord {$/;"	s	file:
logreplay	masstree/log.cc	/^logreplay::logreplay(const String &filename)$/;"	f	class:logreplay
logreplay	masstree/log.hh	/^class logreplay {$/;"	c
logs	masstree/mtd.cc	/^static logset* logs;$/;"	v	file:
logset	masstree/log.hh	/^class logset {$/;"	c
logset_	masstree/log.hh	/^        logset* logset_;$/;"	m	struct:loginfo::front
logset_info	masstree/log.hh	/^    struct logset_info {$/;"	s	class:loginfo
long1neg	masstree/clp.c	/^    int long1neg;$/;"	m	struct:Clp_Internal	file:
long1pos	masstree/clp.c	/^    int long1pos;$/;"	m	struct:Clp_Internal	file:
long_as_short	masstree/clp.c	/^long_as_short(const Clp_Internal *cli, const Clp_Option *o,$/;"	f	file:
long_name	masstree/clp.h	/^    const char *long_name;	\/**< Name of long option, or NULL if the option$/;"	m	struct:Clp_Option
longest_line	benchmarks/results/make_graphs-6.py	/^def longest_line(ls):$/;"	f
lookup_worker	btree.cc	/^    lookup_worker(unsigned long seed, const key_vec &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test7_ns::lookup_worker
lookup_worker	btree.cc	/^  class lookup_worker : public btree_worker {$/;"	c	namespace:mp_test7_ns	file:
low	benchmarks/egen/TxnHarnessStructs.h	/^    double              low;$/;"	m	struct:TPCE::TDailyHistory
low_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        low_ind;$/;"	m	struct:TPCE::TDailyHistory
low_level_search_range_callback	btree.h	/^  class low_level_search_range_callback {$/;"	c	class:btree
low_level_search_range_callback	masstree_btree.h	/^  class low_level_search_range_callback {$/;"	c	class:mbtree
low_level_search_range_callback_wrapper	masstree_btree.h	/^  low_level_search_range_callback_wrapper(F& callback) : callback_(callback) {}$/;"	f	class:mbtree::low_level_search_range_callback_wrapper
low_level_search_range_callback_wrapper	masstree_btree.h	/^class mbtree<P>::low_level_search_range_callback_wrapper :$/;"	c	class:mbtree
low_level_search_range_scanner	masstree_btree.h	/^  low_level_search_range_scanner(const mbtree<P> *btr_ptr, const key_type* boundary,$/;"	f	class:mbtree::low_level_search_range_scanner
low_level_search_range_scanner	masstree_btree.h	/^class mbtree<P>::low_level_search_range_scanner$/;"	c	class:mbtree
lower	masstree/ksearch.hh	/^    static inline int lower(const KA &ka, const T &n) {$/;"	f	struct:key_bound_binary
lower	masstree/ksearch.hh	/^    static inline int lower(const KA &ka, const T &n) {$/;"	f	struct:key_bound_linear
lower	masstree/masstree_scan.hh	/^    template <typename K, typename N> int lower(const K &k, const N *n) const {$/;"	f	struct:Masstree::forward_scan_helper
lower	masstree/masstree_scan.hh	/^    template <typename K, typename N> int lower(const K &k, const N *n) const {$/;"	f	struct:Masstree::reverse_scan_helper
lower	masstree/string.cc	/^String::lower() const$/;"	f	class:lcdf::String
lower_bound_binary	masstree/masstree_get.hh	/^inline int unlocked_tcursor<P>::lower_bound_binary() const$/;"	f	class:Masstree::unlocked_tcursor
lower_bound_linear	masstree/masstree_get.hh	/^inline int unlocked_tcursor<P>::lower_bound_linear() const$/;"	f	class:Masstree::unlocked_tcursor
lower_by	masstree/ksearch.hh	/^    static inline int lower_by(const KA &ka, const T &n, F comparator) {$/;"	f	struct:key_bound_binary
lower_by	masstree/ksearch.hh	/^    static inline int lower_by(const KA &ka, const T &n, F comparator) {$/;"	f	struct:key_bound_linear
lower_with_position	masstree/ksearch.hh	/^    static inline int lower_with_position(const KA &ka, const T &n, int &position) {$/;"	f	struct:key_bound_binary
lower_with_position	masstree/ksearch.hh	/^    static inline int lower_with_position(const KA &ka, const T &n, int &position) {$/;"	f	struct:key_bound_linear
lower_with_position	masstree/masstree_scan.hh	/^    int lower_with_position(const K &k, const N *n, int &kp) const {$/;"	f	struct:Masstree::forward_scan_helper
lower_with_position	masstree/masstree_scan.hh	/^    int lower_with_position(const K &k, const N *n, int &kp) const {$/;"	f	struct:Masstree::reverse_scan_helper
lower_with_position_by	masstree/ksearch.hh	/^    static inline int lower_with_position_by(const KA &ka, const T &n, int &position, F comparator) {$/;"	f	struct:key_bound_binary
lower_with_position_by	masstree/ksearch.hh	/^    static inline int lower_with_position_by(const KA &ka, const T &n, int &position, F comparator) {$/;"	f	struct:key_bound_linear
lsi_	masstree/log.hh	/^            logset_info lsi_;$/;"	m	struct:loginfo::__anon78::__anon80
lsn	dbcore/sm-log-defs.h	/^    LSN lsn;$/;"	m	struct:log_block
lsn2ptr	dbcore/sm-log-offset.cpp	/^sm_log_offset_mgr::lsn2ptr(LSN lsn, bool is_ext)$/;"	f	class:sm_log_offset_mgr
lsn2ptr	dbcore/sm-log.cpp	/^sm_log_impl::lsn2ptr(LSN lsn, bool is_ext) {$/;"	f	class:sm_log_impl
lsn_offset	dbcore/sm-log-defs.h	/^    uintptr_t lsn_offset;$/;"	m	struct:log_allocation
ltrim	masstree/str.hh	/^    Str ltrim() const {$/;"	f	struct:lcdf::Str
ltrim	masstree/string.cc	/^String::ltrim() const$/;"	f	class:lcdf::String
ltrim	masstree/string_base.hh	/^inline typename T::substring_type String_generic::ltrim(const T &str) {$/;"	f	class:lcdf::String_generic
lv_	masstree/local_vector.hh	/^	char lv_[sizeof(T) * N];$/;"	m	struct:local_vector::rep
lv_	masstree/masstree_struct.hh	/^    leafvalue_type lv_[width];$/;"	m	class:Masstree::leaf
lv_	masstree/masstree_tcursor.hh	/^    leafvalue<P> lv_;$/;"	m	class:Masstree::unlocked_tcursor
lz4_bswap16	third-party/lz4/lz4.c	138;"	d	file:
lz4_bswap16	third-party/lz4/lz4.c	140;"	d	file:
lz4_bswap16	third-party/lz4/lz4hc.c	123;"	d	file:
lz4_bswap16	third-party/lz4/lz4hc.c	125;"	d	file:
m	benchmarks/runner.py	/^      m = r.match(folder)$/;"	v
m	dbcore/test-sc-hash.cpp	/^    double m;$/;"	m	struct:mvar_tracker	file:
mErrCode	benchmarks/egen/error.h	/^    }   mErrCode;$/;"	m	class:TPCE::CBaseTxnErr	typeref:enum:TPCE::CBaseTxnErr::__anon96
m_AccsAndPerms	benchmarks/egen/CETxnInputGenerator.h	/^    CCustomerAccountsAndPermissionsTable        m_AccsAndPerms;$/;"	m	class:TPCE::CCETxnInputGenerator
m_AccsAndPerms	benchmarks/egen/DM.h	/^    CCustomerAccountsAndPermissionsTable        m_AccsAndPerms;$/;"	m	class:TPCE::CDM
m_AddressTable	benchmarks/egen/TradeGen.h	/^    CAddressTable                   m_AddressTable;$/;"	m	class:TPCE::CTradeGen
m_BaseTime	benchmarks/egen/MEE.h	/^    CDateTime           m_BaseTime;$/;"	m	class:TPCE::CMEE
m_BaseTime	benchmarks/egen/TimerWheel.h	/^    CDateTime                           m_BaseTime;$/;"	m	class:TPCE::CTimerWheel
m_BatchDuplicates	benchmarks/egen/MEETickerTape.h	/^    INT32               m_BatchDuplicates;$/;"	m	class:TPCE::CMEETickerTape
m_BatchIndex	benchmarks/egen/MEETickerTape.h	/^    INT32               m_BatchIndex;$/;"	m	class:TPCE::CMEETickerTape
m_BrokerTable	benchmarks/egen/TradeGen.h	/^    CBrokersTable                   m_BrokerTable;$/;"	m	class:TPCE::CTradeGen
m_BrokerVolumeTxnInput	benchmarks/egen/CE.h	/^    TBrokerVolumeTxnInput       m_BrokerVolumeTxnInput;$/;"	m	class:TPCE::CCE
m_Brokers	benchmarks/egen/CETxnInputGenerator.h	/^    CBrokersTable                               m_Brokers;$/;"	m	class:TPCE::CCETxnInputGenerator
m_CDM	benchmarks/tpce.cc	/^CDM*						m_CDM;$/;"	v
m_CETransactionMixTotal	benchmarks/egen/CETxnMixGenerator.h	/^    INT32                   m_CETransactionMixTotal;$/;"	m	class:TPCE::CCETxnMixGenerator
m_CacheFirstName	benchmarks/egen/Person.h	/^    char**                  m_CacheFirstName;$/;"	m	class:TPCE::CPerson
m_CacheLastName	benchmarks/egen/Person.h	/^    char**                  m_CacheLastName;$/;"	m	class:TPCE::CPerson
m_CacheNA	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT*                       m_CacheNA;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_CacheNS	benchmarks/egen/HoldingsAndTradesTable.h	/^    int*                        m_CacheNS;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_CacheSFFI	benchmarks/egen/HoldingsAndTradesTable.h	/^    TIdent*                     m_CacheSFFI;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_CacheTS	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    eTaxStatus*                 m_CacheTS;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_CacheZipCode	benchmarks/egen/AddressTable.h	/^    const TZipCodeInputRow** m_CacheZipCode;$/;"	m	class:TPCE::CAddressTable
m_CashTransaction	benchmarks/egen/TradeGen.h	/^    CASH_TRANSACTION_ROW    m_CashTransaction;  \/\/ for the Cash Transaction table$/;"	m	struct:TPCE::TTradeRow
m_ChargeFile	benchmarks/egen/TradeGen.h	/^    TChargeFile*                    m_ChargeFile;          \/\/ CHARGE table from the flat file$/;"	m	class:TPCE::CTradeGen
m_CleanupTxnInput	benchmarks/egen/DM.h	/^    TTradeCleanupTxnInput                       m_CleanupTxnInput;$/;"	m	class:TPCE::CDM
m_CommissionRateFile	benchmarks/egen/TradeGen.h	/^    TCommissionRateFile*            m_CommissionRateFile;  \/\/ COMMISSION_RATE table from the flat file$/;"	m	class:TPCE::CTradeGen
m_CompanyFile	benchmarks/egen/CompanyTable.h	/^    CCompanyFile*       m_CompanyFile;$/;"	m	class:TPCE::CCompanyTable
m_CompanyFile	benchmarks/egen/SecurityTable.h	/^    CCompanyFile*   m_CompanyFile;$/;"	m	class:TPCE::CSecurityTable
m_CompanyFile	benchmarks/egen/TradeGen.h	/^    CCompanyFile*                   m_CompanyFile;$/;"	m	class:TPCE::CTradeGen
m_CompanySPRateFile	benchmarks/egen/CompanyTable.h	/^    TCompanySPRateFile* m_CompanySPRateFile;$/;"	m	class:TPCE::CCompanyTable
m_CompanyTable	benchmarks/egen/FinancialTable.h	/^    CCompanyTable   m_CompanyTable;$/;"	m	class:TPCE::CFinancialTable
m_CompanyTable	benchmarks/egen/NewsItemAndXRefTable.h	/^    CCompanyTable                   m_CompanyTable;$/;"	m	class:TPCE::CNewsItemAndXRefTable
m_CompletedTradeInfo	benchmarks/egen/TradeGen.h	/^    TAdditionalTradeInfo            m_CompletedTradeInfo;$/;"	m	class:TPCE::CTradeGen
m_CurrentSimulatedTime	benchmarks/egen/TradeGen.h	/^    double                          m_CurrentSimulatedTime;$/;"	m	class:TPCE::CTradeGen
m_CurrentTime	benchmarks/egen/MEE.h	/^    CDateTime           m_CurrentTime;$/;"	m	class:TPCE::CMEE
m_CurrentTime	benchmarks/egen/TimerWheel.h	/^    CWheelTime                          m_CurrentTime;$/;"	m	class:TPCE::CTimerWheel
m_CurrentTrades	benchmarks/egen/TradeGen.h	/^                    greater<TTradeInfo> >       m_CurrentTrades;$/;"	m	class:TPCE::CTradeGen
m_CustTaxrateTable	benchmarks/egen/TradeGen.h	/^    CCustomerTaxratesTable          m_CustTaxrateTable;$/;"	m	class:TPCE::CTradeGen
m_CustomerAccountTable	benchmarks/egen/HoldingsAndTradesTable.h	/^    CCustomerAccountsAndPermissionsTable    m_CustomerAccountTable;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_CustomerAccountTable	benchmarks/egen/TradeGen.h	/^    CCustomerAccountsAndPermissionsTable    m_CustomerAccountTable;$/;"	m	class:TPCE::CTradeGen
m_CustomerPositionTxnInput	benchmarks/egen/CE.h	/^    TCustomerPositionTxnInput   m_CustomerPositionTxnInput;$/;"	m	class:TPCE::CCE
m_CustomerSelection	benchmarks/egen/CETxnInputGenerator.h	/^    CCustomerSelection                          m_CustomerSelection;$/;"	m	class:TPCE::CCETxnInputGenerator
m_CustomerSelection	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    CCustomerSelection          m_CustomerSelection;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_CustomerSelection	benchmarks/egen/CustomerTable.h	/^    CCustomerSelection  m_CustomerSelection;$/;"	m	class:TPCE::CCustomerTable
m_CustomerSelection	benchmarks/egen/DM.h	/^    CCustomerSelection                          m_CustomerSelection;$/;"	m	class:TPCE::CDM
m_CustomerSelection	benchmarks/egen/TradeGen.h	/^    CCustomerSelection              m_CustomerSelection;$/;"	m	class:TPCE::CTradeGen
m_CustomerTable	benchmarks/egen/TradeGen.h	/^    CCustomerTable                  m_CustomerTable;$/;"	m	class:TPCE::CTradeGen
m_Cycles	benchmarks/egen/WheelTime.h	/^    INT32           m_Cycles;       \/\/Number of completed cycles so far$/;"	m	class:TPCE::CWheelTime
m_DataMaintenanceTableNum	benchmarks/egen/DM.h	/^    INT32                                       m_DataMaintenanceTableNum;$/;"	m	class:TPCE::CDM
m_DriverCEPartitionSettings	benchmarks/egen/CE.h	/^    CDriverCEPartitionSettings  m_DriverCEPartitionSettings;$/;"	m	class:TPCE::CCE
m_DriverCESettings	benchmarks/egen/CE.h	/^    CDriverCESettings           m_DriverCESettings;$/;"	m	class:TPCE::CCE
m_DriverCETxnSettings	benchmarks/egen/CE.h	/^    TDriverCETxnSettings        m_DriverCETxnSettings;$/;"	m	class:TPCE::CCE
m_DriverDMSettings	benchmarks/egen/DM.h	/^    CDriverDMSettings                           m_DriverDMSettings;$/;"	m	class:TPCE::CDM
m_DriverGlobalSettings	benchmarks/egen/CE.h	/^    CDriverGlobalSettings       m_DriverGlobalSettings;$/;"	m	class:TPCE::CCE
m_DriverGlobalSettings	benchmarks/egen/DM.h	/^    CDriverGlobalSettings                       m_DriverGlobalSettings;$/;"	m	class:TPCE::CDM
m_DriverMEESettings	benchmarks/egen/MEE.h	/^    CDriverMEESettings  m_DriverMEESettings;$/;"	m	class:TPCE::CMEE
m_Enabled	benchmarks/egen/MEETickerTape.h	/^    bool                m_Enabled;$/;"	m	class:TPCE::CMEETickerTape
m_EndTime	benchmarks/egen/CETxnInputGenerator.h	/^    CDateTime                                   m_EndTime;  \/\/ end time of initial trades$/;"	m	class:TPCE::CCETxnInputGenerator
m_ExchangeFile	benchmarks/egen/TradeGen.h	/^    TExchangeFile*                  m_ExchangeFile;        \/\/ EXCHANGE table from the flat file$/;"	m	class:TPCE::CTradeGen
m_FemaleFirstNames	benchmarks/egen/Person.h	/^    TFemaleFirstNamesFile   *m_FemaleFirstNames;$/;"	m	class:TPCE::CPerson
m_Filename	benchmarks/egen/EGenLogger.h	/^    char        m_Filename[iMaxPath];$/;"	m	class:TPCE::CEGenLogger
m_HoldingHistory	benchmarks/egen/TradeGen.h	/^    HOLDING_HISTORY_ROW     m_HoldingHistory[iMaxHoldingHistoryRowsPerTrade];$/;"	m	struct:TPCE::TTradeRow
m_HoldingRow	benchmarks/egen/TradeGen.h	/^    HOLDING_ROW                     m_HoldingRow;$/;"	m	class:TPCE::CTradeGen
m_HoldingSummaryRow	benchmarks/egen/TradeGen.h	/^    HOLDING_SUMMARY_ROW             m_HoldingSummaryRow;$/;"	m	class:TPCE::CTradeGen
m_HoldingTable	benchmarks/egen/TradeGen.h	/^    CHoldingsAndTradesTable         m_HoldingTable;$/;"	m	class:TPCE::CTradeGen
m_Holdings	benchmarks/egen/CETxnInputGenerator.h	/^    CHoldingsAndTradesTable                     m_Holdings;$/;"	m	class:TPCE::CCETxnInputGenerator
m_InTheMoneyLimitOrderQ	benchmarks/egen/MEETickerTape.h	/^    queue<PTickerEntry> m_InTheMoneyLimitOrderQ;$/;"	m	class:TPCE::CMEETickerTape
m_Index	benchmarks/egen/WheelTime.h	/^    INT32           m_Index;        \/\/Index into the current cycle$/;"	m	class:TPCE::CWheelTime
m_LastNames	benchmarks/egen/Person.h	/^    TLastNamesFile          *m_LastNames;$/;"	m	class:TPCE::CPerson
m_LastTime	benchmarks/egen/TimerWheel.h	/^    CWheelTime                          m_LastTime;$/;"	m	class:TPCE::CTimerWheel
m_LimitOrderTimers	benchmarks/egen/MEETickerTape.h	/^    CTimerWheel< TTickerEntry, CMEETickerTape, 900, 1000 >  m_LimitOrderTimers; \/\/Size wheel for 900 seconds with 1,000 millisecond resolution.$/;"	m	class:TPCE::CMEETickerTape
m_LoaderSettings	benchmarks/egen/EGenGenerateAndLoad.h	/^    CLoaderSettings             m_LoaderSettings;$/;"	m	class:TPCE::CGenerateAndLoad
m_Log	benchmarks/egen/EGenLogger.h	/^    ofstream    m_Log;$/;"	m	class:TPCE::CEGenLogger
m_LogLock	benchmarks/egen/EGenLogger.h	/^    CMutex      m_LogLock;$/;"	m	class:TPCE::CEGenLogger
m_LowerCaseLetterToIntMap	benchmarks/egen/SecurityFile.h	/^    map< char, int >        m_LowerCaseLetterToIntMap;$/;"	m	class:TPCE::CSecurityFile
m_MEELock	benchmarks/egen/MEE.h	/^    CMutex              m_MEELock;$/;"	m	class:TPCE::CMEE
m_MEESecurity	benchmarks/egen/LastTradeTable.h	/^    CMEESecurity        m_MEESecurity;$/;"	m	class:TPCE::CLastTradeTable
m_MEESecurity	benchmarks/egen/TradeGen.h	/^    CMEESecurity                    m_MEESecurity;$/;"	m	class:TPCE::CTradeGen
m_MaleFirstNames	benchmarks/egen/Person.h	/^    TMaleFirstNamesFile     *m_MaleFirstNames;$/;"	m	class:TPCE::CPerson
m_MarketWatchTxnInput	benchmarks/egen/CE.h	/^    TMarketWatchTxnInput        m_MarketWatchTxnInput;$/;"	m	class:TPCE::CCE
m_MaxOrderProcessingDelay	benchmarks/egen/MEETradingFloor.h	/^    static const INT32                                      m_MaxOrderProcessingDelay = 5;$/;"	m	class:TPCE::CMEETradingFloor
m_Msg	benchmarks/egen/EGenError.h	/^    string  m_Msg;$/;"	m	class:TPCE::CEGenErrorException
m_NewTrade	benchmarks/egen/TradeGen.h	/^    TTradeInfo                      m_NewTrade;$/;"	m	class:TPCE::CTradeGen
m_NewsBaseDate	benchmarks/egen/NewsItemAndXRefTable.h	/^    CDateTime                       m_NewsBaseDate;$/;"	m	class:TPCE::CNewsItemAndXRefTable
m_NextRow	benchmarks/egen/ZipCodeTable.h	/^    TZipCodeInputRow*   m_NextRow;$/;"	m	class:TPCE::CZipCodeTable
m_NextTime	benchmarks/egen/TimerWheel.h	/^    CWheelTime                          m_NextTime;$/;"	m	class:TPCE::CTimerWheel
m_NextUniqueRecordID	benchmarks/egen/ZipCodeTable.h	/^    UINT32              m_NextUniqueRecordID;$/;"	m	class:TPCE::CZipCodeTable
m_NumberOfTimers	benchmarks/egen/TimerWheel.h	/^    INT32                               m_NumberOfTimers;$/;"	m	class:TPCE::CTimerWheel
m_OrderProcessingDelayMean	benchmarks/egen/MEETradingFloor.h	/^    double                                                  m_OrderProcessingDelayMean;$/;"	m	class:TPCE::CMEETradingFloor
m_OrderTimers	benchmarks/egen/MEETradingFloor.h	/^    CTimerWheel< TTradeRequest, CMEETradingFloor, 5, 1 >    m_OrderTimers;  \/\/Size wheel for 5 seconds with 1 millisecond resolution.$/;"	m	class:TPCE::CMEETradingFloor
m_Person	benchmarks/egen/CETxnInputGenerator.h	/^    CPerson                                     m_Person;$/;"	m	class:TPCE::CCETxnInputGenerator
m_Person	benchmarks/egen/TradeGen.h	/^    CPerson                         m_Person;$/;"	m	class:TPCE::CTradeGen
m_Phones	benchmarks/egen/CustomerTable.h	/^    TAreaCodeFile*      m_Phones;$/;"	m	class:TPCE::CCustomerTable
m_Prefix	benchmarks/egen/BaseLogger.h	/^    char                m_Prefix[64];$/;"	m	class:TPCE::CBaseLogger
m_PriceBoard	benchmarks/egen/MEE.h	/^    CMEEPriceBoard      m_PriceBoard;$/;"	m	class:TPCE::CMEE
m_SUFFIX_SEPARATOR	benchmarks/egen/SecurityFile.h	/^    char                    m_SUFFIX_SEPARATOR;$/;"	m	class:TPCE::CSecurityFile
m_Security	benchmarks/egen/MEEPriceBoard.h	/^    CMEESecurity        m_Security;$/;"	m	class:TPCE::CMEEPriceBoard
m_SecurityDetailTxnInput	benchmarks/egen/CE.h	/^    TSecurityDetailTxnInput     m_SecurityDetailTxnInput;$/;"	m	class:TPCE::CCE
m_SecurityFile	benchmarks/egen/DailyMarketTable.h	/^    CSecurityFile*  m_SecurityFile;$/;"	m	class:TPCE::CDailyMarketTable
m_SecurityFile	benchmarks/egen/LastTradeTable.h	/^    CSecurityFile*      m_SecurityFile;$/;"	m	class:TPCE::CLastTradeTable
m_SecurityFile	benchmarks/egen/SecurityTable.h	/^    CSecurityFile*  m_SecurityFile;$/;"	m	class:TPCE::CSecurityTable
m_SecurityFile	benchmarks/egen/TradeGen.h	/^    CSecurityFile*                  m_SecurityFile;$/;"	m	class:TPCE::CTradeGen
m_SecurityFile	benchmarks/egen/WatchListsAndItemsTable.h	/^    CSecurityFile*  m_SecurityFile;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_SecurityIds	benchmarks/egen/HoldingsAndTradesTable.h	/^    TIdent                      m_SecurityIds[iMaxSecuritiesPerAccount];$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_SecurityTable	benchmarks/egen/TradeGen.h	/^    CSecurityTable                  m_SecurityTable;$/;"	m	class:TPCE::CTradeGen
m_Settlement	benchmarks/egen/TradeGen.h	/^    SETTLEMENT_ROW          m_Settlement;       \/\/ for the Settlement table$/;"	m	struct:TPCE::TTradeRow
m_StartFromDate	benchmarks/egen/DailyMarketTable.h	/^    CDateTime       m_StartFromDate;$/;"	m	class:TPCE::CDailyMarketTable
m_StartTime	benchmarks/egen/CETxnInputGenerator.h	/^    CDateTime                                   m_StartTime;    \/\/ start time of initial trades$/;"	m	class:TPCE::CCETxnInputGenerator
m_StartTime	benchmarks/egen/TradeGen.h	/^    CDateTime                       m_StartTime;$/;"	m	class:TPCE::CTradeGen
m_StatusTypeFile	benchmarks/egen/Brokers.h	/^    TStatusTypeFile*    m_StatusTypeFile;   \/\/ STATUS_TYPE table from the flat file$/;"	m	class:TPCE::CBrokersTable
m_StatusTypeFile	benchmarks/egen/CustomerTable.h	/^    TStatusTypeFile*    m_StatusTypeFile;   \/\/ STATUS_TYPE table from the flat file$/;"	m	class:TPCE::CCustomerTable
m_StatusTypeFile	benchmarks/egen/TradeGen.h	/^    TStatusTypeFile*                m_StatusTypeFile;      \/\/ STATUS_TYPE table from the flat file$/;"	m	class:TPCE::CTradeGen
m_Street	benchmarks/egen/AddressTable.h	/^    TStreetNamesFile*       m_Street;$/;"	m	class:TPCE::CAddressTable
m_StreetSuffix	benchmarks/egen/AddressTable.h	/^    TStreetSuffixFile*      m_StreetSuffix;$/;"	m	class:TPCE::CAddressTable
m_SymbolToIdMap	benchmarks/egen/SecurityFile.h	/^    map< string, TIdent >   m_SymbolToIdMap;$/;"	m	class:TPCE::CSecurityFile
m_SymbolToIdMapIsLoaded	benchmarks/egen/SecurityFile.h	/^    bool                    m_SymbolToIdMapIsLoaded;$/;"	m	class:TPCE::CSecurityFile
m_TickerTape	benchmarks/egen/MEE.h	/^    CMEETickerTape      m_TickerTape;$/;"	m	class:TPCE::CMEE
m_TimerWheel	benchmarks/egen/TimerWheel.h	/^    list< CTimerWheelTimer< T, T2 >* >  m_TimerWheel[ ( Period * ( MsPerSecond \/ Resolution )) ];$/;"	m	class:TPCE::CTimerWheel
m_Trade	benchmarks/egen/TradeGen.h	/^    TRADE_ROW               m_Trade;            \/\/ for the Trade table$/;"	m	struct:TPCE::TTradeRow
m_TradeHistory	benchmarks/egen/TradeGen.h	/^    TRADE_HISTORY_ROW       m_TradeHistory[3];  \/\/ for the Trade History table$/;"	m	struct:TPCE::TTradeRow
m_TradeLookupTxnInput	benchmarks/egen/CE.h	/^    TTradeLookupTxnInput        m_TradeLookupTxnInput;$/;"	m	class:TPCE::CCE
m_TradeOrderTxnInput	benchmarks/egen/CE.h	/^    TTradeOrderTxnInput         m_TradeOrderTxnInput;$/;"	m	class:TPCE::CCE
m_TradeRequest	benchmarks/egen/TradeGen.h	/^    TRADE_REQUEST_ROW       m_TradeRequest;     \/\/ for the Trade Requests table$/;"	m	struct:TPCE::TTradeRow
m_TradeRow	benchmarks/egen/TradeGen.h	/^    TTradeRow                       m_TradeRow;$/;"	m	class:TPCE::CTradeGen
m_TradeStatusTxnInput	benchmarks/egen/CE.h	/^    TTradeStatusTxnInput        m_TradeStatusTxnInput;$/;"	m	class:TPCE::CCE
m_TradeTypeFile	benchmarks/egen/TradeGen.h	/^    TTradeTypeFile*                 m_TradeTypeFile;       \/\/ TRADE_TYPE table from the flat file$/;"	m	class:TPCE::CTradeGen
m_TradeUpdateTxnInput	benchmarks/egen/CE.h	/^    TTradeUpdateTxnInput        m_TradeUpdateTxnInput;$/;"	m	class:TPCE::CCE
m_TradingFloor	benchmarks/egen/MEE.h	/^    CMEETradingFloor    m_TradingFloor;$/;"	m	class:TPCE::CMEE
m_TradingTimeSoFar	benchmarks/egen/MEESecurity.h	/^    INT32       m_TradingTimeSoFar; \/\/ for picking up where we last left off on the price curve$/;"	m	class:TPCE::CMEESecurity
m_TxnInput	benchmarks/egen/DM.h	/^    TDataMaintenanceTxnInput                    m_TxnInput;$/;"	m	class:TPCE::CDM
m_TxnInput	benchmarks/egen/MEETickerTape.h	/^    TMarketFeedTxnInput m_TxnInput;$/;"	m	class:TPCE::CMEETickerTape
m_TxnInputGenerator	benchmarks/egen/CE.h	/^    CCETxnInputGenerator        m_TxnInputGenerator;$/;"	m	class:TPCE::CCE
m_TxnInputGenerator	benchmarks/tpce.cc	/^CCETxnInputGenerator*		m_TxnInputGenerator;$/;"	v
m_TxnMixGenerator	benchmarks/egen/CE.h	/^    CCETxnMixGenerator          m_TxnMixGenerator;$/;"	m	class:TPCE::CCE
m_WheelConfig	benchmarks/egen/TimerWheel.h	/^    TWheelConfig                        m_WheelConfig;$/;"	m	class:TPCE::CTimerWheel
m_ZipCode	benchmarks/egen/AddressTable.h	/^    TZipCodeFile*           m_ZipCode;$/;"	m	class:TPCE::CAddressTable
m_ZipCode	benchmarks/egen/ZipCodeTable.h	/^    TZipCodeFile*       m_ZipCode;$/;"	m	class:TPCE::CZipCodeTable
m_addr	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    CAddressTable               m_addr;     \/\/ADDRESS table - to calculate tax for TRADE$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_addr	benchmarks/egen/CustomerTaxratesTable.h	/^    CAddressTable   m_addr;$/;"	m	class:TPCE::CCustomerTaxratesTable
m_bCacheEnabled	benchmarks/egen/AddressTable.h	/^    bool                    m_bCacheEnabled;$/;"	m	class:TPCE::CAddressTable
m_bCacheEnabled	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    bool                        m_bCacheEnabled;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_bCacheEnabled	benchmarks/egen/EGenGenerateAndLoad.h	/^    bool                        m_bCacheEnabled;$/;"	m	class:TPCE::CGenerateAndLoad
m_bCacheEnabled	benchmarks/egen/HoldingsAndTradesTable.h	/^    bool                        m_bCacheEnabled;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_bCacheEnabled	benchmarks/egen/Person.h	/^    bool                    m_bCacheEnabled;$/;"	m	class:TPCE::CPerson
m_bClearBufferBeforeGeneration	benchmarks/egen/CE.h	/^    bool                        m_bClearBufferBeforeGeneration;$/;"	m	class:TPCE::CCE
m_bCustomerAddress	benchmarks/egen/AddressTable.h	/^    bool                    m_bCustomerAddress; \/\/whether the currently generated row is for a customer$/;"	m	class:TPCE::CAddressTable
m_bCustomerAddressesOnly	benchmarks/egen/AddressTable.h	/^    bool                    m_bCustomerAddressesOnly;   \/\/ whether generating only customer addresses$/;"	m	class:TPCE::CAddressTable
m_bInitNextLoadUnit	benchmarks/egen/WatchListsAndItemsTable.h	/^    bool            m_bInitNextLoadUnit;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_bMoreCompanies	benchmarks/egen/FinancialTable.h	/^    bool            m_bMoreCompanies;$/;"	m	class:TPCE::CFinancialTable
m_bMoreRecords	benchmarks/egen/TableTemplate.h	/^    bool            m_bMoreRecords;     \/\/true if more records can be generated, otherwise false$/;"	m	class:TPCE::TableTemplate
m_bMoreSecurities	benchmarks/egen/DailyMarketTable.h	/^    bool            m_bMoreSecurities;$/;"	m	class:TPCE::CDailyMarketTable
m_bPartitionByCID	benchmarks/egen/CustomerSelection.h	/^    bool        m_bPartitionByCID;$/;"	m	class:TPCE::CCustomerSelection
m_baseseed	benchmarks/egen/bucketsimulator.h	/^        TPCE::RNGSEED           m_baseseed;$/;"	m	class:TPCE::BucketSimulator
m_buckets	benchmarks/egen/bucketsimulator.h	/^        INT64*                  m_buckets;$/;"	m	class:TPCE::BucketSimulator
m_ca	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    CUSTOMER_ACCOUNT_ROW    m_ca;$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_AND_PERMISSION_ROW
m_companies	benchmarks/egen/AddressTable.h	/^    CCompanyFile*           m_companies;$/;"	m	class:TPCE::CAddressTable
m_country_rates	benchmarks/egen/CustomerTaxratesTable.h	/^    CInputFileNoWeight<TTaxRateInputRow>    *m_country_rates;$/;"	m	class:TPCE::CCustomerTaxratesTable
m_current	benchmarks/egen/progressmeter.h	/^        int            m_current;$/;"	m	class:TPCE::ProgressMeter
m_cust	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    CCustomerTable              m_cust;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_cust	benchmarks/egen/CustomerTaxratesTable.h	/^    CCustomerTable  m_cust;$/;"	m	class:TPCE::CCustomerTaxratesTable
m_cust	benchmarks/egen/WatchListsAndItemsTable.h	/^    CCustomerTable  m_cust;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_custcount	benchmarks/egen/bucketsimulator.h	/^        TIdent                  m_custcount;$/;"	m	class:TPCE::BucketSimulator
m_daily_market	benchmarks/egen/DailyMarketTable.h	/^    DAILY_MARKET_ROW    m_daily_market[iDailyMarketTotalRows];$/;"	m	struct:TPCE::DAILY_MARKET_GEN_ROW
m_date	benchmarks/egen/CompanyTable.h	/^    CDateTime           m_date;$/;"	m	class:TPCE::CCompanyTable
m_date	benchmarks/egen/LastTradeTable.h	/^    CDateTime           m_date;$/;"	m	class:TPCE::CLastTradeTable
m_date	benchmarks/egen/SecurityTable.h	/^    CDateTime       m_date;$/;"	m	class:TPCE::CSecurityTable
m_date_time	benchmarks/egen/AddressTable.h	/^    CDateTime               m_date_time;$/;"	m	class:TPCE::CAddressTable
m_dayno	benchmarks/egen/DateTime.h	/^    INT32       m_dayno;    \/\/ absolute day number since 1-Jan-0001, starting from zero$/;"	m	class:TPCE::CDateTime
m_db	benchmarks/egen/TxnHarnessBrokerVolume.h	/^    CBrokerVolumeDBInterface* m_db;$/;"	m	class:TPCE::CBrokerVolume
m_db	benchmarks/egen/TxnHarnessCustomerPosition.h	/^    CCustomerPositionDBInterface* m_db;$/;"	m	class:TPCE::CCustomerPosition
m_db	benchmarks/egen/TxnHarnessDataMaintenance.h	/^    CDataMaintenanceDBInterface* m_db;$/;"	m	class:TPCE::CDataMaintenance
m_db	benchmarks/egen/TxnHarnessMarketFeed.h	/^    CMarketFeedDBInterface*     m_db;$/;"	m	class:TPCE::CMarketFeed
m_db	benchmarks/egen/TxnHarnessMarketWatch.h	/^    CMarketWatchDBInterface* m_db;$/;"	m	class:TPCE::CMarketWatch
m_db	benchmarks/egen/TxnHarnessSecurityDetail.h	/^    CSecurityDetailDBInterface* m_db;$/;"	m	class:TPCE::CSecurityDetail
m_db	benchmarks/egen/TxnHarnessTradeCleanup.h	/^    CTradeCleanupDBInterface* m_db;$/;"	m	class:TPCE::CTradeCleanup
m_db	benchmarks/egen/TxnHarnessTradeLookup.h	/^    CTradeLookupDBInterface* m_db;$/;"	m	class:TPCE::CTradeLookup
m_db	benchmarks/egen/TxnHarnessTradeOrder.h	/^    CTradeOrderDBInterface* m_db;$/;"	m	class:TPCE::CTradeOrder
m_db	benchmarks/egen/TxnHarnessTradeResult.h	/^    CTradeResultDBInterface* m_db;$/;"	m	class:TPCE::CTradeResult
m_db	benchmarks/egen/TxnHarnessTradeStatus.h	/^    CTradeStatusDBInterface* m_db;$/;"	m	class:TPCE::CTradeStatus
m_db	benchmarks/egen/TxnHarnessTradeUpdate.h	/^    CTradeUpdateDBInterface* m_db;$/;"	m	class:TPCE::CTradeUpdate
m_display_interval	benchmarks/egen/progressmeter.h	/^        int            m_display_interval;$/;"	m	class:TPCE::ProgressMeter
m_division_rates	benchmarks/egen/CustomerTaxratesTable.h	/^    CInputFileNoWeight<TTaxRateInputRow>    *m_division_rates;$/;"	m	class:TPCE::CCustomerTaxratesTable
m_eAction	benchmarks/egen/error.h	/^    Action  m_eAction;$/;"	m	class:TPCE::CSystemErr
m_eOutputMode	benchmarks/egen/FlatLoaderFactory.h	/^    FlatFileOutputModes     m_eOutputMode;  \/\/ overwrite\/append$/;"	m	class:TPCE::CFlatLoaderFactory
m_fMeanInTheMoneySubmissionDelay	benchmarks/egen/MEEPriceBoard.h	/^    double              m_fMeanInTheMoneySubmissionDelay;$/;"	m	class:TPCE::CMEEPriceBoard
m_fMeanInTheMoneySubmissionDelay	benchmarks/egen/MEESecurity.h	/^    double      m_fMeanInTheMoneySubmissionDelay;$/;"	m	class:TPCE::CMEESecurity
m_fMeanInTheMoneySubmissionDelay	benchmarks/egen/TradeGen.h	/^    double                          m_fMeanInTheMoneySubmissionDelay;$/;"	m	class:TPCE::CTradeGen
m_fMeanTimeBetweenTrades	benchmarks/egen/TradeGen.h	/^    double                          m_fMeanTimeBetweenTrades;$/;"	m	class:TPCE::CTradeGen
m_fRange	benchmarks/egen/MEESecurity.h	/^    CMoney      m_fRange;       \/\/ price range length (high - low)$/;"	m	class:TPCE::CMEESecurity
m_fRangeHigh	benchmarks/egen/MEESecurity.h	/^    CMoney      m_fRangeHigh;   \/\/ price range end$/;"	m	class:TPCE::CMEESecurity
m_fRangeLow	benchmarks/egen/MEESecurity.h	/^    CMoney      m_fRangeLow;    \/\/ price range start$/;"	m	class:TPCE::CMEESecurity
m_financials	benchmarks/egen/FinancialTable.h	/^    FINANCIAL_ROW   m_financials[ iFinsPerCompany ];$/;"	m	struct:TPCE::FINANCIAL_GEN_ROW
m_iActiveCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent  m_iActiveCompanyCompetitorCount;$/;"	m	class:TPCE::CCompanyCompetitorFile
m_iActiveCompanyCount	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iActiveCompanyCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iActiveCompanyCount	benchmarks/egen/CompanyFile.h	/^    TIdent  m_iActiveCompanyCount;$/;"	m	class:TPCE::CCompanyFile
m_iActiveCustomerCount	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iActiveCustomerCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iActiveSecurityCount	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iActiveSecurityCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iActiveSecurityCount	benchmarks/egen/SecurityFile.h	/^    TIdent  m_iActiveSecurityCount;$/;"	m	class:TPCE::CSecurityFile
m_iAmountInCents	benchmarks/egen/Money.h	/^    INT64   m_iAmountInCents;       \/\/ dollar amount * 100$/;"	m	class:TPCE::CMoney
m_iBaseCompanyCount	benchmarks/egen/CompanyCompetitorFile.h	/^    UINT    m_iBaseCompanyCount;$/;"	m	class:TPCE::CCompanyCompetitorFile
m_iBaseCompanyCount	benchmarks/egen/SecurityFile.h	/^    UINT    m_iBaseCompanyCount;$/;"	m	class:TPCE::CSecurityFile
m_iBrokersCount	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent                      m_iBrokersCount;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iCO_AD_ID_START	benchmarks/egen/CompanyTable.h	/^    TIdent              m_iCO_AD_ID_START;  \/\/starting address id for companies$/;"	m	class:TPCE::CCompanyTable
m_iCacheOffset	benchmarks/egen/AddressTable.h	/^    TIdent                  m_iCacheOffset;$/;"	m	class:TPCE::CAddressTable
m_iCacheOffset	benchmarks/egen/Person.h	/^    TIdent                  m_iCacheOffset;$/;"	m	class:TPCE::CPerson
m_iCacheOffsetNA	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent                      m_iCacheOffsetNA;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iCacheOffsetNS	benchmarks/egen/HoldingsAndTradesTable.h	/^    TIdent                      m_iCacheOffsetNS;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_iCacheOffsetSFFI	benchmarks/egen/HoldingsAndTradesTable.h	/^    TIdent                      m_iCacheOffsetSFFI;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_iCacheOffsetTS	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent                      m_iCacheOffsetTS;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iCacheSize	benchmarks/egen/AddressTable.h	/^    int                     m_iCacheSize;$/;"	m	class:TPCE::CAddressTable
m_iCacheSize	benchmarks/egen/Person.h	/^    int                     m_iCacheSize;$/;"	m	class:TPCE::CPerson
m_iCacheSizeNA	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    int                         m_iCacheSizeNA;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iCacheSizeNS	benchmarks/egen/HoldingsAndTradesTable.h	/^    int                         m_iCacheSizeNS;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_iCacheSizeSFFI	benchmarks/egen/HoldingsAndTradesTable.h	/^    int                         m_iCacheSizeSFFI;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_iCacheSizeTS	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    int                         m_iCacheSizeTS;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iCashTransactionRowCount	benchmarks/egen/TradeGen.h	/^    int                             m_iCashTransactionRowCount;$/;"	m	class:TPCE::CTradeGen
m_iCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorTable.h	/^    TIdent                      m_iCompanyCompetitorCount;$/;"	m	class:TPCE::CCompanyCompetitorTable
m_iCompanyCompetitorCountForOneLoadUnit	benchmarks/egen/CompanyCompetitorTable.h	/^    TIdent                      m_iCompanyCompetitorCountForOneLoadUnit;$/;"	m	class:TPCE::CCompanyCompetitorTable
m_iCompanyCount	benchmarks/egen/AddressTable.h	/^    TIdent                  m_iCompanyCount;    \/\/total # of companies for which to generate addresses$/;"	m	class:TPCE::CAddressTable
m_iCompanyCount	benchmarks/egen/CompanyTable.h	/^    TIdent              m_iCompanyCount;$/;"	m	class:TPCE::CCompanyTable
m_iCompanyCount	benchmarks/egen/CustomerTable.h	/^    TIdent              m_iCompanyCount;    \/\/ number of Companies$/;"	m	class:TPCE::CCustomerTable
m_iCompanyCount	benchmarks/egen/DM.h	/^    TIdent                                      m_iCompanyCount;$/;"	m	class:TPCE::CDM
m_iCompanyCountForOneLoadUnit	benchmarks/egen/CompanyTable.h	/^    TIdent              m_iCompanyCountForOneLoadUnit;$/;"	m	class:TPCE::CCompanyTable
m_iConfiguredCompanyCompetitorCount	benchmarks/egen/CompanyCompetitorFile.h	/^    TIdent  m_iConfiguredCompanyCompetitorCount;$/;"	m	class:TPCE::CCompanyCompetitorFile
m_iConfiguredCompanyCount	benchmarks/egen/CompanyFile.h	/^    TIdent  m_iConfiguredCompanyCount;$/;"	m	class:TPCE::CCompanyFile
m_iConfiguredCustomerCount	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iConfiguredCustomerCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iConfiguredSecurityCount	benchmarks/egen/SecurityFile.h	/^    TIdent  m_iConfiguredSecurityCount;$/;"	m	class:TPCE::CSecurityFile
m_iCountryIndex	benchmarks/egen/TaxrateTable.h	/^    UINT                    m_iCountryIndex;    \/\/ Country file record index used for generation of the current table record$/;"	m	class:TPCE::CTaxrateTable
m_iCountrySubIndex	benchmarks/egen/TaxrateTable.h	/^    UINT                    m_iCountrySubIndex; \/\/ subindex in the vector (record) from Country$/;"	m	class:TPCE::CTaxrateTable
m_iCurExchange	benchmarks/egen/ExchangeTable.h	/^    TIdent              m_iCurExchange;$/;"	m	class:TPCE::CExchangeTable
m_iCurrentAccountForHolding	benchmarks/egen/TradeGen.h	/^    int                             m_iCurrentAccountForHolding;$/;"	m	class:TPCE::CTradeGen
m_iCurrentAccountForHoldingSummary	benchmarks/egen/TradeGen.h	/^    int                             m_iCurrentAccountForHoldingSummary;     \/\/index$/;"	m	class:TPCE::CTradeGen
m_iCurrentCompletedTrades	benchmarks/egen/TradeGen.h	/^    TTrade                          m_iCurrentCompletedTrades;$/;"	m	class:TPCE::CTradeGen
m_iCurrentDayNo	benchmarks/egen/CompanyTable.h	/^    int                 m_iCurrentDayNo;$/;"	m	class:TPCE::CCompanyTable
m_iCurrentDayNo	benchmarks/egen/SecurityTable.h	/^    int             m_iCurrentDayNo;$/;"	m	class:TPCE::CSecurityTable
m_iCurrentElements	benchmarks/egen/FixedArray.h	/^    int             m_iCurrentElements; \/\/current number of elements (cannot be greater than m_iTotalElements)$/;"	m	class:TPCE::CFixedArray
m_iCurrentElements	benchmarks/egen/FixedMap.h	/^    UINT    m_iCurrentElements; \/\/current number of elements (cannot be greater than m_iTotalElements)$/;"	m	class:TPCE::CFixedMap
m_iCurrentInitiatedTrades	benchmarks/egen/TradeGen.h	/^    TTrade                          m_iCurrentInitiatedTrades;$/;"	m	class:TPCE::CTradeGen
m_iCurrentLoadUnit	benchmarks/egen/TradeGen.h	/^    int                             m_iCurrentLoadUnit;$/;"	m	class:TPCE::CTradeGen
m_iCurrentSecurityForHolding	benchmarks/egen/TradeGen.h	/^    int                             m_iCurrentSecurityForHolding;   \/\/ index within the account (not input file)$/;"	m	class:TPCE::CTradeGen
m_iCurrentSecurityForHoldingSummary	benchmarks/egen/TradeGen.h	/^    int                             m_iCurrentSecurityForHoldingSummary;    \/\/index$/;"	m	class:TPCE::CTradeGen
m_iCurrentTradeId	benchmarks/egen/TradeGen.h	/^    TTrade                          m_iCurrentTradeId;$/;"	m	class:TPCE::CTradeGen
m_iCustomerCount	benchmarks/egen/AddressTable.h	/^    TIdent                  m_iCustomerCount;   \/\/total # of customers for whom to generate addresses$/;"	m	class:TPCE::CAddressTable
m_iCustomerCount	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent                      m_iCustomerCount;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iCustomerCount	benchmarks/egen/CustomerSelection.h	/^    TIdent      m_iCustomerCount;$/;"	m	class:TPCE::CCustomerSelection
m_iCustomerCount	benchmarks/egen/CustomerTable.h	/^    TIdent              m_iCustomerCount;$/;"	m	class:TPCE::CCustomerTable
m_iCustomerCount	benchmarks/egen/EGenGenerateAndLoad.h	/^    TIdent                      m_iCustomerCount;$/;"	m	class:TPCE::CGenerateAndLoad
m_iCustomerCount	benchmarks/egen/TradeGen.h	/^    TIdent                          m_iCustomerCount;$/;"	m	class:TPCE::CTradeGen
m_iDailyMarketTotalRows	benchmarks/egen/DailyMarketTable.h	/^    int             m_iDailyMarketTotalRows;$/;"	m	class:TPCE::CDailyMarketTable
m_iDivisionIndex	benchmarks/egen/TaxrateTable.h	/^    UINT                    m_iDivisionIndex;   \/\/ Division file record index used for generation of the current table record$/;"	m	class:TPCE::CTaxrateTable
m_iDivisionSubIndex	benchmarks/egen/TaxrateTable.h	/^    UINT                    m_iDivisionSubIndex;\/\/ subindex in the vector (record) from Division$/;"	m	class:TPCE::CTaxrateTable
m_iDivisionTaxCount	benchmarks/egen/DM.h	/^    INT32                                       m_iDivisionTaxCount;$/;"	m	class:TPCE::CDM
m_iExchangeCount	benchmarks/egen/AddressTable.h	/^    UINT                    m_iExchangeCount;   \/\/total # of exchanges for which to generate addresses$/;"	m	class:TPCE::CAddressTable
m_iExchangeCount	benchmarks/egen/CustomerTable.h	/^    unsigned int        m_iExchangeCount;   \/\/ number of Exchanges$/;"	m	class:TPCE::CCustomerTable
m_iFinQuarter	benchmarks/egen/FinancialTable.h	/^    int             m_iFinQuarter;      \/\/ first quarter to generate financials (0-based)$/;"	m	class:TPCE::CFinancialTable
m_iFinYear	benchmarks/egen/FinancialTable.h	/^    int             m_iFinYear;         \/\/ first year to generate financials$/;"	m	class:TPCE::CFinancialTable
m_iFinancialCountForOneLoadUnit	benchmarks/egen/FinancialTable.h	/^    TIdent          m_iFinancialCountForOneLoadUnit;$/;"	m	class:TPCE::CFinancialTable
m_iHighestKey	benchmarks/egen/FixedMap.h	/^    int     m_iHighestKey;      \/\/Highest key value from limits; taken once in constructor for performance$/;"	m	class:TPCE::CFixedMap
m_iHighestKey	benchmarks/egen/InputFlatFilesDeclarations.h	/^    int     m_iHighestKey;$/;"	m	struct:TPCE::TBaseKeyElementsLimits
m_iHoldingHistoryRowCount	benchmarks/egen/TradeGen.h	/^    int                             m_iHoldingHistoryRowCount;$/;"	m	class:TPCE::CTradeGen
m_iHoursOfInitialTrades	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iHoursOfInitialTrades;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iHoursOfInitialTrades	benchmarks/egen/EGenGenerateAndLoad.h	/^    UINT                        m_iHoursOfInitialTrades;$/;"	m	class:TPCE::CGenerateAndLoad
m_iHoursOfInitialTrades	benchmarks/egen/LastTradeTable.h	/^    int                 m_iHoursOfInitialTrades;$/;"	m	class:TPCE::CLastTradeTable
m_iHoursOfInitialTrades	benchmarks/egen/TradeGen.h	/^    int                             m_iHoursOfInitialTrades;$/;"	m	class:TPCE::CTradeGen
m_iIndustryCount	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iIndustryCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iJan1_1800_DayNo	benchmarks/egen/CompanyTable.h	/^    int                 m_iJan1_1800_DayNo;$/;"	m	class:TPCE::CCompanyTable
m_iJan1_1900DayNo	benchmarks/egen/SecurityTable.h	/^    int             m_iJan1_1900DayNo;$/;"	m	class:TPCE::CSecurityTable
m_iJan2_2000DayNo	benchmarks/egen/SecurityTable.h	/^    int             m_iJan2_2000DayNo;$/;"	m	class:TPCE::CSecurityTable
m_iJan2_2000_DayNo	benchmarks/egen/CompanyTable.h	/^    int                 m_iJan2_2000_DayNo;$/;"	m	class:TPCE::CCompanyTable
m_iLastRowNumber	benchmarks/egen/TableTemplate.h	/^    TIdent          m_iLastRowNumber;   \/\/sequential last row number$/;"	m	class:TPCE::TableTemplate
m_iLoadUnitAccountCount	benchmarks/egen/TradeGen.h	/^    int                             m_iLoadUnitAccountCount;$/;"	m	class:TPCE::CTradeGen
m_iLoadUnitSize	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT                        m_iLoadUnitSize;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iLoadUnitSize	benchmarks/egen/EGenGenerateAndLoad.h	/^    UINT                        m_iLoadUnitSize;$/;"	m	class:TPCE::CGenerateAndLoad
m_iLoadUnitSize	benchmarks/egen/TradeGen.h	/^    int                             m_iLoadUnitSize;$/;"	m	class:TPCE::CTradeGen
m_iMaxActivePrePopulatedTradeID	benchmarks/egen/CETxnInputGenerator.h	/^    INT64                                       m_iMaxActivePrePopulatedTradeID;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iMaxSecIdx	benchmarks/egen/WatchListsAndItemsTable.h	/^    TIdent          m_iMaxSecIdx;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_iMaxSecuritiesPerCA	benchmarks/egen/HoldingsAndTradesTable.h	/^    UINT                        m_iMaxSecuritiesPerCA;  \/\/number of securities per account$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_iMinSecIdx	benchmarks/egen/WatchListsAndItemsTable.h	/^    TIdent          m_iMinSecIdx;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_iMyCustomerCount	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iMyCustomerCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iMyCustomerCount	benchmarks/egen/CustomerSelection.h	/^    TIdent      m_iMyCustomerCount;$/;"	m	class:TPCE::CCustomerSelection
m_iMyStartFromCustomer	benchmarks/egen/CustomerSelection.h	/^    TIdent      m_iMyStartFromCustomer;$/;"	m	class:TPCE::CCustomerSelection
m_iMyStartingCustomerId	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iMyStartingCustomerId;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iNewsCountForOneLoadUnit	benchmarks/egen/NewsItemAndXRefTable.h	/^    TIdent                          m_iNewsCountForOneLoadUnit;$/;"	m	class:TPCE::CNewsItemAndXRefTable
m_iNewsItemsGeneratedForCompany	benchmarks/egen/NewsItemAndXRefTable.h	/^    int                             m_iNewsItemsGeneratedForCompany;$/;"	m	class:TPCE::CNewsItemAndXRefTable
m_iNumSecurities	benchmarks/egen/ExchangeTable.h	/^    INT32               m_iNumSecurities[4];$/;"	m	class:TPCE::CExchangeTable
m_iNumberOfSecurities	benchmarks/egen/MEEPriceBoard.h	/^    TIdent              m_iNumberOfSecurities;$/;"	m	class:TPCE::CMEEPriceBoard
m_iPartitionPercent	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iPartitionPercent;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iPartitionPercent	benchmarks/egen/CustomerSelection.h	/^    int         m_iPartitionPercent;$/;"	m	class:TPCE::CCustomerSelection
m_iPeriod	benchmarks/egen/MEESecurity.h	/^    int         m_iPeriod;      \/\/ time to get to the same price (in seconds)$/;"	m	class:TPCE::CMEESecurity
m_iPermsForCA	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT                        m_iPermsForCA;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iRowsGeneratedForCust	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT                        m_iRowsGeneratedForCust;    \/\/rows already generated for a particular portfolio$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iRowsGeneratedForWL	benchmarks/egen/WatchListsAndItemsTable.h	/^    UINT            m_iRowsGeneratedForWL;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_iRowsGeneratedPerCompany	benchmarks/egen/FinancialTable.h	/^    int             m_iRowsGeneratedPerCompany;$/;"	m	class:TPCE::CFinancialTable
m_iRowsGeneratedPerSecurity	benchmarks/egen/DailyMarketTable.h	/^    int             m_iRowsGeneratedPerSecurity;$/;"	m	class:TPCE::CDailyMarketTable
m_iRowsToGenForCust	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    UINT                        m_iRowsToGenForCust;    \/\/total # of rows to generate for a given portfolio$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iRowsToGenForWL	benchmarks/egen/WatchListsAndItemsTable.h	/^    UINT            m_iRowsToGenForWL;$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_iRowsToGenerate	benchmarks/egen/CustomerTable.h	/^    TIdent              m_iRowsToGenerate;  \/\/total # of rows to generate$/;"	m	class:TPCE::CCustomerTable
m_iScaleFactor	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iScaleFactor;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iScaleFactor	benchmarks/egen/EGenGenerateAndLoad.h	/^    UINT                        m_iScaleFactor;$/;"	m	class:TPCE::CGenerateAndLoad
m_iScaleFactor	benchmarks/egen/TradeGen.h	/^    int                             m_iScaleFactor;$/;"	m	class:TPCE::CTradeGen
m_iSecCount	benchmarks/egen/HoldingsAndTradesTable.h	/^    TIdent                      m_iSecCount;    \/\/number of securities$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_iSectorCount	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iSectorCount;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iSecurityCount	benchmarks/egen/DM.h	/^    TIdent                                      m_iSecurityCount;$/;"	m	class:TPCE::CDM
m_iSecurityCount	benchmarks/egen/DailyMarketTable.h	/^    TIdent          m_iSecurityCount;$/;"	m	class:TPCE::CDailyMarketTable
m_iSecurityCount	benchmarks/egen/LastTradeTable.h	/^    TIdent              m_iSecurityCount;$/;"	m	class:TPCE::CLastTradeTable
m_iSecurityCount	benchmarks/egen/SecurityTable.h	/^    TIdent          m_iSecurityCount;$/;"	m	class:TPCE::CSecurityTable
m_iSecurityCountForOneLoadUnit	benchmarks/egen/DailyMarketTable.h	/^    TIdent          m_iSecurityCountForOneLoadUnit;$/;"	m	class:TPCE::CDailyMarketTable
m_iSecurityCountForOneLoadUnit	benchmarks/egen/LastTradeTable.h	/^    TIdent              m_iSecurityCountForOneLoadUnit;$/;"	m	class:TPCE::CLastTradeTable
m_iSecurityCountForOneLoadUnit	benchmarks/egen/SecurityTable.h	/^    TIdent          m_iSecurityCountForOneLoadUnit;$/;"	m	class:TPCE::CSecurityTable
m_iSettlementRowCount	benchmarks/egen/TradeGen.h	/^    int                             m_iSettlementRowCount;$/;"	m	class:TPCE::CTradeGen
m_iStartFromAccount	benchmarks/egen/TradeGen.h	/^    TIdent                          m_iStartFromAccount;$/;"	m	class:TPCE::CTradeGen
m_iStartFromBroker	benchmarks/egen/Brokers.h	/^    TIdent              m_iStartFromBroker;$/;"	m	class:TPCE::CBrokersTable
m_iStartFromCompany	benchmarks/egen/CETxnInputGenerator.h	/^    TIdent                                      m_iStartFromCompany;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iStartFromCompany	benchmarks/egen/CompanyTable.h	/^    TIdent              m_iStartFromCompany;$/;"	m	class:TPCE::CCompanyTable
m_iStartFromCompany	benchmarks/egen/DM.h	/^    TIdent                                      m_iStartFromCompany;$/;"	m	class:TPCE::CDM
m_iStartFromCompanyCompetitor	benchmarks/egen/CompanyCompetitorTable.h	/^    TIdent                      m_iStartFromCompanyCompetitor;$/;"	m	class:TPCE::CCompanyCompetitorTable
m_iStartFromCustomer	benchmarks/egen/AddressTable.h	/^    TIdent                  m_iStartFromCustomer;$/;"	m	class:TPCE::CAddressTable
m_iStartFromCustomer	benchmarks/egen/Brokers.h	/^    TIdent              m_iStartFromCustomer;$/;"	m	class:TPCE::CBrokersTable
m_iStartFromCustomer	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent                      m_iStartFromCustomer;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iStartFromCustomer	benchmarks/egen/CustomerSelection.h	/^    TIdent      m_iStartFromCustomer;$/;"	m	class:TPCE::CCustomerSelection
m_iStartFromCustomer	benchmarks/egen/CustomerTable.h	/^    TIdent              m_iStartFromCustomer;$/;"	m	class:TPCE::CCustomerTable
m_iStartFromCustomer	benchmarks/egen/DM.h	/^    TIdent                                      m_iStartFromCustomer;$/;"	m	class:TPCE::CDM
m_iStartFromCustomer	benchmarks/egen/EGenGenerateAndLoad.h	/^    TIdent                      m_iStartFromCustomer;$/;"	m	class:TPCE::CGenerateAndLoad
m_iStartFromCustomer	benchmarks/egen/TradeGen.h	/^    TIdent                          m_iStartFromCustomer;$/;"	m	class:TPCE::CTradeGen
m_iStartFromSecurity	benchmarks/egen/DailyMarketTable.h	/^    TIdent          m_iStartFromSecurity;$/;"	m	class:TPCE::CDailyMarketTable
m_iStartFromSecurity	benchmarks/egen/LastTradeTable.h	/^    TIdent              m_iStartFromSecurity;$/;"	m	class:TPCE::CLastTradeTable
m_iStartFromSecurity	benchmarks/egen/SecurityTable.h	/^    TIdent          m_iStartFromSecurity;$/;"	m	class:TPCE::CSecurityTable
m_iStartingCA_ID	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TIdent                      m_iStartingCA_ID;       \/\/ first CA_ID for the current customer$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_iTotalAddressCount	benchmarks/egen/AddressTable.h	/^    TIdent                  m_iTotalAddressCount;   \/\/ total # of address rows to generate$/;"	m	class:TPCE::CAddressTable
m_iTotalBrokers	benchmarks/egen/Brokers.h	/^    TIdent              m_iTotalBrokers;    \/\/total number of brokers rows to generate$/;"	m	class:TPCE::CBrokersTable
m_iTotalCustomers	benchmarks/egen/EGenGenerateAndLoad.h	/^    TIdent                      m_iTotalCustomers;$/;"	m	class:TPCE::CGenerateAndLoad
m_iTotalCustomers	benchmarks/egen/TradeGen.h	/^    TIdent                          m_iTotalCustomers;$/;"	m	class:TPCE::CTradeGen
m_iTotalElements	benchmarks/egen/FixedArray.h	/^    int             m_iTotalElements;   \/\/ total elements from limits; taken once in the constructor for performance$/;"	m	class:TPCE::CFixedArray
m_iTotalElements	benchmarks/egen/InputFlatFilesDeclarations.h	/^    UINT   m_iTotalElements;$/;"	m	struct:TPCE::TBaseElementsLimits
m_iTotalTrades	benchmarks/egen/TradeGen.h	/^    TTrade                          m_iTotalTrades;$/;"	m	class:TPCE::CTradeGen
m_iTradeHistoryRowCount	benchmarks/egen/TradeGen.h	/^    int                             m_iTradeHistoryRowCount;$/;"	m	class:TPCE::CTradeGen
m_iTradeLookupFrame2MaxTimeInMilliSeconds	benchmarks/egen/CETxnInputGenerator.h	/^    INT64                                       m_iTradeLookupFrame2MaxTimeInMilliSeconds;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradeLookupFrame3MaxTimeInMilliSeconds	benchmarks/egen/CETxnInputGenerator.h	/^    INT64                                       m_iTradeLookupFrame3MaxTimeInMilliSeconds;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradeLookupFrame4MaxTimeInMilliSeconds	benchmarks/egen/CETxnInputGenerator.h	/^    INT64                                       m_iTradeLookupFrame4MaxTimeInMilliSeconds;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradeOrderRollbackLevel	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iTradeOrderRollbackLevel;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradeOrderRollbackLimit	benchmarks/egen/CETxnInputGenerator.h	/^    INT32                                       m_iTradeOrderRollbackLimit;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradeUpdateFrame2MaxTimeInMilliSeconds	benchmarks/egen/CETxnInputGenerator.h	/^    INT64                                       m_iTradeUpdateFrame2MaxTimeInMilliSeconds;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradeUpdateFrame3MaxTimeInMilliSeconds	benchmarks/egen/CETxnInputGenerator.h	/^    INT64                                       m_iTradeUpdateFrame3MaxTimeInMilliSeconds;$/;"	m	class:TPCE::CCETxnInputGenerator
m_iTradesPerWorkDay	benchmarks/egen/TradeGen.h	/^    int                             m_iTradesPerWorkDay;$/;"	m	class:TPCE::CTradeGen
m_iTxnArrayCurrentIndex	benchmarks/egen/CETxnMixGenerator.h	/^    INT32                   m_iTxnArrayCurrentIndex;$/;"	m	class:TPCE::CCETxnMixGenerator
m_iWICount	benchmarks/egen/WatchListsAndItemsTable.h	/^    UINT            m_iWICount; \/\/# of items for the last list$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_idMsg	benchmarks/egen/error.h	/^        int     m_idMsg;$/;"	m	class:TPCE::CBaseErr
m_inputFiles	benchmarks/egen/EGenGenerateAndLoad.h	/^    CInputFiles                 m_inputFiles;$/;"	m	class:TPCE::CGenerateAndLoad
m_itercount	benchmarks/egen/bucketsimulator.h	/^        int                     m_itercount;$/;"	m	class:TPCE::BucketSimulator
m_iterstart	benchmarks/egen/bucketsimulator.h	/^        int                     m_iterstart;$/;"	m	class:TPCE::BucketSimulator
m_keys	benchmarks/egen/FixedMap.h	/^    UINT    *m_keys;            \/\/An array that maps key values to indices of the corresponding$/;"	m	class:TPCE::CFixedMap
m_last_time	benchmarks/egen/progressmeter.h	/^        CDateTime      m_last_time;$/;"	m	class:TPCE::ProgressMeter
m_list	benchmarks/egen/FlatFile.h	/^    CFileInMemoryList       m_list;$/;"	m	class:TPCE::CFlatFile
m_list	benchmarks/egen/InputFile.h	/^    CFileInMemoryList       m_list;$/;"	m	class:TPCE::CInputFile
m_list	benchmarks/egen/InputFileNoWeight.h	/^    CFileInMemoryList       m_list;$/;"	m	class:TPCE::CInputFileNoWeight
m_location	benchmarks/egen/error.h	/^        std::string m_location;$/;"	m	class:TPCE::CBaseErr
m_maxbucket	benchmarks/egen/bucketsimulator.h	/^        int                     m_maxbucket;$/;"	m	class:TPCE::BucketSimulator
m_msec	benchmarks/egen/DateTime.h	/^    INT32       m_msec;     \/\/ milliseconds from the beginning of the day$/;"	m	class:TPCE::CDateTime
m_mutex	benchmarks/egen/progressmeter.h	/^        mutable CMutex m_mutex;$/;"	m	class:TPCE::ProgressMeter
m_output	benchmarks/egen/progressmeter.h	/^        std::ostream*  m_output;$/;"	m	class:TPCE::ProgressMeter
m_pBaseTime	benchmarks/egen/MEESecurity.h	/^    CDateTime*  m_pBaseTime;    \/\/ Wall clock time corresponding to m_fInitialTime$/;"	m	class:TPCE::CMEESecurity
m_pBaseTime	benchmarks/egen/MEETickerTape.h	/^    CDateTime*          m_pBaseTime;$/;"	m	class:TPCE::CMEETickerTape
m_pBaseTime	benchmarks/egen/MEETradingFloor.h	/^    CDateTime*  m_pBaseTime;$/;"	m	class:TPCE::CMEETradingFloor
m_pCommTotal	benchmarks/egen/Brokers.h	/^    double*             m_pCommTotal;       \/\/ array of B_COMM_TOTAL values$/;"	m	class:TPCE::CBrokersTable
m_pCompanies	benchmarks/egen/CETxnInputGenerator.h	/^    CCompanyFile*                               m_pCompanies;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pCompanies	benchmarks/egen/DM.h	/^    CCompanyFile*                               m_pCompanies;$/;"	m	class:TPCE::CDM
m_pCompanyCompetitorFile	benchmarks/egen/CompanyCompetitorTable.h	/^    CCompanyCompetitorFile*     m_pCompanyCompetitorFile;$/;"	m	class:TPCE::CCompanyCompetitorTable
m_pCountry	benchmarks/egen/TaxrateTable.h	/^    TTaxRatesCountryFile    *m_pCountry;    \/\/ in-mem representation of Country Tax Rate file$/;"	m	class:TPCE::CTaxrateTable
m_pCurrentSecurityHolding	benchmarks/egen/TradeGen.h	/^    list<THoldingInfo>::iterator    m_pCurrentSecurityHolding;$/;"	m	class:TPCE::CTradeGen
m_pCurrentTime	benchmarks/egen/MEESecurity.h	/^    CDateTime*  m_pCurrentTime;$/;"	m	class:TPCE::CMEESecurity
m_pCurrentTime	benchmarks/egen/MEETickerTape.h	/^    CDateTime*          m_pCurrentTime;$/;"	m	class:TPCE::CMEETickerTape
m_pCurrentTime	benchmarks/egen/MEETradingFloor.h	/^    CDateTime*  m_pCurrentTime;$/;"	m	class:TPCE::CMEETradingFloor
m_pCustomerHoldings	benchmarks/egen/TradeGen.h	/^    TCustomerHoldingArray*          m_pCustomerHoldings;$/;"	m	class:TPCE::CTradeGen
m_pData	benchmarks/egen/FixedArray.h	/^    TData           *m_pData;           \/\/array of data elements$/;"	m	class:TPCE::CFixedArray
m_pData	benchmarks/egen/FixedMap.h	/^    TData   *m_pData;           \/\/array of data elements$/;"	m	class:TPCE::CFixedMap
m_pDivision	benchmarks/egen/TaxrateTable.h	/^    TTaxRatesDivisionFile   *m_pDivision;   \/\/ in-mem representation of Division Tax Rate file$/;"	m	class:TPCE::CTaxrateTable
m_pDriverCETxnSettings	benchmarks/egen/CETxnInputGenerator.h	/^    PDriverCETxnSettings                        m_pDriverCETxnSettings;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pDriverCETxnSettings	benchmarks/egen/CETxnMixGenerator.h	/^    const PDriverCETxnSettings  m_pDriverCETxnSettings;$/;"	m	class:TPCE::CCETxnMixGenerator
m_pExpiryData	benchmarks/egen/TimerWheelTimer.h	/^    T*  m_pExpiryData;                      \/\/The data to be passed back$/;"	m	class:TPCE::CTimerWheelTimer
m_pExpiryFunction	benchmarks/egen/TimerWheelTimer.h	/^    void (T2::* m_pExpiryFunction) ( T* );  \/\/The function to call at expiration$/;"	m	class:TPCE::CTimerWheelTimer
m_pExpiryObject	benchmarks/egen/TimerWheelTimer.h	/^    T2* m_pExpiryObject;                    \/\/The object on which to call the function$/;"	m	class:TPCE::CTimerWheelTimer
m_pIndustries	benchmarks/egen/CETxnInputGenerator.h	/^    TIndustryFile*                              m_pIndustries;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pLastNames	benchmarks/egen/NewsItemAndXRefTable.h	/^    TLastNamesFile*                 m_pLastNames;$/;"	m	class:TPCE::CNewsItemAndXRefTable
m_pLoaderFactory	benchmarks/egen/EGenGenerateAndLoad.h	/^    CBaseLoaderFactory*         m_pLoaderFactory;$/;"	m	class:TPCE::CGenerateAndLoad
m_pLogFormatter	benchmarks/egen/BaseLogger.h	/^    CBaseLogFormatter*  m_pLogFormatter;$/;"	m	class:TPCE::CBaseLogger
m_pLogger	benchmarks/egen/CE.h	/^    CBaseLogger*                m_pLogger;$/;"	m	class:TPCE::CCE
m_pLogger	benchmarks/egen/CETxnInputGenerator.h	/^    CBaseLogger*                                m_pLogger;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pLogger	benchmarks/egen/CETxnMixGenerator.h	/^    CBaseLogger*            m_pLogger;$/;"	m	class:TPCE::CCETxnMixGenerator
m_pLogger	benchmarks/egen/DM.h	/^    CBaseLogger*                                m_pLogger;$/;"	m	class:TPCE::CDM
m_pLogger	benchmarks/egen/EGenGenerateAndLoad.h	/^    CBaseLogger*                m_pLogger;$/;"	m	class:TPCE::CGenerateAndLoad
m_pLogger	benchmarks/egen/MEE.h	/^    CBaseLogger*        m_pLogger;$/;"	m	class:TPCE::CMEE
m_pNews	benchmarks/egen/NewsItemAndXRefTable.h	/^    TNewsFile*                      m_pNews;$/;"	m	class:TPCE::CNewsItemAndXRefTable
m_pNonTaxableAccountName	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TNonTaxableAccountNameFile* m_pNonTaxableAccountName;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_pNumTrades	benchmarks/egen/Brokers.h	/^    int*                m_pNumTrades;       \/\/ array of B_NUM_TRADES values$/;"	m	class:TPCE::CBrokersTable
m_pOutput	benchmarks/egen/EGenGenerateAndLoad.h	/^    CGenerateAndLoadBaseOutput* m_pOutput;$/;"	m	class:TPCE::CGenerateAndLoad
m_pPriceBoard	benchmarks/egen/MEETickerTape.h	/^    CMEEPriceBoard*     m_pPriceBoard;$/;"	m	class:TPCE::CMEETickerTape
m_pPriceBoard	benchmarks/egen/MEETradingFloor.h	/^    CMEEPriceBoard*                                         m_pPriceBoard;$/;"	m	class:TPCE::CMEETradingFloor
m_pRND	benchmarks/egen/CustomerSelection.h	/^    CRandom*    m_pRND; \/\/ external random number generator$/;"	m	class:TPCE::CCustomerSelection
m_pSUT	benchmarks/egen/CE.h	/^    CCESUTInterface*            m_pSUT;$/;"	m	class:TPCE::CCE
m_pSUT	benchmarks/egen/DM.h	/^    CDMSUTInterface*                            m_pSUT;$/;"	m	class:TPCE::CDM
m_pSUT	benchmarks/egen/MEE.h	/^    CMEESUTInterface*   m_pSUT;$/;"	m	class:TPCE::CMEE
m_pSUT	benchmarks/egen/MEETickerTape.h	/^    CMEESUTInterface*   m_pSUT;$/;"	m	class:TPCE::CMEETickerTape
m_pSUT	benchmarks/egen/MEETradingFloor.h	/^    CMEESUTInterface*                                       m_pSUT;$/;"	m	class:TPCE::CMEETradingFloor
m_pSectors	benchmarks/egen/CETxnInputGenerator.h	/^    TSectorFile*                                m_pSectors;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pSecurities	benchmarks/egen/CETxnInputGenerator.h	/^    CSecurityFile*                              m_pSecurities;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pSecurities	benchmarks/egen/DM.h	/^    CSecurityFile*                              m_pSecurities;$/;"	m	class:TPCE::CDM
m_pSecurityFile	benchmarks/egen/MEEPriceBoard.h	/^    CSecurityFile*      m_pSecurityFile;$/;"	m	class:TPCE::CMEEPriceBoard
m_pSendToMarket	benchmarks/egen/TxnHarnessMarketFeed.h	/^    CSendToMarketInterface*     m_pSendToMarket;$/;"	m	class:TPCE::CMarketFeed
m_pSendToMarket	benchmarks/egen/TxnHarnessTradeOrder.h	/^    CSendToMarketInterface* m_pSendToMarket;$/;"	m	class:TPCE::CTradeOrder
m_pStatusType	benchmarks/egen/CETxnInputGenerator.h	/^    TStatusTypeFile*                            m_pStatusType;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pStatusType	benchmarks/egen/DM.h	/^    TStatusTypeFile*                            m_pStatusType;$/;"	m	class:TPCE::CDM
m_pStatusType	benchmarks/egen/MEETickerTape.h	/^    TStatusTypeFile*    m_pStatusType;$/;"	m	class:TPCE::CMEETickerTape
m_pTaxRatesDivision	benchmarks/egen/DM.h	/^    TTaxRatesDivisionFile*                      m_pTaxRatesDivision;$/;"	m	class:TPCE::CDM
m_pTaxableAccountName	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    TTaxableAccountNameFile*    m_pTaxableAccountName;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_pTickerTape	benchmarks/egen/MEETradingFloor.h	/^    CMEETickerTape*                                         m_pTickerTape;$/;"	m	class:TPCE::CMEETradingFloor
m_pTradeType	benchmarks/egen/CETxnInputGenerator.h	/^    TTradeTypeFile*                             m_pTradeType;$/;"	m	class:TPCE::CCETxnInputGenerator
m_pTradeType	benchmarks/egen/MEETickerTape.h	/^    TTradeTypeFile*     m_pTradeType;$/;"	m	class:TPCE::CMEETickerTape
m_pTxnArray	benchmarks/egen/CETxnMixGenerator.h	/^    char*                   m_pTxnArray;$/;"	m	class:TPCE::CCETxnMixGenerator
m_pWheelConfig	benchmarks/egen/WheelTime.h	/^    PWheelConfig    m_pWheelConfig; \/\/Pointer to configuration info for the wheel$/;"	m	class:TPCE::CWheelTime
m_perm	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    ACCOUNT_PERMISSION_ROW  m_perm[iMaxCAPerms+1];$/;"	m	struct:TPCE::CUSTOMER_ACCOUNT_AND_PERMISSION_ROW
m_person	benchmarks/egen/Brokers.h	/^    CPerson             m_person;$/;"	m	class:TPCE::CBrokersTable
m_person	benchmarks/egen/CompanyTable.h	/^    CPerson             m_person;   \/\/for CEO$/;"	m	class:TPCE::CCompanyTable
m_person	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    CPerson                     m_person;$/;"	m	class:TPCE::CCustomerAccountsAndPermissionsTable
m_person	benchmarks/egen/CustomerTable.h	/^    CPerson             m_person;$/;"	m	class:TPCE::CCustomerTable
m_progress	benchmarks/egen/bucketsimulator.h	/^        BucketProgress&         m_progress;$/;"	m	class:TPCE::BucketSimulator
m_rnd	benchmarks/egen/CETxnInputGenerator.h	/^    CRandom                                     m_rnd;      \/\/used inside for parameter generation$/;"	m	class:TPCE::CCETxnInputGenerator
m_rnd	benchmarks/egen/CETxnMixGenerator.h	/^    CRandom                 m_rnd;$/;"	m	class:TPCE::CCETxnMixGenerator
m_rnd	benchmarks/egen/DM.h	/^    CRandom                                     m_rnd;$/;"	m	class:TPCE::CDM
m_rnd	benchmarks/egen/HoldingsAndTradesTable.h	/^    CRandom                     m_rnd;$/;"	m	class:TPCE::CHoldingsAndTradesTable
m_rnd	benchmarks/egen/MEESecurity.h	/^    CRandom     m_rnd;$/;"	m	class:TPCE::CMEESecurity
m_rnd	benchmarks/egen/MEETickerTape.h	/^    CRandom             m_rnd;$/;"	m	class:TPCE::CMEETickerTape
m_rnd	benchmarks/egen/MEETradingFloor.h	/^    CRandom                                                 m_rnd;$/;"	m	class:TPCE::CMEETradingFloor
m_rnd	benchmarks/egen/Person.h	/^    CRandom                 m_rnd;$/;"	m	class:TPCE::CPerson
m_rnd	benchmarks/egen/TableTemplate.h	/^    CRandom         m_rnd;              \/\/random generator - present in all tables$/;"	m	class:TPCE::TableTemplate
m_rnd	benchmarks/egen/TradeGen.h	/^    CRandom                         m_rnd;$/;"	m	class:TPCE::CTradeGen
m_rnd	benchmarks/egen/bucketsimulator.h	/^        CRandom                 m_rnd;$/;"	m	class:TPCE::BucketSimulator
m_row	benchmarks/egen/CustomerTaxratesTable.h	/^    CUSTOMER_TAXRATE_ROW    m_row[iTaxRatesPerCust];    \/\/multiple tax rates rows per customer$/;"	m	struct:TPCE::CUSTOMER_TAXRATE_ROWS
m_row	benchmarks/egen/TableTemplate.h	/^    T               m_row;              \/\/private row for generation$/;"	m	class:TPCE::TableTemplate
m_sLimits	benchmarks/egen/FixedArray.h	/^    TElementsLimits m_sLimits;$/;"	m	class:TPCE::CFixedArray
m_sLimits	benchmarks/egen/FixedMap.h	/^    TKeyAndElementsLimits   m_sLimits;$/;"	m	class:TPCE::CFixedMap
m_seed	benchmarks/egen/Random.h	/^    RNGSEED m_seed;$/;"	m	class:TPCE::CRandom
m_set	benchmarks/egen/WatchListsAndItemsTable.h	/^    IntSet          m_set;  \/\/needed to generate random unique security ids$/;"	m	class:TPCE::CWatchListsAndItemsTable
m_simorders	benchmarks/egen/bucketsimulator.h	/^        TTrade                  m_simorders;$/;"	m	class:TPCE::BucketSimulator
m_start_time	benchmarks/egen/progressmeter.h	/^        CDateTime      m_start_time;$/;"	m	class:TPCE::ProgressMeter
m_szFullFileName	benchmarks/egen/FlatLoaderFactory.h	/^    char                    m_szFullFileName[iMaxPath];$/;"	m	class:TPCE::CFlatLoaderFactory
m_szInDir	benchmarks/egen/EGenGenerateAndLoad.h	/^    char                        m_szInDir[iMaxPath];$/;"	m	class:TPCE::CGenerateAndLoad
m_szOutDir	benchmarks/egen/FlatLoaderFactory.h	/^    char                    m_szOutDir[iMaxPath];$/;"	m	class:TPCE::CFlatLoaderFactory
m_szText	benchmarks/egen/DateTime.h	/^    char*       m_szText;  \/\/ text representation; only allocated if needed$/;"	m	class:TPCE::CDateTime
m_total	benchmarks/egen/progressmeter.h	/^        int            m_total;$/;"	m	class:TPCE::ProgressMeter
m_verbosity	benchmarks/egen/progressmeter.h	/^        int            m_verbosity;$/;"	m	class:TPCE::ProgressMeter
m_watch_items	benchmarks/egen/WatchListsAndItemsTable.h	/^    WATCH_ITEM_ROW  m_watch_items[iMaxItemsInWL+1];$/;"	m	struct:TPCE::WATCH_LIST_AND_ITEM_ROW
m_watch_list	benchmarks/egen/WatchListsAndItemsTable.h	/^    WATCH_LIST_ROW  m_watch_list;$/;"	m	struct:TPCE::WATCH_LIST_AND_ITEM_ROW
magic	masstree/kvthread.hh	/^    int magic;$/;"	m	struct:memdebug
magic_free_value	masstree/kvthread.hh	/^	magic_free_value = 2015593488 \/* = 0x78238410 *\/$/;"	e	enum:memdebug::__anon68
magic_value	masstree/kvthread.hh	/^	magic_value = 389612313 \/* = 0x17390319 *\/,$/;"	e	enum:memdebug::__anon68
main	benchmarks/dbtest.cc	/^main(int argc, char **argv)$/;"	f
main	benchmarks/masstree/kvtest.cc	/^main(int argc, char **argv)$/;"	f
main	dbcore/test-adler.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	dbcore/test-cslist.cpp	/^int main() {$/;"	f
main	dbcore/test-dynarray.cpp	/^int main() {$/;"	f
main	dbcore/test-epoch.cpp	/^int main() {$/;"	f
main	dbcore/test-rcu-slist.cpp	/^int main() {$/;"	f
main	dbcore/test-rcu.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	dbcore/test-sc-hash.cpp	/^int main() {$/;"	f
main	dbcore/test-size-encode.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-log-alloc.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-log-file.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-log-offset.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-log-segments.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-log.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-oid-alloc-impl.cpp	/^int main() {$/;"	f
main	dbcore/test-sm-oid.cpp	/^main()$/;"	f
main	dbcore/test-window-buffer.cpp	/^int main() {$/;"	f
main	dbcore/test-xid.cpp	/^int main()$/;"	f
main	dbcore/w_rand.cpp	/^int main() {$/;"	f
main	masstree/jsontest.cc	/^int main(int argc, char** argv) {$/;"	f
main	masstree/msgpacktest.cc	/^int main(int argc, char** argv) {$/;"	f
main	masstree/mtclient.cc	/^main(int argc, char *argv[])$/;"	f
main	masstree/mtd.cc	/^main(int argc, char *argv[])$/;"	f
main	masstree/mttest.cc	/^main(int argc, char *argv[])$/;"	f
main	masstree/test_atomics.cc	/^int main(int, char *[])$/;"	f
main	masstree/test_string.cc	/^main(int argc, char *argv[])$/;"	f
main	persist_test.cc	/^main(int argc, char **argv)$/;"	f
main	stats_client.cc	/^main(int argc, char **argv)$/;"	f
main	third-party/lz4/fullbench.c	/^int main(int argc, char** argv)$/;"	f
main	third-party/lz4/fuzzer.c	/^int main() {$/;"	f
main	third-party/lz4/lz4c.c	/^int main(int argc, char** argv)$/;"	f
main_	masstree/stringbag.hh	/^	    info_type main_;$/;"	m	struct:stringbag::__anon27::__anon28
make	dbcore/sm-common.h	/^    XID make(uint32_t e, uint16_t i) {$/;"	f	struct:XID
make	dbcore/sm-common.h	/^    fat_ptr make(uintptr_t n, uint8_t sz_code, uint16_t flags=0) {$/;"	f	struct:fat_ptr
make	dbcore/sm-common.h	/^    fat_ptr make(void *ptr, uint8_t sz_code, uint16_t flags=0) {$/;"	f	struct:fat_ptr
make	dbcore/sm-common.h	/^    static LSN make(uintptr_t val, int segnum, uint8_t size_code=INVALID_SIZE_CODE) {$/;"	f	struct:LSN
make	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::make()$/;"	f	class:sm_allocator
make	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::oid_array::make() {$/;"	f	class:sm_oid_mgr_impl::oid_array
make	masstree/json.cc	/^Json::ArrayJson* Json::ArrayJson::make(int n) {$/;"	f	class:lcdf::Json::ArrayJson
make	masstree/kvthread.cc	/^threadinfo *threadinfo::make(int purpose, int index)$/;"	f	class:threadinfo
make	masstree/kvthread.hh	/^    static void* make(void* p, size_t size, int freetype) {$/;"	f	struct:memdebug
make	masstree/log.cc	/^logset* logset::make(int size) {$/;"	f	class:logset
make	masstree/masstree_remove.hh	/^void gc_layer_rcu_callback<P>::make(node_base<P>* root, Str prefix,$/;"	f	class:Masstree::gc_layer_rcu_callback
make	masstree/masstree_struct.hh	/^	static internode<P>* make(threadinfo& ti, basic_table<P>* table) {$/;"	f	class:Masstree::internode
make	masstree/masstree_struct.hh	/^	static leaf<P>* make(int ksufsize, kvtimestamp_t node_ts, threadinfo& ti, basic_table<P>* table) {$/;"	f	class:Masstree::leaf
make	masstree/string_slice.hh	/^    static T make(const char *s, int len) {$/;"	f	struct:string_slice
make_aliasable	masstree/compiler.hh	/^template <typename T> struct make_aliasable {};$/;"	s
make_array	masstree/json.hh	/^inline Json Json::make_array() {$/;"	f	class:lcdf::Json
make_array_reserve	masstree/json.hh	/^inline Json Json::make_array_reserve(int n) {$/;"	f	class:lcdf::Json
make_column	masstree/value_array.hh	/^inline lcdf::inline_string* value_array::make_column(Str str, threadinfo& ti) {$/;"	f	class:value_array
make_comparable	masstree/string_slice.hh	/^    static T make_comparable(const char *s, int len) {$/;"	f	struct:string_slice
make_comparable_sloppy	masstree/string_slice.hh	/^    static T make_comparable_sloppy(const char *s, int len) {$/;"	f	struct:string_slice
make_empty	masstree/kpermuter.hh	/^    static inline value_type make_empty() {$/;"	f	class:kpermuter
make_empty	masstree/masstree_struct.hh	/^    static leafvalue<P> make_empty() {$/;"	f	class:Masstree::leafvalue
make_empty	masstree/string.hh	/^inline const String& String::make_empty() {$/;"	f	class:lcdf::String
make_fill	masstree/string.cc	/^String::make_fill(int c, int len)$/;"	f	class:lcdf::String
make_index	masstree/value_string.hh	/^inline value_string::index_type value_string::make_index(unsigned offset, unsigned length) {$/;"	f	class:value_string
make_info	masstree/stringbag.hh	/^    static info_type make_info(int pos, int len) {$/;"	f	class:stringbag
make_loaders	benchmarks/bid.cc	/^  make_loaders()$/;"	f	class:bid_bench_runner
make_loaders	benchmarks/encstress.cc	/^  make_loaders()$/;"	f	class:encstress_bench_runner
make_loaders	benchmarks/queue.cc	/^  make_loaders()$/;"	f	class:queue_bench_runner
make_loaders	benchmarks/tpcc.cc	/^  make_loaders()$/;"	f	class:tpcc_bench_runner
make_loaders	benchmarks/tpce.cc	/^			make_loaders()$/;"	f	class:tpce_bench_runner
make_log_request	dbcore/sm-tx-log.cpp	/^make_log_request(log_record_type type, FID f, OID o, fat_ptr ptr, int abits) {$/;"	f	file:
make_lsn	dbcore/sm-log-file.h	/^        LSN make_lsn(uint64_t lsn_offset) {$/;"	f	struct:sm_log_file_mgr::segment_id
make_message	masstree/mtd.cc	/^String kvtest_client::make_message(StringAccum &sa) const {$/;"	f	class:kvtest_client
make_message	masstree/mttest.cc	/^String kvtest_client<T>::make_message(lcdf::StringAccum &sa) const {$/;"	f	class:kvtest_client
make_new_decay	dbcore/sm-defs.h	/^    make_new_decay(Tuple t) : tup(std::move(t)) { }$/;"	f	struct:make_new_decay
make_new_decay	dbcore/sm-defs.h	/^struct make_new_decay {$/;"	s
make_new_helper	dbcore/sm-defs.h	/^struct make_new_helper : make_new_helper<N-1, Tuple, N-1, i...> { };$/;"	s
make_new_helper	dbcore/sm-defs.h	/^struct make_new_helper<0, Tuple, i...> { typedef make_new_decay<Tuple, i...> type; };$/;"	s
make_nodeversion	masstree/masstree_struct.hh	/^struct make_nodeversion {$/;"	s	namespace:Masstree
make_null	masstree/json.hh	/^inline const Json& Json::make_null() {$/;"	f	class:lcdf::Json
make_object	masstree/json.hh	/^inline Json Json::make_object() {$/;"	f	class:lcdf::Json
make_oid_dynarray	dbcore/sm-oid-impl.h	/^    dynarray make_oid_dynarray() {$/;"	f	struct:sm_oid_mgr_impl
make_out_of_memory	masstree/string.hh	/^inline const String &String::make_out_of_memory() {$/;"	f	class:lcdf::String
make_pair	scopedperf.hh	/^make_pair(const A &a, const B &b)$/;"	f	namespace:scopedperf
make_prefetcher	masstree/masstree_struct.hh	/^struct make_prefetcher {$/;"	s	namespace:Masstree
make_root	masstree/masstree_struct.hh	/^    static leaf<P>* make_root(int ksufsize, leaf<P>* parent, threadinfo& ti, basic_table<P>* table) {$/;"	f	class:Masstree::leaf
make_sized_row	masstree/value_array.cc	/^value_array* value_array::make_sized_row(int ncol, kvtimestamp_t ts,$/;"	f	class:value_array
make_sized_row	masstree/value_versioned_array.cc	/^value_versioned_array* value_versioned_array::make_sized_row(int ncol, kvtimestamp_t ts, threadinfo& ti) {$/;"	f	class:value_versioned_array
make_sloppy	masstree/string_slice.hh	/^    static T make_sloppy(const char *s, int len) {$/;"	f	struct:string_slice
make_sorted	masstree/kpermuter.hh	/^    static inline value_type make_sorted(int n) {$/;"	f	class:kpermuter
make_stable	masstree/string.hh	/^inline String String::make_stable(const String_base<T>& str) {$/;"	f	class:lcdf::String
make_stable	masstree/string.hh	/^inline String String::make_stable(const char *cstr) {$/;"	f	class:lcdf::String
make_stable	masstree/string.hh	/^inline String String::make_stable(const char* first, const char* last) {$/;"	f	class:lcdf::String
make_stable	masstree/string.hh	/^inline String String::make_stable(const char* s, int len) {$/;"	f	class:lcdf::String
make_string	masstree/json.hh	/^inline Json Json::make_string(const String &x) {$/;"	f	class:lcdf::Json
make_string	masstree/json.hh	/^inline Json Json::make_string(const char *s, int len) {$/;"	f	class:lcdf::Json
make_transfer	masstree/straccum.hh	/^inline StringAccum StringAccum::make_transfer(String& x) {$/;"	f	class:lcdf::StringAccum
make_uninitialized	masstree/string.hh	/^inline String String::make_uninitialized(int len) {$/;"	f	class:lcdf::String
make_workers	benchmarks/bid.cc	/^  make_workers()$/;"	f	class:bid_bench_runner
make_workers	benchmarks/encstress.cc	/^  make_workers()$/;"	f	class:encstress_bench_runner
make_workers	benchmarks/queue.cc	/^  make_workers()$/;"	f	class:queue_bench_runner
make_workers	benchmarks/tpcc.cc	/^  make_workers()$/;"	f	class:tpcc_bench_runner
make_workers	benchmarks/tpce.cc	/^			make_workers()$/;"	f	class:tpce_bench_runner
make_zero	masstree/string.hh	/^inline const String& String::make_zero() {$/;"	f	class:lcdf::String
manages	str_arena.h	/^  manages(const std::string *px) const$/;"	f	class:str_arena
manages_local	str_arena.h	/^  manages_local(const std::string *px) const$/;"	f	class:str_arena
manages_overflow	str_arena.h	/^  manages_overflow(const std::string *px) const$/;"	f	class:str_arena
mandatory_assert	masstree/config.h	292;"	d
many_get_check	masstree/mtclient.cc	/^    void many_get_check(int, long [], long []) {$/;"	f	struct:kvtest_client
map_agg	benchmarks/bench.cc	/^map_agg(map<K, V> &agg, const map<K, V> &m)$/;"	f	file:
map_maxer	benchmarks/bench.cc	/^struct map_maxer {$/;"	s	file:
map_type	benchmarks/bench.cc	/^  typedef map<K, V> map_type;$/;"	t	struct:map_maxer	file:
mapped_type	small_unordered_map.h	/^  typedef T mapped_type;$/;"	t	class:small_unordered_map
mapped_type	static_unordered_map.h	/^  typedef T mapped_type;$/;"	t	class:static_unordered_map
margin	benchmarks/egen/TxnHarnessStructs.h	/^    double              margin;$/;"	m	struct:TPCE::TFinInfo
margin_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        margin_ind;$/;"	m	struct:TPCE::TFinInfo
mark	dbcore/stopwatch.h	/^    uint64_t mark() const { return _mark; }$/;"	f	class:stopwatch_t
mark	masstree/btree_leaflink.hh	/^    static inline N *mark(N *n) {$/;"	f	struct:btree_leaflink
mark	masstree/kvthread.hh	/^    void mark(threadcounter ci) {$/;"	f	class:threadinfo
mark	masstree/kvthread.hh	/^    void mark(threadcounter ci, int64_t delta) {$/;"	f	class:threadinfo
mark	masstree_btree.h	/^    void mark(threadcounter) {$/;"	f	class:simple_threadinfo
mark	masstree_btree.h	/^    void mark(threadcounter, int64_t) {$/;"	f	class:simple_threadinfo
mark_change	masstree/nodeversion.hh	/^    void mark_change(bool is_split) {$/;"	f	class:basic_nodeversion
mark_change	masstree/nodeversion.hh	/^    void mark_change(bool is_split) {$/;"	f	class:basic_singlethreaded_nodeversion
mark_deleted	masstree/nodeversion.hh	/^    basic_nodeversion<P> mark_deleted() {$/;"	f	class:basic_nodeversion
mark_deleted	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> mark_deleted() {$/;"	f	class:basic_singlethreaded_nodeversion
mark_deleted_layer	masstree/masstree_struct.hh	/^    inline void mark_deleted_layer() {$/;"	f	class:Masstree::leaf
mark_deleted_tree	masstree/nodeversion.hh	/^    void mark_deleted_tree() {$/;"	f	class:basic_nodeversion
mark_deleted_tree	masstree/nodeversion.hh	/^    void mark_deleted_tree() {$/;"	f	class:basic_singlethreaded_nodeversion
mark_deleting	btree.h	/^    mark_deleting()$/;"	f	struct:btree::node
mark_insert	masstree/nodeversion.hh	/^    basic_nodeversion<P> mark_insert(basic_nodeversion<P> current_version) {$/;"	f	class:basic_nodeversion
mark_insert	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> mark_insert(basic_singlethreaded_nodeversion<P>) {$/;"	f	class:basic_singlethreaded_nodeversion
mark_insert	masstree/nodeversion.hh	/^    void mark_insert() {$/;"	f	class:basic_nodeversion
mark_insert	masstree/nodeversion.hh	/^    void mark_insert() {$/;"	f	class:basic_singlethreaded_nodeversion
mark_modifying	btree.h	/^    mark_modifying()$/;"	f	struct:btree::node
mark_nonroot	masstree/nodeversion.hh	/^    void mark_nonroot() {$/;"	f	class:basic_nodeversion
mark_nonroot	masstree/nodeversion.hh	/^    void mark_nonroot() {$/;"	f	class:basic_singlethreaded_nodeversion
mark_root	masstree/nodeversion.hh	/^    void mark_root() {$/;"	f	class:basic_nodeversion
mark_root	masstree/nodeversion.hh	/^    void mark_root() {$/;"	f	class:basic_singlethreaded_nodeversion
mark_split	masstree/nodeversion.hh	/^    void mark_split() {$/;"	f	class:basic_nodeversion
mark_split	masstree/nodeversion.hh	/^    void mark_split() {$/;"	f	class:basic_singlethreaded_nodeversion
marked_ptr	marked_ptr.h	/^  constexpr inline marked_ptr() : px(0) {}$/;"	f	class:marked_ptr
marked_ptr	marked_ptr.h	/^  inline marked_ptr(U *px) : px(reinterpret_cast<uintptr_t>(px))$/;"	f	class:marked_ptr
marked_ptr	marked_ptr.h	/^  inline marked_ptr(const marked_ptr<U> &o)$/;"	f	class:marked_ptr
marked_ptr	marked_ptr.h	/^class marked_ptr {$/;"	c
marker_type_	masstree/kvproto.hh	/^    int marker_type_;$/;"	m	struct:row_marker
market	benchmarks/egen/DriverParamSettings.h	/^    INT32   market;$/;"	m	struct:TPCE::TTradeOrderSettings
market	benchmarks/egen/DriverParamSettings.h	/^    bool    market;$/;"	m	struct:TPCE::TTradeOrderSettingsState
market_feed	benchmarks/tpce.cc	/^		txn_result market_feed()$/;"	f	class:tpce_worker
market_init	benchmarks/egen/EGenLoader.cpp	/^CMEE* market_init(INT32 TradingTimeSoFar, CMEESUTInterface *pSUT, UINT32 UniqueId){$/;"	f
market_price	benchmarks/egen/TxnHarnessStructs.h	/^    double  market_price;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
market_watch	benchmarks/tpce.cc	/^		txn_result market_watch()$/;"	f	class:tpce_worker
mask	scopedperf.hh	/^  static const uint64_t mask =$/;"	m	class:scopedperf::namedctr
mask_	util.h	/^struct mask_ {$/;"	s	namespace:util
mass	masstree/compiler.hh	/^namespace mass {$/;"	n
masstree_invariant	masstree/config.h	300;"	d
masstree_invariant	masstree/config.h	302;"	d
masstree_params	masstree_btree.h	/^struct masstree_params : public Masstree::nodeparams<> {$/;"	s
masstree_precondition	masstree/config.h	311;"	d
masstree_precondition	masstree/config.h	313;"	d
masstree_single_threaded_params	masstree_btree.h	/^struct masstree_single_threaded_params : public masstree_params {$/;"	s
master	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl *master;$/;"	m	namespace:__anon93	file:
match	benchmarks/results/make_graphs-4.py	/^  def match(ent):$/;"	f	function:filter_name
match	benchmarks/results/make_graphs-5.py	/^        def match(ent):$/;"	f	function:datafromfile.filter_name
matchlimit	third-party/lz4/lz4_encoder.h	98;"	d
max	dbcore/sm-defs.h	/^max(A a, B b) $/;"	f
max	dbcore/sm-defs.h	/^max(T const &a, T const &b)$/;"	f
max	dbcore/w_rand.h	/^    uint32_t max() { return ~0; }$/;"	f	struct:w_rand_urng
max	masstree/kvstats.hh	/^  double min, max, sum, sumsq;$/;"	m	struct:kvstats
max_	counter.h	/^  uint64_t max_;$/;"	m	struct:counter_data
max_acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              max_acct_id;$/;"	m	struct:TPCE::TTradeLookupFrame3Input
max_acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              max_acct_id;$/;"	m	struct:TPCE::TTradeLookupTxnInput
max_acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              max_acct_id;$/;"	m	struct:TPCE::TTradeUpdateFrame3Input
max_acct_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              max_acct_id;$/;"	m	struct:TPCE::TTradeUpdateTxnInput
max_acct_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_acct_len = iMaxAccountsPerCust;$/;"	m	namespace:TPCE
max_alloc_size	dbcore/sm-oid-alloc-impl.h	/^    size_t max_alloc_size() {$/;"	f	struct:sm_allocator
max_broker_list_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_broker_list_len = 40;$/;"	m	namespace:TPCE
max_buffer	benchmarks/MEESUT.h	/^const int max_buffer = 512000;$/;"	m	namespace:TPCE
max_bytes_read	txn_btree.h	/^    size_t max_bytes_read;$/;"	m	class:txn_btree_::single_value_reader
max_bytes_read	txn_btree.h	/^    size_t max_bytes_read;$/;"	m	class:txn_btree_::value_reader
max_comp_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_comp_len = 3;$/;"	m	namespace:TPCE
max_count	dbcore/rcu.cpp	/^    int max_count;$/;"	m	struct:RCU::pointer_stash	file:
max_day_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_day_len = 20;$/;"	m	namespace:TPCE
max_depth	masstree/json.hh	/^	max_depth = 2048$/;"	e	enum:lcdf::Json::__anon49
max_depth	masstree/json.hh	/^        max_depth = 2048$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
max_events	masstree/mtd.cc	/^    enum { max_events = 100 };$/;"	e	enum:tcpfds::__anon59	file:
max_feed_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_feed_len = 20;$/;"	m	namespace:TPCE
max_fin_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_fin_len = 20;$/;"	m	namespace:TPCE
max_flushed_epoch	masstree/mtd.cc	/^max_flushed_epoch()$/;"	f	file:
max_halfinfo	masstree/stringbag.hh	/^    static constexpr int max_halfinfo = (1 << (4 * sizeof(info_type))) - 1;$/;"	m	class:stringbag
max_hist_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_hist_len = 10 * 3;$/;"	m	namespace:TPCE
max_key	btree.cc	/^  static const size_t max_key = 45;$/;"	m	namespace:mp_test5_ns	file:
max_length	masstree/string.hh	/^    enum { max_length = 0x7FFFFFE0 };$/;"	e	enum:lcdf::String::__anon45
max_nbytes	record/inline_str.h	/^  max_nbytes()$/;"	f	struct:serializer
max_nbytes	record/serializer.h	/^  max_nbytes()$/;"	f	struct:generic_serializer
max_nbytes	record/serializer.h	/^  max_nbytes()$/;"	f	struct:serializer
max_news_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_news_len = 2;$/;"	m	namespace:TPCE
max_rows_to_return	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_rows_to_return;$/;"	m	struct:TPCE::TSecurityDetailTxnInput
max_size	dbcore/dynarray.cpp	/^dynarray::max_size() {$/;"	f	class:dynarray
max_size	record/inline_str.h	/^  max_size() const$/;"	f	class:inline_str_base
max_stddev	benchmarks/egen/bucketsimulator.cpp	/^double BucketProgress::max_stddev() {$/;"	f	class:TPCE::BucketProgress
max_stddev_	benchmarks/egen/bucketsimulator.h	/^        double max_stddev_;$/;"	m	class:TPCE::BucketProgress
max_table_name	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_table_name = 30;$/;"	m	namespace:TPCE
max_trade_status_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 max_trade_status_len = 50;$/;"	m	namespace:TPCE
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeLookupFrame1Input
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeLookupFrame2Input
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeLookupFrame3Input
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeLookupTxnInput
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeUpdateFrame1Input
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeUpdateFrame2Input
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeUpdateFrame3Input
max_trades	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_trades;$/;"	m	struct:TPCE::TTradeUpdateTxnInput
max_updates	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_updates;$/;"	m	struct:TPCE::TTradeUpdateFrame1Input
max_updates	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_updates;$/;"	m	struct:TPCE::TTradeUpdateFrame2Input
max_updates	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_updates;$/;"	m	struct:TPCE::TTradeUpdateFrame3Input
max_updates	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               max_updates;$/;"	m	struct:TPCE::TTradeUpdateTxnInput
max_value	benchmarks/masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0x7FFFFFFF };$/;"	e	enum:kvrandom_lcg_nr::__anon99
max_value	benchmarks/masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon97
max_value	benchmarks/masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_psdes_nr::__anon100
max_value	masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0x7FFFFFFF };$/;"	e	enum:kvrandom_lcg_nr::__anon31
max_value	masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon29
max_value	masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_psdes_nr::__anon32
max_width	masstree/kpermuter.hh	/^    enum { max_width = (int) (sizeof(storage_type) * 2 - 1) };$/;"	e	enum:kpermuter::__anon40
maxcpu	scopedperf.hh	/^  enum { maxcpu = 256 };$/;"	e	enum:scopedperf::perfsum_tmpl::__anon102
maxkey	btree.cc	/^maxkey(unsigned size)$/;"	f	file:
maxkey	masstree/str.hh	/^    static const Str maxkey;$/;"	m	struct:lcdf::Str
maxkeyletter	masstree/mtclient.cc	/^    char maxkeyletter() const {$/;"	f	struct:kvtest_client
maxkeyletter	masstree/mtclient.cc	/^static int maxkeyletter = '9';$/;"	v	file:
mbtree	masstree_btree.h	/^  mbtree() {$/;"	f	class:mbtree
mbtree	masstree_btree.h	/^class mbtree {$/;"	c
mean	benchmarks/results/make_graphs-3.py	/^      def mean(x): return sum(x)\/len(x)$/;"	f	function:label_transform
mean	benchmarks/results/make_graphs-6.py	/^def mean(x):   return sum(x)\/len(x)$/;"	f
measure_txn_counters	benchmarks/bench.cc	/^bench_worker::measure_txn_counters(void *txn, const char *txn_name)$/;"	f	class:bench_worker
measure_txn_counters	benchmarks/bench.h	/^  inline ALWAYS_INLINE void measure_txn_counters(void *txn, const char *txn_name) {}$/;"	f	class:bench_worker
median	benchmarks/results/make_graphs-3.py	/^      def median(x): return sorted(x)[len(x)\/2]$/;"	f	function:label_transform
median	benchmarks/results/make_graphs-4.py	/^def median(x): return sorted(x)[len(x)\/2]$/;"	f
median	benchmarks/results/make_graphs-5.py	/^    def median(x): return sorted(x)[len(x)\/2]$/;"	f	function:datafromfile
median	benchmarks/results/make_graphs-6.py	/^def median(x): return sorted(x)[len(x)\/2]$/;"	f
medians	masstree/mttest.cc	/^    std::vector<lcdf::StringAccum> medians;$/;"	m	struct:__anon67::gnuplot_info	file:
mee	benchmarks/tpce.cc	/^CMEE* 						mee; $/;"	v
meesut	benchmarks/tpce.cc	/^CMEESUT*					meesut;$/;"	v
memdebug	masstree/kvthread.hh	/^struct memdebug {$/;"	s
memdebug_size	masstree/kvthread.hh	/^    memdebug_size = sizeof(memdebug)$/;"	e	enum:__anon69
memo	masstree/string.hh	/^        inline memo_type* memo() const {$/;"	f	struct:lcdf::String::rep_type
memo_offset	masstree/string.hh	/^        int memo_offset;$/;"	m	struct:lcdf::String::rep_type
memo_sizes	masstree/string.cc	/^uint64_t String::memo_sizes[55];$/;"	m	class:lcdf::String	file:
memo_sizes	masstree/string.hh	/^    static uint64_t memo_sizes[55];$/;"	m	class:lcdf::String
memo_space	masstree/straccum.hh	/^	memo_space = String::MEMO_SPACE$/;"	e	enum:lcdf::StringAccum::__anon62
memo_type	masstree/string.hh	/^    struct memo_type {$/;"	s	class:lcdf::String
memory	third-party/lz4/xxhash.c	/^    char memory[16];$/;"	m	struct:XXH_state32_t	file:
memory_fence	masstree/compiler.hh	/^inline void memory_fence() {$/;"	f
memsize	third-party/lz4/xxhash.c	/^    int memsize;$/;"	m	struct:XXH_state32_t	file:
memtag	masstree/mtcounters.hh	/^enum memtag {$/;"	g
memtag_limbo	masstree/mtcounters.hh	/^    memtag_limbo = 0x5,$/;"	e	enum:memtag
memtag_masstree_gc	masstree/mtcounters.hh	/^    memtag_masstree_gc = 0x13$/;"	e	enum:memtag
memtag_masstree_internode	masstree/mtcounters.hh	/^    memtag_masstree_internode = 0x11,$/;"	e	enum:memtag
memtag_masstree_ksuffixes	masstree/mtcounters.hh	/^    memtag_masstree_ksuffixes = 0x12,$/;"	e	enum:memtag
memtag_masstree_leaf	masstree/mtcounters.hh	/^    memtag_masstree_leaf = 0x10,$/;"	e	enum:memtag
memtag_none	masstree/mtcounters.hh	/^    memtag_none = 0x0,$/;"	e	enum:memtag
memtag_value	masstree/mtcounters.hh	/^    memtag_value = 0x1,$/;"	e	enum:memtag
merge	benchmarks/results/make_graphs-6.py	/^def merge(results):$/;"	f
merge	masstree/json.hh	/^    Json& merge(const Json& x) {$/;"	f	class:lcdf::Json_proxy_base
merge	masstree/json.hh	/^    template <typename P2> Json& merge(const Json_proxy_base<P2>& x) {$/;"	f	class:lcdf::Json_proxy_base
merge	masstree/json.hh	/^inline Json& Json::merge(const Json& x) {$/;"	f	class:lcdf::Json
merge	masstree/json.hh	/^inline Json& Json::merge(const Json_proxy_base<U>& x) {$/;"	f	class:lcdf::Json
message	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::message(const std::string& mesg, int level) {$/;"	f	class:TPCE::ProgressMeter
message	benchmarks/egen/progressmeterinterface.cpp	/^void ProgressMeterInterface::message(const std::string& mesg UNUSED, int level UNUSED)$/;"	f	class:TPCE::ProgressMeterInterface
min	dbcore/sm-defs.h	/^min(A a, B b) $/;"	f
min	dbcore/sm-defs.h	/^min(T const &a, T const &b)$/;"	f
min	dbcore/w_rand.h	/^    uint32_t min() { return 0; }$/;"	f	struct:w_rand_urng
min	masstree/kvstats.hh	/^  double min, max, sum, sumsq;$/;"	m	struct:kvstats
min_broker_list_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 min_broker_list_len = 20;$/;"	m	namespace:TPCE
min_day_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 min_day_len = 5;$/;"	m	namespace:TPCE
min_different_chars	masstree/clp.c	/^min_different_chars(const char *s, const char *t)$/;"	f	file:
min_hist_len	benchmarks/egen/TxnHarnessStructs.h	/^const INT32 min_hist_len = 10 * 1;$/;"	m	namespace:TPCE
min_key_	btree.h	/^    key_slice min_key_; \/\/ really is min_key's key slice$/;"	m	struct:btree::leaf_node
min_post_quiescent_wake_epoch	masstree/log.cc	/^logreplay::min_post_quiescent_wake_epoch(kvepoch_t quiescent_epoch) const$/;"	f	class:logreplay
min_post_quiescent_wake_epoch	masstree/log.hh	/^	kvepoch_t min_post_quiescent_wake_epoch;$/;"	m	struct:logreplay::info_type
min_value	benchmarks/masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0x7FFFFFFF };$/;"	e	enum:kvrandom_lcg_nr::__anon99
min_value	benchmarks/masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon97
min_value	benchmarks/masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_psdes_nr::__anon100
min_value	masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0x7FFFFFFF };$/;"	e	enum:kvrandom_lcg_nr::__anon31
min_value	masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_lcg_nr_simple::__anon29
min_value	masstree/kvrandom.hh	/^    enum { min_value = 0, max_value = 0xFFFFFFFFU };$/;"	e	enum:kvrandom_psdes_nr::__anon32
minkeyletter	masstree/mtclient.cc	/^    char minkeyletter() const {$/;"	f	struct:kvtest_client
minkeyletter	masstree/mtclient.cc	/^static int minkeyletter = '0';$/;"	v	file:
minute	benchmarks/egen/DateTime.h	/^        UINT16   minute;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
mk_grid	benchmarks/runner.py	/^  def mk_grid(name, bench, nthds):$/;"	f
mk_grids	benchmarks/runner.py	/^  def mk_grids(nthds):$/;"	f
mk_ycsb_entries	benchmarks/runner.py	/^  def mk_ycsb_entries(nthds):$/;"	f
mkbar	benchmarks/results/make_graphs-6.py	/^def mkbar(results, desc, outfilename):$/;"	f
mkname	scopedperf.hh	/^  static const char* mkname(int n) {$/;"	f	class:scopedperf::pmc_ctr
mkplot	benchmarks/results/make_graphs-6.py	/^def mkplot(results, desc, outfilename):$/;"	f
mod_worker	btree.cc	/^    mod_worker(const key_vec &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test7_ns::mod_worker
mod_worker	btree.cc	/^  class mod_worker : public btree_worker {$/;"	c	namespace:mp_test7_ns	file:
modify	masstree/masstree_insert.hh	/^inline int basic_table<P>::modify(Str key, F& f, threadinfo& ti)$/;"	f	class:Masstree::basic_table
modify_insert	masstree/masstree_insert.hh	/^inline int basic_table<P>::modify_insert(Str key, F& f, threadinfo& ti)$/;"	f	class:Masstree::basic_table
month	benchmarks/egen/DateTime.h	/^        UINT16   month;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
monthArray	benchmarks/egen/DateTime.cpp	/^static const INT32 monthArray[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };$/;"	v	file:
monthArrayLY	benchmarks/egen/DateTime.cpp	/^static const INT32 monthArrayLY[12] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };$/;"	v	file:
moreToRead	benchmarks/egen/shore_tpce_egen.h	/^  bool moreToRead;$/;"	m	class:TPCE::EgenTupleContainer
mp_test1	btree.cc	/^mp_test1()$/;"	f	file:
mp_test1_ns	btree.cc	/^namespace mp_test1_ns {$/;"	n	file:
mp_test2	btree.cc	/^mp_test2()$/;"	f	file:
mp_test2_ns	btree.cc	/^namespace mp_test2_ns {$/;"	n	file:
mp_test3	btree.cc	/^mp_test3()$/;"	f	file:
mp_test3_ns	btree.cc	/^namespace mp_test3_ns {$/;"	n	file:
mp_test4	btree.cc	/^mp_test4()$/;"	f	file:
mp_test4_ns	btree.cc	/^namespace mp_test4_ns {$/;"	n	file:
mp_test5	btree.cc	/^mp_test5()$/;"	f	file:
mp_test5_ns	btree.cc	/^namespace mp_test5_ns {$/;"	n	file:
mp_test6	btree.cc	/^mp_test6()$/;"	f	file:
mp_test6_ns	btree.cc	/^namespace mp_test6_ns {$/;"	n	file:
mp_test7	btree.cc	/^mp_test7()$/;"	f	file:
mp_test7_ns	btree.cc	/^namespace mp_test7_ns {$/;"	n	file:
mp_test8	btree.cc	/^mp_test8()$/;"	f	file:
mp_test8_ns	btree.cc	/^namespace mp_test8_ns {$/;"	n	file:
mp_test_inserts_removes	btree.cc	/^mp_test_inserts_removes()$/;"	f	file:
mp_test_inserts_removes_ns	btree.cc	/^namespace mp_test_inserts_removes_ns {$/;"	n	file:
mp_test_long_keys	btree.cc	/^mp_test_long_keys()$/;"	f	file:
mp_test_long_keys_ns	btree.cc	/^namespace mp_test_long_keys_ns {$/;"	n	file:
mp_test_pinning	btree.cc	/^mp_test_pinning()$/;"	f	file:
mp_test_pinning_ns	btree.cc	/^namespace mp_test_pinning_ns {$/;"	n	file:
msg	dbcore/sm-exceptions.h	/^    char const *msg;$/;"	m	struct:illegal_argument
msg	dbcore/sm-exceptions.h	/^    char const *msg;$/;"	m	struct:log_file_error
msg	dbcore/sm-exceptions.h	/^    char const *msg;$/;"	m	struct:os_error
msg_	benchmarks/egen/error.h	/^    std::string msg_;$/;"	m	class:TPCE::CCheckErr
msgpack	masstree/msgpack.cc	/^namespace msgpack {$/;"	n	file:
msgpack	masstree/msgpack.hh	/^namespace msgpack {$/;"	n
mt_delta	masstree/kvproto.hh	/^    enum { mt_remove = 1, mt_delta = 2 };$/;"	e	enum:row_marker::__anon13
mt_remove	masstree/kvproto.hh	/^    enum { mt_remove = 1, mt_delta = 2 };$/;"	e	enum:row_marker::__anon13
mttest_numainfo	masstree/mttest.cc	/^struct mttest_numainfo {$/;"	s	file:
multilock	benchmarks/tpcc.cc	/^  multilock()$/;"	f	class:scoped_multilock
multipart_cpu_process	benchmarks/results/make_graphs-3.py	/^    def multipart_cpu_process(config):$/;"	f
mutable_c_str	masstree/string.cc	/^String::mutable_c_str()$/;"	f	class:lcdf::String
mutable_data	masstree/str.hh	/^    char* mutable_data() {$/;"	f	struct:lcdf::Str
mutable_data	masstree/string.cc	/^String::mutable_data()$/;"	f	class:lcdf::String
mutable_udata	masstree/string.hh	/^inline unsigned char *String::mutable_udata() {$/;"	f	class:lcdf::String
mutex	benchmarks/egen/SyncLockInterface.h	/^    pthread_mutex_t mutex;$/;"	m	class:TPCE::CSyncLock
mutex	benchmarks/egen/locking.cpp	/^LPCRITICAL_SECTION CMutex::mutex()$/;"	f	class:TPCE::CMutex
mutex	dbcore/epoch.h	/^    os_mutex_pod mutex = os_mutex_pod::static_init();$/;"	m	struct:epoch_mgr
mutex	dbcore/sm-oid.cpp	/^    os_mutex mutex;$/;"	m	struct:__anon93::thread_data	file:
mutex_	benchmarks/egen/locking.h	/^        T& mutex_;$/;"	m	class:TPCE::Locker
mutex_	benchmarks/egen/locking.h	/^        TMutex  mutex_;$/;"	m	class:TPCE::CMutex
mutex_	benchmarks/egen/threading_pthread.h	/^                CMutex&        mutex_;$/;"	m	class:TPCE::CCondition
mutex_	benchmarks/egen/threading_pthread.h	/^        T& mutex_;$/;"	m	class:TPCE::Locker
mutex_	benchmarks/egen/threading_pthread.h	/^        pthread_mutex_t mutex_;$/;"	m	class:TPCE::CMutex
mutex_	benchmarks/egen/threading_single.h	/^        CMutex&        mutex_;$/;"	m	class:TPCE::CCondition
mutex_	benchmarks/egen/threading_single.h	/^        T& mutex_;$/;"	m	class:TPCE::Locker
mutexen	dbcore/sm-oid-impl.h	/^    os_mutex mutexen[MUTEX_COUNT];$/;"	m	struct:sm_oid_mgr_impl
mvar_tracker	dbcore/test-sc-hash.cpp	/^    mvar_tracker()$/;"	f	struct:mvar_tracker
mvar_tracker	dbcore/test-sc-hash.cpp	/^struct mvar_tracker {$/;"	s	file:
my	core.h	/^  my() const$/;"	f	class:percore
my	core.h	/^  my()$/;"	f	class:percore
my	core.h	/^  my(Args &&... args)$/;"	f	class:percore_lazy
my_list	dbcore/test-rcu-slist.cpp	/^typedef rcu_slist<my_node> my_list;$/;"	t	file:
my_list	dbcore/test-rcu.cpp	/^typedef rcu_slist<my_node> my_list;$/;"	t	file:
my_node	dbcore/test-rcu-slist.cpp	/^struct my_node {$/;"	s	file:
my_node	dbcore/test-rcu.cpp	/^struct my_node {$/;"	s	file:
myhash	small_unordered_map.h	/^  struct myhash {$/;"	s	namespace:private_
myhash	small_unordered_map.h	/^  struct myhash<Tp *> {$/;"	s	namespace:private_
mylist	dbcore/test-cslist.cpp	/^typedef cslist<node, &node::next> mylist;$/;"	t	file:
myunion	masstree/test_atomics.cc	/^union myunion {$/;"	u	file:
myview	core.h	/^  myview() const$/;"	f	class:percore_lazy
n	benchmarks/bench.h	/^  size_t n;$/;"	m	class:latest_key_callback
n	benchmarks/bench.h	/^  size_t n;$/;"	m	class:limit_callback
n	benchmarks/bench.h	/^  size_t n;$/;"	m	class:static_limit_callback
n	benchmarks/tpcc.cc	/^  size_t n;$/;"	m	class:order_line_nop_callback	file:
n	benchmarks/tpcc.cc	/^  size_t n;$/;"	m	class:order_line_scan_callback	file:
n	btree.cc	/^    uint64_t n;$/;"	m	class:read_only_perf_test_ns::worker	file:
n	btree.cc	/^  size_t n;$/;"	m	class:scoped_rate_timer	file:
n	masstree/kvio.hh	/^    unsigned n;   \/\/ # of chars we've written to buf$/;"	m	struct:kvout
n	record/cursor.h	/^  size_t n; \/\/ current field position in cursor$/;"	m	struct:read_record_cursor
n	record/cursor.h	/^  size_t n; \/\/ current field position in cursor$/;"	m	struct:write_record_cursor
n	small_unordered_map.h	/^  size_t n;$/;"	m	class:small_unordered_map
n	small_vector.h	/^  size_t n;$/;"	m	class:small_vector
n	spinbarrier.h	/^  volatile size_t n;$/;"	m	class:spin_barrier
n	static_unordered_map.h	/^  size_t n;$/;"	m	class:static_unordered_map
n	static_vector.h	/^  size_t n;$/;"	m	class:static_vector
n	str_arena.h	/^  size_t n;$/;"	m	class:str_arena
n	tuple.h	/^    unsigned long *n;$/;"	m	struct:dbtuple::scoped_recorder
n_	btree.h	/^      node *n_;$/;"	m	union:btree::leaf_node::value_or_node_ptr
n_	btree_impl.h	/^  size_t n_;$/;"	m	class:string_restore
n_	masstree/json.hh	/^    int n_;$/;"	m	struct:lcdf::Json::ObjectJson
n_	masstree/masstree_scan.hh	/^    leaf<P> *n_;$/;"	m	class:Masstree::scanstackelt
n_	masstree/masstree_tcursor.hh	/^    leaf<P>* n_;$/;"	m	class:Masstree::unlocked_tcursor
n_	masstree/masstree_tcursor.hh	/^    leaf_type *n_;$/;"	m	class:Masstree::tcursor
n_	masstree_btree.h	/^  Masstree::leaf<P>* n_;$/;"	m	class:mbtree::low_level_search_range_scanner
name	base_txn_btree.h	/^  std::string name;$/;"	m	class:base_txn_btree
name	benchmarks/bench.h	/^    std::string name;$/;"	m	struct:bench_worker::workload_desc
name	benchmarks/ndb_wrapper.h	/^  std::string name;$/;"	m	class:ndb_ordered_index
name	masstree/query_masstree.hh	/^    static const char* name() {$/;"	f	class:Masstree::query_table
name	masstree/testrunner.hh	/^    const lcdf::String& name() const {$/;"	f	class:testrunner_base
name	masstree/value_array.hh	/^    static const char *name() { return "Array"; }$/;"	f	class:value_array
name	masstree/value_bag.hh	/^    static const char *name() { return "Bag"; }$/;"	f	class:value_bag
name	masstree/value_string.hh	/^    static const char *name() { return "String"; }$/;"	f	class:value_string
name	masstree/value_versioned_array.hh	/^    static const char *name() { return "ArrayVersion"; }$/;"	f	class:value_versioned_array
name	scopedperf.hh	/^  const char *name;$/;"	m	class:scopedperf::namedctr
name	scopedperf.hh	/^  const char *name;$/;"	m	class:scopedperf::perfsum_base
name_	benchmarks/egen/error.h	/^    std::string name_;$/;"	m	class:TPCE::CCheckErr
name_	counter.h	/^    const std::string name_;$/;"	m	struct:private_::event_ctx
name_	masstree/testrunner.hh	/^    lcdf::String name_;$/;"	m	class:testrunner_base
name_	thread.h	/^  const std::string name_;$/;"	m	class:ndb_thread
name_extractor	benchmarks/results/make_graphs-6.py	/^    def name_extractor(name):$/;"	f
namedctr	scopedperf.hh	/^  namedctr(const char *n) : name(n) {}$/;"	f	class:scopedperf::namedctr
namedctr	scopedperf.hh	/^class namedctr {$/;"	c	namespace:scopedperf
nameit	benchmarks/results/make_graphs-5.py	/^    def nameit(x):$/;"	f	function:datafromfile
napms	masstree/misc.hh	/^inline void napms(int n) \/* nap n milliseconds *\/$/;"	f
nbIterations	third-party/lz4/bench.c	/^static int nbIterations = NBLOOPS;$/;"	v	file:
nbIterations	third-party/lz4/fullbench.c	/^static int nbIterations = NBLOOPS;$/;"	v	file:
nbuckets	scopedperf.hh	/^  enum { nbuckets = sizeof(uint64_t)*8 + 1 };$/;"	e	enum:scopedperf::perfsum_hist_tmpl::__anon103
nbytes	dbcore/rcu.h	/^    uint64_t nbytes;$/;"	m	struct:RCU::pointer_list
nbytes	dbcore/sm-alloc.h	/^		uint64_t nbytes;$/;"	m	struct:RA::thread_data
nbytes	dbcore/sm-exceptions.h	/^    size_t nbytes;$/;"	m	struct:rcu_alloc_fail
nbytes	masstree/msgpack.cc	/^const uint8_t nbytes[] = {$/;"	m	namespace:msgpack::__anon17	file:
nbytes	record/cursor.h	/^  size_t nbytes;$/;"	m	struct:read_record_cursor
nbytes	record/inline_str.h	/^  nbytes(const obj_type *obj)$/;"	f	struct:serializer
nbytes	record/serializer.h	/^  nbytes(const T *obj)$/;"	f	struct:serializer
nbytes	record/serializer.h	/^  nbytes(const int32_t *obj)$/;"	f	struct:serializer
nbytes	record/serializer.h	/^  nbytes(const uint32_t *obj)$/;"	f	struct:serializer
nbytes	record/serializer.h	/^  nbytes(const uint8_t *obj)$/;"	f	struct:generic_serializer
nckthreads	masstree/mtd.cc	/^static int nckthreads = 0;$/;"	v	file:
ncol	masstree/value_array.hh	/^inline int value_array::ncol() const {$/;"	f	class:value_array
ncol	masstree/value_bag.hh	/^inline int value_bag<O>::ncol() const {$/;"	f	class:value_bag
ncol	masstree/value_string.hh	/^inline int value_string::ncol() const {$/;"	f	class:value_string
ncol	masstree/value_versioned_array.hh	/^inline int value_versioned_array::ncol() const {$/;"	f	class:value_versioned_array
ncol_	masstree/value_array.hh	/^    short ncol_;$/;"	m	class:value_array
ncol_	masstree/value_bag.hh	/^	    offset_type ncol_;$/;"	m	struct:value_bag::bagdata::__anon24
ncol_	masstree/value_versioned_array.hh	/^    short ncol_;$/;"	m	class:value_versioned_array
ncol_cap_	masstree/value_versioned_array.hh	/^    short ncol_cap_;$/;"	m	class:value_versioned_array
ncores	masstree/mttest.cc	/^    int ncores() const {$/;"	f	struct:kvtest_client
ncores_	masstree/mttest.cc	/^    int ncores_;$/;"	m	struct:kvtest_client	file:
ncounters	masstree/kvthread.hh	/^    enum { ncounters = 0 };$/;"	e	enum:threadinfo::__anon75
ndb_ordered_index	benchmarks/ndb_wrapper.h	/^class ndb_ordered_index : public abstract_ordered_index {$/;"	c
ndb_ordered_index	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::ndb_ordered_index($/;"	f	class:ndb_ordered_index
ndb_thread	thread.h	/^  ndb_thread(bool daemon = false, const std::string &name = "thd")$/;"	f	class:ndb_thread
ndb_thread	thread.h	/^  ndb_thread(run_t body, bool daemon = false, const std::string &name = "thd")$/;"	f	class:ndb_thread
ndb_thread	thread.h	/^class ndb_thread {$/;"	c
ndb_wrapper	benchmarks/ndb_wrapper.h	/^class ndb_wrapper : public abstract_db {$/;"	c
ndb_wrapper	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::ndb_wrapper(const char *logdir,$/;"	f	class:ndb_wrapper
ndb_wrapper_search_range_callback	benchmarks/ndb_wrapper_impl.h	/^  ndb_wrapper_search_range_callback(abstract_ordered_index::scan_callback &upcall)$/;"	f	class:ndb_wrapper_search_range_callback
ndb_wrapper_search_range_callback	benchmarks/ndb_wrapper_impl.h	/^class ndb_wrapper_search_range_callback : public txn_btree<Transaction>::search_range_callback {$/;"	c
ndbtxn	benchmarks/ndb_wrapper.h	/^  struct ndbtxn {$/;"	s	namespace:private_
ndbtxn	benchmarks/ndb_wrapper.h	/^  typedef private_::ndbtxn ndbtxn;$/;"	t	class:ndb_ordered_index
ndbtxn	benchmarks/ndb_wrapper.h	/^  typedef private_::ndbtxn ndbtxn;$/;"	t	class:ndb_wrapper
negated	masstree/clp.h	/^    int negated;		\/**< Whether the last option was negated. *\/$/;"	m	struct:Clp_Parser
negated_by_no	masstree/clp.c	/^    unsigned char negated_by_no;$/;"	m	struct:Clp_Internal	file:
negated_by_no	masstree/clp.c	/^    unsigned char negated_by_no;$/;"	m	struct:Clp_ParserState	file:
nentries	dbcore/sm-oid-alloc-impl.h	/^        uint32_t nentries;$/;"	m	struct:sm_allocator::thread_cache
nentries_	persist_test.cc	/^  uint64_t nentries_; \/\/ > 0 for all valid log buffers$/;"	m	struct:logbuf_header	file:
net_earn	benchmarks/egen/TxnHarnessStructs.h	/^    double              net_earn;$/;"	m	struct:TPCE::TFinInfo
net_earn_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        net_earn_ind;$/;"	m	struct:TPCE::TFinInfo
net_to_host_order	masstree/compiler.hh	/^inline char net_to_host_order(char x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline double net_to_host_order(double x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline double net_to_host_order(float x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline int net_to_host_order(int x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline int64_t net_to_host_order(int64_t x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline long long net_to_host_order(long long x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline long net_to_host_order(long x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline short net_to_host_order(short x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline signed char net_to_host_order(signed char x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline uint64_t net_to_host_order(uint64_t x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline unsigned char net_to_host_order(unsigned char x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline unsigned long long net_to_host_order(unsigned long long x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline unsigned long net_to_host_order(unsigned long x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline unsigned net_to_host_order(unsigned x) {$/;"	f
net_to_host_order	masstree/compiler.hh	/^inline unsigned short net_to_host_order(unsigned short x) {$/;"	f
newLoadUnit	benchmarks/egen/shore_tpce_egen.h	/^    void newLoadUnit(){size=0; moreToRead=true;} $/;"	f	class:TPCE::EgenTupleContainer
new_age	dbcore/sm-trace.cpp	/^    uint64_t new_age;$/;"	m	struct:TRACER::update_trace_record	file:
new_bufkvout	masstree/kvio.cc	/^kvout* new_bufkvout() {$/;"	f
new_epoch	dbcore/epoch.cpp	/^epoch_mgr::new_epoch()$/;"	f	class:epoch_mgr
new_epoch_possible	dbcore/epoch.cpp	/^epoch_mgr::new_epoch_possible()$/;"	f	class:epoch_mgr
new_header_scan	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::new_header_scan(LSN start)$/;"	f	class:sm_log_scan_mgr
new_kvout	masstree/kvio.cc	/^kvout* new_kvout(int fd, int buflen) {$/;"	f
new_log	dbcore/sm-log.cpp	/^sm_log::new_log(char const *dname, size_t segsz,$/;"	f	class:sm_log
new_log_scan	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::new_log_scan(LSN start)$/;"	f	class:sm_log_scan_mgr
new_order_scan_callback	benchmarks/tpcc.cc	/^  new_order_scan_callback() : k_no(0) {}$/;"	f	class:new_order_scan_callback
new_order_scan_callback	benchmarks/tpcc.cc	/^class new_order_scan_callback : public abstract_ordered_index::scan_callback {$/;"	c	file:
new_size	dbcore/sm-trace.cpp	/^    uint32_t new_size;$/;"	m	struct:TRACER::update_trace_record	file:
new_tuple	txn.h	/^    dbtuple *new_tuple;$/;"	m	struct:transaction::write_record_t
new_tx_log	dbcore/sm-log.cpp	/^sm_log::new_tx_log()$/;"	f	class:sm_log
new_tx_scan	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::new_tx_scan(LSN start)$/;"	f	class:sm_log_scan_mgr
new_txn	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::new_txn($/;"	f	class:ndb_wrapper
new_version	btree.h	/^    uint64_t new_version;$/;"	m	struct:btree::insert_info_t
new_version	dbcore/sm-trace.cpp	/^    uint64_t new_version;$/;"	m	struct:TRACER::update_trace_record	file:
new_version	masstree_btree.h	/^    uint64_t new_version;$/;"	m	struct:mbtree::insert_info_t
newline_terminator	masstree/json.hh	/^    bool newline_terminator() const {$/;"	f	class:lcdf::Json::unparse_manipulator
newline_terminator	masstree/json.hh	/^    unparse_manipulator newline_terminator(bool x) const {$/;"	f	class:lcdf::Json::unparse_manipulator
newline_terminator	masstree/json.hh	/^inline Json::unparse_manipulator Json::newline_terminator(bool x) {$/;"	f	class:lcdf::Json
newline_terminator_	masstree/json.hh	/^    bool newline_terminator_;$/;"	m	class:lcdf::Json::unparse_manipulator
news	benchmarks/egen/TxnHarnessStructs.h	/^    TNews               news[max_news_len];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
newsItemAndXRefTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CNewsItemAndXRefTable*			newsItemAndXRefTable;$/;"	m	class:TPCE::CGenerateAndLoad
news_item	benchmarks/egen/NewsItemAndXRefTable.h	/^    NEWS_ITEM_ROW       news_item;$/;"	m	struct:TPCE::NEWS_ITEM_AND_XREF_ROW
news_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               news_len;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
news_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               news_len;$/;"	m	struct:TPCE::TSecurityDetailTxnOutput
news_xref	benchmarks/egen/NewsItemAndXRefTable.h	/^    NEWS_XREF_ROW       news_xref;$/;"	m	struct:TPCE::NEWS_ITEM_AND_XREF_ROW
next	benchmarks/masstree/kvrandom.hh	/^    int32_t next() const {$/;"	f	class:kvrandom_random
next	benchmarks/masstree/kvrandom.hh	/^    value_type next() {$/;"	f	class:kvrandom_lcg_nr
next	benchmarks/masstree/kvrandom.hh	/^    value_type next() {$/;"	f	class:kvrandom_lcg_nr_simple
next	benchmarks/masstree/kvrandom.hh	/^    value_type next() {$/;"	f	class:kvrandom_psdes_nr
next	dbcore/cslist.h	/^    static Node *&next(Node *n) {$/;"	f	struct:cslist
next	dbcore/rcu-slist.h	/^        next_ptr next;$/;"	m	struct:_rcu_slist::iterator
next	dbcore/rcu-slist.h	/^        next_ptr volatile next;$/;"	m	struct:_rcu_slist::node
next	dbcore/rcu.h	/^    pointer *next;$/;"	m	struct:RCU::pointer
next	dbcore/sm-log-defs.h	/^    log_request *next;$/;"	m	struct:log_request
next	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::next()$/;"	f	class:sm_log_scan_mgr::header_scan
next	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::next()$/;"	f	class:sm_log_scan_mgr::record_scan
next	dbcore/test-cslist.cpp	/^    node *next;$/;"	m	struct:node	file:
next	masstree/kvrandom.hh	/^    int32_t next() const {$/;"	f	class:kvrandom_random
next	masstree/kvrandom.hh	/^    value_type next() {$/;"	f	class:kvrandom_lcg_nr
next	masstree/kvrandom.hh	/^    value_type next() {$/;"	f	class:kvrandom_lcg_nr_simple
next	masstree/kvrandom.hh	/^    value_type next() {$/;"	f	class:kvrandom_psdes_nr
next	masstree/log.hh	/^        waitlist* next;$/;"	m	struct:loginfo::waitlist
next	masstree/masstree_scan.hh	/^    int next(int ki) const {$/;"	f	struct:Masstree::forward_scan_helper
next	masstree/masstree_scan.hh	/^    int next(int ki) const {$/;"	f	struct:Masstree::reverse_scan_helper
next	masstree/string.hh	/^	memo_type* next;$/;"	m	struct:lcdf::String::memo_type
next	str_arena.h	/^  next()$/;"	f	class:str_arena
next	util.h	/^  next()$/;"	f	class:util::fast_random
next	util.h	/^  next(unsigned int bits)$/;"	f	class:util::fast_random
nextToUpdate	third-party/lz4/lz4hc.c	/^    const BYTE* nextToUpdate;$/;"	m	struct:__anon7	file:
next_	benchmarks/masstree/kvrandom.hh	/^    uint32_t next_;$/;"	m	class:kvrandom_psdes_nr
next_	btree.h	/^    leaf_node *next_;$/;"	m	struct:btree::leaf_node
next_	masstree/json.hh	/^    int next_;$/;"	m	struct:lcdf::Json::ObjectItem
next_	masstree/kvrandom.hh	/^    uint32_t next_;$/;"	m	class:kvrandom_psdes_nr
next_	masstree/kvthread.hh	/^    limbo_group *next_;$/;"	m	struct:limbo_group
next_	masstree/testrunner.hh	/^    testrunner_base* next_;$/;"	m	class:testrunner_base
next_argument	masstree/clp.c	/^next_argument(Clp_Parser *clp, int want_argument)$/;"	f	file:
next_char	util.h	/^  next_char()$/;"	f	class:util::fast_random
next_full_version_value	masstree/masstree_tcursor.hh	/^tcursor<P>::next_full_version_value(int state) const {$/;"	f	class:Masstree::tcursor
next_key	util.h	/^next_key(const std::string &s)$/;"	f	namespace:util
next_list	dbcore/rcu.h	/^    pointer_list *next_list;$/;"	m	struct:RCU::pointer_list
next_lock_	masstree/masstree_struct.hh	/^	bool next_lock_;$/;"	m	class:Masstree::leaf
next_lsn	dbcore/sm-log-defs.h	/^        LSN next_lsn;$/;"	m	union:log_record::__anon91
next_lsn	dbcore/sm-log-defs.h	/^    LSN next_lsn() {$/;"	f	struct:log_block
next_lsn	dbcore/sm-log-offset.h	/^        LSN next_lsn;$/;"	m	struct:sm_log_offset_mgr::segment_assignment
next_lsn_offset	dbcore/sm-log-defs.h	/^    uint64_t next_lsn_offset;$/;"	m	struct:log_allocation
next_nonzero	masstree/circular_int.hh	/^    circular_int<T> next_nonzero() const {$/;"	f	class:circular_int
next_nonzero	masstree/circular_int.hh	/^    static value_type next_nonzero(value_type x) {$/;"	f	class:circular_int
next_oid_	masstree/masstree_struct.hh	/^	oid_type next_oid_;$/;"	m	class:Masstree::leaf
next_ptr	dbcore/rcu-slist.cpp	/^    typedef _rcu_slist::next_ptr next_ptr;$/;"	t	namespace:__anon82	file:
next_ptr	dbcore/rcu-slist.cpp	/^_rcu_slist::next_ptr::next_ptr(node *n, owner_status s) {$/;"	f	class:_rcu_slist::next_ptr
next_ptr	dbcore/rcu-slist.h	/^        next_ptr() { val = 0; }$/;"	f	struct:_rcu_slist::next_ptr
next_ptr	dbcore/rcu-slist.h	/^    struct next_ptr {$/;"	s	struct:_rcu_slist
next_readable_char	util.h	/^  next_readable_char()$/;"	f	class:util::fast_random
next_readable_string	util.h	/^  next_readable_string(size_t len)$/;"	f	class:util::fast_random
next_string	util.h	/^  next_string(size_t len)$/;"	f	class:util::fast_random
next_u16	util.h	/^  next_u16()$/;"	f	class:util::fast_random
next_u32	util.h	/^  next_u32()$/;"	f	class:util::fast_random
next_uniform	util.h	/^  next_uniform()$/;"	f	class:util::fast_random
nextdelta	masstree/mttest.cc	/^    double nextdelta;$/;"	m	struct:__anon67::gnuplot_info	file:
nfds_	masstree/mtd.cc	/^    int nfds_;$/;"	m	class:tcpfds	file:
nfixarray	masstree/msgpack.hh	/^    ffixarray = 0x90, nfixarray = 0x10,$/;"	e	enum:msgpack::format::__anon35
nfixint	masstree/msgpack.hh	/^    nfixint = nfixuint + nfixnegint$/;"	e	enum:msgpack::format::__anon35
nfixmap	masstree/msgpack.hh	/^    ffixmap = 0x80, nfixmap = 0x10,$/;"	e	enum:msgpack::format::__anon35
nfixnegint	masstree/msgpack.hh	/^    ffixnegint = 0xE0, nfixnegint = 0x20,$/;"	e	enum:msgpack::format::__anon35
nfixstr	masstree/msgpack.hh	/^    ffixstr = 0xA0, nfixstr = 0x20,$/;"	e	enum:msgpack::format::__anon35
nfixuint	masstree/msgpack.hh	/^    ffixuint = 0x00, nfixuint = 0x80,$/;"	e	enum:msgpack::format::__anon35
nikey	masstree/masstree_key.hh	/^    static constexpr int nikey = 1;$/;"	m	class:Masstree::key
nikey	masstree/masstree_struct.hh	/^    static constexpr int nikey = 1;$/;"	m	class:Masstree::node_base
ninsertkeys_perthread	btree.cc	/^  static const size_t ninsertkeys_perthread = 100000;$/;"	m	namespace:mp_test6_ns	file:
ninsertkeys_perthread	btree.cc	/^  static const size_t ninsertkeys_perthread = 100000;$/;"	m	namespace:mp_test8_ns	file:
ninsertkeys_perthread	btree.cc	/^  static const size_t ninsertkeys_perthread = 500000;$/;"	m	namespace:mp_test_long_keys_ns	file:
nitems	masstree/clp.c	/^    int nitems;$/;"	m	struct:Clp_StringList	file:
nitems_invalid_report	masstree/clp.c	/^    int nitems_invalid_report;$/;"	m	struct:Clp_StringList	file:
niter	benchmarks/masstree/kvrandom.hh	/^    enum { niter = 4 };$/;"	e	enum:kvrandom_psdes_nr::__anon101
niter	masstree/kvrandom.hh	/^    enum { niter = 4 };$/;"	e	enum:kvrandom_psdes_nr::__anon33
niters	btree.cc	/^  static const size_t niters = 100000;$/;"	m	namespace:mp_test5_ns	file:
nkeys	benchmarks/encstress.cc	/^static size_t nkeys;$/;"	v	file:
nkeys	benchmarks/queue.cc	/^static size_t nkeys;$/;"	v	file:
nkeys	btree.cc	/^  const size_t nkeys = 140000000; \/\/ 140M$/;"	m	namespace:read_only_perf_test_ns	file:
nkeys	btree.cc	/^  const size_t nkeys = 140000000; \/\/ 140M$/;"	m	namespace:write_only_perf_test_ns	file:
nkeys	btree.cc	/^  static const size_t nkeys = 20000;$/;"	m	namespace:mp_test1_ns	file:
nkeys	btree.cc	/^  static const size_t nkeys = 20000;$/;"	m	namespace:mp_test2_ns	file:
nkeys	btree.cc	/^  static const size_t nkeys = 20000;$/;"	m	namespace:mp_test3_ns	file:
nkeys	btree.cc	/^  static const size_t nkeys = 20000;$/;"	m	namespace:mp_test4_ns	file:
nkeys	btree.cc	/^  static const size_t nkeys = 50;$/;"	m	namespace:mp_test7_ns	file:
nkeys	masstree/mtclient.cc	/^    uint64_t nkeys() const {$/;"	f	struct:kvtest_client
nkeys	masstree/mtclient.cc	/^static uint64_t nkeys = 0;$/;"	v	file:
nkeys_	masstree/masstree_struct.hh	/^    uint8_t nkeys_;$/;"	m	class:Masstree::internode
nleft_	masstree/kvrow.hh	/^    int nleft_;$/;"	m	class:query_json_scanner
nlogger	masstree/mtd.cc	/^static int nlogger = 0;$/;"	v	file:
noPrefix	third-party/lz4/lz4.c	/^typedef enum { noPrefix = 0, withPrefix = 1 } prefix64k_directive;$/;"	e	enum:__anon4	file:
no_key_results	typed_txn_btree.h	/^    bool no_key_results;$/;"	m	class:typed_txn_btree_::key_reader
no_reset_counters	benchmarks/bench.cc	/^int no_reset_counters = 0;$/;"	v
nobj	dbcore/rcu.h	/^    uint64_t nobj;$/;"	m	struct:RCU::pointer_list
nocheck	masstree/mtclient.cc	/^nocheck(struct child *, struct async *, bool, const Str &)$/;"	f
noclass	masstree/clp.c	/^    int noclass;$/;"	m	struct:Clp_Internal	file:
node	benchmarks/runner.py	/^      node = platform.node()$/;"	v
node	btree.h	/^    const node_opaque_t* node;$/;"	m	struct:btree::insert_info_t
node	btree.h	/^    node() :$/;"	f	struct:btree::node
node	btree.h	/^  struct node {$/;"	s	class:btree
node	dbcore/rcu-slist.cpp	/^    typedef _rcu_slist::node node;$/;"	t	namespace:__anon82	file:
node	dbcore/rcu-slist.h	/^    struct node {$/;"	s	struct:_rcu_slist
node	dbcore/test-cslist.cpp	/^struct node {$/;"	s	file:
node	masstree/masstree_scan.hh	/^    leaf<P>* node() const {$/;"	f	class:Masstree::scanstackelt
node	masstree/masstree_tcursor.hh	/^    inline leaf<P>* node() const {$/;"	f	class:Masstree::tcursor
node	masstree/masstree_tcursor.hh	/^    inline leaf<P>* node() const {$/;"	f	class:Masstree::unlocked_tcursor
node	masstree_btree.h	/^    const node_opaque_t* node;$/;"	m	struct:mbtree::insert_info_t
node	scripts/tester.py	/^  node = platform.node()$/;"	v
node_base	masstree/masstree_struct.hh	/^    node_base(bool isleaf)$/;"	f	class:Masstree::node_base
node_base	masstree/masstree_struct.hh	/^class node_base : public make_nodeversion<P>::type {$/;"	c	namespace:Masstree
node_base_type	masstree_btree.h	/^  typedef Masstree::node_base<P> node_base_type;$/;"	t	class:mbtree
node_list	dbcore/test-rcu-slist.cpp	/^typedef std::vector<my_node*> node_list;$/;"	t	file:
node_list	dbcore/test-rcu.cpp	/^typedef std::vector<my_node*> node_list;$/;"	t	file:
node_opaque_t	btree.h	/^  typedef struct node node_opaque_t;$/;"	t	class:btree	typeref:struct:btree::node
node_opaque_t	masstree_btree.h	/^  typedef node_type node_opaque_t;$/;"	t	class:mbtree
node_size_	masstree_btree.h	/^  int node_size_;$/;"	m	class:mbtree::size_walk_callback
node_timestamp	masstree/masstree_tcursor.hh	/^    inline kvtimestamp_t &node_timestamp() {$/;"	f	class:Masstree::tcursor
node_timestamp	masstree/masstree_tcursor.hh	/^    inline kvtimestamp_t node_timestamp() const {$/;"	f	class:Masstree::tcursor
node_ts_	masstree/masstree_struct.hh	/^    kvtimestamp_t node_ts_;$/;"	m	class:Masstree::leaf
node_type	masstree/masstree.hh	/^    typedef node_base<P> node_type;$/;"	t	class:Masstree::basic_table
node_type	masstree/masstree_tcursor.hh	/^    typedef node_base<P> node_type;$/;"	t	class:Masstree::tcursor
node_type	masstree/query_masstree.hh	/^    typedef node_base<P> node_type;$/;"	t	class:Masstree::query_table
node_type	masstree_btree.h	/^  typedef Masstree::leaf<P> node_type;$/;"	t	class:mbtree
node_vector	masstree/masstree.hh	/^	node_vector_type* node_vector; $/;"	m	class:Masstree::basic_table
node_vector_type	masstree/masstree.hh	/^	typedef object_vector<node_type*> node_vector_type; $/;"	t	class:Masstree::basic_table
node_vector_type	masstree/masstree_struct.hh	/^	typedef object_vector<node_base<P>*> node_vector_type; $/;"	t	class:Masstree::internode
node_vector_type	masstree/masstree_struct.hh	/^	typedef object_vector<node_base<P>*> node_vector_type; $/;"	t	class:Masstree::leaf
node_vector_type	masstree_btree.h	/^  typedef object_vector<node_base_type*> node_vector_type;$/;"	t	class:mbtree
nodeparams	masstree/masstree.hh	/^template <int LW = 15, int IW = LW> struct nodeparams {$/;"	s	namespace:Masstree
nodeversion	masstree/nodeversion.hh	/^typedef basic_nodeversion<nodeversion32_parameters> nodeversion;$/;"	t
nodeversion32_parameters	masstree/nodeversion.hh	/^struct nodeversion32_parameters {$/;"	s
nodeversion64_parameters	masstree/nodeversion.hh	/^struct nodeversion64_parameters {$/;"	s
nodeversion_type	masstree/masstree_scan.hh	/^    typedef typename node_base<P>::nodeversion_type nodeversion_type;$/;"	t	class:Masstree::scanstackelt
nodeversion_type	masstree/masstree_struct.hh	/^    typedef typename make_nodeversion<P>::type nodeversion_type;$/;"	t	class:Masstree::node_base
nodeversion_type	masstree/masstree_struct.hh	/^    typedef typename node_base<P>::nodeversion_type nodeversion_type;$/;"	t	class:Masstree::internode
nodeversion_type	masstree/masstree_struct.hh	/^    typedef typename node_base<P>::nodeversion_type nodeversion_type;$/;"	t	class:Masstree::leaf
nodeversion_type	masstree/masstree_tcursor.hh	/^    typedef typename leaf<P>::nodeversion_type nodeversion_type;$/;"	t	class:Masstree::tcursor
nodeversion_type	masstree/masstree_tcursor.hh	/^    typedef typename leaf<P>::nodeversion_type nodeversion_type;$/;"	t	class:Masstree::unlocked_tcursor
nodeversion_type	masstree_btree.h	/^  typedef typename node_base_type::nodeversion_type nodeversion_type;$/;"	t	class:mbtree
nodeversion_value_type	masstree/masstree_tcursor.hh	/^    typedef typename nodeversion_type::value_type nodeversion_value_type;$/;"	t	class:Masstree::tcursor
nodeversion_value_type	masstree/masstree_tcursor.hh	/^    typedef typename nodeversion_type::value_type nodeversion_value_type;$/;"	t	class:Masstree::unlocked_tcursor
noexcept	dbcore/dynarray.h	/^    dynarray &operator=(dynarray &&victim) noexcept;$/;"	m	struct:dynarray
noexcept	dbcore/dynarray.h	/^    dynarray(dynarray &&victim) noexcept;$/;"	m	struct:dynarray
noexcept	dbcore/dynarray.h	/^    void swap(dynarray &a, dynarray &b) noexcept;$/;"	m	struct:dynarray
non_atomic_fetch_add	util.h	/^non_atomic_fetch_add(std::atomic<T> &data, T arg)$/;"	f	namespace:util
non_atomic_fetch_sub	util.h	/^non_atomic_fetch_sub(std::atomic<T> &data, T arg)$/;"	f	namespace:util
nop_pause	amd64.h	/^nop_pause()$/;"	f
nopt	masstree/clp.c	/^    int nopt;$/;"	m	struct:Clp_Internal	file:
normalization	masstree/mttest.cc	/^    double normalization;$/;"	m	struct:__anon67::gnuplot_info	file:
normalize	benchmarks/runner.py	/^def normalize(x):$/;"	f
normalize	scripts/tester.py	/^def normalize(x):$/;"	f
normalizetype	masstree/mttest.cc	/^    int normalizetype;$/;"	m	struct:__anon67::gnuplot_info	file:
normtype_firsttest	masstree/mttest.cc	/^enum { normtype_none, normtype_pertest, normtype_firsttest };$/;"	e	enum:__anon66	file:
normtype_none	masstree/mttest.cc	/^enum { normtype_none, normtype_pertest, normtype_firsttest };$/;"	e	enum:__anon66	file:
normtype_pertest	masstree/mttest.cc	/^enum { normtype_none, normtype_pertest, normtype_firsttest };$/;"	e	enum:__anon66	file:
notice	masstree/mtclient.cc	/^    void notice(String s) {$/;"	f	struct:kvtest_client
notice	masstree/mtclient.cc	/^    void notice(const char *fmt, ...) {$/;"	f	struct:kvtest_client
notice	masstree/mtd.cc	/^void kvtest_client::notice(const char *fmt, ...) {$/;"	f	class:kvtest_client
notice	masstree/mttest.cc	/^void kvtest_client<T>::notice(const char *fmt, ...) {$/;"	f	class:kvtest_client
now	dbcore/stopwatch.h	/^    static uint64_t now() {$/;"	f	class:stopwatch_t
now	masstree/mtclient.cc	/^    double now() const {$/;"	f	struct:kvtest_client
now	masstree/mtd.cc	/^    double now() const {$/;"	f	struct:kvtest_client
now	masstree/mttest.cc	/^    double now() const {$/;"	f	struct:kvtest_client
now	masstree/timestamp.hh	/^inline double now() {$/;"	f
nproducts	benchmarks/bid.cc	/^static size_t nproducts;$/;"	v	file:
nrec	dbcore/sm-log-defs.h	/^    uint32_t nrec;$/;"	m	struct:log_block
nremoved_	masstree/masstree_struct.hh	/^    int8_t nremoved_;$/;"	m	class:Masstree::leaf
nremovekeys_perthread	btree.cc	/^  static const size_t nremovekeys_perthread = 100000;$/;"	m	namespace:mp_test6_ns	file:
nremovekeys_perthread	btree.cc	/^  static const size_t nremovekeys_perthread = 100000;$/;"	m	namespace:mp_test8_ns	file:
nremovekeys_perthread	btree.cc	/^  static const size_t nremovekeys_perthread = 500000;$/;"	m	namespace:mp_test_long_keys_ns	file:
nsent_	masstree/mtclient.cc	/^    unsigned long long nsent_;$/;"	m	struct:child	file:
nseqkeys	masstree/mtclient.cc	/^    long nseqkeys() const {$/;"	f	struct:kvtest_client
nseqkeys	masstree/mttest.cc	/^    long nseqkeys() const {$/;"	f	struct:kvtest_client
nstragglers	dbcore/epoch.cpp	/^    uint64_t nstragglers = 0;$/;"	m	struct:epoch_mgr::private_state	file:
nthreads	benchmarks/masstree/kvtest.cc	/^  unsigned int nthreads;$/;"	m	class:kvtest_runner	file:
nthreads	btree.cc	/^  static const size_t nthreads = 16;$/;"	m	namespace:mp_test6_ns	file:
nthreads	btree.cc	/^  static const size_t nthreads = 16;$/;"	m	namespace:mp_test8_ns	file:
nthreads	btree.cc	/^  static const size_t nthreads = 16;$/;"	m	namespace:mp_test_long_keys_ns	file:
nthreads	btree.cc	/^  static const size_t nthreads = 4;$/;"	m	namespace:mp_test_inserts_removes_ns	file:
nthreads	btree.cc	/^  static const size_t nthreads = 4;$/;"	m	namespace:mp_test_pinning_ns	file:
nthreads	masstree/mtclient.cc	/^    int nthreads() const {$/;"	f	struct:kvtest_client
nthreads	masstree/mtd.cc	/^    int nthreads() const {$/;"	f	struct:kvtest_client
nthreads	masstree/mttest.cc	/^    int nthreads() const {$/;"	f	struct:kvtest_client
nthreads_extractor	benchmarks/results/make_graphs-6.py	/^    def nthreads_extractor(nthreads):$/;"	f
ntohq	masstree/compiler.hh	/^inline uint64_t ntohq(uint64_t val) {$/;"	f
ntxn_aborts	benchmarks/bench.h	/^  size_t ntxn_aborts;$/;"	m	class:bench_worker
ntxn_commits	benchmarks/bench.h	/^  size_t ntxn_commits;$/;"	m	class:bench_worker
null	masstree/json.cc	/^const Json::null_t Json::null;$/;"	m	class:lcdf::Json	file:
null	masstree/json.hh	/^    static const null_t null;$/;"	m	class:lcdf::Json
null	masstree/msgpack.hh	/^    inline unparser<T>& null() {$/;"	f	class:msgpack::unparser
null_entry	dbcore/test-sm-log.cpp	/^    null_entry() { return std::make_pair(NULL_PTR, nullptr); }$/;"	f	struct:db_file
null_json	masstree/json.cc	/^const Json Json::null_json;$/;"	m	class:lcdf::Json	file:
null_json	masstree/json.hh	/^    static const Json null_json;$/;"	m	class:lcdf::Json
null_memo	masstree/string.hh	/^    struct null_memo {$/;"	s	class:lcdf::String
null_string_rep	masstree/string.cc	/^const String::rep_type String::null_string_rep = {$/;"	m	class:lcdf::String	file:
null_string_rep	masstree/string.hh	/^    static const rep_type null_string_rep;$/;"	m	class:lcdf::String
null_t	masstree/json.hh	/^        inline constexpr null_t() { }$/;"	f	struct:lcdf::Json::null_t
null_t	masstree/json.hh	/^    struct null_t {$/;"	s	class:lcdf::Json
nulmark	third-party/lz4/lz4c.c	/^char nulmark[] = "\/dev\/null";$/;"	v
nulmark	third-party/lz4/lz4c.c	/^char nulmark[] = "nul";$/;"	v
num_cpus_online	core.cc	/^coreid::num_cpus_online()$/;"	f	class:coreid
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeLookupFrame1Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeLookupFrame2Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeLookupFrame3Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeLookupFrame4Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeUpdateFrame1Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeUpdateFrame2Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_found;$/;"	m	struct:TPCE::TTradeUpdateFrame3Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               num_found;$/;"	m	struct:TPCE::TTradeLookupTxnOutput
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               num_found;$/;"	m	struct:TPCE::TTradeStatusFrame1Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               num_found;$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   num_found;$/;"	m	struct:TPCE::TTradeOrderFrame1Output
num_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   num_found;$/;"	m	struct:TPCE::TTradeResultFrame1Output
num_out	benchmarks/egen/TxnHarnessStructs.h	/^    INT64               num_out;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
num_threads	benchmarks/egen/EGenValidate.cpp	/^        UINT    num_threads;$/;"	m	class:BucketSimOptions	file:
num_trades_found	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_trades_found;$/;"	m	struct:TPCE::TTradeLookupFrame4Output
num_updated	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_updated;$/;"	m	struct:TPCE::TTradeUpdateFrame1Output
num_updated	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_updated;$/;"	m	struct:TPCE::TTradeUpdateFrame2Output
num_updated	benchmarks/egen/TxnHarnessStructs.h	/^    INT32                       num_updated;$/;"	m	struct:TPCE::TTradeUpdateFrame3Output
num_updated	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               num_updated;$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
num_updated	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           num_updated;$/;"	m	struct:TPCE::TMarketFeedFrame1Output
numa	masstree/mttest.cc	/^std::vector<mttest_numainfo> numa;$/;"	v
numa	masstree/perfstat.cc	/^} numa[MaxNumaNode];$/;"	m	namespace:Perf	typeref:struct:Perf::__anon54	file:
numa_extractor	benchmarks/results/make_graphs-6.py	/^    def numa_extractor(enabled):$/;"	f
nusers	benchmarks/bid.cc	/^static size_t nusers;$/;"	v	file:
nvaltype	masstree/clp.c	/^    int nvaltype;$/;"	m	struct:Clp_Internal	file:
nxt_seg_file_name	dbcore/sm-log-file.cpp	/^    nxt_seg_file_name(uint32_t segnum) {$/;"	f	struct:nxt_seg_file_name
nxt_seg_file_name	dbcore/sm-log-file.cpp	/^struct nxt_seg_file_name {$/;"	s	file:
nxt_segment_fd	dbcore/sm-log-file.h	/^    uint64_t nxt_segment_fd;$/;"	m	struct:sm_log_file_mgr
o	masstree/json.hh	/^        Json_rep_item<ObjectJson*> o;$/;"	m	union:lcdf::Json::rep_type
o	masstree/masstree_struct.hh	/^	oid_type o;					\/\/ Node objects$/;"	m	union:Masstree::leafvalue::__anon76
obegin	masstree/json.hh	/^    Json::const_object_iterator obegin() const {$/;"	f	class:lcdf::Json_proxy_base
obegin	masstree/json.hh	/^    Json::object_iterator obegin() {$/;"	f	class:lcdf::Json_proxy_base
obegin	masstree/json.hh	/^inline Json::const_object_iterator Json::obegin() const {$/;"	f	class:lcdf::Json
obegin	masstree/json.hh	/^inline Json::object_iterator Json::obegin() {$/;"	f	class:lcdf::Json
obj	benchmarks/egen/threading.h	/^        T* obj() {$/;"	f	class:TPCE::Thread
obj	benchmarks/egen/threading_pthread.h	/^        T* obj() {$/;"	f	class:TPCE::Thread
obj	benchmarks/egen/threading_single.h	/^        T* obj() {$/;"	f	class:TPCE::Thread
obj	dbcore/test-sc-hash.cpp	/^struct obj {$/;"	s	file:
obj	util.h	/^  inline T * obj() { return (T *) &obj_[0]; }$/;"	f	class:unmanaged
obj	util.h	/^  inline const T * obj() const { return (const T *) &obj_[0]; }$/;"	f	class:unmanaged
obj	varkey.h	/^  integral_type obj;$/;"	m	class:obj_varkey
obj_	benchmarks/egen/threading.h	/^        std::auto_ptr<T> obj_;$/;"	m	class:TPCE::Thread
obj_	benchmarks/egen/threading_pthread.h	/^        std::auto_ptr<T> obj_;$/;"	m	class:TPCE::Thread
obj_	benchmarks/egen/threading_single.h	/^        std::auto_ptr<T> obj_;$/;"	m	class:TPCE::Thread
obj_	util.h	/^  char obj_[sizeof(T)];$/;"	m	class:unmanaged
obj_k0	benchmarks/bid.cc	/^  string obj_k0;$/;"	m	class:bid_worker	file:
obj_key0	benchmarks/tpcc.cc	/^  string obj_key0;$/;"	m	class:tpcc_worker	file:
obj_key0	benchmarks/tpce.cc	/^		string obj_key0;$/;"	m	class:tpce_worker	file:
obj_key1	benchmarks/tpcc.cc	/^  string obj_key1;$/;"	m	class:tpcc_worker	file:
obj_key1	benchmarks/tpce.cc	/^		string obj_key1;$/;"	m	class:tpce_worker	file:
obj_type	record/inline_str.h	/^  typedef inline_str_base<IntSizeType, N> obj_type;$/;"	t	struct:serializer
obj_type	record/serializer.h	/^  typedef T obj_type;$/;"	t	struct:serializer
obj_type	record/serializer.h	/^  typedef int32_t obj_type;$/;"	t	struct:serializer
obj_type	record/serializer.h	/^  typedef typename Serializer::obj_type obj_type;$/;"	t	struct:generic_serializer
obj_type	record/serializer.h	/^  typedef uint32_t obj_type;$/;"	t	struct:serializer
obj_v	benchmarks/tpcc.cc	/^  string obj_v;$/;"	m	class:tpcc_worker	file:
obj_v	benchmarks/tpce.cc	/^		string obj_v;$/;"	m	class:tpce_worker	file:
obj_v0	benchmarks/bid.cc	/^  string obj_v0;$/;"	m	class:bid_worker	file:
obj_varkey	varkey.h	/^  inline obj_varkey() : varkey(), obj() {}$/;"	f	class:obj_varkey
obj_varkey	varkey.h	/^  inline obj_varkey(integral_type t)$/;"	f	class:obj_varkey
obj_varkey	varkey.h	/^class obj_varkey : public varkey {$/;"	c
objcopy	dbcore/sm-defs.h	/^objcopy(T *dest, T const *src, size_t n)$/;"	f
objcopy	dbcore/sm-defs.h	/^objcopy(T *dest, T const *src_begin, T const* src_end)$/;"	f
object	masstree/json.hh	/^inline Json Json::object(Args&&... rest) {$/;"	f	class:lcdf::Json
object	masstree/msgpack.hh	/^inline object_t object(uint32_t size) {$/;"	f	namespace:msgpack
object	object.h	/^		object( size_t size ) : _size(size) { _next = fat_ptr::make( (void*)0, INVALID_SIZE_CODE); }$/;"	f	class:object
object	object.h	/^class object$/;"	c
object_iterator	masstree/json.hh	/^    object_iterator() {$/;"	f	class:lcdf::Json::object_iterator
object_iterator	masstree/json.hh	/^    object_iterator(Json* j, int i)$/;"	f	class:lcdf::Json::object_iterator
object_iterator	masstree/json.hh	/^class Json::object_iterator : public const_object_iterator { public:$/;"	c	class:lcdf::Json
object_t	masstree/msgpack.hh	/^    object_t(uint32_t s)$/;"	f	struct:msgpack::object_t
object_t	masstree/msgpack.hh	/^struct object_t {$/;"	s	namespace:msgpack
object_value_type	masstree/json.hh	/^    typedef std::pair<const String, Json> object_value_type;$/;"	t	class:lcdf::Json
object_vector	object.h	/^	object_vector( unsigned long long nelems)$/;"	f	class:object_vector
object_vector	object.h	/^class object_vector$/;"	c
objects_freed	dbcore/rcu.h	/^    size_t objects_freed;$/;"	m	struct:RCU::rcu_gc_info
objects_stashed	dbcore/rcu.h	/^    size_t objects_stashed;$/;"	m	struct:RCU::rcu_gc_info
objzero	dbcore/sm-defs.h	/^objzero(T *begin, T* end)$/;"	f
objzero	dbcore/sm-defs.h	/^objzero(T *begin, size_t n)$/;"	f
oclass	masstree/clp.c	/^    Clp_Oclass oclass[Clp_OclassSize];$/;"	m	struct:Clp_Internal	file:
oend	masstree/json.hh	/^    Json::const_object_iterator oend() const {$/;"	f	class:lcdf::Json_proxy_base
oend	masstree/json.hh	/^    Json::object_iterator oend() {$/;"	f	class:lcdf::Json_proxy_base
oend	masstree/json.hh	/^inline Json::const_object_iterator Json::oend() const {$/;"	f	class:lcdf::Json
oend	masstree/json.hh	/^inline Json::object_iterator Json::oend() {$/;"	f	class:lcdf::Json
offer	counter.h	/^  offer(uint64_t value)$/;"	f	class:event_avg_counter
offset	dbcore/sm-common.h	/^    uintptr_t offset() const { return _ptr >> VALUE_START_BIT; }$/;"	f	struct:fat_ptr
offset	dbcore/sm-common.h	/^    uintptr_t offset() const { return _val >> fat_ptr::VALUE_START_BIT; }$/;"	f	struct:LSN
offset	dbcore/sm-log-file.h	/^        uint64_t offset(LSN lsn) {$/;"	f	struct:sm_log_file_mgr::segment_id
offset	dbcore/sm-log-file.h	/^        uint64_t offset(uint64_t lsn_offset) {$/;"	f	struct:sm_log_file_mgr::segment_id
offset_type	masstree/value_bag.hh	/^    typedef O offset_type;$/;"	t	class:value_bag
oid	dbcore/sm-log-defs.h	/^            OID oid;$/;"	m	struct:log_record::__anon91::__anon92
oid	dbcore/sm-log-defs.h	/^    OID oid;$/;"	m	struct:log_request
oid	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::oid()$/;"	f	class:sm_log_scan_mgr::header_scan
oid	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::oid()$/;"	f	class:sm_log_scan_mgr::record_scan
oid	dbcore/sm-trace.cpp	/^    uint32_t oid;$/;"	m	struct:TRACER::trace_record_header	file:
oid	dbcore/test-sm-log.cpp	/^    OID oid;$/;"	m	struct:db_record	file:
oid	masstree/masstree_struct.hh	/^	oid_type oid;$/;"	m	class:Masstree::node_base
oid	txn.h	/^    oid_type oid;$/;"	m	struct:transaction::read_record_t
oid	txn.h	/^    oid_type oid;$/;"	m	struct:transaction::write_record_t
oid_access	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::oid_access(FID f, OID o)$/;"	f	class:sm_oid_mgr_impl
oid_array	dbcore/sm-oid-impl.h	/^        void operator=(oid_array)=delete;$/;"	m	struct:sm_oid_mgr_impl::oid_array
oid_array	dbcore/sm-oid-impl.h	/^    struct oid_array {$/;"	s	struct:sm_oid_mgr_impl
oid_array	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::oid_array::oid_array(dynarray &&self)$/;"	f	class:sm_oid_mgr_impl::oid_array
oid_array	dbcore/sm-trace.cpp	/^    uint64_t oid_array; \/\/ ptr to oid array, need a mapping table from oid_array to table name$/;"	m	struct:TRACER::trace_record_header	file:
oid_arrays	dbcore/sm-trace.cpp	/^std::map<uintptr_t, std::string> oid_arrays;    \/\/ map oid array to table name$/;"	m	namespace:TRACER	file:
oid_get	dbcore/sm-oid.cpp	/^sm_oid_mgr::oid_get(FID f, OID o)$/;"	f	class:sm_oid_mgr
oid_mutex	dbcore/sm-oid.cpp	/^os_mutex_pod oid_mutex = os_mutex_pod::static_init();$/;"	m	namespace:__anon93	file:
oid_put	dbcore/sm-oid.cpp	/^sm_oid_mgr::oid_put(FID f, OID o, fat_ptr p)$/;"	f	class:sm_oid_mgr
oid_type	object.h	/^typedef uint32_t oid_type;$/;"	t
ojson	masstree/json.hh	/^inline Json::ObjectJson* Json::ojson() const {$/;"	f	class:lcdf::Json
old_age	dbcore/sm-trace.cpp	/^    uint64_t old_age;$/;"	m	struct:TRACER::update_trace_record	file:
old_size	dbcore/sm-trace.cpp	/^    uint32_t old_size;$/;"	m	struct:TRACER::update_trace_record	file:
old_version	btree.h	/^    uint64_t old_version;$/;"	m	struct:btree::insert_info_t
old_version	dbcore/sm-trace.cpp	/^    uint64_t old_version;$/;"	m	struct:TRACER::update_trace_record	file:
old_version	masstree_btree.h	/^    uint64_t old_version;$/;"	m	struct:mbtree::insert_info_t
oldest_segnum	dbcore/sm-log-file.h	/^    uint32_t oldest_segnum;$/;"	m	struct:sm_log_file_mgr
oldinbuf_	masstree/mtclient.hh	/^    std::vector<char*> oldinbuf_;$/;"	m	class:KVConn
oldinbuf_	masstree/mtd.cc	/^    std::vector<char*> oldinbuf_;$/;"	m	struct:conn	file:
om	dbcore/test-sm-oid.cpp	/^sm_oid_mgr *om;$/;"	v
on_construct	base_txn_btree.h	/^  static inline void on_construct() {} \/\/ called when initializing$/;"	f	struct:base_txn_btree_handler
on_construct	txn_proto2_impl.h	/^  on_construct()$/;"	f	struct:base_txn_btree_handler
on_node_begin	base_txn_btree.h	/^base_txn_btree<Transaction, P>::purge_tree_walker::on_node_begin(const typename concurrent_btree::node_opaque_t *n)$/;"	f	class:base_txn_btree::purge_tree_walker
on_node_begin	btree_impl.h	/^btree<P>::size_walk_callback::on_node_begin(const node_opaque_t *n)$/;"	f	class:btree::size_walk_callback
on_node_begin	masstree_btree.h	/^mbtree<P>::size_walk_callback::on_node_begin(const node_opaque_t *n)$/;"	f	class:mbtree::size_walk_callback
on_node_failure	base_txn_btree.h	/^base_txn_btree<Transaction, P>::purge_tree_walker::on_node_failure()$/;"	f	class:base_txn_btree::purge_tree_walker
on_node_failure	btree_impl.h	/^btree<P>::size_walk_callback::on_node_failure()$/;"	f	class:btree::size_walk_callback
on_node_failure	masstree_btree.h	/^mbtree<P>::size_walk_callback::on_node_failure()$/;"	f	class:mbtree::size_walk_callback
on_node_success	base_txn_btree.h	/^base_txn_btree<Transaction, P>::purge_tree_walker::on_node_success()$/;"	f	class:base_txn_btree::purge_tree_walker
on_node_success	btree_impl.h	/^btree<P>::size_walk_callback::on_node_success()$/;"	f	class:btree::size_walk_callback
on_node_success	masstree_btree.h	/^mbtree<P>::size_walk_callback::on_node_success()$/;"	f	class:mbtree::size_walk_callback
on_resp_node	base_txn_btree.h	/^  ::on_resp_node($/;"	f	class:base_txn_btree::txn_search_range_callback
on_resp_node	btree.h	/^    on_resp_node(const node_opaque_t *n, uint64_t version)$/;"	f	class:btree::search_range_callback
on_resp_node	masstree_btree.h	/^    on_resp_node(const node_opaque_t *n, uint64_t version)$/;"	f	class:mbtree::search_range_callback
on_run_setup	benchmarks/bench.h	/^  virtual void on_run_setup() {}$/;"	f	class:bench_worker
once	dbcore/w_rand.cpp	/^void __attribute__((noinline)) once(w_rand &rng) {$/;"	f
one	masstree/mttest.cc	/^void gnuplot_info::one(const String &xname, int ti, const String &datatype_name)$/;"	f	class:__anon67::gnuplot_info
one	masstree/test_atomics.cc	/^	unsigned one : 1;$/;"	m	struct:myunion::__anon14	file:
one	third-party/lz4/lz4c.c	/^static const int one = 1;$/;"	v	file:
one_profile_report	masstree/string.cc	/^String::one_profile_report(StringAccum &sa, int i, int examples)$/;"	f	class:lcdf::String
onecopy_logbased_simulation	persist_test.cc	/^class onecopy_logbased_simulation : public database_simulation {$/;"	c	file:
onego	masstree/mtd.cc	/^int onego(query<row_type>& q, Json& request, Str request_str, threadinfo& ti) {$/;"	f
onenorm	benchmarks/runner.py	/^def onenorm(x):$/;"	f
onetest	masstree/msgpacktest.cc	/^static void onetest(const char* file, int line,$/;"	f	file:
oom_string_rep	masstree/string.cc	/^const String::rep_type String::oom_string_rep = {$/;"	m	class:lcdf::String	file:
oom_string_rep	masstree/string.hh	/^    static const rep_type oom_string_rep;$/;"	m	class:lcdf::String
op	dbcore/sm-trace.cpp	/^    char op;            \/\/ r(ead), u(pdate), or i(nsert)$/;"	m	struct:TRACER::trace_record_header	file:
open_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    open_date;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
open_for_write	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::open_for_write(segment_id *sid)$/;"	f	class:sm_log_file_mgr
open_index	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::open_index(const std::string &name, size_t value_size_hint, bool mostly_append)$/;"	f	class:ndb_wrapper
open_tables	benchmarks/bench.h	/^  std::map<std::string, abstract_ordered_index *> open_tables;$/;"	m	class:bench_loader
open_tables	benchmarks/bench.h	/^  std::map<std::string, abstract_ordered_index *> open_tables;$/;"	m	class:bench_runner
open_tables	benchmarks/bench.h	/^  std::map<std::string, abstract_ordered_index *> open_tables;$/;"	m	class:bench_worker
operation_timestamp	masstree/kvthread.hh	/^    kvtimestamp_t operation_timestamp() const {$/;"	f	class:threadinfo
operation_timestamp	masstree_btree.h	/^    kvtimestamp_t operation_timestamp() const {$/;"	f	class:simple_threadinfo
operator !	masstree/circular_int.hh	/^    bool operator!() const {$/;"	f	class:circular_int
operator !	masstree/json.hh	/^    bool operator!() const {$/;"	f	class:lcdf::Json_get_proxy
operator !	masstree/json.hh	/^    bool operator!() const {$/;"	f	class:lcdf::Json_proxy_base
operator !	masstree/json.hh	/^inline bool Json::operator!() const {$/;"	f	class:lcdf::Json
operator !	masstree/local_vector.hh	/^inline bool local_vector<T, N, A>::operator!() const {$/;"	f	class:local_vector
operator !	masstree/straccum.hh	/^inline bool StringAccum::operator!() const {$/;"	f	class:lcdf::StringAccum
operator !	masstree/string_base.hh	/^    bool operator!() const {$/;"	f	class:lcdf::String_base
operator !=	dbcore/cslist.h	/^        bool operator!=(iterator const &other) const {$/;"	f	struct:cslist::iterator
operator !=	dbcore/rcu-slist.h	/^        bool operator!=(iterator const &other) const {$/;"	f	struct:_rcu_slist::iterator
operator !=	dbcore/rcu-slist.h	/^        bool operator!=(next_ptr const &other) {$/;"	f	struct:_rcu_slist::next_ptr
operator !=	dbcore/sc-hash.h	/^        bool operator!=(iterator const &other) const {$/;"	f	struct:iterator
operator !=	dbcore/sm-common.h	/^        bool operator!=(iterator const &other) { return _d != other._d; }$/;"	f	struct:dirent_iterator::iterator
operator !=	dbcore/sm-common.h	/^    bool operator!=(LSN const &other) const { return not (*this == other); }$/;"	f	struct:LSN
operator !=	dbcore/sm-common.h	/^    bool operator!=(XID const &other) const { return not (*this == other); }$/;"	f	struct:XID
operator !=	dbcore/sm-common.h	/^    bool operator!=(fat_ptr const &other) const {$/;"	f	struct:fat_ptr
operator !=	dbcore/sm-defs.h	/^        bool operator!=(iterator const &other) {$/;"	f	struct:_enumerate_helper::iterator
operator !=	dbcore/sm-oid-alloc-impl.h	/^        bool operator!=(iterator const &other) {$/;"	f	struct:sparse_bitset::iterator
operator !=	marked_ptr.h	/^  operator!=(const marked_ptr<U> &o) const$/;"	f	class:marked_ptr
operator !=	masstree/circular_int.hh	/^    bool operator!=(circular_int<T> x) const {$/;"	f	class:circular_int
operator !=	masstree/json.hh	/^inline bool operator!=(const Json& a, const Json& b) {$/;"	f	namespace:lcdf
operator !=	masstree/json.hh	/^inline bool operator!=(const Json& a, const Json_proxy_base<T>& b) {$/;"	f	namespace:lcdf
operator !=	masstree/json.hh	/^inline bool operator!=(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator !=	masstree/json.hh	/^inline bool operator!=(const Json::const_iterator& a, const Json::const_iterator& b) {$/;"	f	namespace:lcdf
operator !=	masstree/json.hh	/^inline bool operator!=(const Json::const_object_iterator& a, const Json::const_object_iterator& b) {$/;"	f	namespace:lcdf
operator !=	masstree/json.hh	/^inline bool operator!=(const Json_proxy_base<T>& a, const Json& b) {$/;"	f	namespace:lcdf
operator !=	masstree/json.hh	/^inline bool operator!=(const Json_proxy_base<T>& a,$/;"	f	namespace:lcdf
operator !=	masstree/misc.hh	/^    bool operator!=(lcdf::Str s) const {$/;"	f	struct:quick_istr
operator !=	masstree/straccum.hh	/^inline bool operator!=(StringAccum &sa, const char *cstr) {$/;"	f	namespace:lcdf
operator !=	masstree/string_base.hh	/^inline bool operator!=(const String_base<T> &a, const String_base<U> &b) {$/;"	f	namespace:lcdf
operator !=	masstree/string_base.hh	/^inline bool operator!=(const String_base<T> &a, const char *b) {$/;"	f	namespace:lcdf
operator !=	masstree/string_base.hh	/^inline bool operator!=(const String_base<T> &a, const std::string &b) {$/;"	f	namespace:lcdf
operator !=	masstree/string_base.hh	/^inline bool operator!=(const char *a, const String_base<T> &b) {$/;"	f	namespace:lcdf
operator !=	masstree/string_base.hh	/^inline bool operator!=(const std::string &a, const String_base<T> &b) {$/;"	f	namespace:lcdf
operator !=	record/inline_str.h	/^  operator!=(const inline_str_base &other) const$/;"	f	class:inline_str_base
operator !=	record/inline_str.h	/^  operator!=(const inline_str_fixed &other) const$/;"	f	class:inline_str_fixed
operator !=	scopedperf.hh	/^  bool operator!=(const viter &other) const { return _pos != other._pos; }$/;"	f	struct:scopedperf::viter
operator !=	small_unordered_map.h	/^    operator!=(const iterator_ &o) const$/;"	f	class:small_unordered_map::iterator_
operator !=	small_vector.h	/^    operator!=(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator !=	small_vector.h	/^    operator!=(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator !=	static_unordered_map.h	/^    operator!=(const iterator_ &o) const$/;"	f	class:static_unordered_map::iterator_
operator !=	static_vector.h	/^    operator!=(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator !=	varkey.h	/^  operator!=(const varkey &that) const$/;"	f	class:varkey
operator ()	benchmarks/bench.cc	/^  operator()(map_type &agg, const map_type &m) const$/;"	f	struct:map_maxer
operator ()	benchmarks/masstree/kvtest.cc	/^  operator()(btree &btr, unsigned int id, const volatile bool *phases) const$/;"	f	struct:kvtest_rw1
operator ()	benchmarks/ndb_wrapper.h	/^    operator()(struct ndbtxn *p) const$/;"	f	struct:private_::cast_base
operator ()	btree.cc	/^    operator()(const typename testing_concurrent_btree::string_type &k, typename testing_concurrent_btree::value_type v) const$/;"	f	struct:mp_test7_ns::scan_callback
operator ()	btree.cc	/^    operator()(const typename testing_concurrent_btree::string_type &k,$/;"	f	struct:test6_ns::scan_callback
operator ()	dbcore/adler.cpp	/^    void operator()(T data) {$/;"	f	struct:adler32_memcpy_op
operator ()	dbcore/adler.cpp	/^    void operator()(T) { }$/;"	f	struct:adler32_nop_op
operator ()	dbcore/burt-hash.h	/^    __v4si operator()(__v4si x) const { return fn(x); }$/;"	f	struct:burt_hash4
operator ()	dbcore/burt-hash.h	/^    __v4si operator()(int32_t xi) const {$/;"	f	struct:burt_hash4
operator ()	dbcore/burt-hash.h	/^    uint32_t operator()(uint32_t x) const { return fn(x); }$/;"	f	struct:burt_hash
operator ()	dbcore/rcu-slist.h	/^        bool operator()(_rcu_slist::node *n, bool is_dead) const {$/;"	f	struct:rcu_slist::visitor_helper
operator ()	dbcore/sm-oid-alloc-impl.h	/^        bool operator()(OID) const { return true; }$/;"	f	struct:sm_allocator::_nop_filter
operator ()	dbcore/sm-oid.cpp	/^        bool operator()(tcache const &a, FID const &f) const {$/;"	f	struct:__anon93::thread_data::cmpeq
operator ()	dbcore/sm-oid.cpp	/^        bool operator()(tcache const &a, tcache const &b) const {$/;"	f	struct:__anon93::thread_data::cmpeq
operator ()	dbcore/sm-oid.cpp	/^        uint32_t operator()(sm_allocator::thread_cache const &x) const {$/;"	f	struct:__anon93::thread_data::hasher
operator ()	dbcore/test-rcu-slist.cpp	/^    bool operator()(my_node *n, bool is_dead) const {$/;"	f	struct:list_visitor
operator ()	dbcore/test-rcu.cpp	/^    bool operator()(my_node *n, bool is_dead) const {$/;"	f	struct:list_visitor
operator ()	dbcore/test-sc-hash.cpp	/^    uint32_t operator()(int x) {$/;"	f	struct:hasher
operator ()	dbcore/test-sc-hash.cpp	/^    uint32_t operator()(obj const &o) {$/;"	f	struct:hasher
operator ()	dbcore/w_rand.h	/^    uint32_t operator()() { return rng.rand(); }$/;"	f	struct:w_rand_urng
operator ()	dbcore/w_rand.h	/^    uint32_t operator()(uint32_t end) { return randn(end); }$/;"	f	struct:w_rand
operator ()	marked_ptr.h	/^    operator()(marked_ptr<T> p) const$/;"	f	struct:std::hash
operator ()	masstree/compiler.hh	/^    void operator()() const {$/;"	f	struct:do_nothing
operator ()	masstree/compiler.hh	/^    void operator()() const {$/;"	f	struct:fence_function
operator ()	masstree/compiler.hh	/^    void operator()() const {$/;"	f	struct:relax_fence_function
operator ()	masstree/compiler.hh	/^    void operator()() {$/;"	f	struct:backoff_fence_function
operator ()	masstree/compiler.hh	/^    void operator()(T *p) {$/;"	f	struct:value_prefetcher
operator ()	masstree/compiler.hh	/^    void operator()(T) {$/;"	f	struct:value_prefetcher
operator ()	masstree/compiler.hh	/^    void operator()(const T&) const {$/;"	f	struct:do_nothing
operator ()	masstree/compiler.hh	/^    void operator()(const T&, const U&) const {$/;"	f	struct:do_nothing
operator ()	masstree/ksearch.hh	/^    int operator()(const KA &ka, const T &n, int p) {$/;"	f	struct:key_comparator
operator ()	masstree/kvthread.hh	/^	void operator()() {$/;"	f	struct:threadinfo::accounting_relax_fence_function
operator ()	masstree/kvthread.hh	/^	void operator()(V v) {$/;"	f	struct:threadinfo::stable_accounting_relax_fence_function
operator ()	masstree/masstree_remove.hh	/^void destroy_rcu_callback<P>::operator()(threadinfo& ti) {$/;"	f	class:Masstree::destroy_rcu_callback
operator ()	masstree/masstree_remove.hh	/^void gc_layer_rcu_callback<P>::operator()(threadinfo& ti)$/;"	f	class:Masstree::gc_layer_rcu_callback
operator ()	masstree/masstree_scan.hh	/^    int operator()(const key_type &k, const scanstackelt<P> &n, int p) {$/;"	f	class:Masstree::scanstackelt
operator ()	masstree_btree.h	/^      void operator()(V) {$/;"	f	class:simple_threadinfo::accounting_relax_fence_function
operator ()	small_unordered_map.h	/^    operator()(Tp *t) const$/;"	f	struct:private_::myhash
operator ()	small_unordered_map.h	/^    operator()(typename fast_func_param<T>::type t) const$/;"	f	struct:private_::myhash
operator ()	str_arena.h	/^  operator()()$/;"	f	class:str_arena
operator ()	txn_btree.h	/^    inline ALWAYS_INLINE lcdf::Str operator()(lcdf::Str s) {$/;"	f	class:txn_btree_::key_reader
operator ()	txn_btree.h	/^    operator()(const std::string &s)$/;"	f	class:txn_btree_::key_reader
operator ()	txn_btree.h	/^    operator()(const uint8_t *data, size_t sz, StringAllocator &sa)$/;"	f	class:txn_btree_::single_value_reader
operator ()	txn_btree.h	/^    operator()(const uint8_t *data, size_t sz, StringAllocator &sa)$/;"	f	class:txn_btree_::value_reader
operator ()	txn_btree.h	/^    operator()(uint8_t *buf, size_t sz)$/;"	f	class:txn_btree_::value_writer
operator ()	typed_txn_btree.h	/^    operator()(const std::string &s)$/;"	f	class:typed_txn_btree_::key_reader
operator ()	typed_txn_btree.h	/^    operator()(const uint8_t *data, size_t sz, StringAllocator &sa)$/;"	f	class:typed_txn_btree_::single_value_reader
operator ()	typed_txn_btree.h	/^    operator()(const uint8_t *data, size_t sz, StringAllocator &sa)$/;"	f	class:typed_txn_btree_::value_reader
operator ()	typed_txn_btree.h	/^    operator()(lcdf::Str s)$/;"	f	class:typed_txn_btree_::key_reader
operator ()	typed_txn_btree.h	/^    operator()(uint8_t *buf, size_t sz)$/;"	f	class:typed_txn_btree_::value_writer
operator ()	util.h	/^  inline ALWAYS_INLINE T operator()(const T &t) const { return t; }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE T operator()(const T &t) const { return t; }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE int16_t operator()(int16_t t) const { return be16toh(t); }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE int16_t operator()(int16_t t) const { return htobe16(t); }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE int32_t operator()(int32_t t) const { return be32toh(t); }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE int32_t operator()(int32_t t) const { return htobe32(t); }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE int64_t operator()(int64_t t) const { return be64toh(t); }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE int64_t operator()(int64_t t) const { return htobe64(t); }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE uint16_t operator()(uint16_t t) const { return be16toh(t); }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE uint16_t operator()(uint16_t t) const { return htobe16(t); }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE uint32_t operator()(uint32_t t) const { return be32toh(t); }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE uint32_t operator()(uint32_t t) const { return htobe32(t); }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE uint64_t operator()(uint64_t t) const { return be64toh(t); }$/;"	f	struct:util::host_endian_trfm
operator ()	util.h	/^  inline ALWAYS_INLINE uint64_t operator()(uint64_t t) const { return htobe64(t); }$/;"	f	struct:util::big_endian_trfm
operator ()	util.h	/^  operator()()$/;"	f	struct:util::default_string_allocator
operator ()	util.h	/^  operator()(const PairType &lhs, const PairType &rhs) const$/;"	f	struct:util::std_pair_first_cmp
operator ()	util.h	/^  operator()(const std::string &s) const$/;"	f	struct:util::RangeAwareParser
operator ()	varkey.h	/^  inline ALWAYS_INLINE T operator()(T t) const { return t; }$/;"	f	struct:signed_aware_trfm
operator ()	varkey.h	/^  operator()(signed_type s) const$/;"	f	struct:signed_aware_trfm
operator *	benchmarks/egen/Money.cpp	/^CMoney operator *(double l_f, CMoney r_m)$/;"	f	namespace:TPCE
operator *	benchmarks/egen/Money.cpp	/^CMoney operator *(int l_i, CMoney r_m)$/;"	f	namespace:TPCE
operator *	benchmarks/egen/Money.h	/^    CMoney operator *(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator *	benchmarks/egen/Money.h	/^    CMoney operator *(double f)$/;"	f	class:TPCE::CMoney
operator *	benchmarks/egen/Money.h	/^    CMoney operator *(int i)$/;"	f	class:TPCE::CMoney
operator *	dbcore/cslist.h	/^        Node &operator*() { return *next(prev); }$/;"	f	struct:cslist::iterator
operator *	dbcore/rcu-slist.h	/^        Node &operator*() { return *get(); }$/;"	f	struct:_rcu_slist::iterator
operator *	dbcore/sc-hash.h	/^        value_type &operator*() { return *_get(); }$/;"	f	struct:iterator
operator *	dbcore/sm-common.h	/^        char const * operator*() { return _dent->d_name; }$/;"	f	struct:dirent_iterator::iterator
operator *	dbcore/sm-common.h	/^    char const *operator*() { return *this; }$/;"	f	struct:tmp_dir
operator *	dbcore/sm-defs.h	/^        std::pair<size_t, Ref> operator*() {$/;"	f	struct:_enumerate_helper::iterator
operator *	dbcore/sm-log-file.cpp	/^    char const *operator*() { return buf; }$/;"	f	struct:cmark_file_name
operator *	dbcore/sm-log-file.cpp	/^    char const *operator*() { return buf; }$/;"	f	struct:dmark_file_name
operator *	dbcore/sm-log-file.cpp	/^    char const *operator*() { return buf; }$/;"	f	struct:nxt_seg_file_name
operator *	dbcore/sm-log-file.cpp	/^    char const *operator*() { return buf; }$/;"	f	struct:segment_file_name
operator *	dbcore/sm-log-recover.h	/^        log_block &operator*() { return *get(); }$/;"	f	struct:sm_log_recover_mgr::block_scanner
operator *	dbcore/sm-oid-alloc-impl.h	/^        uint16_t &operator*() { return entries[i]; }$/;"	f	struct:sparse_bitset::iterator
operator *	marked_ptr.h	/^  operator*() const$/;"	f	class:marked_ptr
operator *	masstree/json.hh	/^    Json& operator*() const {$/;"	f	class:lcdf::Json::array_iterator
operator *	masstree/json.hh	/^    const Json& operator*() const {$/;"	f	class:lcdf::Json::const_array_iterator
operator *	masstree/json.hh	/^    const value_type& operator*() const {$/;"	f	class:lcdf::Json::const_iterator
operator *	masstree/json.hh	/^    const value_type& operator*() const {$/;"	f	class:lcdf::Json::const_object_iterator
operator *	masstree/json.hh	/^    value_type& operator*() const {$/;"	f	class:lcdf::Json::iterator
operator *	masstree/json.hh	/^    value_type& operator*() const {$/;"	f	class:lcdf::Json::object_iterator
operator *	scopedperf.hh	/^  T operator*() { return _v->_buf[_pos]; }$/;"	f	struct:scopedperf::viter
operator *	small_unordered_map.h	/^    operator*() const$/;"	f	class:small_unordered_map::iterator_
operator *	small_vector.h	/^    operator*() const$/;"	f	class:small_vector::iterator_
operator *	small_vector.h	/^    operator*() const$/;"	f	class:small_vector::small_iterator_
operator *	static_unordered_map.h	/^    operator*() const$/;"	f	class:static_unordered_map::iterator_
operator *	static_vector.h	/^    operator*() const$/;"	f	class:static_vector::iterator_
operator *	util.h	/^  inline T & operator*() { return *obj(); }$/;"	f	class:unmanaged
operator *	util.h	/^  inline T & operator*() { return elem; }$/;"	f	class:util::aligned_padded_elem
operator *	util.h	/^  inline const T & operator*() const { return *obj(); }$/;"	f	class:unmanaged
operator *	util.h	/^  inline const T & operator*() const { return elem; }$/;"	f	class:util::aligned_padded_elem
operator +	benchmarks/egen/Money.h	/^    CMoney operator +(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator +	benchmarks/egen/Money.h	/^    CMoney operator +(double f)$/;"	f	class:TPCE::CMoney
operator +	masstree/circular_int.hh	/^    circular_int<T> operator+(int x) const {$/;"	f	class:circular_int
operator +	masstree/circular_int.hh	/^    circular_int<T> operator+(unsigned x) const {$/;"	f	class:circular_int
operator +	masstree/json.hh	/^inline Json operator+(Json x) {$/;"	f	namespace:lcdf
operator +	masstree/json.hh	/^inline Json::array_iterator operator+(Json::array_iterator a, Json::array_iterator::difference_type i) {$/;"	f	namespace:lcdf
operator +	masstree/json.hh	/^inline Json::const_array_iterator operator+(Json::const_array_iterator a, Json::const_array_iterator::difference_type i) {$/;"	f	namespace:lcdf
operator +	masstree/string.hh	/^inline String operator+(String a, char b) {$/;"	f	namespace:lcdf
operator +	masstree/string.hh	/^inline String operator+(String a, const String &b) {$/;"	f	namespace:lcdf
operator +	masstree/string.hh	/^inline String operator+(String a, const char *b) {$/;"	f	namespace:lcdf
operator +	masstree/string.hh	/^inline String operator+(const char *a, const String &b) {$/;"	f	namespace:lcdf
operator +	small_vector.h	/^    operator+(int n) const$/;"	f	class:small_vector::iterator_
operator +	small_vector.h	/^    operator+(int n) const$/;"	f	class:small_vector::small_iterator_
operator +	static_vector.h	/^    operator+(int n) const$/;"	f	class:static_vector::iterator_
operator ++	benchmarks/egen/WheelTime.cpp	/^CWheelTime CWheelTime::operator ++ ( INT32 )$/;"	f	class:CWheelTime
operator ++	counter.h	/^  operator++()$/;"	f	class:event_counter
operator ++	dbcore/cslist.h	/^        iterator &operator++() {$/;"	f	struct:cslist::iterator
operator ++	dbcore/rcu-slist.h	/^        iterator &operator++() {$/;"	f	struct:_rcu_slist::iterator
operator ++	dbcore/sc-hash.h	/^        iterator &operator++() {$/;"	f	struct:iterator
operator ++	dbcore/sm-common.cpp	/^dirent_iterator::iterator::operator++() {$/;"	f	class:dirent_iterator::iterator
operator ++	dbcore/sm-defs.h	/^        void operator++() {$/;"	f	struct:_enumerate_helper::iterator
operator ++	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::block_scanner::operator++()$/;"	f	class:sm_log_recover_mgr::block_scanner
operator ++	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::log_scanner::operator++()$/;"	f	class:sm_log_recover_mgr::log_scanner
operator ++	dbcore/sm-oid-alloc-impl.h	/^        void operator++() {$/;"	f	struct:sparse_bitset::iterator
operator ++	masstree/circular_int.hh	/^    circular_int<T> &operator++() {$/;"	f	class:circular_int
operator ++	masstree/circular_int.hh	/^    circular_int<T> operator++(int) {$/;"	f	class:circular_int
operator ++	masstree/json.hh	/^    Json& operator++() {$/;"	f	class:lcdf::Json_proxy_base
operator ++	masstree/json.hh	/^    void operator++() {$/;"	f	class:lcdf::Json::const_array_iterator
operator ++	masstree/json.hh	/^    void operator++() {$/;"	f	class:lcdf::Json::const_iterator
operator ++	masstree/json.hh	/^    void operator++() {$/;"	f	class:lcdf::Json::const_object_iterator
operator ++	masstree/json.hh	/^    void operator++(int) {$/;"	f	class:lcdf::Json::const_array_iterator
operator ++	masstree/json.hh	/^    void operator++(int) {$/;"	f	class:lcdf::Json::const_iterator
operator ++	masstree/json.hh	/^    void operator++(int) {$/;"	f	class:lcdf::Json::const_object_iterator
operator ++	masstree/json.hh	/^    void operator++(int) {$/;"	f	class:lcdf::Json_proxy_base
operator ++	masstree/json.hh	/^inline Json& Json::operator++() {$/;"	f	class:lcdf::Json
operator ++	masstree/json.hh	/^inline void Json::operator++(int) {$/;"	f	class:lcdf::Json
operator ++	scopedperf.hh	/^  void operator++() { _pos++; }$/;"	f	struct:scopedperf::viter
operator ++	small_unordered_map.h	/^    operator++()$/;"	f	class:small_unordered_map::iterator_
operator ++	small_unordered_map.h	/^    operator++(int)$/;"	f	class:small_unordered_map::iterator_
operator ++	small_vector.h	/^    operator++()$/;"	f	class:small_vector::iterator_
operator ++	small_vector.h	/^    operator++()$/;"	f	class:small_vector::small_iterator_
operator ++	small_vector.h	/^    operator++(int)$/;"	f	class:small_vector::iterator_
operator ++	small_vector.h	/^    operator++(int)$/;"	f	class:small_vector::small_iterator_
operator ++	static_unordered_map.h	/^    operator++()$/;"	f	class:static_unordered_map::iterator_
operator ++	static_unordered_map.h	/^    operator++(int)$/;"	f	class:static_unordered_map::iterator_
operator ++	static_vector.h	/^    operator++()$/;"	f	class:static_vector::iterator_
operator ++	static_vector.h	/^    operator++(int)$/;"	f	class:static_vector::iterator_
operator +=	benchmarks/egen/DateTime.cpp	/^CDateTime& CDateTime::operator += (const CDateTime& dt)$/;"	f	class:CDateTime
operator +=	benchmarks/egen/Money.h	/^    CMoney& operator +=(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator +=	benchmarks/egen/WheelTime.cpp	/^CWheelTime& CWheelTime::operator += ( const INT32& Interval )$/;"	f	class:CWheelTime
operator +=	counter.h	/^  operator+=(const counter_data &that)$/;"	f	struct:counter_data
operator +=	counter.h	/^  operator+=(uint64_t i)$/;"	f	class:event_counter
operator +=	masstree/circular_int.hh	/^    circular_int<T> &operator+=(int x) {$/;"	f	class:circular_int
operator +=	masstree/circular_int.hh	/^    circular_int<T> &operator+=(unsigned x) {$/;"	f	class:circular_int
operator +=	masstree/json.hh	/^    Json& operator+=(const Json& x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(double x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(int x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(long long x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(long x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(unsigned long long x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(unsigned long x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    Json& operator+=(unsigned x) {$/;"	f	class:lcdf::Json_proxy_base
operator +=	masstree/json.hh	/^    array_iterator& operator+=(difference_type x) {$/;"	f	class:lcdf::Json::array_iterator
operator +=	masstree/json.hh	/^    const_array_iterator& operator+=(difference_type x) {$/;"	f	class:lcdf::Json::const_array_iterator
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(const Json& x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(double x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(int x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(long long x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(long x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(unsigned long long x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(unsigned long x) {$/;"	f	class:lcdf::Json
operator +=	masstree/json.hh	/^inline Json& Json::operator+=(unsigned x) {$/;"	f	class:lcdf::Json
operator +=	masstree/string.hh	/^inline String &String::operator+=(char c) {$/;"	f	class:lcdf::String
operator +=	masstree/string.hh	/^inline String &String::operator+=(const String &x) {$/;"	f	class:lcdf::String
operator +=	masstree/string.hh	/^inline String &String::operator+=(const String_base<T> &x) {$/;"	f	class:lcdf::String
operator +=	masstree/string.hh	/^inline String &String::operator+=(const char *cstr) {$/;"	f	class:lcdf::String
operator +=	small_vector.h	/^    operator+=(int n)$/;"	f	class:small_vector::iterator_
operator +=	small_vector.h	/^    operator+=(int n)$/;"	f	class:small_vector::small_iterator_
operator +=	static_vector.h	/^    operator+=(int n)$/;"	f	class:static_vector::iterator_
operator -	benchmarks/egen/DateTime.cpp	/^double CDateTime::operator -(const CDateTime& dt)$/;"	f	class:CDateTime
operator -	benchmarks/egen/Money.h	/^    CMoney operator -(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator -	benchmarks/egen/Money.h	/^    CMoney operator -(double f)$/;"	f	class:TPCE::CMoney
operator -	masstree/circular_int.hh	/^    circular_int<T> operator-(int x) const {$/;"	f	class:circular_int
operator -	masstree/circular_int.hh	/^    circular_int<T> operator-(unsigned x) const {$/;"	f	class:circular_int
operator -	masstree/circular_int.hh	/^    difference_type operator-(circular_int<T> x) const {$/;"	f	class:circular_int
operator -	masstree/json.hh	/^inline Json operator-(Json x) {$/;"	f	namespace:lcdf
operator -	masstree/json.hh	/^inline Json::array_iterator operator-(Json::array_iterator a, Json::array_iterator::difference_type i) {$/;"	f	namespace:lcdf
operator -	masstree/json.hh	/^inline Json::const_array_iterator operator-(Json::const_array_iterator a, Json::const_array_iterator::difference_type i) {$/;"	f	namespace:lcdf
operator -	masstree/json.hh	/^inline Json::const_array_iterator::difference_type operator-(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator -	small_vector.h	/^    operator-(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator -	small_vector.h	/^    operator-(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator -	small_vector.h	/^    operator-(int n) const$/;"	f	class:small_vector::iterator_
operator -	small_vector.h	/^    operator-(int n) const$/;"	f	class:small_vector::small_iterator_
operator -	static_vector.h	/^    operator-(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator -	static_vector.h	/^    operator-(int n) const$/;"	f	class:static_vector::iterator_
operator --	masstree/circular_int.hh	/^    circular_int<T> &operator--() {$/;"	f	class:circular_int
operator --	masstree/circular_int.hh	/^    circular_int<T> operator--(int) {$/;"	f	class:circular_int
operator --	masstree/json.hh	/^    Json& operator--() {$/;"	f	class:lcdf::Json_proxy_base
operator --	masstree/json.hh	/^    void operator--() {$/;"	f	class:lcdf::Json::const_array_iterator
operator --	masstree/json.hh	/^    void operator--(int) {$/;"	f	class:lcdf::Json::const_array_iterator
operator --	masstree/json.hh	/^    void operator--(int) {$/;"	f	class:lcdf::Json_proxy_base
operator --	masstree/json.hh	/^inline Json& Json::operator--() {$/;"	f	class:lcdf::Json
operator --	masstree/json.hh	/^inline void Json::operator--(int) {$/;"	f	class:lcdf::Json
operator --	small_vector.h	/^    operator--()$/;"	f	class:small_vector::iterator_
operator --	small_vector.h	/^    operator--()$/;"	f	class:small_vector::small_iterator_
operator --	small_vector.h	/^    operator--(int)$/;"	f	class:small_vector::iterator_
operator --	small_vector.h	/^    operator--(int)$/;"	f	class:small_vector::small_iterator_
operator --	static_vector.h	/^    operator--()$/;"	f	class:static_vector::iterator_
operator --	static_vector.h	/^    operator--(int)$/;"	f	class:static_vector::iterator_
operator -=	benchmarks/egen/Money.h	/^    CMoney& operator -=(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator -=	benchmarks/egen/Money.h	/^    CMoney& operator -=(double f)$/;"	f	class:TPCE::CMoney
operator -=	masstree/circular_int.hh	/^    circular_int<T> &operator-=(int x) {$/;"	f	class:circular_int
operator -=	masstree/circular_int.hh	/^    circular_int<T> &operator-=(unsigned x) {$/;"	f	class:circular_int
operator -=	masstree/json.hh	/^    Json& operator-=(const Json& x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(double x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(int x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(long long x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(long x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(unsigned long long x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(unsigned long x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    Json& operator-=(unsigned x) {$/;"	f	class:lcdf::Json_proxy_base
operator -=	masstree/json.hh	/^    array_iterator& operator-=(difference_type x) {$/;"	f	class:lcdf::Json::array_iterator
operator -=	masstree/json.hh	/^    const_array_iterator& operator-=(difference_type x) {$/;"	f	class:lcdf::Json::const_array_iterator
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(const Json& x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(double x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(int x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(long long x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(long x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(unsigned long long x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(unsigned long x) {$/;"	f	class:lcdf::Json
operator -=	masstree/json.hh	/^inline Json& Json::operator-=(unsigned x) {$/;"	f	class:lcdf::Json
operator -=	small_vector.h	/^    operator-=(int n)$/;"	f	class:small_vector::iterator_
operator -=	small_vector.h	/^    operator-=(int n)$/;"	f	class:small_vector::small_iterator_
operator -=	static_vector.h	/^    operator-=(int n)$/;"	f	class:static_vector::iterator_
operator ->	dbcore/cslist.h	/^        Node *operator->() { return next(prev); }$/;"	f	struct:cslist::iterator
operator ->	dbcore/rcu-slist.h	/^        Node *operator->() { return get(); }$/;"	f	struct:_rcu_slist::iterator
operator ->	dbcore/rcu-slist.h	/^        node *operator->() { return get(); }$/;"	f	struct:_rcu_slist::next_ptr
operator ->	dbcore/sc-hash.h	/^        value_type* operator->() { return _get(); }$/;"	f	struct:iterator
operator ->	dbcore/sm-log-recover.h	/^        log_block *operator->() { return get(); }$/;"	f	struct:sm_log_recover_mgr::block_scanner
operator ->	dbcore/sm-log-recover.h	/^        log_record *operator->() { return *this; }$/;"	f	struct:sm_log_recover_mgr::log_scanner
operator ->	marked_ptr.h	/^  operator->() const$/;"	f	class:marked_ptr
operator ->	masstree/json.hh	/^    Json* operator->() const {$/;"	f	class:lcdf::Json::array_iterator
operator ->	masstree/json.hh	/^    const Json* operator->() const {$/;"	f	class:lcdf::Json::const_array_iterator
operator ->	masstree/json.hh	/^    const value_type* operator->() const {$/;"	f	class:lcdf::Json::const_iterator
operator ->	masstree/json.hh	/^    const value_type* operator->() const {$/;"	f	class:lcdf::Json::const_object_iterator
operator ->	masstree/json.hh	/^    value_type* operator->() const {$/;"	f	class:lcdf::Json::iterator
operator ->	masstree/json.hh	/^    value_type* operator->() const {$/;"	f	class:lcdf::Json::object_iterator
operator ->	small_unordered_map.h	/^    operator->() const$/;"	f	class:small_unordered_map::iterator_
operator ->	small_vector.h	/^    operator->() const$/;"	f	class:small_vector::iterator_
operator ->	small_vector.h	/^    operator->() const$/;"	f	class:small_vector::small_iterator_
operator ->	static_unordered_map.h	/^    operator->() const$/;"	f	class:static_unordered_map::iterator_
operator ->	static_vector.h	/^    operator->() const$/;"	f	class:static_vector::iterator_
operator ->	util.h	/^  inline T * operator->() { return &elem; }$/;"	f	class:util::aligned_padded_elem
operator ->	util.h	/^  inline T * operator->() { return obj(); }$/;"	f	class:unmanaged
operator ->	util.h	/^  inline const T * operator->() const { return &elem; }$/;"	f	class:util::aligned_padded_elem
operator ->	util.h	/^  inline const T * operator->() const { return obj(); }$/;"	f	class:unmanaged
operator /	benchmarks/egen/Money.cpp	/^double operator \/(double l_f, CMoney r_m)$/;"	f	namespace:TPCE
operator /	benchmarks/egen/Money.h	/^    CMoney operator \/(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator /	benchmarks/egen/Money.h	/^    CMoney operator \/(double f)$/;"	f	class:TPCE::CMoney
operator <	benchmarks/egen/DateTime.cpp	/^bool CDateTime::operator <(const CDateTime& dt)$/;"	f	class:CDateTime
operator <	benchmarks/egen/Money.h	/^    bool operator<(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator <	benchmarks/egen/WheelTime.cpp	/^bool CWheelTime::operator <(const CWheelTime& Time)$/;"	f	class:CWheelTime
operator <	dbcore/sm-common.h	/^    bool operator<(LSN const &other) const { return _val < other._val; }$/;"	f	struct:LSN
operator <	marked_ptr.h	/^  operator<(const marked_ptr<U> &o) const$/;"	f	class:marked_ptr
operator <	masstree/circular_int.hh	/^    bool operator<(circular_int<T> x) const {$/;"	f	class:circular_int
operator <	masstree/json.hh	/^inline bool operator<(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator <	masstree/string_base.hh	/^inline bool operator<(const String_base<T> &a, const String_base<U> &b) {$/;"	f	namespace:lcdf
operator <	small_vector.h	/^    operator<(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator <	small_vector.h	/^    operator<(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator <	static_vector.h	/^    operator<(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator <	varkey.h	/^  operator<(const varkey &that) const$/;"	f	class:varkey
operator <<	counter.h	/^operator<<(std::ostream &o, const counter_data &d)$/;"	f
operator <<	marked_ptr.h	/^operator<<(std::ostream &o, const marked_ptr<T> &p)$/;"	f
operator <<	masstree/json.hh	/^inline StringAccum &operator<<(StringAccum &sa, const Json& json) {$/;"	f	namespace:lcdf
operator <<	masstree/json.hh	/^inline StringAccum &operator<<(StringAccum &sa, const Json_proxy_base<P> &json) {$/;"	f	namespace:lcdf
operator <<	masstree/json.hh	/^inline std::ostream &operator<<(std::ostream& f, const Json& json) {$/;"	f	namespace:lcdf
operator <<	masstree/json.hh	/^inline std::ostream &operator<<(std::ostream& f, const Json_proxy_base<P>& json) {$/;"	f	namespace:lcdf
operator <<	masstree/masstree_key.hh	/^inline std::ostream& operator<<(std::ostream& stream,$/;"	f
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(Str x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(array_t x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(const Json::null_t&) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(const lcdf::String_base<X>& x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(double x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(float x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(int x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(long long x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(long x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(object_t x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(unsigned long long x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(unsigned long x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^    inline unparser<T>& operator<<(unsigned x) {$/;"	f	class:msgpack::unparser
operator <<	masstree/msgpack.hh	/^unparser<T>& unparser<T>::operator<<(const Json& j) {$/;"	f	class:msgpack::unparser
operator <<	masstree/straccum.cc	/^operator<<(StringAccum &sa, double d)$/;"	f	namespace:lcdf
operator <<	masstree/straccum.cc	/^operator<<(StringAccum &sa, long i)$/;"	f	namespace:lcdf
operator <<	masstree/straccum.cc	/^operator<<(StringAccum &sa, long long i)$/;"	f	namespace:lcdf
operator <<	masstree/straccum.cc	/^operator<<(StringAccum &sa, unsigned long long u)$/;"	f	namespace:lcdf
operator <<	masstree/straccum.cc	/^operator<<(StringAccum &sa, unsigned long u)$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, bool x) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, char c) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, const StringAccum &x) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, const String_base<T> &str) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, const char *cstr) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, const std::string &str) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, int x) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, short x) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, unsigned char c) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, unsigned short x) {$/;"	f	namespace:lcdf
operator <<	masstree/straccum.hh	/^inline StringAccum &operator<<(StringAccum &sa, unsigned x) {$/;"	f	namespace:lcdf
operator <<	masstree/string_base.hh	/^inline std::ostream &operator<<(std::ostream &f, const String_base<T> &str) {$/;"	f	namespace:lcdf
operator <<	record/inline_str.h	/^operator<<(std::ostream &o, const inline_str_base<IntSizeType, N> &s)$/;"	f
operator <<	record/inline_str.h	/^operator<<(std::ostream &o, const inline_str_fixed<N, FillChar> &s)$/;"	f
operator <<	util.h	/^operator<<(std::ostream &o, const std::pair<A, B> &p)$/;"	f
operator <<	util.h	/^operator<<(std::ostream &o, const std::tuple<Types...> &t)$/;"	f
operator <<	util.h	/^operator<<(std::ostream &o, const std::vector<T, Alloc> &v)$/;"	f
operator <<	varkey.h	/^operator<<(std::ostream &o, const varkey &k)$/;"	f
operator <=	benchmarks/egen/DateTime.cpp	/^bool CDateTime::operator <=(const CDateTime& dt)$/;"	f	class:CDateTime
operator <=	benchmarks/egen/Money.h	/^    bool operator<=(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator <=	dbcore/sm-common.h	/^    bool operator<=(LSN const &other) const { return not (*this > other); }$/;"	f	struct:LSN
operator <=	marked_ptr.h	/^  operator<=(const marked_ptr<U> &o) const$/;"	f	class:marked_ptr
operator <=	masstree/circular_int.hh	/^    bool operator<=(circular_int<T> x) const {$/;"	f	class:circular_int
operator <=	masstree/json.hh	/^inline bool operator<=(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator <=	masstree/string_base.hh	/^inline bool operator<=(const String_base<T> &a, const String_base<U> &b) {$/;"	f	namespace:lcdf
operator <=	small_vector.h	/^    operator<=(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator <=	small_vector.h	/^    operator<=(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator <=	static_vector.h	/^    operator<=(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator <=	varkey.h	/^  operator<=(const varkey &that) const$/;"	f	class:varkey
operator =	benchmarks/egen/DateTime.cpp	/^CDateTime& CDateTime::operator = (const CDateTime& dt)$/;"	f	class:CDateTime
operator =	benchmarks/egen/Money.h	/^    CMoney& operator=(double f)$/;"	f	class:TPCE::CMoney
operator =	benchmarks/egen/WheelTime.cpp	/^CWheelTime& CWheelTime::operator = (const CWheelTime& Time)$/;"	f	class:CWheelTime
operator =	dbcore/rcu-slist.cpp	/^        cached_next &operator=(cached_next const &other) {$/;"	f	struct:__anon82::cached_next
operator =	dbcore/rcu-slist.h	/^        next_ptr &operator=(next_ptr const &other) {$/;"	f	struct:_rcu_slist::next_ptr
operator =	dbcore/rcu-slist.h	/^        next_ptr operator=(next_ptr const &other) volatile {$/;"	f	struct:_rcu_slist::next_ptr
operator =	marked_ptr.h	/^  operator=(const marked_ptr<U> &o)$/;"	f	class:marked_ptr
operator =	masstree/json.hh	/^    Json& operator=(Json&& x) {$/;"	f	class:lcdf::Json_array_proxy
operator =	masstree/json.hh	/^    Json& operator=(Json&& x) {$/;"	f	class:lcdf::Json_object_proxy
operator =	masstree/json.hh	/^    Json& operator=(Json&& x) {$/;"	f	class:lcdf::Json_object_str_proxy
operator =	masstree/json.hh	/^    Json& operator=(const Json& x) {$/;"	f	class:lcdf::Json_array_proxy
operator =	masstree/json.hh	/^    Json& operator=(const Json& x) {$/;"	f	class:lcdf::Json_object_proxy
operator =	masstree/json.hh	/^    Json& operator=(const Json& x) {$/;"	f	class:lcdf::Json_object_str_proxy
operator =	masstree/json.hh	/^    Json& operator=(const Json_array_proxy<T>& x) {$/;"	f	class:lcdf::Json_array_proxy
operator =	masstree/json.hh	/^    Json& operator=(const Json_object_proxy<T>& x) {$/;"	f	class:lcdf::Json_object_proxy
operator =	masstree/json.hh	/^    Json& operator=(const Json_object_str_proxy<T>& x) {$/;"	f	class:lcdf::Json_object_str_proxy
operator =	masstree/json.hh	/^    template <typename P> Json& operator=(const Json_proxy_base<P>& x) {$/;"	f	class:lcdf::Json_array_proxy
operator =	masstree/json.hh	/^    template <typename P> Json& operator=(const Json_proxy_base<P>& x) {$/;"	f	class:lcdf::Json_object_proxy
operator =	masstree/json.hh	/^    template <typename P> Json& operator=(const Json_proxy_base<P>& x) {$/;"	f	class:lcdf::Json_object_str_proxy
operator =	masstree/json.hh	/^inline Json& Json::operator=(Json&& x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(bool x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(const Json& x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(const Json_proxy_base<U> &x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(const String& x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(double x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(int x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(long long x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(long x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(unsigned long long x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(unsigned long x) {$/;"	f	class:lcdf::Json
operator =	masstree/json.hh	/^inline Json& Json::operator=(unsigned x) {$/;"	f	class:lcdf::Json
operator =	masstree/local_vector.hh	/^local_vector<T, N, A>::operator=(const local_vector<T, N, A>& x) {$/;"	f	class:local_vector
operator =	masstree/local_vector.hh	/^local_vector<T, N, A>::operator=(const local_vector<T, NN, AA>& x) {$/;"	f	class:local_vector
operator =	masstree/straccum.hh	/^inline StringAccum &StringAccum::operator=(StringAccum &&x) {$/;"	f	class:lcdf::StringAccum
operator =	masstree/straccum.hh	/^inline StringAccum &StringAccum::operator=(const StringAccum &x) {$/;"	f	class:lcdf::StringAccum
operator =	masstree/string.hh	/^inline String& String::operator=(String&& x) {$/;"	f	class:lcdf::String
operator =	masstree/string.hh	/^inline String& String::operator=(const String& x) {$/;"	f	class:lcdf::String
operator =	masstree/string.hh	/^inline String& String::operator=(const String_base<T>& str) {$/;"	f	class:lcdf::String
operator =	masstree/string.hh	/^inline String& String::operator=(const char* cstr) {$/;"	f	class:lcdf::String
operator =	masstree/string.hh	/^inline String& String::operator=(const std::string& str) {$/;"	f	class:lcdf::String
operator =	record/inline_str.h	/^  operator=(const inline_str_base &that)$/;"	f	class:inline_str_base
operator =	record/inline_str.h	/^  operator=(const inline_str_fixed &that)$/;"	f	class:inline_str_fixed
operator =	small_unordered_map.h	/^  operator=(const small_unordered_map &other)$/;"	f	class:small_unordered_map
operator =	small_vector.h	/^  operator=(const small_vector &that)$/;"	f	class:small_vector
operator =	static_unordered_map.h	/^  operator=(const static_unordered_map &other)$/;"	f	class:static_unordered_map
operator =	static_vector.h	/^  operator=(const static_vector &that)$/;"	f	class:static_vector
operator ==	benchmarks/egen/DateTime.cpp	/^bool CDateTime::operator ==(const CDateTime& dt)$/;"	f	class:CDateTime
operator ==	benchmarks/egen/Money.h	/^    bool operator==(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator ==	dbcore/cslist.h	/^        bool operator==(iterator const &other) const {$/;"	f	struct:cslist::iterator
operator ==	dbcore/rcu-slist.h	/^        bool operator==(iterator const &other) const {$/;"	f	struct:_rcu_slist::iterator
operator ==	dbcore/rcu-slist.h	/^        bool operator==(next_ptr const &other) {$/;"	f	struct:_rcu_slist::next_ptr
operator ==	dbcore/sc-hash.h	/^        bool operator==(iterator const &other) const {$/;"	f	struct:iterator
operator ==	dbcore/sm-common.h	/^    bool operator==(LSN const &other) const { return _val == other._val; }$/;"	f	struct:LSN
operator ==	dbcore/sm-common.h	/^    bool operator==(XID const &other) const { return _val == other._val; }$/;"	f	struct:XID
operator ==	dbcore/sm-common.h	/^    bool operator==(fat_ptr const &other) const {$/;"	f	struct:fat_ptr
operator ==	dbcore/test-sc-hash.cpp	/^    bool operator==(int ox) const { eqcnt++; return x == ox; }$/;"	f	struct:obj
operator ==	dbcore/test-sc-hash.cpp	/^    bool operator==(obj const &other) const { eqcnt++; return x == other.x; }$/;"	f	struct:obj
operator ==	marked_ptr.h	/^  operator==(const marked_ptr<U> &o) const$/;"	f	class:marked_ptr
operator ==	masstree/circular_int.hh	/^    bool operator==(circular_int<T> x) const {$/;"	f	class:circular_int
operator ==	masstree/json.cc	/^bool operator==(const Json& a, const Json& b) {$/;"	f	namespace:lcdf
operator ==	masstree/json.hh	/^inline bool operator==(const Json& a, const Json_proxy_base<T>& b) {$/;"	f	namespace:lcdf
operator ==	masstree/json.hh	/^inline bool operator==(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator ==	masstree/json.hh	/^inline bool operator==(const Json::const_iterator& a, const Json::const_iterator& b) {$/;"	f	namespace:lcdf
operator ==	masstree/json.hh	/^inline bool operator==(const Json::const_object_iterator& a, const Json::const_object_iterator& b) {$/;"	f	namespace:lcdf
operator ==	masstree/json.hh	/^inline bool operator==(const Json_proxy_base<T>& a, const Json& b) {$/;"	f	namespace:lcdf
operator ==	masstree/json.hh	/^inline bool operator==(const Json_proxy_base<T>& a,$/;"	f	namespace:lcdf
operator ==	masstree/misc.hh	/^    bool operator==(lcdf::Str s) const {$/;"	f	struct:quick_istr
operator ==	masstree/straccum.hh	/^inline bool operator==(StringAccum &sa, const char *cstr) {$/;"	f	namespace:lcdf
operator ==	masstree/string_base.hh	/^inline bool operator==(const String_base<T> &a, const String_base<U> &b) {$/;"	f	namespace:lcdf
operator ==	masstree/string_base.hh	/^inline bool operator==(const String_base<T> &a, const char *b) {$/;"	f	namespace:lcdf
operator ==	masstree/string_base.hh	/^inline bool operator==(const String_base<T> &a, const std::string &b) {$/;"	f	namespace:lcdf
operator ==	masstree/string_base.hh	/^inline bool operator==(const char *a, const String_base<T> &b) {$/;"	f	namespace:lcdf
operator ==	masstree/string_base.hh	/^inline bool operator==(const std::string &a, const String_base<T> &b) {$/;"	f	namespace:lcdf
operator ==	record/inline_str.h	/^  operator==(const inline_str_base &other) const$/;"	f	class:inline_str_base
operator ==	record/inline_str.h	/^  operator==(const inline_str_fixed &other) const$/;"	f	class:inline_str_fixed
operator ==	small_unordered_map.h	/^    operator==(const iterator_ &o) const$/;"	f	class:small_unordered_map::iterator_
operator ==	small_vector.h	/^    operator==(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator ==	small_vector.h	/^    operator==(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator ==	static_unordered_map.h	/^    operator==(const iterator_ &o) const$/;"	f	class:static_unordered_map::iterator_
operator ==	static_vector.h	/^    operator==(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator ==	varkey.h	/^  operator==(const varkey &that) const$/;"	f	class:varkey
operator >	benchmarks/egen/DateTime.cpp	/^bool operator >(const CDateTime& l_dt, const CDateTime& r_dt)$/;"	f	namespace:TPCE
operator >	benchmarks/egen/Money.h	/^    bool operator>(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator >	benchmarks/egen/TradeGen.cpp	/^bool operator >(const TTradeInfo& l, const TTradeInfo& r)$/;"	f	namespace:TPCE
operator >	dbcore/sm-common.h	/^    bool operator>(LSN const &other) const { return other < *this; }$/;"	f	struct:LSN
operator >	marked_ptr.h	/^  operator>(const marked_ptr<U> &o) const$/;"	f	class:marked_ptr
operator >	masstree/circular_int.hh	/^    bool operator>(circular_int<T> x) const {$/;"	f	class:circular_int
operator >	masstree/json.hh	/^inline bool operator>(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator >	masstree/string_base.hh	/^inline bool operator>(const String_base<T> &a, const String_base<U> &b) {$/;"	f	namespace:lcdf
operator >	small_vector.h	/^    operator>(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator >	small_vector.h	/^    operator>(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator >	static_vector.h	/^    operator>(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator >	varkey.h	/^  operator>(const varkey &that) const$/;"	f	class:varkey
operator >=	benchmarks/egen/DateTime.cpp	/^bool CDateTime::operator >=(const CDateTime& dt)$/;"	f	class:CDateTime
operator >=	benchmarks/egen/Money.h	/^    bool operator>=(const CMoney& m)$/;"	f	class:TPCE::CMoney
operator >=	dbcore/sm-common.h	/^    bool operator>=(LSN const &other) const { return other <= *this; }$/;"	f	struct:LSN
operator >=	marked_ptr.h	/^  operator>=(const marked_ptr<U> &o) const$/;"	f	class:marked_ptr
operator >=	masstree/circular_int.hh	/^    bool operator>=(circular_int<T> x) const {$/;"	f	class:circular_int
operator >=	masstree/json.hh	/^inline bool operator>=(const Json::const_array_iterator& a, const Json::const_array_iterator& b) {$/;"	f	namespace:lcdf
operator >=	masstree/string_base.hh	/^inline bool operator>=(const String_base<T> &a, const String_base<U> &b) {$/;"	f	namespace:lcdf
operator >=	small_vector.h	/^    operator>=(const iterator_ &o) const$/;"	f	class:small_vector::iterator_
operator >=	small_vector.h	/^    operator>=(const small_iterator_ &o) const$/;"	f	class:small_vector::small_iterator_
operator >=	static_vector.h	/^    operator>=(const iterator_ &o) const$/;"	f	class:static_vector::iterator_
operator >=	varkey.h	/^  operator>=(const varkey &that) const$/;"	f	class:varkey
operator >>	masstree/msgpack.cc	/^parser& parser::operator>>(Str& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.cc	/^parser& parser::operator>>(String& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(bool& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(double& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(int& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(long long& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(long& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(unsigned long long& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(unsigned long& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^    inline parser& operator>>(unsigned& x) {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^inline parser& parser::operator>>(Json& j)  {$/;"	f	class:msgpack::parser
operator >>	masstree/msgpack.hh	/^parser& parser::operator>>(::std::vector<T>& x) {$/;"	f	class:msgpack::parser
operator Json&	masstree/json.hh	/^    operator Json&() {$/;"	f	class:lcdf::Json_proxy_base
operator Json::unspecified_bool_type	masstree/json.hh	/^    operator Json::unspecified_bool_type() const {$/;"	f	class:lcdf::Json_get_proxy
operator Json::unspecified_bool_type	masstree/json.hh	/^    operator Json::unspecified_bool_type() const {$/;"	f	class:lcdf::Json_proxy_base
operator Str	masstree/masstree_key.hh	/^    operator Str() const {$/;"	f	class:Masstree::key
operator T*	dbcore/rcu.h	/^    operator T*() {$/;"	f	struct:RCU::rcu_alloc_on_decay
operator T*	dbcore/rcu.h	/^    operator T*() {$/;"	f	struct:RCU::rcu_new_decay
operator T*	dbcore/sm-common.h	/^    operator T*() const {$/;"	f	struct:fat_ptr
operator T*	dbcore/sm-defs.h	/^    operator T*() { return new T{std::get<i>(tup)...}; }$/;"	f	struct:make_new_decay
operator T*	dbcore/sm-log-recover.h	/^            operator T*() {$/;"	f	struct:sm_log_recover_mgr::log_scanner::decay
operator []	benchmarks/egen/FixedArray.h	/^    TData& operator[](int iIndex)$/;"	f	class:TPCE::CFixedArray
operator []	benchmarks/masstree/kvrandom.hh	/^    value_type operator[](uint32_t index) const {$/;"	f	class:kvrandom_psdes_nr
operator []	core.h	/^  operator[](unsigned i) const$/;"	f	class:percore
operator []	core.h	/^  operator[](unsigned i)$/;"	f	class:percore
operator []	dbcore/dynarray.h	/^    char &operator[](size_t i) { return _data[i]; }$/;"	f	struct:dynarray
operator []	dbcore/dynarray.h	/^    char const &operator[](size_t i) const { return _data[i]; }$/;"	f	struct:dynarray
operator []	dbcore/sm-log-file.h	/^        segment_id * volatile &operator[](size_t i) {$/;"	f	struct:sm_log_file_mgr::segment_array
operator []	dbcore/sm-log-segments.h	/^        log_segment_desc * volatile &operator[](size_t i) {$/;"	f	struct:log_segment_mgr::log_segment_array
operator []	masstree/json.hh	/^    Json& operator[](difference_type i) const {$/;"	f	class:lcdf::Json::array_iterator
operator []	masstree/json.hh	/^    Json_array_proxy<P> operator[](int key) {$/;"	f	class:lcdf::Json_proxy_base
operator []	masstree/json.hh	/^    Json_object_proxy<P> operator[](const String& key) {$/;"	f	class:lcdf::Json_proxy_base
operator []	masstree/json.hh	/^    Json_object_str_proxy<P> operator[](Str key) {$/;"	f	class:lcdf::Json_proxy_base
operator []	masstree/json.hh	/^    Json_object_str_proxy<P> operator[](const char* key) {$/;"	f	class:lcdf::Json_proxy_base
operator []	masstree/json.hh	/^    const Json& operator[](Str key) const {$/;"	f	class:lcdf::Json_proxy_base
operator []	masstree/json.hh	/^    const Json& operator[](difference_type i) const {$/;"	f	class:lcdf::Json::const_array_iterator
operator []	masstree/json.hh	/^    const Json& operator[](int key) const {$/;"	f	class:lcdf::Json_proxy_base
operator []	masstree/json.hh	/^inline Json_array_proxy<Json> Json::operator[](size_type x) {$/;"	f	class:lcdf::Json
operator []	masstree/json.hh	/^inline Json_object_proxy<Json> Json::operator[](const String& key) {$/;"	f	class:lcdf::Json
operator []	masstree/json.hh	/^inline Json_object_str_proxy<Json> Json::operator[](Str key) {$/;"	f	class:lcdf::Json
operator []	masstree/json.hh	/^inline Json_object_str_proxy<Json> Json::operator[](const char* key) {$/;"	f	class:lcdf::Json
operator []	masstree/json.hh	/^inline const Json& Json::operator[](Str key) const {$/;"	f	class:lcdf::Json
operator []	masstree/json.hh	/^inline const Json& Json::operator[](size_type x) const {$/;"	f	class:lcdf::Json
operator []	masstree/kpermuter.hh	/^    int operator[](int i) const {$/;"	f	class:identity_kpermuter
operator []	masstree/kpermuter.hh	/^    int operator[](int i) const {$/;"	f	class:kpermuter
operator []	masstree/kvrandom.hh	/^    value_type operator[](uint32_t index) const {$/;"	f	class:kvrandom_psdes_nr
operator []	masstree/local_vector.hh	/^inline T& local_vector<T, N, A>::operator[](size_type i) {$/;"	f	class:local_vector
operator []	masstree/local_vector.hh	/^inline const T& local_vector<T, N, A>::operator[](size_type i) const {$/;"	f	class:local_vector
operator []	masstree/straccum.hh	/^inline char &StringAccum::operator[](int i) {$/;"	f	class:lcdf::StringAccum
operator []	masstree/straccum.hh	/^inline char StringAccum::operator[](int i) const {$/;"	f	class:lcdf::StringAccum
operator []	masstree/string_base.hh	/^    const char& operator[](int i) const {$/;"	f	class:lcdf::String_base
operator []	small_unordered_map.h	/^  operator[](const key_type &k)$/;"	f	class:small_unordered_map
operator []	small_unordered_map.h	/^  operator[](key_type &&k)$/;"	f	class:small_unordered_map
operator []	small_vector.h	/^  operator[](int i) const$/;"	f	class:small_vector
operator []	small_vector.h	/^  operator[](int i)$/;"	f	class:small_vector
operator []	static_unordered_map.h	/^  operator[](const key_type &k)$/;"	f	class:static_unordered_map
operator []	static_unordered_map.h	/^  operator[](key_type &&k)$/;"	f	class:static_unordered_map
operator []	static_vector.h	/^  operator[](int i) const$/;"	f	class:static_vector
operator []	static_vector.h	/^  operator[](int i)$/;"	f	class:static_vector
operator bool	marked_ptr.h	/^  operator bool() const$/;"	f	class:marked_ptr
operator char *	dbcore/sm-log-recover.h	/^            operator char *() { return ptr; }$/;"	f	struct:sm_log_recover_mgr::log_scanner::decay
operator char const *	dbcore/sm-common.h	/^    operator char const *() { return dname; }$/;"	f	struct:tmp_dir
operator char const *	dbcore/sm-log-file.cpp	/^    operator char const *() { return buf; }$/;"	f	struct:cmark_file_name
operator char const *	dbcore/sm-log-file.cpp	/^    operator char const *() { return buf; }$/;"	f	struct:dmark_file_name
operator char const *	dbcore/sm-log-file.cpp	/^    operator char const *() { return buf; }$/;"	f	struct:nxt_seg_file_name
operator char const *	dbcore/sm-log-file.cpp	/^    operator char const *() { return buf; }$/;"	f	struct:segment_file_name
operator char const*	dbcore/dynarray.h	/^    operator char const*() const { return _data; }$/;"	f	struct:dynarray
operator char*	dbcore/dynarray.h	/^    operator char*() { return _data; }$/;"	f	struct:dynarray
operator char*	dbcore/sc-hash.h	/^        operator char*() { return data; }$/;"	f	struct:value_space
operator const Json&	masstree/json.hh	/^    operator const Json&() const {$/;"	f	class:lcdf::Json_proxy_base
operator delete	dbcore/epoch.cpp	/^    void operator delete(void* ptr) {$/;"	f	struct:epoch_mgr::private_state
operator delete	dbcore/rcu.h	/^operator delete(void *ptr, RCU::rcu_new_sentinel const &) {$/;"	f
operator delete	memory.cc	/^operator delete(void *p) throw ()$/;"	f
operator delete	memory.cc	/^operator delete(void *p, const std::nothrow_t &) throw ()$/;"	f
operator delete[]	memory.cc	/^operator delete[](void *p) throw ()$/;"	f
operator delete[]	memory.cc	/^operator delete[](void *p, const std::nothrow_t &) throw ()$/;"	f
operator lcdf::Str	varkey.h	/^  inline operator lcdf::Str() const {$/;"	f	class:varkey
operator log_block*	dbcore/sm-log-recover.h	/^        operator log_block*() { return get(); }$/;"	f	struct:sm_log_recover_mgr::block_scanner
operator log_record*	dbcore/sm-log-recover.h	/^        operator log_record*() { return get(); }$/;"	f	struct:sm_log_recover_mgr::log_scanner
operator new	dbcore/epoch.cpp	/^    void *operator new(size_t sz) {$/;"	f	struct:epoch_mgr::private_state
operator new	dbcore/rcu.h	/^operator new(size_t nbytes, RCU::rcu_new_sentinel const &) {$/;"	f
operator new	memory.cc	/^operator new(size_t sz) throw (std::bad_alloc)$/;"	f
operator new	memory.cc	/^operator new(size_t sz, const std::nothrow_t&) throw ()$/;"	f
operator new[]	memory.cc	/^operator new[](size_t sz) throw (std::bad_alloc)$/;"	f
operator new[]	memory.cc	/^operator new[](size_t sz, std::nothrow_t &) throw ()$/;"	f
operator std::string	masstree/str.hh	/^    operator std::string() const {$/;"	f	struct:lcdf::Str
operator std::string	masstree/string_base.hh	/^    inline operator std::string() const {$/;"	f	class:lcdf::String_base
operator uint64_t	dbcore/stopwatch.h	/^    operator uint64_t() const { return mark(); }$/;"	f	class:stopwatch_t
operator unspecified_bool_type	masstree/circular_int.hh	/^    operator unspecified_bool_type() const {$/;"	f	class:circular_int
operator unspecified_bool_type	masstree/json.hh	/^    operator unspecified_bool_type() const {$/;"	f	class:lcdf::Json::const_array_iterator
operator unspecified_bool_type	masstree/json.hh	/^    operator unspecified_bool_type() const {$/;"	f	class:lcdf::Json::const_iterator
operator unspecified_bool_type	masstree/json.hh	/^    operator unspecified_bool_type() const {$/;"	f	class:lcdf::Json::const_object_iterator
operator unspecified_bool_type	masstree/json.hh	/^inline Json::operator unspecified_bool_type() const {$/;"	f	class:lcdf::Json
operator unspecified_bool_type	masstree/kvstats.hh	/^  operator unspecified_bool_type() const {$/;"	f	struct:kvstats
operator unspecified_bool_type	masstree/local_vector.hh	/^inline local_vector<T, N, A>::operator unspecified_bool_type() const {$/;"	f	class:local_vector
operator unspecified_bool_type	masstree/masstree_struct.hh	/^    operator unspecified_bool_type() const {$/;"	f	class:Masstree::leafvalue
operator unspecified_bool_type	masstree/straccum.hh	/^inline StringAccum::operator unspecified_bool_type() const {$/;"	f	class:lcdf::StringAccum
operator unspecified_bool_type	masstree/string_base.hh	/^    operator unspecified_bool_type() const {$/;"	f	class:lcdf::String_base
operator void *	dbcore/sm-log-recover.h	/^            operator void *() { return ptr; }$/;"	f	struct:sm_log_recover_mgr::log_scanner::decay
ops_per_worker	benchmarks/bench.cc	/^uint64_t ops_per_worker = 0;$/;"	v
opt	masstree/clp.c	/^    const Clp_Option *opt;$/;"	m	struct:Clp_Internal	file:
opt_checkpoint	masstree/mtd.cc	/^       opt_print, opt_norun, opt_checkpoint, opt_limit };$/;"	e	enum:__anon58	file:
opt_ckpdir	masstree/mtd.cc	/^enum { opt_nolog = 1, opt_pin, opt_logdir, opt_port, opt_ckpdir, opt_duration,$/;"	e	enum:__anon58	file:
opt_compare	masstree/mttest.cc	/^       opt_normalize, opt_limit, opt_notebook, opt_compare, opt_no_run,$/;"	e	enum:__anon65	file:
opt_cores	masstree/mtd.cc	/^       opt_test, opt_test_name, opt_threads, opt_cores,$/;"	e	enum:__anon58	file:
opt_cores	masstree/mttest.cc	/^       opt_lazy_timer, opt_gid, opt_tree_stats, opt_rscale_ncores, opt_cores,$/;"	e	enum:__anon65	file:
opt_duration	masstree/mtclient.cc	/^enum { opt_threads = 1, opt_threads_deprecated, opt_duration, opt_duration2,$/;"	e	enum:__anon20	file:
opt_duration	masstree/mtd.cc	/^enum { opt_nolog = 1, opt_pin, opt_logdir, opt_port, opt_ckpdir, opt_duration,$/;"	e	enum:__anon58	file:
opt_duration	masstree/mttest.cc	/^enum { opt_pin = 1, opt_port, opt_duration,$/;"	e	enum:__anon65	file:
opt_duration2	masstree/mtclient.cc	/^enum { opt_threads = 1, opt_threads_deprecated, opt_duration, opt_duration2,$/;"	e	enum:__anon20	file:
opt_first_local_port	masstree/mtclient.cc	/^       opt_first_local_port, opt_share_server_port, opt_input,$/;"	e	enum:__anon20	file:
opt_first_seed	masstree/mtclient.cc	/^       opt_rsinit_part, opt_first_seed, opt_rscale_partsz, opt_keylen,$/;"	e	enum:__anon20	file:
opt_first_server_port	masstree/mtclient.cc	/^       opt_window, opt_server, opt_first_server_port, opt_quiet, opt_udp,$/;"	e	enum:__anon20	file:
opt_generation	masstree/clp.c	/^    unsigned opt_generation;$/;"	m	struct:Clp_Internal	file:
opt_generation	masstree/clp.c	/^    unsigned opt_generation;$/;"	m	struct:Clp_ParserState	file:
opt_get_ratio	masstree/mtclient.cc	/^       opt_limit, opt_prefix_len, opt_nkeys, opt_get_ratio, opt_minkeyletter,$/;"	e	enum:__anon20	file:
opt_gid	masstree/mttest.cc	/^       opt_lazy_timer, opt_gid, opt_tree_stats, opt_rscale_ncores, opt_cores,$/;"	e	enum:__anon65	file:
opt_help	masstree/mttest.cc	/^       opt_stats, opt_help };$/;"	e	enum:__anon65	file:
opt_input	masstree/mtclient.cc	/^       opt_first_local_port, opt_share_server_port, opt_input,$/;"	e	enum:__anon20	file:
opt_keylen	masstree/mtclient.cc	/^       opt_rsinit_part, opt_first_seed, opt_rscale_partsz, opt_keylen,$/;"	e	enum:__anon20	file:
opt_lazy_timer	masstree/mttest.cc	/^       opt_lazy_timer, opt_gid, opt_tree_stats, opt_rscale_ncores, opt_cores,$/;"	e	enum:__anon65	file:
opt_limit	masstree/mtclient.cc	/^       opt_limit, opt_prefix_len, opt_nkeys, opt_get_ratio, opt_minkeyletter,$/;"	e	enum:__anon20	file:
opt_limit	masstree/mtd.cc	/^       opt_print, opt_norun, opt_checkpoint, opt_limit };$/;"	e	enum:__anon58	file:
opt_limit	masstree/mttest.cc	/^       opt_normalize, opt_limit, opt_notebook, opt_compare, opt_no_run,$/;"	e	enum:__anon65	file:
opt_logdir	masstree/mtd.cc	/^enum { opt_nolog = 1, opt_pin, opt_logdir, opt_port, opt_ckpdir, opt_duration,$/;"	e	enum:__anon58	file:
opt_maxkeyletter	masstree/mtclient.cc	/^       opt_maxkeyletter, opt_nofork };$/;"	e	enum:__anon20	file:
opt_minkeyletter	masstree/mtclient.cc	/^       opt_limit, opt_prefix_len, opt_nkeys, opt_get_ratio, opt_minkeyletter,$/;"	e	enum:__anon20	file:
opt_nkeys	masstree/mtclient.cc	/^       opt_limit, opt_prefix_len, opt_nkeys, opt_get_ratio, opt_minkeyletter,$/;"	e	enum:__anon20	file:
opt_no_run	masstree/mttest.cc	/^       opt_normalize, opt_limit, opt_notebook, opt_compare, opt_no_run,$/;"	e	enum:__anon65	file:
opt_nofork	masstree/mtclient.cc	/^       opt_maxkeyletter, opt_nofork };$/;"	e	enum:__anon20	file:
opt_nolog	masstree/mtd.cc	/^enum { opt_nolog = 1, opt_pin, opt_logdir, opt_port, opt_ckpdir, opt_duration,$/;"	e	enum:__anon58	file:
opt_normalize	masstree/mttest.cc	/^       opt_normalize, opt_limit, opt_notebook, opt_compare, opt_no_run,$/;"	e	enum:__anon65	file:
opt_norun	masstree/mtd.cc	/^       opt_print, opt_norun, opt_checkpoint, opt_limit };$/;"	e	enum:__anon58	file:
opt_notebook	masstree/mttest.cc	/^       opt_normalize, opt_limit, opt_notebook, opt_compare, opt_no_run,$/;"	e	enum:__anon65	file:
opt_pin	masstree/mtd.cc	/^enum { opt_nolog = 1, opt_pin, opt_logdir, opt_port, opt_ckpdir, opt_duration,$/;"	e	enum:__anon58	file:
opt_pin	masstree/mttest.cc	/^enum { opt_pin = 1, opt_port, opt_duration,$/;"	e	enum:__anon65	file:
opt_port	masstree/mtd.cc	/^enum { opt_nolog = 1, opt_pin, opt_logdir, opt_port, opt_ckpdir, opt_duration,$/;"	e	enum:__anon58	file:
opt_port	masstree/mttest.cc	/^enum { opt_pin = 1, opt_port, opt_duration,$/;"	e	enum:__anon65	file:
opt_prefix_len	masstree/mtclient.cc	/^       opt_limit, opt_prefix_len, opt_nkeys, opt_get_ratio, opt_minkeyletter,$/;"	e	enum:__anon20	file:
opt_print	masstree/mtd.cc	/^       opt_print, opt_norun, opt_checkpoint, opt_limit };$/;"	e	enum:__anon58	file:
opt_print	masstree/mttest.cc	/^       opt_test, opt_test_name, opt_threads, opt_trials, opt_quiet, opt_print,$/;"	e	enum:__anon65	file:
opt_quiet	masstree/mtclient.cc	/^       opt_window, opt_server, opt_first_server_port, opt_quiet, opt_udp,$/;"	e	enum:__anon20	file:
opt_quiet	masstree/mttest.cc	/^       opt_test, opt_test_name, opt_threads, opt_trials, opt_quiet, opt_print,$/;"	e	enum:__anon65	file:
opt_rscale_ncores	masstree/mttest.cc	/^       opt_lazy_timer, opt_gid, opt_tree_stats, opt_rscale_ncores, opt_cores,$/;"	e	enum:__anon65	file:
opt_rscale_partsz	masstree/mtclient.cc	/^       opt_rsinit_part, opt_first_seed, opt_rscale_partsz, opt_keylen,$/;"	e	enum:__anon20	file:
opt_rsinit_part	masstree/mtclient.cc	/^       opt_rsinit_part, opt_first_seed, opt_rscale_partsz, opt_keylen,$/;"	e	enum:__anon20	file:
opt_server	masstree/mtclient.cc	/^       opt_window, opt_server, opt_first_server_port, opt_quiet, opt_udp,$/;"	e	enum:__anon20	file:
opt_share_server_port	masstree/mtclient.cc	/^       opt_first_local_port, opt_share_server_port, opt_input,$/;"	e	enum:__anon20	file:
opt_stats	masstree/mttest.cc	/^       opt_stats, opt_help };$/;"	e	enum:__anon65	file:
opt_test	masstree/mtd.cc	/^       opt_test, opt_test_name, opt_threads, opt_cores,$/;"	e	enum:__anon58	file:
opt_test	masstree/mttest.cc	/^       opt_test, opt_test_name, opt_threads, opt_trials, opt_quiet, opt_print,$/;"	e	enum:__anon65	file:
opt_test_name	masstree/mtd.cc	/^       opt_test, opt_test_name, opt_threads, opt_cores,$/;"	e	enum:__anon58	file:
opt_test_name	masstree/mttest.cc	/^       opt_test, opt_test_name, opt_threads, opt_trials, opt_quiet, opt_print,$/;"	e	enum:__anon65	file:
opt_threads	masstree/mtclient.cc	/^enum { opt_threads = 1, opt_threads_deprecated, opt_duration, opt_duration2,$/;"	e	enum:__anon20	file:
opt_threads	masstree/mtd.cc	/^       opt_test, opt_test_name, opt_threads, opt_cores,$/;"	e	enum:__anon58	file:
opt_threads	masstree/mttest.cc	/^       opt_test, opt_test_name, opt_threads, opt_trials, opt_quiet, opt_print,$/;"	e	enum:__anon65	file:
opt_threads_deprecated	masstree/mtclient.cc	/^enum { opt_threads = 1, opt_threads_deprecated, opt_duration, opt_duration2,$/;"	e	enum:__anon20	file:
opt_tree_stats	masstree/mttest.cc	/^       opt_lazy_timer, opt_gid, opt_tree_stats, opt_rscale_ncores, opt_cores,$/;"	e	enum:__anon65	file:
opt_trials	masstree/mttest.cc	/^       opt_test, opt_test_name, opt_threads, opt_trials, opt_quiet, opt_print,$/;"	e	enum:__anon65	file:
opt_udp	masstree/mtclient.cc	/^       opt_window, opt_server, opt_first_server_port, opt_quiet, opt_udp,$/;"	e	enum:__anon20	file:
opt_window	masstree/mtclient.cc	/^       opt_window, opt_server, opt_first_server_port, opt_quiet, opt_udp,$/;"	e	enum:__anon20	file:
option	masstree/clp.h	/^    const Clp_Option *option;	\/**< The last option. *\/$/;"	m	struct:Clp_Parser
option_chars	masstree/clp.c	/^    char option_chars[Clp_OptionCharsSize];$/;"	m	struct:Clp_Internal	file:
option_chars	masstree/clp.c	/^    char option_chars[Clp_OptionCharsSize];$/;"	m	struct:Clp_ParserState	file:
option_id	masstree/clp.h	/^    int option_id;		\/**< User-specified ID defining option,$/;"	m	struct:Clp_Option
option_processing	masstree/clp.c	/^    int option_processing;$/;"	m	struct:Clp_Internal	file:
option_processing	masstree/clp.c	/^    int option_processing;$/;"	m	struct:Clp_ParserState	file:
options	masstree/mtclient.cc	/^static const Clp_Option options[] = {$/;"	v	file:
options	masstree/mtd.cc	/^static const Clp_Option options[] = {$/;"	v	file:
options	masstree/mttest.cc	/^static const Clp_Option options[] = {$/;"	v	file:
or_flags	marked_ptr.h	/^  or_flags(uint8_t flags)$/;"	f	class:marked_ptr
order_line_nop_callback	benchmarks/tpcc.cc	/^  order_line_nop_callback() : n(0) {}$/;"	f	class:order_line_nop_callback
order_line_nop_callback	benchmarks/tpcc.cc	/^class order_line_nop_callback : public abstract_ordered_index::scan_callback {$/;"	c	file:
order_line_scan_callback	benchmarks/tpcc.cc	/^  order_line_scan_callback() : n(0) {}$/;"	f	class:order_line_scan_callback
order_line_scan_callback	benchmarks/tpcc.cc	/^class order_line_scan_callback : public abstract_ordered_index::scan_callback {$/;"	c	file:
order_results_by_threads	benchmarks/results/make_graphs-4.py	/^def order_results_by_threads(results):$/;"	f
order_results_by_threads	benchmarks/results/make_graphs-5.py	/^    def order_results_by_threads(results):$/;"	f	function:datafromfile
origBuffer	third-party/lz4/bench.c	/^    char* origBuffer;$/;"	m	struct:chunkParameters	file:
origBuffer	third-party/lz4/fullbench.c	/^    char* origBuffer;$/;"	m	struct:chunkParameters	file:
origSize	third-party/lz4/bench.c	/^    int   origSize;$/;"	m	struct:chunkParameters	file:
origSize	third-party/lz4/fullbench.c	/^    int   origSize;$/;"	m	struct:chunkParameters	file:
os_	masstree/json.hh	/^    ObjectItem *os_;$/;"	m	struct:lcdf::Json::ObjectJson
os_asprintf	dbcore/sm-common.cpp	/^os_asprintf(char const *fmt, ...)$/;"	f
os_close	dbcore/sm-common.cpp	/^os_close(int fd)$/;"	f
os_condvar	dbcore/sm-common.h	/^    os_condvar() : os_condvar_pod(static_init()) { }$/;"	f	struct:os_condvar
os_condvar	dbcore/sm-common.h	/^struct os_condvar : os_condvar_pod {$/;"	s
os_condvar_pod	dbcore/sm-common.h	/^struct os_condvar_pod {$/;"	s
os_dup	dbcore/sm-common.cpp	/^os_dup(int fd)$/;"	f
os_error	dbcore/sm-exceptions.cpp	/^os_error::os_error(int e, char const volatile *m, ...)$/;"	f	class:os_error
os_error	dbcore/sm-exceptions.h	/^    os_error(int e, char const *m) : msg(m), free_msg(0), err(e) { }$/;"	f	struct:os_error
os_error	dbcore/sm-exceptions.h	/^struct os_error {$/;"	s
os_fsync	dbcore/sm-common.cpp	/^os_fsync(int fd)$/;"	f
os_mutex	dbcore/sm-common.h	/^    os_mutex() : os_mutex_pod(static_init()) { }$/;"	f	struct:os_mutex
os_mutex	dbcore/sm-common.h	/^struct os_mutex : os_mutex_pod {$/;"	s
os_mutex_pod	dbcore/sm-common.h	/^struct os_mutex_pod {$/;"	s
os_open	dbcore/sm-common.cpp	/^os_open(char const *path, int flags)$/;"	f
os_openat	dbcore/sm-common.cpp	/^os_openat(int dfd, char const *fname, int flags)$/;"	f
os_pread	dbcore/sm-common.cpp	/^os_pread(int fd, char *buf, size_t bufsz, off_t offset) {$/;"	f
os_pwrite	dbcore/sm-common.cpp	/^os_pwrite(int fd, char const *buf, size_t bufsz, off_t offset) {$/;"	f
os_renameat	dbcore/sm-common.cpp	/^os_renameat(int fromfd, char const *from, int tofd, char const *to)$/;"	f
os_snprintf	dbcore/sm-common.cpp	/^os_snprintf(char *dest, size_t size, char const *fmt, ...)$/;"	f
os_truncate	dbcore/sm-common.cpp	/^os_truncate(char const *path, size_t size)$/;"	f
os_truncateat	dbcore/sm-common.cpp	/^os_truncateat(int dfd, char const *path, size_t size)$/;"	f
os_unlinkat	dbcore/sm-common.cpp	/^os_unlinkat(int dfd, char const *fname, int flags)$/;"	f
os_write	dbcore/sm-common.cpp	/^os_write(int fd, void const *buf, size_t bufsz) {$/;"	f
other	dbcore/sm-common.h	/^    dirent_iterator(dirent_iterator &&other)=delete;$/;"	m	struct:dirent_iterator
other	dbcore/sm-common.h	/^    dirent_iterator(dirent_iterator const &other)=delete;$/;"	m	struct:dirent_iterator
other	dbcore/sm-common.h	/^    void operator=(dirent_iterator other)=delete;$/;"	m	struct:dirent_iterator
out_	masstree/mtclient.hh	/^    struct kvout *out_;$/;"	m	class:KVConn	typeref:struct:KVConn::kvout
out_basic	benchmarks/egen/TxnHarnessStructs.h	/^    double              out_basic;$/;"	m	struct:TPCE::TFinInfo
out_basic_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        out_basic_ind;$/;"	m	struct:TPCE::TFinInfo
out_dilut	benchmarks/egen/TxnHarnessStructs.h	/^    double              out_dilut;$/;"	m	struct:TPCE::TFinInfo
out_dilut_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        out_dilut_ind;$/;"	m	struct:TPCE::TFinInfo
out_of_memory	masstree/straccum.hh	/^inline bool StringAccum::out_of_memory() const {$/;"	f	class:lcdf::StringAccum
out_of_memory	masstree/string_base.hh	/^    bool out_of_memory() const {$/;"	f	class:lcdf::String_base
out_of_memory	masstree/string_base.hh	/^    static bool out_of_memory(const char* s) {$/;"	f	class:lcdf::String_generic
out_of_memory_data	masstree/string.cc	/^const char String_generic::out_of_memory_data[] = "\\360\\237\\222\\243ENOMEM\\360\\237\\222\\243";$/;"	m	class:lcdf::String_generic	file:
out_of_memory_data	masstree/string_base.hh	/^    static const char out_of_memory_data[15];$/;"	m	class:lcdf::String_generic
out_of_memory_length	masstree/string_base.hh	/^    enum { out_of_memory_length = 14 };$/;"	e	enum:lcdf::String_generic::__anon77
output	benchmarks/results/make_graphs-6.py	/^    output = PdfFileWriter()$/;"	v
output	scripts/tester.py	/^    output = run(cmd)$/;"	v
output_scan	masstree/mttest.cc	/^void kvtest_client<T>::output_scan(const Json& req, std::vector<Str>& keys,$/;"	f	class:kvtest_client
over1	masstree/mtclient.cc	/^over1(struct child *c)$/;"	f
over2	masstree/mtclient.cc	/^over2(struct child *c)$/;"	f
overflow	str_arena.h	/^  std::vector<std::unique_ptr<std::string>> overflow;$/;"	m	class:str_arena
overhead	masstree/stringbag.hh	/^    static size_t overhead(int width) {$/;"	f	class:stringbag
overwrite	third-party/lz4/lz4c.c	/^static int overwrite = 0;$/;"	v	file:
owner	dbcore/sc-hash.h	/^        sc_hash_set *owner;$/;"	m	struct:iterator
owner	dbcore/xid.h	/^    XID owner;$/;"	m	struct:TXN::xid_context
owner_is_dead	dbcore/rcu-slist.cpp	/^bool _rcu_slist::next_ptr::owner_is_dead() {$/;"	f	class:_rcu_slist::next_ptr
owner_status	dbcore/rcu-slist.cpp	/^    typedef _rcu_slist::owner_status owner_status;$/;"	t	namespace:__anon82	file:
owner_status	dbcore/rcu-slist.h	/^    enum owner_status {$/;"	g	struct:_rcu_slist
ownership_checker	ownership_checker.h	/^class ownership_checker {$/;"	c
p	dbcore/rcu.h	/^    pointer *p;$/;"	m	union:RCU::rcu_pointer
p	imstring.h	/^  uint8_t *p;$/;"	m	class:base_imstring
p	small_vector.h	/^    ObjType *p;$/;"	m	class:small_vector::small_iterator_
p	static_vector.h	/^    ObjType *p;$/;"	m	class:static_vector::iterator_
p	varkey.h	/^  const uint8_t *p;$/;"	m	class:varkey
p0	benchmarks/stats_runner.py	/^  p0 = subprocess.Popen(args, stdin=open('\/dev\/null', 'r'), stdout=open('\/dev\/null', 'w'), env=env)$/;"	v
p1	benchmarks/stats_runner.py	/^    p1 = subprocess.Popen(args, stdin=open('\/dev\/null', 'r'), stdout=fp)$/;"	v
pGenerateAndLoad	benchmarks/egen/EGenLoader.cpp	/^CGenerateAndLoad*					pGenerateAndLoad;$/;"	v
pLoaderFactory	benchmarks/egen/EGenLoader.cpp	/^CBaseLoaderFactory*					pLoaderFactory;	\/\/ class factory that creates table loaders$/;"	v
pLoaderSettings	benchmarks/egen/DriverParamSettings.h	/^} *pLoaderSettings;$/;"	t	namespace:TPCE	typeref:struct:TPCE::TLoaderSettings
pTradeGen	benchmarks/egen/EGenGenerateAndLoad.h	/^	CTradeGen*				pTradeGen;	$/;"	m	class:TPCE::CGenerateAndLoad
packet	stats_common.h	/^  packet() : size_(0) {}$/;"	f	class:stats_command::packet
packet	stats_common.h	/^class packet {$/;"	c	class:stats_command
padding	masstree/json.hh	/^    int padding;$/;"	m	struct:lcdf::Json_rep_item
padding1	masstree/kvthread.hh	/^	char padding1[CACHE_LINE_SIZE];$/;"	m	union:threadinfo::__anon72
padding1_	masstree/log.hh	/^    char padding1_[CACHE_LINE_SIZE - sizeof(front)];$/;"	m	class:loginfo
page_bits	dbcore/dynarray.h	/^    size_t page_bits() { return 16; }$/;"	f	struct:dynarray
page_size	dbcore/dynarray.h	/^    size_t page_size() { return size_t(1) << page_bits(); }$/;"	f	struct:dynarray
pair	scopedperf.hh	/^struct pair {$/;"	s	namespace:scopedperf
param_type	masstree/masstree.hh	/^    typedef P param_type;$/;"	t	class:Masstree::basic_table
param_type	masstree/query_masstree.hh	/^    typedef P param_type;$/;"	t	class:Masstree::query_table
parent	masstree/masstree_struct.hh	/^    inline base_type* parent() const {$/;"	f	class:Masstree::node_base
parent_	btree.h	/^    node *parent_;$/;"	m	struct:btree::remove_parent_entry
parent_exists	masstree/masstree_struct.hh	/^    static inline bool parent_exists(base_type* p) {$/;"	f	class:Masstree::node_base
parent_left_sibling_	btree.h	/^    node *parent_left_sibling_;$/;"	m	struct:btree::remove_parent_entry
parent_oid_	masstree/masstree_struct.hh	/^	oid_type parent_oid_; $/;"	m	class:Masstree::internode
parent_oid_	masstree/masstree_struct.hh	/^	oid_type parent_oid_; $/;"	m	class:Masstree::leaf
parent_right_sibling_	btree.h	/^    node *parent_right_sibling_;$/;"	m	struct:btree::remove_parent_entry
parent_version_	btree.h	/^    uint64_t parent_version_;$/;"	m	struct:btree::remove_parent_entry
parse	masstree/json.hh	/^inline Json Json::parse(const String &str) {$/;"	f	class:lcdf::Json
parse	masstree/json.hh	/^inline Json Json::parse(const char *first, const char *last) {$/;"	f	class:lcdf::Json
parse	masstree/msgpack.hh	/^inline Json parse(const String& str) {$/;"	f	namespace:msgpack
parse	masstree/msgpack.hh	/^inline Json parse(const char* first, const char* last) {$/;"	f	namespace:msgpack
parseCommandLine	benchmarks/egen/EGenValidate.cpp	/^void parseCommandLine(int argc, const char *argv[], BucketSimOptions& options) {$/;"	f
parse_bool	masstree/clp.c	/^parse_bool(Clp_Parser *clp, const char *arg, int complain, void *user_data)$/;"	f	file:
parse_cesu8_char	masstree/string.cc	/^String::parse_cesu8_char(const unsigned char *s, const unsigned char *end)$/;"	f	class:lcdf::String
parse_changeset	masstree/log.cc	/^static lcdf::Json* parse_changeset(Str changeset,$/;"	f	file:
parse_double	masstree/clp.c	/^parse_double(Clp_Parser *clp, const char *arg, int complain, void *user_data)$/;"	f	file:
parse_int	masstree/clp.c	/^parse_int(Clp_Parser* clp, const char* arg, int complain, void* user_data)$/;"	f	file:
parse_json	masstree/msgpacktest.cc	/^Json __attribute__((noinline)) parse_json(const String& str) {$/;"	f
parse_json	masstree/msgpacktest.cc	/^Json __attribute__((noinline)) parse_json(const char* first, const char* last) {$/;"	f
parse_json_loop_1	masstree/msgpacktest.cc	/^void parse_json_loop_1() {$/;"	f
parse_json_loop_2	masstree/msgpacktest.cc	/^void parse_json_loop_2() {$/;"	f
parse_json_loop_3	masstree/msgpacktest.cc	/^void parse_json_loop_3() {$/;"	f
parse_json_loop_size	masstree/msgpacktest.cc	/^static int parse_json_loop_size = 10000000;$/;"	v	file:
parse_msgpack_loop_1	masstree/msgpacktest.cc	/^void parse_msgpack_loop_1() {$/;"	f
parse_msgpack_loop_2	masstree/msgpacktest.cc	/^void parse_msgpack_loop_2() {$/;"	f
parse_msgpack_loop_3	masstree/msgpacktest.cc	/^void parse_msgpack_loop_3() {$/;"	f
parse_string	masstree/clp.c	/^parse_string(Clp_Parser *clp, const char *arg, int complain, void *user_data)$/;"	f	file:
parse_string_list	masstree/clp.c	/^parse_string_list(Clp_Parser *clp, const char *arg, int complain, void *user_data)$/;"	f	file:
parser	masstree/msgpack.hh	/^    explicit inline parser(const String& str)$/;"	f	class:msgpack::parser
parser	masstree/msgpack.hh	/^    explicit inline parser(const char* s)$/;"	f	class:msgpack::parser
parser	masstree/msgpack.hh	/^    explicit inline parser(const unsigned char* s)$/;"	f	class:msgpack::parser
parser	masstree/msgpack.hh	/^class parser {$/;"	c	namespace:msgpack
parser_	masstree/mtclient.hh	/^    msgpack::streaming_parser parser_;$/;"	m	class:KVConn
parser_	masstree/mtd.cc	/^    msgpack::streaming_parser parser_;$/;"	m	struct:conn	file:
partial	third-party/lz4/lz4.c	/^typedef enum { full = 0, partial = 1 } exit_directive;$/;"	e	enum:__anon6	file:
partition_	masstree/mtclient.hh	/^    int partition_;$/;"	m	class:KVConn
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_address_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_ca_and_ap_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_charge_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_commission_rate_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_company_competitor_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_company_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_customer_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_customer_taxrate_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_daily_market_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_financial_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_growing_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_industry_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_last_trade_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_ni_and_nx_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_sector_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_security_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_status_type_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_tax_rate_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_trade_type_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_wl_and_wi_loader	file:
partition_id	benchmarks/tpce.cc	/^		ssize_t partition_id;$/;"	m	class:tpce_zip_code_loader	file:
partition_id_end	benchmarks/tpce.cc	/^		const uint partition_id_end;$/;"	m	class:tpce_worker	file:
partition_id_start	benchmarks/tpce.cc	/^		const uint partition_id_start;$/;"	m	class:tpce_worker	file:
partitions	benchmarks/tpcc.cc	/^  map<string, vector<abstract_ordered_index *>> partitions;$/;"	m	class:tpcc_bench_runner	file:
partitions	benchmarks/tpce.cc	/^		map<string, vector<abstract_ordered_index *>> partitions;$/;"	m	class:tpce_bench_runner	file:
payload	dbcore/sm-log-defs.h	/^    char *payload(size_t i) {$/;"	f	struct:log_block
payload	dbcore/sm-log-recover.h	/^        decay payload() {$/;"	f	struct:sm_log_recover_mgr::log_scanner
payload	dbcore/test-cslist.cpp	/^    int payload;$/;"	m	struct:node	file:
payload	object.h	/^		inline char* payload() { return (char*)((char*)this + sizeof(object)); }$/;"	f	class:object
payload_begin	dbcore/sm-log-defs.h	/^    char *payload_begin() {$/;"	f	struct:log_block
payload_end	dbcore/sm-log-defs.h	/^    char *payload_end() {$/;"	f	struct:log_block
payload_end	dbcore/sm-log-defs.h	/^    uint32_t payload_end;$/;"	m	struct:log_record
payload_lsn	dbcore/sm-log-defs.h	/^    LSN payload_lsn(size_t i) {$/;"	f	struct:log_block
payload_lsn	dbcore/sm-log-recover.h	/^        LSN payload_lsn() { return _bscan->payload_lsn(_i); }$/;"	f	struct:sm_log_recover_mgr::log_scanner
payload_offset	dbcore/sm-log-defs.h	/^    uint32_t payload_offset(size_t i) {$/;"	f	struct:log_block
payload_ptr	dbcore/sm-log-defs.h	/^    fat_ptr payload_ptr;$/;"	m	struct:log_request
payload_ptr	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::payload_ptr(bool follow_ext)$/;"	f	class:sm_log_scan_mgr::header_scan
payload_ptr	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::payload_ptr()$/;"	f	class:sm_log_scan_mgr::record_scan
payload_size	dbcore/sm-log-defs.h	/^    size_t payload_size(size_t i) {$/;"	f	struct:log_block
payload_size	dbcore/sm-log-defs.h	/^    uint32_t payload_size;$/;"	m	struct:log_request
payload_size	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::payload_size()$/;"	f	class:sm_log_scan_mgr::header_scan
payload_size	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::payload_size()$/;"	f	class:sm_log_scan_mgr::record_scan
payload_size	dbcore/sm-log-recover.h	/^        size_t payload_size() {$/;"	f	struct:sm_log_recover_mgr::log_scanner
payload_size	dbcore/test-sm-log.cpp	/^    size_t payload_size;$/;"	m	struct:db_record	file:
pbuffer	persist_test.cc	/^struct pbuffer {$/;"	s	file:
pct_change	benchmarks/egen/TxnHarnessStructs.h	/^    double  pct_change;$/;"	m	struct:TPCE::TMarketWatchFrame1Output
pct_change	benchmarks/egen/TxnHarnessStructs.h	/^    double  pct_change;$/;"	m	struct:TPCE::TMarketWatchTxnOutput
pdest	dbcore/sm-log-defs.h	/^    fat_ptr *pdest;$/;"	m	struct:log_request
pe_ratio	benchmarks/egen/TxnHarnessStructs.h	/^    double              pe_ratio;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
peek	circbuf.h	/^  peek()$/;"	f	class:circbuf
peek	dbcore/rcu-slist.h	/^    Node *peek() { return begin().get(); }$/;"	f	struct:rcu_slist
peek	dbcore/rcu-slist.h	/^    node *peek() { return begin().get(); }$/;"	f	struct:_rcu_slist
peek_raw	dbcore/rcu-slist.cpp	/^_rcu_slist::peek_raw(bool *valid)$/;"	f	class:_rcu_slist
peek_raw	dbcore/rcu-slist.h	/^    Node *peek_raw(bool *valid) { return (Node*) self.peek_raw(valid); }$/;"	f	struct:rcu_slist
peekall	circbuf.h	/^  peekall(std::vector<Tp *> &ps, size_t limit = std::numeric_limits<size_t>::max())$/;"	f	class:circbuf
per_thread_epochs_	persist_test.cc	/^  aligned_padded_elem<atomic<uint64_t>> per_thread_epochs_[NMAXCORES];$/;"	m	class:database_simulation	file:
percore	core.h	/^  percore()$/;"	f	class:percore
percore	core.h	/^class percore {$/;"	c
percore_lazy	core.h	/^  percore_lazy()$/;"	f	class:percore_lazy
percore_lazy	core.h	/^class percore_lazy : private percore<private_::buf<T>, false> {$/;"	c
percorify	benchmarks/results/make_graphs-5.py	/^    def percorify(x):$/;"	f	function:datafromfile
perf_region	scopedperf.hh	/^perf_region(Perfsum *ps, getcpu_fn getcpu = sched_getcpu)$/;"	f	namespace:scopedperf
perf_test	btree.cc	/^perf_test()$/;"	f	file:
perfsum	scopedperf.hh	/^perfsum(const char *name, const ctrgroup_chain<Counters...> *c,$/;"	f	namespace:scopedperf
perfsum_base	scopedperf.hh	/^  perfsum_base(const char *n, display_opt d) : name(n), disp(d) {$/;"	f	class:scopedperf::perfsum_base
perfsum_base	scopedperf.hh	/^class perfsum_base {$/;"	c	namespace:scopedperf
perfsum_ctr	scopedperf.hh	/^  perfsum_ctr(const char *n,$/;"	f	class:scopedperf::perfsum_ctr
perfsum_ctr	scopedperf.hh	/^  perfsum_ctr(const ctrgroup_chain<Counters...> *c,$/;"	f	class:scopedperf::perfsum_ctr
perfsum_ctr	scopedperf.hh	/^class perfsum_ctr : public perfsum_tmpl<Enabler, Counters...> {$/;"	c	namespace:scopedperf
perfsum_ctr_inlinegroup	scopedperf.hh	/^  perfsum_ctr_inlinegroup(const char *n, perfsum_base::display_opt d,$/;"	f	class:scopedperf::perfsum_ctr_inlinegroup
perfsum_ctr_inlinegroup	scopedperf.hh	/^class perfsum_ctr_inlinegroup :$/;"	c	namespace:scopedperf
perfsum_frac	scopedperf.hh	/^perfsum_frac(const char *name,$/;"	f	namespace:scopedperf
perfsum_group	scopedperf.hh	/^perfsum_group(const char *name, Counters*... c)$/;"	f	namespace:scopedperf
perfsum_hist	scopedperf.hh	/^perfsum_hist(const char *name, const ctrgroup_chain<Counters...> *c,$/;"	f	namespace:scopedperf
perfsum_hist_tmpl	scopedperf.hh	/^  perfsum_hist_tmpl(const ctrgroup_chain<Counters...> *c,$/;"	f	class:scopedperf::perfsum_hist_tmpl
perfsum_hist_tmpl	scopedperf.hh	/^class perfsum_hist_tmpl : public perfsum_tmpl<Enabler, Counters...> {$/;"	c	namespace:scopedperf
perfsum_tmpl	scopedperf.hh	/^  perfsum_tmpl(const ctrgroup_chain<Counters...> *c,$/;"	f	class:scopedperf::perfsum_tmpl
perfsum_tmpl	scopedperf.hh	/^class perfsum_tmpl : public perfsum_base, public Enabler {$/;"	c	namespace:scopedperf
perm_	masstree/masstree_scan.hh	/^    permuter_type perm_;$/;"	m	class:Masstree::scanstackelt
perm_	masstree/masstree_tcursor.hh	/^    typename leaf<P>::permuter_type perm_;$/;"	m	class:Masstree::unlocked_tcursor
permutation	masstree/kpermuter.hh	/^    static type permutation(const T &n) {$/;"	f	struct:key_permuter
permutation	masstree/masstree_scan.hh	/^    permuter_type permutation() const {$/;"	f	class:Masstree::scanstackelt
permutation	masstree/masstree_struct.hh	/^    permuter_type permutation() const {$/;"	f	class:Masstree::leaf
permutation_	masstree/masstree_struct.hh	/^    typename permuter_type::storage_type permutation_;$/;"	m	class:Masstree::leaf
permuter_type	masstree/masstree_scan.hh	/^    typedef typename leaf_type::permuter_type permuter_type;$/;"	t	class:Masstree::scanstackelt
permuter_type	masstree/masstree_struct.hh	/^    typedef kpermuter<P::leaf_width> permuter_type;$/;"	t	class:Masstree::leaf
permuter_type	masstree/masstree_tcursor.hh	/^    typedef typename leaf_type::permuter_type permuter_type;$/;"	t	class:Masstree::tcursor
persist_extractor	benchmarks/results/make_graphs-6.py	/^    def persist_extractor(mode):$/;"	f
perturb	benchmarks/results/make_graphs-5.py	/^    def perturb(x):$/;"	f	function:datafromfile
phases	benchmarks/masstree/kvtest.cc	/^  const volatile bool *phases;$/;"	m	class:kvtest_worker	file:
pick_wh	benchmarks/tpcc.cc	/^  pick_wh(fast_random &r)$/;"	f	class:tpcc_worker	file:
pin_cpus	benchmarks/bench.cc	/^int pin_cpus = 0;$/;"	v
pin_current_thread	rcu-wrapper.cc	/^RCU::pin_current_thread(size_t cpu)$/;"	f	class:RCU
pinthreads	masstree/mtd.cc	/^static bool pinthreads = false;$/;"	v	file:
pinthreads	masstree/mttest.cc	/^static bool pinthreads = false;$/;"	v	file:
pmc_ctr	scopedperf.hh	/^  pmc_ctr(const char *nm) : namedctr<CounterWidth>(nm), cn(-1) {}$/;"	f	class:scopedperf::pmc_ctr
pmc_ctr	scopedperf.hh	/^  pmc_ctr(int n) : namedctr<CounterWidth>(mkname(n)), cn(n) {}$/;"	f	class:scopedperf::pmc_ctr
pmc_ctr	scopedperf.hh	/^class pmc_ctr : public namedctr<CounterWidth> {$/;"	c	namespace:scopedperf
pmc_setup	scopedperf.hh	/^  pmc_setup(uint64_t v, const char *nm)$/;"	f	class:scopedperf::pmc_setup
pmc_setup	scopedperf.hh	/^class pmc_setup : public pmc_ctr<CounterWidth> {$/;"	c	namespace:scopedperf
pmc_v	scopedperf.hh	/^  uint64_t pmc_v;$/;"	m	class:scopedperf::pmc_setup
pn	benchmarks/results/make_graphs-3.py	/^      def pn(n, p):$/;"	f	function:extract_pct
pn	benchmarks/results/make_graphs-6.py	/^  def pn(n, p):$/;"	f	function:extract_pct
pointer	dbcore/rcu.h	/^struct  __attribute__((aligned(DEFAULT_ALIGNMENT))) pointer {$/;"	s	namespace:RCU
pointer	persist_test.cc	/^  pointer()$/;"	f	struct:pbuffer
pointer_list	dbcore/rcu.h	/^    pointer_list() : head(0), next_list(0), nobj(0), nbytes(0) { }$/;"	f	struct:RCU::pointer_list
pointer_list	dbcore/rcu.h	/^struct pointer_list {$/;"	s	namespace:RCU
pointer_stash	dbcore/rcu.cpp	/^    pointer_stash()$/;"	f	struct:RCU::pointer_stash
pointer_stash	dbcore/rcu.cpp	/^struct pointer_stash {$/;"	s	namespace:RCU	file:
pointer_type	masstree/json.hh	/^    typedef const Json* pointer_type;$/;"	t	class:lcdf::Json::array_iterator
pointer_type	masstree/json.hh	/^    typedef const Json* pointer_type;$/;"	t	class:lcdf::Json::const_array_iterator
pointer_type	masstree/json.hh	/^    typedef const value_type* pointer_type;$/;"	t	class:lcdf::Json::const_iterator
pointer_type	masstree/json.hh	/^    typedef const value_type* pointer_type;$/;"	t	class:lcdf::Json::const_object_iterator
pointer_type	masstree/json.hh	/^    typedef value_type* pointer_type;$/;"	t	class:lcdf::Json::iterator
pointer_type	masstree/json.hh	/^    typedef value_type* pointer_type;$/;"	t	class:lcdf::Json::object_iterator
pool_	masstree/kvthread.hh	/^    void *pool_[pool_max_nlines];$/;"	m	class:threadinfo
pool_allocate	masstree/kvthread.hh	/^    void* pool_allocate(size_t sz, memtag tag) {$/;"	f	class:threadinfo
pool_allocate	masstree_btree.h	/^    void* pool_allocate(size_t sz, memtag) {$/;"	f	class:simple_threadinfo
pool_deallocate	masstree/kvthread.hh	/^    void pool_deallocate(void* p, size_t sz, memtag tag) {$/;"	f	class:threadinfo
pool_deallocate	masstree_btree.h	/^    void pool_deallocate(void* p, size_t sz, memtag) {$/;"	f	class:simple_threadinfo
pool_deallocate_rcu	masstree/kvthread.hh	/^    void pool_deallocate_rcu(void* p, size_t sz, memtag tag) {$/;"	f	class:threadinfo
pool_deallocate_rcu	masstree_btree.h	/^    void pool_deallocate_rcu(void* p, size_t sz, memtag) {$/;"	f	class:simple_threadinfo
pool_max_nlines	masstree/kvthread.hh	/^    enum { pool_max_nlines = 20 };$/;"	e	enum:threadinfo::__anon74
pop_back	masstree/json.hh	/^    void pop_back() {$/;"	f	class:lcdf::Json_proxy_base
pop_back	masstree/json.hh	/^inline void Json::pop_back() {$/;"	f	class:lcdf::Json
pop_back	masstree/local_vector.hh	/^inline void local_vector<T, N, A>::pop_back() {$/;"	f	class:local_vector
pop_back	masstree/straccum.hh	/^inline void StringAccum::pop_back(int n) {$/;"	f	class:lcdf::StringAccum
pop_back	small_vector.h	/^  pop_back()$/;"	f	class:small_vector
pop_back	static_vector.h	/^  pop_back()$/;"	f	class:static_vector
pop_head	dbcore/cslist.h	/^    Node *pop_head() {$/;"	f	struct:cslist
populate_broker	benchmarks/tpce.cc	/^		void populate_broker()$/;"	f	class:tpce_growing_loader	file:
populate_holding	benchmarks/tpce.cc	/^		void populate_holding()$/;"	f	class:tpce_growing_loader	file:
populate_holding_summary	benchmarks/tpce.cc	/^		void populate_holding_summary()$/;"	f	class:tpce_growing_loader	file:
populate_unit_trade	benchmarks/tpce.cc	/^		void populate_unit_trade()$/;"	f	class:tpce_growing_loader	file:
port	masstree/mtd.cc	/^static int port = 2117;$/;"	v	file:
port	masstree/mttest.cc	/^static int port = 2117;$/;"	v	file:
pos	dbcore/sc-hash.h	/^        size_t pos;$/;"	m	struct:iterator
pos	dbcore/sm-trace.cpp	/^    uint32_t pos;       \/\/ relative position in the chain, 0 being the head$/;"	m	struct:TRACER::read_trace_record	file:
pos	masstree/clp.c	/^    char* pos;$/;"	m	struct:Clp_BuildString	file:
pos	masstree/mttest.cc	/^    double pos;$/;"	m	struct:__anon67::gnuplot_info	file:
pos_	masstree/log.hh	/^            uint32_t pos_;$/;"	m	struct:loginfo::__anon78::__anon79
pos_	masstree/value_bag.hh	/^	    offset_type pos_[1];$/;"	m	struct:value_bag::bagdata::__anon24
position	masstree/msgpack.hh	/^    inline const char* position() const {$/;"	f	class:msgpack::parser
postincr	circbuf.h	/^  postincr(std::atomic<unsigned> &i)$/;"	f	class:circbuf
postincr	circbuf.h	/^  postincr(unsigned &i)$/;"	f	class:circbuf
pprev	masstree/string.hh	/^	memo_type** pprev;$/;"	m	struct:lcdf::String::memo_type
pre_commit	dbcore/sm-tx-log.cpp	/^sm_tx_log::pre_commit() {$/;"	f	class:sm_tx_log
precondition	masstree/config.h	320;"	d
prefetch	btree.h	/^    prefetch() const$/;"	f	struct:btree::internal_node
prefetch	btree.h	/^    prefetch() const$/;"	f	struct:btree::leaf_node
prefetch	btree.h	/^btree<P>::node::prefetch() const$/;"	f	class:btree::node
prefetch	masstree/compiler.hh	/^inline void prefetch(const void *ptr) {$/;"	f
prefetch	masstree/masstree.hh	/^    static constexpr bool prefetch = true;$/;"	m	struct:Masstree::nodeparams
prefetch	masstree/masstree_struct.hh	/^    void prefetch() const {$/;"	f	class:Masstree::internode
prefetch	masstree/masstree_struct.hh	/^    void prefetch() const {$/;"	f	class:Masstree::leaf
prefetch	masstree/masstree_struct.hh	/^    void prefetch(int keylenx) const {$/;"	f	class:Masstree::leafvalue
prefetch	prefetch.h	/^prefetch(const void *ptr)$/;"	f
prefetch	tuple.h	/^  prefetch() const$/;"	f	struct:dbtuple
prefetch_bytes	prefetch.h	/^prefetch_bytes(const void *p, size_t n)$/;"	f
prefetch_full	masstree/masstree_struct.hh	/^    void prefetch_full() const {$/;"	f	class:Masstree::node_base
prefetch_object	prefetch.h	/^prefetch_object(const T *ptr)$/;"	f
prefetcher_type	masstree/masstree_struct.hh	/^    typedef typename make_prefetcher<P>::type prefetcher_type;$/;"	t	class:Masstree::leafvalue
prefetchnta	masstree/compiler.hh	/^inline void prefetchnta(const void *ptr) {$/;"	f
prefix	masstree/str.hh	/^    Str prefix(int lenx) const {$/;"	f	struct:lcdf::Str
prefix64k_directive	third-party/lz4/lz4.c	/^typedef enum { noPrefix = 0, withPrefix = 1 } prefix64k_directive;$/;"	t	typeref:enum:__anon4	file:
prefixLen	masstree/mtclient.cc	/^    int prefixLen() const {$/;"	f	struct:kvtest_client
prefixLen	masstree/mtclient.cc	/^static int prefixLen = 0;$/;"	v	file:
prefix_length	masstree/masstree_key.hh	/^    int prefix_length() const {$/;"	f	class:Masstree::key
prefix_string	masstree/masstree_key.hh	/^    Str prefix_string() const {$/;"	f	class:Masstree::key
prepare_checkpoint	masstree/mtd.cc	/^prepare_checkpoint(kvepoch_t min_epoch, int nckthreads, const Str *pv)$/;"	f	file:
prepare_new_segment	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::prepare_new_segment(uint64_t start)$/;"	f	class:sm_log_file_mgr
prepare_thread	masstree/mtd.cc	/^prepare_thread(threadinfo *ti)$/;"	f
prev	dbcore/cslist.h	/^        Node *prev;$/;"	m	struct:cslist::iterator
prev	dbcore/sm-common.h	/^    fat_ptr prev;$/;"	m	struct:version
prev_	btree.h	/^    leaf_node *prev_;$/;"	m	struct:btree::leaf_node
prev_	masstree/log.hh	/^    R *prev_;$/;"	m	struct:row_delta_marker
prev_lsn	dbcore/sm-log-defs.h	/^        LSN prev_lsn;$/;"	m	union:log_record::__anon91
prev_oid_	masstree/masstree_struct.hh	/^	oid_type prev_oid_;$/;"	m	class:Masstree::leaf
prev_ts	masstree/log.cc	/^    kvtimestamp_t prev_ts;$/;"	m	struct:logrecord	file:
prev_ts	masstree/log.hh	/^        kvtimestamp_t prev_ts;$/;"	m	struct:loginfo::query_times
prev_ts_	masstree/log.cc	/^    kvtimestamp_t prev_ts_;$/;"	m	struct:logrec_kvdelta	file:
prev_ts_	masstree/log.hh	/^    kvtimestamp_t prev_ts_;$/;"	m	struct:row_delta_marker
previous_full_version_value	masstree/masstree_tcursor.hh	/^tcursor<P>::previous_full_version_value() const {$/;"	f	class:Masstree::tcursor
price	benchmarks/egen/TxnHarnessStructs.h	/^    double              price;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
price	benchmarks/egen/TxnHarnessStructs.h	/^    double              price;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        price_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        price_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
price_quote	benchmarks/egen/TxnHarnessStructs.h	/^    double              price_quote;$/;"	m	struct:TPCE::TTickerEntry
price_quote	benchmarks/egen/TxnHarnessStructs.h	/^    double              price_quote;$/;"	m	struct:TPCE::TTradeRequest
pricefactor	benchmarks/bid.cc	/^static const float pricefactor = 10000.0; \/\/ bids range from [0, 10000.0)$/;"	v	file:
primitive_typeutil	ndb_type_traits.h	/^  struct primitive_typeutil { typedef T func_param_type; };$/;"	s	namespace:private_
print	base_txn_btree.h	/^  inline void print() {$/;"	f	class:base_txn_btree
print	btree.h	/^  void print() {$/;"	f	class:btree
print	dbcore/test-sm-oid-alloc-impl.cpp	/^void sparse_bitset::print(char const *name) {$/;"	f	class:sparse_bitset
print	masstree/masstree_print.hh	/^    static void print(T value, FILE* f, const char* prefix,$/;"	f	class:Masstree::value_print
print	masstree/masstree_print.hh	/^    static void print(unsigned char* value, FILE* f, const char* prefix,$/;"	f	class:Masstree::value_print
print	masstree/masstree_print.hh	/^void basic_table<P>::print(FILE *f, int indent) const {$/;"	f	class:Masstree::basic_table
print	masstree/masstree_print.hh	/^void internode<P>::print(FILE *f, const char *prefix, int indent, int kdepth)$/;"	f	class:Masstree::internode
print	masstree/masstree_print.hh	/^void leaf<P>::print(FILE *f, const char *prefix, int indent, int kdepth)$/;"	f	class:Masstree::leaf
print	masstree/masstree_print.hh	/^void node_base<P>::print(FILE *f, const char *prefix, int indent, int kdepth)$/;"	f	class:Masstree::node_base
print	masstree/mttest.cc	/^void gnuplot_info::print(FILE *f, const char * const *types_begin) {$/;"	f	class:__anon67::gnuplot_info
print	masstree/perfstat.cc	/^stat::print(const stat **s, int n) {$/;"	f	class:Perf::stat
print	masstree/query_masstree.cc	/^void query_table<P>::print(FILE *f, int indent) const {$/;"	f	class:Masstree::query_table
print	masstree/stringbag.hh	/^    void print(int width, FILE *f, const char *prefix, int indent) {$/;"	f	class:stringbag
print	masstree/value_array.hh	/^    void print(FILE* f, const char* prefix, int indent, Str key,$/;"	f	class:value_array
print	masstree/value_bag.hh	/^void value_bag<O>::print(FILE *f, const char *prefix, int indent,$/;"	f	class:value_bag
print	masstree/value_string.hh	/^    void print(FILE* f, const char* prefix, int indent, Str key,$/;"	f	class:value_string
print	masstree/value_versioned_array.hh	/^    void print(FILE *f, const char *prefix, int indent, Str key,$/;"	f	class:value_versioned_array
print	masstree_btree.h	/^void mbtree<P>::print() {$/;"	f	class:mbtree
print	scopedperf.hh	/^  void print(int w0, int w) const \/* override *\/ {$/;"	f	class:scopedperf::perfsum_ctr
print	scopedperf.hh	/^  void print(int w0, int w) const \/* override *\/ {$/;"	f	class:scopedperf::perfsum_hist_tmpl
print_gnuplot	masstree/mttest.cc	/^static void print_gnuplot(FILE *f, const char * const *types_begin, const char * const *types_end,$/;"	f	file:
print_names	masstree/testrunner.cc	/^void testrunner_base::print_names(FILE* stream, int ncol) {$/;"	f	class:testrunner_base
print_report	masstree/kvstats.hh	/^  void print_report(const char *name) const {$/;"	f	struct:kvstats
print_row	scopedperf.hh	/^  static void print_row(const char *rowname, const Row &r,$/;"	f	class:scopedperf::perfsum_base
print_table	masstree/mttest.cc	/^bool print_table = false;$/;"	v
print_txn_debug	benchmarks/abstract_db.h	/^  virtual void print_txn_debug(void *txn) const {}$/;"	f	class:abstract_db
print_txn_debug	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::print_txn_debug(void *txn) const$/;"	f	class:ndb_wrapper
printable	masstree/string.cc	/^String::printable(int type) const$/;"	f	class:lcdf::String
printable_keys	masstree/masstree.hh	/^    static constexpr bool printable_keys = true;$/;"	m	struct:Masstree::nodeparams
printall	scopedperf.hh	/^  static void printall(int w0 = 17, int w = 13) {$/;"	f	class:scopedperf::perfsum_base
private_	base_txn_btree.h	/^namespace private_ {$/;"	n
private_	benchmarks/ndb_wrapper.h	/^namespace private_ {$/;"	n
private_	btree.h	/^namespace private_ {$/;"	n
private_	core.h	/^namespace private_ {$/;"	n
private_	counter.h	/^namespace private_ {$/;"	n
private_	ndb_type_traits.h	/^namespace private_ {$/;"	n
private_	small_unordered_map.h	/^namespace private_ {$/;"	n
private_	util.h	/^namespace private_ {$/;"	n
private_state	dbcore/epoch.cpp	/^struct epoch_mgr::private_state {$/;"	s	class:epoch_mgr	file:
profile_memo_size_bucket	masstree/string.hh	/^    static inline int profile_memo_size_bucket(uint32_t dirty, uint32_t capacity) {$/;"	f	class:lcdf::String
profile_report	masstree/string.cc	/^String::profile_report(StringAccum &sa, int examples)$/;"	f	class:lcdf::String
profile_update_memo_dirty	masstree/string.hh	/^    static void profile_update_memo_dirty(memo_type* memo, uint32_t old_dirty, uint32_t new_dirty, uint32_t capacity) {$/;"	f	class:lcdf::String
program_name	masstree/clp.c	/^    const char *program_name;$/;"	m	struct:Clp_Internal	file:
propose_capacity	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::propose_capacity(size_t align)$/;"	f	class:sm_allocator
proto1_version_str	txn.cc	/^proto1_version_str(uint64_t v)$/;"	f	file:
proto2_version_str	txn.cc	/^proto2_version_str(uint64_t v)$/;"	f	file:
prototypes	masstree/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
ps	scopedperf.hh	/^  Perfsum *const ps;$/;"	m	class:scopedperf::base_perf_region
ps_nctr	scopedperf.hh	/^  static const uint ps_nctr = ctrgroup_chain<Counters...>::cg_nctr;$/;"	m	class:scopedperf::perfsum_tmpl
psdes	benchmarks/masstree/kvrandom.cc	/^uint32_t kvrandom_psdes_nr::psdes(uint32_t lword, uint32_t irword) {$/;"	f	class:kvrandom_psdes_nr
psdes	masstree/kvrandom.cc	/^uint32_t kvrandom_psdes_nr::psdes(uint32_t lword, uint32_t irword) {$/;"	f	class:kvrandom_psdes_nr
pstamp	dbcore/xid.h	/^    uint64_t pstamp; \/\/ youngest predecessor (\\eta)$/;"	m	struct:TXN::xid_context
pthread_key	dbcore/epoch.cpp	/^    pthread_key_t pthread_key;$/;"	m	struct:epoch_mgr::private_state	file:
pthread_key	dbcore/sm-oid.cpp	/^pthread_key_t pthread_key;$/;"	m	namespace:__anon93	file:
ptr	dbcore/rcu-slist.cpp	/^        next_ptr volatile *ptr;$/;"	m	struct:__anon82::cached_next	file:
ptr	dbcore/sm-log-recover.h	/^            char *ptr;$/;"	m	struct:sm_log_recover_mgr::log_scanner::decay
ptr	small_unordered_map.h	/^    ptr() const$/;"	f	struct:small_unordered_map::bucket
ptr	small_unordered_map.h	/^    ptr()$/;"	f	struct:small_unordered_map::bucket
ptr	small_vector.h	/^  ptr() const$/;"	f	class:small_vector
ptr	small_vector.h	/^  ptr()$/;"	f	class:small_vector
ptr	static_unordered_map.h	/^    ptr() const$/;"	f	struct:static_unordered_map::bucket
ptr	static_unordered_map.h	/^    ptr()$/;"	f	struct:static_unordered_map::bucket
ptr	static_vector.h	/^  ptr() const$/;"	f	class:static_vector
ptr	static_vector.h	/^  ptr()$/;"	f	class:static_vector
ptr2lsn	dbcore/sm-log-offset.cpp	/^sm_log_offset_mgr::ptr2lsn(fat_ptr ptr)$/;"	f	class:sm_log_offset_mgr
ptr2lsn	dbcore/sm-log.cpp	/^sm_log_impl::ptr2lsn(fat_ptr ptr) {$/;"	f	class:sm_log_impl
ptr_	masstree/kvthread.hh	/^    void *ptr_;$/;"	m	struct:limbo_element
ptr_list	dbcore/test-rcu-slist.cpp	/^typedef std::vector<void*> ptr_list;$/;"	t	file:
purge_tree_walker	base_txn_btree.h	/^  struct purge_tree_walker : public concurrent_btree::tree_walk_callback {$/;"	s	class:base_txn_btree
push	dbcore/rcu-slist.cpp	/^_rcu_slist::push(node *n)$/;"	f	class:_rcu_slist
push	dbcore/rcu-slist.h	/^    bool push(Node *n) { return self.push(&n->_node); }$/;"	f	struct:rcu_slist
push_back	masstree/json.hh	/^    Json& push_back(Json x) {$/;"	f	class:lcdf::Json_proxy_base
push_back	masstree/json.hh	/^    template <typename Q> Json& push_back(const Json_proxy_base<Q>& x) {$/;"	f	class:lcdf::Json_proxy_base
push_back	masstree/json.hh	/^inline Json& Json::push_back(Json x) {$/;"	f	class:lcdf::Json
push_back	masstree/json.hh	/^template <typename P> inline Json& Json::push_back(const Json_proxy_base<P>& x) {$/;"	f	class:lcdf::Json
push_back	masstree/kvthread.hh	/^    void push_back(void *ptr, int freetype, uint64_t epoch) {$/;"	f	struct:limbo_group
push_back	masstree/local_vector.hh	/^inline void local_vector<T, N, A>::push_back(T&& x) {$/;"	f	class:local_vector
push_back	masstree/local_vector.hh	/^inline void local_vector<T, N, A>::push_back(const T& x) {$/;"	f	class:local_vector
push_back	scopedperf.hh	/^  void push_back(T e) {$/;"	f	struct:scopedperf::vector
push_back	small_vector.h	/^  push_back(T &&obj)$/;"	f	class:small_vector
push_back	small_vector.h	/^  push_back(const T &obj)$/;"	f	class:small_vector
push_back	static_vector.h	/^  push_back(T &&obj)$/;"	f	class:static_vector
push_back	static_vector.h	/^  push_back(const T &obj)$/;"	f	class:static_vector
push_back_list	masstree/json.hh	/^    template <typename... Args> Json& push_back_list(Args&&... args) {$/;"	f	class:lcdf::Json_proxy_base
push_back_list	masstree/json.hh	/^inline Json& Json::push_back_list() {$/;"	f	class:lcdf::Json
push_back_list	masstree/json.hh	/^inline Json& Json::push_back_list(T first, Args&&... rest) {$/;"	f	class:lcdf::Json
push_callback	dbcore/rcu-slist.cpp	/^_rcu_slist::push_callback(node *n, push_callback_fn *cb, void *x)$/;"	f	class:_rcu_slist
push_callback	dbcore/rcu-slist.h	/^    bool push_callback(Node *n, Lambda x, T* ptr) {$/;"	f	struct:rcu_slist
push_callback	dbcore/rcu-slist.h	/^    bool push_callback(Node *n, void (*cb)(T*, Node*, Node*), T* ptr) {$/;"	f	struct:rcu_slist
push_callback_fn	dbcore/rcu-slist.h	/^    typedef _rcu_slist::push_callback_fn push_callback_fn;$/;"	t	struct:rcu_slist
push_callback_fn	dbcore/rcu-slist.h	/^    typedef void (push_callback_fn)(void* x, node *n, node *succ);$/;"	t	struct:_rcu_slist
push_head	dbcore/cslist.h	/^    void push_head(Node *n) {$/;"	f	struct:cslist
push_tail	dbcore/cslist.h	/^    void push_tail(Node *n) {$/;"	f	struct:cslist
put	benchmarks/MEESUT.h	/^    void put(T* tmp){$/;"	f	class:TPCE::InputBuffer
put	benchmarks/abstract_ordered_index.h	/^  put(void *txn,$/;"	f	class:abstract_ordered_index
put	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::put($/;"	f	class:ndb_ordered_index
put	dbcore/test-sc-hash.cpp	/^    void put(int x) {$/;"	f	struct:hinstance
put	masstree/mtclient.cc	/^    void put(const Str &key, const Str &value) {$/;"	f	struct:kvtest_client
put	masstree/mtclient.cc	/^    void put(const Str &key, const Str &value, int *status) {$/;"	f	struct:kvtest_client
put	masstree/mtclient.cc	/^    void put(const Str &key, long ivalue) {$/;"	f	struct:kvtest_client
put	masstree/mtclient.cc	/^    void put(const char *key, const char *value) {$/;"	f	struct:kvtest_client
put	masstree/mtclient.cc	/^    void put(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put	masstree/mtclient.cc	/^put(struct child *c, const Str &key, const Str &val)$/;"	f
put	masstree/mtd.cc	/^    void put(const char *key, const char *val) {$/;"	f	struct:kvtest_client
put	masstree/mtd.cc	/^    void put(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put	masstree/mtd.cc	/^void kvtest_client::put(const Str &key, const Str &value) {$/;"	f	class:kvtest_client
put	masstree/mttest.cc	/^    void put(const Str &key, long ivalue) {$/;"	f	struct:kvtest_client
put	masstree/mttest.cc	/^    void put(const char *key, const char *value) {$/;"	f	struct:kvtest_client
put	masstree/mttest.cc	/^    void put(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put	masstree/mttest.cc	/^void kvtest_client<T>::put(const Str &key, const Str &value) {$/;"	f	class:kvtest_client
put	object.h	/^	bool put( oid_type oid, fat_ptr new_head)$/;"	f	class:object_vector
put	object.h	/^	bool put(oid_type oid, fat_ptr old_head, fat_ptr new_head, bool overwrite)$/;"	f	class:object_vector
put	txn_btree.h	/^  put(Transaction<Traits> &t, const key_type &k, const value_type &v)$/;"	f	class:txn_btree
put	txn_btree.h	/^  put(Transaction<Traits> &t, const varkey &k, const value_type &v)$/;"	f	class:txn_btree
put	typed_txn_btree.h	/^typed_txn_btree<Transaction, Schema>::put($/;"	f	class:typed_txn_btree
put_async_cb	masstree/mtclient.cc	/^typedef void (*put_async_cb)(struct child *c, struct async *a,$/;"	t	file:
put_col	masstree/mtclient.cc	/^    void put_col(const Str &key, int col, const Str &value) {$/;"	f	struct:kvtest_client
put_col	masstree/mtclient.cc	/^    void put_col(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
put_col	masstree/mtd.cc	/^void kvtest_client::put_col(const Str &key, int col, const Str &value) {$/;"	f	class:kvtest_client
put_col	masstree/mttest.cc	/^    void put_col(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
put_col	masstree/mttest.cc	/^void kvtest_client<T>::put_col(const Str &key, int col, const Str &value) {$/;"	f	class:kvtest_client
put_col_key10	masstree/mtclient.cc	/^    void put_col_key10(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
put_col_key10	masstree/mtd.cc	/^    void put_col_key10(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
put_col_key10	masstree/mttest.cc	/^    void put_col_key10(long ikey, int col, long ivalue) {$/;"	f	struct:kvtest_client
put_fn	masstree/mtclient.cc	/^	put_async_cb put_fn;$/;"	m	union:async::__anon18	file:
put_key10	masstree/mtclient.cc	/^    void put_key10(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put_key10	masstree/mtd.cc	/^    void put_key10(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put_key16	masstree/mttest.cc	/^    void put_key16(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put_key8	masstree/mtclient.cc	/^    void put_key8(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put_key8	masstree/mtd.cc	/^    void put_key8(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put_key8	masstree/mttest.cc	/^    void put_key8(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
put_sync	masstree/mtclient.cc	/^    void put_sync(long ikey, long ivalue) {$/;"	f	struct:kvtest_client
puts_done	masstree/mtclient.cc	/^    void puts_done() {$/;"	f	struct:kvtest_client
puts_done	masstree/mtd.cc	/^    void puts_done() {$/;"	f	struct:kvtest_client
puts_done	masstree/mttest.cc	/^    void puts_done() {$/;"	f	struct:kvtest_client
pv	masstree/clp.h	/^	void *pv;$/;"	m	union:Clp_Parser::__anon9
px	marked_ptr.h	/^  uintptr_t px;$/;"	m	class:marked_ptr
px	txn_btree.h	/^    std::string *px;$/;"	m	class:txn_btree_::single_value_reader
px	txn_btree.h	/^    std::string *px;$/;"	m	class:txn_btree_::value_reader
px_begin	record/cursor.h	/^  const uint8_t *px_begin;$/;"	m	struct:read_record_cursor
px_begin	record/cursor.h	/^  uint8_t *px_begin;$/;"	m	struct:write_record_cursor
px_cur	record/cursor.h	/^  const uint8_t *px_cur;$/;"	m	struct:read_record_cursor
px_cur	record/cursor.h	/^  uint8_t *px_cur;$/;"	m	struct:write_record_cursor
px_end	record/cursor.h	/^  uint8_t *px_end;$/;"	m	struct:write_record_cursor
pxs_	persist_test.cc	/^  vector<pbuffer *> pxs_; \/\/ just some scratch space$/;"	m	class:onecopy_logbased_simulation	file:
q_	masstree/kvrow.hh	/^    query<R> &q_;$/;"	m	class:query_json_scanner
q_	masstree/mtd.cc	/^    query<row_type> q_[10];$/;"	m	struct:kvtest_client	file:
q_	masstree/mttest.cc	/^    query<row_type> q_[1];$/;"	m	struct:kvtest_client	file:
qtimes_	masstree/kvrow.hh	/^    loginfo::query_times qtimes_;$/;"	m	class:query
qtr	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               qtr;$/;"	m	struct:TPCE::TFinInfo
qtr_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        qtr_ind;$/;"	m	struct:TPCE::TFinInfo
qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               qty[max_hist_len];$/;"	m	struct:TPCE::TCustomerPositionFrame2Output
qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               qty[max_hist_len];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
quantity	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               quantity;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
quantity	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               quantity;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
quantity_after	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               quantity_after;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
quantity_after_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        quantity_after_ind;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
quantity_before	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               quantity_before;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
quantity_before_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        quantity_before_ind;$/;"	m	struct:TPCE::TTradeLookupFrame4TradeInfo
quantity_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        quantity_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
quantity_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        quantity_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
query	masstree/kvrow.hh	/^class query {$/;"	c
query_helper	masstree/kvrow.hh	/^struct query_helper {$/;"	s
query_helper	masstree/value_versioned_array.hh	/^    query_helper()$/;"	f	struct:query_helper
query_helper	masstree/value_versioned_array.hh	/^struct query_helper<value_versioned_array> {$/;"	s
query_json_scanner	masstree/kvrow.hh	/^    query_json_scanner(query<R> &q, lcdf::Json& request)$/;"	f	class:query_json_scanner
query_json_scanner	masstree/kvrow.hh	/^class query_json_scanner {$/;"	c
query_table	masstree/query_masstree.hh	/^    query_table() {$/;"	f	class:Masstree::query_table
query_table	masstree/query_masstree.hh	/^class query_table {$/;"	c	namespace:Masstree
query_times	masstree/kvrow.hh	/^    const loginfo::query_times& query_times() const {$/;"	f	class:query
query_times	masstree/log.hh	/^    struct query_times {$/;"	s	class:loginfo
queue_bench_runner	benchmarks/queue.cc	/^  queue_bench_runner(abstract_db *db, bool write_only)$/;"	f	class:queue_bench_runner
queue_bench_runner	benchmarks/queue.cc	/^class queue_bench_runner : public bench_runner {$/;"	c	file:
queue_do_test	benchmarks/queue.cc	/^queue_do_test(abstract_db *db, int argc, char **argv)$/;"	f
queue_key	benchmarks/queue.cc	/^queue_key(uint64_t id0, uint64_t id1)$/;"	f	file:
queue_table_loader	benchmarks/queue.cc	/^  queue_table_loader(unsigned long seed,$/;"	f	class:queue_table_loader
queue_table_loader	benchmarks/queue.cc	/^class queue_table_loader : public bench_loader {$/;"	c	file:
queue_worker	benchmarks/queue.cc	/^  queue_worker(unsigned int worker_id,$/;"	f	class:queue_worker
queue_worker	benchmarks/queue.cc	/^class queue_worker : public bench_worker {$/;"	c	file:
quick_istr	benchmarks/masstree/kvtest.cc	/^  inline quick_istr()$/;"	f	struct:quick_istr
quick_istr	benchmarks/masstree/kvtest.cc	/^  inline quick_istr(unsigned long x, int minlen = 0)$/;"	f	struct:quick_istr
quick_istr	benchmarks/masstree/kvtest.cc	/^struct quick_istr {$/;"	s	file:
quick_istr	masstree/misc.hh	/^    quick_istr() {$/;"	f	struct:quick_istr
quick_istr	masstree/misc.hh	/^    quick_istr(unsigned long x, int minlen = 0) {$/;"	f	struct:quick_istr
quick_istr	masstree/misc.hh	/^struct quick_istr {$/;"	s
quiescent	masstree/log.hh	/^	bool quiescent;$/;"	m	struct:logreplay::info_type
quiescent	masstree/log.hh	/^inline bool loginfo::quiescent() const {$/;"	f	class:loginfo
quiescent_epoch_	masstree/log.hh	/^    kvepoch_t quiescent_epoch_; \/\/ epoch we went quiescent$/;"	m	class:loginfo
quiet	masstree/mtclient.cc	/^int quiet = 0;$/;"	v
quiet	masstree/mttest.cc	/^bool quiet = false;$/;"	v
quit_pipe	masstree/mtd.cc	/^static int quit_pipe[2];$/;"	v	file:
r	benchmarks/bench.h	/^  util::fast_random r;$/;"	m	class:bench_loader
r	benchmarks/bench.h	/^  util::fast_random r;$/;"	m	class:bench_worker
r	benchmarks/runner.py	/^    r = re.compile(r'out-(.*)\\.(masstree|silotree)')$/;"	v
r	txn.h	/^  transaction_base::abort_reason r;$/;"	m	class:transaction_abort_exception
r_	masstree/local_vector.hh	/^    rep r_;$/;"	m	class:local_vector
r_	masstree/straccum.hh	/^    rep_t r_;$/;"	m	class:lcdf::StringAccum
ra_deregister	dbcore/sm-alloc.cpp	/^	void ra_deregister()$/;"	f	namespace:RA
ra_is_registered	dbcore/sm-alloc.cpp	/^	bool ra_is_registered() {$/;"	f	namespace:RA
ra_register	dbcore/sm-alloc.cpp	/^	void ra_register()$/;"	f	namespace:RA
rand	dbcore/w_rand.cpp	/^uint32_t w_rand::rand() {$/;"	f	class:w_rand
rand	masstree/mtclient.cc	/^    kvrandom_random rand;$/;"	m	struct:kvtest_client	file:
rand	masstree/mtd.cc	/^    kvrandom_lcg_nr rand;$/;"	m	struct:kvtest_client	file:
rand	masstree/mttest.cc	/^    kvrandom_lcg_nr rand;$/;"	m	struct:kvtest_client	file:
rand_type	benchmarks/masstree/kvtest.cc	/^  typedef kvrandom_lcg_nr rand_type;$/;"	t	struct:kvtest_rw1	file:
randn	dbcore/w_rand.cpp	/^uint32_t w_rand::randn(uint32_t a, uint32_t b) {$/;"	f	class:w_rand
randn	dbcore/w_rand.cpp	/^uint32_t w_rand::randn(uint32_t end) {$/;"	f	class:w_rand
rbegin	small_vector.h	/^  rbegin() const$/;"	f	class:small_vector
rbegin	small_vector.h	/^  rbegin()$/;"	f	class:small_vector
rbegin	static_vector.h	/^  rbegin() const$/;"	f	class:static_vector
rbegin	static_vector.h	/^  rbegin()$/;"	f	class:static_vector
rcu_active	dbcore/test-rcu-slist.cpp	/^rcu_active_list rcu_active;$/;"	v
rcu_active_list	dbcore/test-rcu-slist.cpp	/^typedef std::map<pthread_t, ptr_list**> rcu_active_list;$/;"	t	file:
rcu_alloc	dbcore/rcu.cpp	/^void *rcu_alloc(size_t nbytes) {$/;"	f	namespace:RCU
rcu_alloc	dbcore/rcu.h	/^rcu_alloc_on_decay rcu_alloc() { return rcu_alloc_on_decay(); }$/;"	f	namespace:RCU
rcu_alloc	dbcore/test-rcu-slist.cpp	/^void *RCU::rcu_alloc(size_t nbytes) { return std::malloc(nbytes); }$/;"	f	class:RCU
rcu_alloc_fail	dbcore/sm-exceptions.h	/^    rcu_alloc_fail(size_t n) : nbytes(n) { }$/;"	f	struct:rcu_alloc_fail
rcu_alloc_fail	dbcore/sm-exceptions.h	/^struct rcu_alloc_fail {$/;"	s
rcu_alloc_into	dbcore/rcu.h	/^void rcu_alloc_into(T *&ptr)$/;"	f	namespace:RCU
rcu_alloc_on_decay	dbcore/rcu.h	/^struct rcu_alloc_on_decay {$/;"	s	namespace:RCU
rcu_backtrace_callback	dbcore/rcu.cpp	/^_Unwind_Reason_Code rcu_backtrace_callback(_Unwind_Context *ctx, void*) {$/;"	f	namespace:RCU
rcu_block_list	dbcore/sm-log-alloc.h	/^    typedef rcu_slist<log_allocation> rcu_block_list;$/;"	t	struct:sm_log_alloc_mgr
rcu_callback	masstree/kvthread.hh	/^    typedef ::rcu_callback rcu_callback;$/;"	t	class:threadinfo
rcu_callback	masstree/kvthread.hh	/^struct rcu_callback {$/;"	s
rcu_callback	masstree_btree.h	/^    class rcu_callback {$/;"	c	class:simple_threadinfo
rcu_callback_function	masstree_btree.h	/^    static inline void rcu_callback_function(void* p) {$/;"	f	class:simple_threadinfo
rcu_cooling	dbcore/test-rcu-slist.cpp	/^std::vector<ptr_list*> rcu_cooling;$/;"	v
rcu_delete_p	dbcore/rcu.cpp	/^void rcu_delete_p(pointer *p) {$/;"	f	namespace:RCU
rcu_delete_v	dbcore/rcu.cpp	/^void rcu_delete_v(void *ptr) {$/;"	f	namespace:RCU
rcu_deregister	dbcore/rcu.cpp	/^void rcu_deregister() {$/;"	f	namespace:RCU
rcu_enter	dbcore/rcu.cpp	/^void rcu_enter() {$/;"	f	namespace:RCU
rcu_epoch_ended	dbcore/rcu.cpp	/^rcu_epoch_ended(void*, epoch_mgr::epoch_num x)$/;"	f	namespace:RCU
rcu_epoch_ended_thread	dbcore/rcu.cpp	/^rcu_epoch_ended_thread(void *, void *epoch_cookie, void *thread_cookie)$/;"	f	namespace:RCU
rcu_epoch_reclaimed	dbcore/rcu.cpp	/^rcu_epoch_reclaimed(void *, void *epoch_cookie)$/;"	f	namespace:RCU
rcu_exit	dbcore/rcu.cpp	/^void rcu_exit() {$/;"	f	namespace:RCU
rcu_free	dbcore/rcu.cpp	/^void rcu_free(void const* ptr) {$/;"	f	namespace:RCU
rcu_free	dbcore/test-rcu-slist.cpp	/^RCU::rcu_free(void const* p)$/;"	f	class:RCU
rcu_free_counts	dbcore/rcu.cpp	/^rcu_gc_info rcu_free_counts = {0,0,0};$/;"	m	namespace:RCU	file:
rcu_free_target	dbcore/rcu.cpp	/^rcu_gc_info rcu_free_target = {$/;"	m	namespace:RCU	file:
rcu_gc_info	dbcore/rcu.h	/^struct rcu_gc_info {$/;"	s	namespace:RCU
rcu_gc_threshold_nbytes	dbcore/rcu.cpp	/^size_t rcu_gc_threshold_nbytes = 10*RCU_THREAD_GC_THRESHOLD_NBYTES;$/;"	m	namespace:RCU	file:
rcu_gc_threshold_nobj	dbcore/rcu.cpp	/^size_t rcu_gc_threshold_nobj = 10*RCU_THREAD_GC_THRESHOLD_NOBJ;$/;"	m	namespace:RCU	file:
rcu_get_gc_info	dbcore/rcu.cpp	/^rcu_gc_info rcu_get_gc_info() {$/;"	f	namespace:RCU
rcu_get_tls	dbcore/rcu.cpp	/^rcu_get_tls(void*)$/;"	f	namespace:RCU
rcu_global_gc_stats	dbcore/rcu.cpp	/^rcu_gc_info rcu_global_gc_stats = {0,0,0};$/;"	m	namespace:RCU	file:
rcu_global_init	dbcore/rcu.cpp	/^rcu_global_init(void*)$/;"	f	namespace:RCU
rcu_imstring	imstring.h	/^typedef base_imstring<true>  rcu_imstring;$/;"	t
rcu_is_active	dbcore/rcu.cpp	/^bool rcu_is_active() {$/;"	f	namespace:RCU
rcu_is_active	dbcore/test-rcu-slist.cpp	/^bool RCU::rcu_is_active() { return tls_rcu_active != NULL; }$/;"	f	class:RCU
rcu_is_registered	dbcore/rcu.cpp	/^bool rcu_is_registered() {$/;"	f	namespace:RCU
rcu_new_decay	dbcore/rcu.h	/^    rcu_new_decay(Tuple t) : tup(std::move(t)) { }$/;"	f	struct:RCU::rcu_new_decay
rcu_new_decay	dbcore/rcu.h	/^struct rcu_new_decay : rcu_new_sentinel {$/;"	s	namespace:RCU
rcu_new_helper	dbcore/rcu.h	/^struct rcu_new_helper : rcu_new_helper<N-1, Tuple, N-1, i...> { };$/;"	s	namespace:RCU
rcu_new_helper	dbcore/rcu.h	/^struct rcu_new_helper<0, Tuple, i...> { typedef rcu_new_decay<Tuple, i...> type; };$/;"	s	namespace:RCU
rcu_new_sentinel	dbcore/rcu.h	/^    rcu_new_sentinel() { }$/;"	f	class:RCU::rcu_new_sentinel
rcu_new_sentinel	dbcore/rcu.h	/^class rcu_new_sentinel {$/;"	c	namespace:RCU
rcu_pointer	dbcore/rcu.h	/^union rcu_pointer {$/;"	u	namespace:RCU
rcu_quiesce	dbcore/rcu.cpp	/^void rcu_quiesce() {$/;"	f	namespace:RCU
rcu_quiesce	dbcore/test-rcu-slist.cpp	/^RCU::rcu_quiesce()$/;"	f	class:RCU
rcu_quiesce	masstree/kvthread.hh	/^    void rcu_quiesce() {$/;"	f	class:threadinfo
rcu_quiesce	masstree/mtclient.cc	/^    void rcu_quiesce() {$/;"	f	struct:kvtest_client
rcu_quiesce	masstree/mtd.cc	/^    void rcu_quiesce() {$/;"	f	struct:kvtest_client
rcu_quiesce	masstree/mttest.cc	/^    void rcu_quiesce() {$/;"	f	struct:kvtest_client
rcu_read	dbcore/rcu.h	/^T *rcu_read(T *ptr) {$/;"	f	namespace:RCU
rcu_region	btree.h	/^      disabled_rcu_region>::type rcu_region;$/;"	t	class:btree
rcu_register	dbcore/rcu.cpp	/^void rcu_register() {$/;"	f	namespace:RCU
rcu_register	dbcore/test-rcu-slist.cpp	/^RCU::rcu_register()$/;"	f	class:RCU
rcu_register	masstree/kvthread.hh	/^    void rcu_register(rcu_callback* cb) {$/;"	f	class:threadinfo
rcu_register	masstree_btree.h	/^    void rcu_register(rcu_callback *cb) {$/;"	f	class:simple_threadinfo
rcu_set_gc_threshold	dbcore/rcu.cpp	/^void rcu_set_gc_threshold(size_t nobj, size_t nbytes) {$/;"	f	namespace:RCU
rcu_slist	dbcore/rcu-slist.h	/^struct rcu_slist {$/;"	s
rcu_sprintf	dbcore/rcu.cpp	/^char const *rcu_sprintf(char const *msg, ...) {$/;"	f	namespace:RCU
rcu_start	masstree/kvthread.hh	/^    void rcu_start() {$/;"	f	class:threadinfo
rcu_start_tls_cache	dbcore/rcu.cpp	/^void rcu_start_tls_cache(size_t nbytes, size_t nentries) {$/;"	f	namespace:RCU
rcu_stop	masstree/kvthread.hh	/^    void rcu_stop() {$/;"	f	class:threadinfo
rcu_stop_tls_cache	dbcore/rcu.cpp	/^void rcu_stop_tls_cache(size_t nbytes) {$/;"	f	namespace:RCU
rcu_tcb	dbcore/rcu.cpp	/^struct rcu_tcb {$/;"	s	namespace:RCU	file:
rcu_thread_deregistered	dbcore/rcu.cpp	/^rcu_thread_deregistered(void*, void *thread_cookie)$/;"	f	namespace:RCU
rcu_thread_registered	dbcore/rcu.cpp	/^rcu_thread_registered(void*)$/;"	f	namespace:RCU
rcu_unwind	dbcore/rcu.cpp	/^void rcu_unwind(char const *msg) {$/;"	f	namespace:RCU
rcu_unwind	dbcore/test-rcu-slist.cpp	/^void RCU::rcu_unwind(char const *msg) {$/;"	f	class:RCU
rcu_vsprintf	dbcore/rcu.cpp	/^char const *rcu_vsprintf(char const *msg, va_list ap) {$/;"	f	namespace:RCU
rcu_zombie_lists	dbcore/rcu.cpp	/^pointer_list *rcu_zombie_lists = 0;$/;"	m	namespace:RCU	file:
rdtsc	amd64.h	/^rdtsc(void)$/;"	f
reach_leaf	masstree/masstree_struct.hh	/^inline leaf<P>* node_base<P>::reach_leaf(const key_type& ka,$/;"	f	class:Masstree::node_base
read	record/inline_str.h	/^  read(const uint8_t *buf, obj_type *obj)$/;"	f	struct:serializer
read	record/serializer.h	/^  read(const uint8_t *buf, T *obj)$/;"	f	struct:serializer
read	record/serializer.h	/^  read(const uint8_t *buf, int32_t *obj)$/;"	f	struct:serializer
read	record/serializer.h	/^  read(const uint8_t *buf, uint32_t *obj)$/;"	f	struct:serializer
read	record/serializer.h	/^  read(const uint8_t *buf, uint8_t *obj)$/;"	f	struct:generic_serializer
read_array_header	masstree/msgpack.hh	/^    inline parser& read_array_header(unsigned& size) {$/;"	f	class:msgpack::parser
read_begin	dbcore/window-buffer.h	/^    size_t read_begin() { return _head; }$/;"	f	struct:window_buffer
read_buf	dbcore/window-buffer.h	/^    char const *read_buf(size_t offset, size_t size) {$/;"	f	struct:window_buffer
read_checkpoint	masstree/mtd.cc	/^kvepoch_t read_checkpoint(threadinfo *ti, const char *path) {$/;"	f
read_current_and_advance	record/cursor.h	/^  read_current_and_advance(value_type *v)$/;"	f	struct:read_record_cursor
read_current_raw_size_and_advance	record/cursor.h	/^  read_current_raw_size_and_advance()$/;"	f	struct:read_record_cursor
read_end	dbcore/window-buffer.h	/^    size_t read_end() { return _tail; }$/;"	f	struct:window_buffer
read_file	masstree/mttest.cc	/^read_file(FILE *f, const char *name)$/;"	f	file:
read_file_contents	masstree/file.cc	/^lcdf::String read_file_contents(const char *filename) {$/;"	f
read_file_contents	masstree/file.cc	/^lcdf::String read_file_contents(int fd) {$/;"	f
read_in_host_order	masstree/compiler.hh	/^inline T read_in_host_order(const char* s) {$/;"	f
read_in_host_order	masstree/compiler.hh	/^inline T read_in_host_order(const uint8_t* s) {$/;"	f
read_in_net_order	masstree/compiler.hh	/^inline T read_in_net_order(const char* s) {$/;"	f
read_in_net_order	masstree/compiler.hh	/^inline T read_in_net_order(const uint8_t* s) {$/;"	f
read_int	masstree/msgpack.hh	/^    inline parser& read_int(T& x) {$/;"	f	class:msgpack::parser
read_only_perf_test	btree.cc	/^read_only_perf_test()$/;"	f	file:
read_only_perf_test_ns	btree.cc	/^namespace read_only_perf_test_ns {$/;"	n	file:
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_kv_get_put_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_kv_scan_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_read_only_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_tpcc_credit_check_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_tpcc_delivery_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_tpcc_new_order_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_tpcc_order_status_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_tpcc_payment_traits
read_own_writes	benchmarks/ndb_wrapper_impl.h	/^  static const bool read_own_writes = false;$/;"	m	struct:hint_tpcc_stock_level_traits
read_pmc	masstree/compiler.hh	/^inline uint64_t read_pmc(uint32_t ecx) {$/;"	f
read_record_cursor	record/cursor.h	/^  read_record_cursor(const uint8_t *px, size_t nbytes)$/;"	f	struct:read_record_cursor
read_record_cursor	record/cursor.h	/^struct read_record_cursor {$/;"	s
read_record_t	txn.h	/^    read_record_t() : tuple(NULL), btr(NULL), oid(0) {}$/;"	f	struct:transaction::read_record_t
read_record_t	txn.h	/^    read_record_t(dbtuple *n, concurrent_btree *b, oid_type o) :$/;"	f	struct:transaction::read_record_t
read_record_t	txn.h	/^  struct read_record_t {$/;"	s	class:transaction
read_set	txn.h	/^  read_set_map read_set;$/;"	m	class:transaction
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 100;$/;"	m	struct:hint_kv_scan_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 175;$/;"	m	struct:hint_tpcc_delivery_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 1;$/;"	m	struct:hint_kv_get_put_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 1;$/;"	m	struct:hint_read_only_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 35;$/;"	m	struct:hint_tpcc_new_order_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 500;$/;"	m	struct:hint_tpcc_stock_level_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 85;$/;"	m	struct:hint_tpcc_payment_traits
read_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t read_set_expected_size = 95;$/;"	m	struct:hint_tpcc_order_status_traits
read_set_map	txn.h	/^  typedef std::vector<read_record_t> read_set_map;$/;"	t	class:transaction
read_set_map	txn_proto2_impl.h	/^  typedef typename super_type::read_set_map read_set_map;$/;"	t	class:transaction_proto2
read_superpage_size	masstree/kvthread.cc	/^static size_t read_superpage_size() {$/;"	f	file:
read_tiny_int	masstree/msgpack.hh	/^    inline int read_tiny_int() {$/;"	f	class:msgpack::parser
read_tiny_int	masstree/msgpack.hh	/^    inline parser& read_tiny_int(int& x) {$/;"	f	class:msgpack::parser
read_trace_record	dbcore/sm-trace.cpp	/^struct read_trace_record {$/;"	s	namespace:TRACER	file:
read_tsc	masstree/compiler.hh	/^inline uint64_t read_tsc(void)$/;"	f
read_uvint32	varint.h	/^read_uvint32(const uint8_t *buf, uint32_t *value)$/;"	f
read_uvint32_slow	varint.h	/^read_uvint32_slow(const uint8_t *buf, uint32_t *value)$/;"	f
readall	fileutils.h	/^  readall(int fd, char *buf, int n)$/;"	f	class:fileutils
readers_list	dbcore/ssn.h	/^    readers_list() {$/;"	f	struct:TXN::readers_list
readers_list	dbcore/ssn.h	/^struct readers_list {$/;"	s	namespace:TXN
readonly_lines_func	benchmarks/results/make_graphs-3.py	/^    def readonly_lines_func(config):$/;"	f
ready_for_safe_point	dbcore/epoch.cpp	/^    bool ready_for_safe_point = true;$/;"	m	struct:epoch_mgr::private_state	file:
ready_timeouts	masstree/mttest.cc	/^    void ready_timeouts() {$/;"	f	struct:test_thread
real_data	masstree/string.hh	/^	char real_data[8];	\/\/ but it might be more or less$/;"	m	struct:lcdf::String::memo_type
reason	txn.h	/^  abort_reason reason;$/;"	m	class:transaction_base
rec1	masstree/mtclient.cc	/^rec1(struct child *c)$/;"	f
rec2	masstree/mtclient.cc	/^rec2(struct child *c)$/;"	f
rec_ckp_max_epoch	masstree/log.cc	/^kvepoch_t rec_ckp_max_epoch;$/;"	v
rec_ckp_min_epoch	masstree/log.cc	/^kvepoch_t rec_ckp_min_epoch;$/;"	v
rec_cond	masstree/mtd.cc	/^static pthread_cond_t rec_cond;$/;"	v	file:
rec_log_infos	masstree/log.cc	/^logreplay::info_type *rec_log_infos;$/;"	v
rec_mu	masstree/mtd.cc	/^pthread_mutex_t rec_mu;$/;"	v
rec_nactive	masstree/mtd.cc	/^static int rec_nactive;$/;"	v	file:
rec_replay_max_epoch	masstree/log.cc	/^kvepoch_t rec_replay_max_epoch;$/;"	v
rec_replay_min_epoch	masstree/log.cc	/^kvepoch_t rec_replay_min_epoch;$/;"	v
rec_replay_min_quiescent_last_epoch	masstree/log.cc	/^kvepoch_t rec_replay_min_quiescent_last_epoch;$/;"	v
rec_state	masstree/mtd.cc	/^static int rec_state = REC_NONE;$/;"	v	file:
receive	masstree/mtclient.hh	/^    const Json& receive() {$/;"	f	class:KVConn
receive	masstree/mtd.cc	/^    Json& receive() {$/;"	f	struct:conn
recent_string	masstree/mtd.cc	/^    Str recent_string(uint64_t xposition) const {$/;"	f	struct:conn
reclaim_before	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::reclaim_before(uint32_t segnum)$/;"	f	class:sm_log_file_mgr
reclaimed_stash	dbcore/rcu.cpp	/^    pointer_list *reclaimed_stash;$/;"	m	struct:RCU::rcu_tcb	file:
record	dbcore/sm-trace.cpp	/^record(uint64_t xid, char op, uintptr_t oid_array, uint32_t oid,$/;"	f	namespace:TRACER
record	dbcore/test-sc-hash.cpp	/^    void record(double x) {$/;"	f	struct:mvar_tracker
record	masstree/log.cc	/^void loginfo::record(int command, const query_times& qtimes, Str key,$/;"	f	class:loginfo
record	masstree/log.cc	/^void loginfo::record(int command, const query_times& qtimes,$/;"	f	class:loginfo
record	scopedperf.hh	/^  void record(uint cpuid, uint64_t *s) {$/;"	f	class:scopedperf::perfsum_ctr
record	scopedperf.hh	/^  void record(uint cpuid, uint64_t *s) {$/;"	f	class:scopedperf::perfsum_hist_tmpl
record_rcu	masstree/kvthread.hh	/^    void record_rcu(void* ptr, int freetype) {$/;"	f	class:threadinfo
record_scan	dbcore/sm-log.h	/^        record_scan() { }$/;"	f	struct:sm_log_scan_mgr::record_scan
record_scan	dbcore/sm-log.h	/^    struct record_scan {$/;"	s	struct:sm_log_scan_mgr
record_type	dbcore/sm-log.h	/^    enum record_type { LOG_INSERT, LOG_UPDATE, LOG_RELOCATE, LOG_DELETE };$/;"	g	struct:sm_log_scan_mgr
records	dbcore/sm-log-defs.h	/^    log_record records[1];$/;"	m	struct:log_block
records	dbcore/test-sm-log.cpp	/^    std::map<OID, Entry> records;$/;"	m	struct:db_file	file:
recover	masstree/mtd.cc	/^recover(threadinfo *)$/;"	f
recovercheckpoint	masstree/mtd.cc	/^void recovercheckpoint(threadinfo *ti) {$/;"	f
recovering	masstree/mtd.cc	/^volatile bool recovering = false; \/\/ so don't add log entries, and free old value immediately$/;"	v
recovering	masstree/mttest.cc	/^volatile bool recovering = false; \/\/ so don't add log entries, and free old value immediately$/;"	v
recovery_only	masstree/mtd.cc	/^static bool recovery_only = false;$/;"	v	file:
recphase	masstree/mtd.cc	/^recphase(int nactive, int state)$/;"	f
recursive_delete	btree_impl.h	/^btree<P>::recursive_delete(node *n)$/;"	f	class:btree
recvpkt	stats_common.h	/^  recvpkt(int fd)$/;"	f	class:stats_command::packet
ref	masstree/json.hh	/^inline void Json::ComplexJson::ref() {$/;"	f	class:lcdf::Json::ComplexJson
ref	masstree/string.hh	/^        inline void ref() const {$/;"	f	struct:lcdf::String::rep_type
ref	small_unordered_map.h	/^    ref() const$/;"	f	struct:small_unordered_map::bucket
ref	small_unordered_map.h	/^    ref()$/;"	f	struct:small_unordered_map::bucket
ref	static_unordered_map.h	/^    ref() const$/;"	f	struct:static_unordered_map::bucket
ref	static_unordered_map.h	/^    ref()$/;"	f	struct:static_unordered_map::bucket
refcount	masstree/json.hh	/^	int refcount;$/;"	m	struct:lcdf::Json::ComplexJson
refcount	masstree/string.hh	/^	volatile uint32_t refcount;$/;"	m	struct:lcdf::String::memo_type
reference	small_unordered_map.h	/^  typedef T & reference;$/;"	t	class:small_unordered_map
reference	small_vector.h	/^  typedef T & reference;$/;"	t	class:small_vector
reference	static_unordered_map.h	/^  typedef T & reference;$/;"	t	class:static_unordered_map
reference	static_vector.h	/^  typedef T & reference;$/;"	t	class:static_vector
reference_type	masstree/json.hh	/^    typedef const Json& reference_type;$/;"	t	class:lcdf::Json::array_iterator
reference_type	masstree/json.hh	/^    typedef const Json& reference_type;$/;"	t	class:lcdf::Json::const_array_iterator
reference_type	masstree/json.hh	/^    typedef const value_type& reference_type;$/;"	t	class:lcdf::Json::const_iterator
reference_type	masstree/json.hh	/^    typedef const value_type& reference_type;$/;"	t	class:lcdf::Json::const_object_iterator
reference_type	masstree/json.hh	/^    typedef value_type& reference_type;$/;"	t	class:lcdf::Json::iterator
reference_type	masstree/json.hh	/^    typedef value_type& reference_type;$/;"	t	class:lcdf::Json::object_iterator
refill_pool	masstree/kvthread.cc	/^void threadinfo::refill_pool(int nl) {$/;"	f	class:threadinfo
refill_rcu	masstree/kvthread.cc	/^void threadinfo::refill_rcu()$/;"	f	class:threadinfo
region	btree.cc	/^  string region;$/;"	m	class:scoped_rate_timer	file:
region	util.h	/^  std::string region;$/;"	m	class:util::scoped_timer
register_count	dbcore/rcu.cpp	/^    int register_count;$/;"	m	struct:RCU::rcu_tcb	file:
register_table	dbcore/sm-trace.cpp	/^register_table(uintptr_t array, std::string name)$/;"	f	namespace:TRACER
register_timeouts	masstree/mtclient.cc	/^    void register_timeouts(int n) {$/;"	f	struct:kvtest_client
register_timeouts	masstree/mtd.cc	/^    void register_timeouts(int n) {$/;"	f	struct:kvtest_client
rehash	masstree/json.cc	/^void Json::ObjectJson::rehash()$/;"	f	class:lcdf::Json::ObjectJson
relax_fence	masstree/compiler.hh	/^inline void relax_fence() {$/;"	f
relax_fence_function	masstree/compiler.hh	/^struct relax_fence_function {$/;"	s
release	benchmarks/egen/shore_tpce_egen.h	/^    void release() {\/*delete [] buffer;*\/}$/;"	f	class:TPCE::EgenTupleContainer
release	btree.h	/^    release(internal_node *n)$/;"	f	struct:btree::internal_node
release	btree.h	/^    release(leaf_node *n)$/;"	f	struct:btree::leaf_node
release	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::release(log_allocation *x)$/;"	f	class:sm_log_alloc_mgr
release	imstring.h	/^  release()$/;"	f	class:base_imstring
release	masstree/log.hh	/^inline void loginfo::release() {$/;"	f	class:loginfo
release	scopedperf.hh	/^  void release() {$/;"	f	class:scopedperf::scoped_spinlock
release	scopedperf.hh	/^  void release() {$/;"	f	class:scopedperf::spinlock
release_fence	masstree/compiler.hh	/^inline void release_fence() {$/;"	f
remaining_	persist_test.cc	/^  size_t remaining_; \/\/ number of deps remaining to compute$/;"	m	struct:pbuffer	file:
remove	benchmarks/abstract_ordered_index.h	/^  virtual void remove($/;"	f	class:abstract_ordered_index
remove	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::remove(void *txn, const std::string &key)$/;"	f	class:ndb_ordered_index
remove	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::remove(void *txn, std::string &&key)$/;"	f	class:ndb_ordered_index
remove	btree.h	/^  remove(const key_type &k, value_type *old_v = NULL)$/;"	f	class:btree
remove	dbcore/rcu-slist.cpp	/^_rcu_slist::remove(node *n)$/;"	f	class:_rcu_slist
remove	dbcore/rcu-slist.h	/^    bool remove(Node *n) { return self.remove(&n->_node); }$/;"	f	struct:rcu_slist
remove	masstree/kpermuter.hh	/^    void remove(int i) {$/;"	f	class:kpermuter
remove	masstree/mtclient.cc	/^    void remove(const Str &key) {$/;"	f	struct:kvtest_client
remove	masstree/mtclient.cc	/^    void remove(long ikey) {$/;"	f	struct:kvtest_client
remove	masstree/mtclient.cc	/^bool remove(struct child *c, const Str &key)$/;"	f
remove	masstree/mtd.cc	/^    void remove(int fd) {$/;"	f	class:tcpfds
remove	masstree/mtd.cc	/^    void remove(int fd) {$/;"	f	struct:tcpfds
remove	masstree/mttest.cc	/^    void remove(long ikey) {$/;"	f	struct:kvtest_client
remove	masstree/mttest.cc	/^void kvtest_client<T>::remove(const Str &key) {$/;"	f	class:kvtest_client
remove	masstree_btree.h	/^inline bool mbtree<P>::remove(const key_type &k, dbtuple * *old_v)$/;"	f	class:mbtree
remove	txn_btree.h	/^  remove(Transaction<Traits> &t, const key_type &k)$/;"	f	class:txn_btree
remove	txn_btree.h	/^  remove(Transaction<Traits> &t, const varkey &k)$/;"	f	class:txn_btree
remove	typed_txn_btree.h	/^typed_txn_btree<Transaction, Schema>::remove($/;"	f	class:typed_txn_btree
remove0	btree_impl.h	/^btree<P>::remove0(node *np,$/;"	f	class:btree
remove_and_kill	dbcore/rcu-slist.cpp	/^_rcu_slist::remove_and_kill(node *n)$/;"	f	class:_rcu_slist
remove_and_kill	dbcore/rcu-slist.h	/^    bool remove_and_kill(Node *n) { return self.remove_and_kill(&n->_node); }$/;"	f	struct:rcu_slist
remove_async_cb	masstree/mtclient.cc	/^typedef void (*remove_async_cb)(struct child *c, struct async *a,$/;"	t	file:
remove_fast	dbcore/rcu-slist.cpp	/^_rcu_slist::remove_fast(node *n)$/;"	f	class:_rcu_slist
remove_fast	dbcore/rcu-slist.h	/^    bool remove_fast(Node *n) { return self.remove_fast(&n->_node); }$/;"	f	struct:rcu_slist
remove_fn	masstree/mtclient.cc	/^	remove_async_cb remove_fn;$/;"	m	union:async::__anon18	file:
remove_key16	masstree/mttest.cc	/^    void remove_key16(long ikey) {$/;"	f	struct:kvtest_client
remove_key8	masstree/mttest.cc	/^    void remove_key8(long ikey) {$/;"	f	struct:kvtest_client
remove_leaf	masstree/masstree_remove.hh	/^bool tcursor<P>::remove_leaf(leaf_type* leaf, node_type* root,$/;"	f	class:Masstree::tcursor
remove_parent_entry	btree.h	/^    remove_parent_entry()$/;"	f	struct:btree::remove_parent_entry
remove_parent_entry	btree.h	/^    remove_parent_entry(node *parent,$/;"	f	struct:btree::remove_parent_entry
remove_parent_entry	btree.h	/^  struct remove_parent_entry {$/;"	s	class:btree
remove_pos_from_internal_node	btree.h	/^  remove_pos_from_internal_node($/;"	f	class:btree
remove_pos_from_leaf_node	btree.h	/^  remove_pos_from_leaf_node(leaf_node *leaf, size_t pos, size_t n)$/;"	f	class:btree
remove_stable_location	btree_impl.h	/^btree<P>::remove_stable_location(node **root_location, const key_type &k, value_type *old_v)$/;"	f	class:btree
remove_status	btree.h	/^  enum remove_status {$/;"	g	class:btree
remove_sync	masstree/mtclient.cc	/^    bool remove_sync(long ikey) {$/;"	f	struct:kvtest_client
remove_sync	masstree/mtd.cc	/^bool kvtest_client::remove_sync(long ikey) {$/;"	f	class:kvtest_client
remove_sync	masstree/mttest.cc	/^    bool remove_sync(long ikey) {$/;"	f	struct:kvtest_client
remove_sync	masstree/mttest.cc	/^bool kvtest_client<T>::remove_sync(const Str &key) {$/;"	f	class:kvtest_client
remove_to_back	masstree/kpermuter.hh	/^    void remove_to_back(int i) {$/;"	f	class:kpermuter
remove_worker	btree.cc	/^    remove_worker(const vector<string> &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test8_ns::remove_worker
remove_worker	btree.cc	/^    remove_worker(const vector<string> &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test_long_keys_ns::remove_worker
remove_worker	btree.cc	/^    remove_worker(const vector<typename testing_concurrent_btree::key_slice> &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test6_ns::remove_worker
remove_worker	btree.cc	/^  class remove_worker : public btree_worker {$/;"	c	namespace:mp_test6_ns	file:
remove_worker	btree.cc	/^  class remove_worker : public btree_worker {$/;"	c	namespace:mp_test8_ns	file:
remove_worker	btree.cc	/^  class remove_worker : public btree_worker {$/;"	c	namespace:mp_test_long_keys_ns	file:
removes	btree.cc	/^    key_set removes;$/;"	m	struct:mp_test5_ns::summary	file:
rend	small_vector.h	/^  rend() const$/;"	f	class:small_vector
rend	small_vector.h	/^  rend()$/;"	f	class:small_vector
rend	static_vector.h	/^  rend() const$/;"	f	class:static_vector
rend	static_vector.h	/^  rend()$/;"	f	class:static_vector
rep	masstree/local_vector.hh	/^    struct rep : public A {$/;"	s	class:local_vector
rep	masstree/local_vector.hh	/^inline local_vector<T, N, A>::rep::rep(const A& a)$/;"	f	class:local_vector::rep
rep_t	masstree/straccum.hh	/^	explicit rep_t(uninitialized_type) {$/;"	f	struct:lcdf::StringAccum::rep_t
rep_t	masstree/straccum.hh	/^	rep_t()$/;"	f	struct:lcdf::StringAccum::rep_t
rep_t	masstree/straccum.hh	/^    struct rep_t {$/;"	s	class:lcdf::StringAccum
rep_type	masstree/json.hh	/^    union rep_type {$/;"	u	class:lcdf::Json
rep_type	masstree/string.hh	/^    struct rep_type {$/;"	s	class:lcdf::String
replay	masstree/log.cc	/^logreplay::replay(int which, threadinfo *ti)$/;"	f	class:logreplay
replay_copy	masstree/log.cc	/^logreplay::replay_copy(const char *tmpname, const char *first, const char *last)$/;"	f	class:logreplay
replay_truncate	masstree/log.cc	/^logreplay::replay_truncate(size_t len)$/;"	f	class:logreplay
replayandclean1	masstree/log.cc	/^logreplay::replayandclean1(kvepoch_t min_epoch, kvepoch_t max_epoch,$/;"	f	class:logreplay
report	benchmarks/egen/bucketsimulator.cpp	/^bool BucketProgress::report(double stddev) {$/;"	f	class:TPCE::BucketProgress
report	masstree/mtclient.cc	/^    void report(const Json &result) {$/;"	f	struct:kvtest_client
report	masstree/mtd.cc	/^    void report(const Json &result) {$/;"	f	struct:kvtest_client
report	masstree/mttest.cc	/^    void report(const Json &result) {$/;"	f	struct:kvtest_client
report_rcu	masstree/kvthread.cc	/^void threadinfo::report_rcu(void *ptr) const$/;"	f	class:threadinfo
report_rcu_all	masstree/kvthread.cc	/^void threadinfo::report_rcu_all(void *ptr)$/;"	f	class:threadinfo
request_	masstree/kvrow.hh	/^    lcdf::Json& request_;$/;"	m	class:query_json_scanner
requested_price	benchmarks/egen/TxnHarnessStructs.h	/^    double          requested_price;$/;"	m	struct:TPCE::TTradeOrderTxnInput
requested_price	benchmarks/egen/TxnHarnessStructs.h	/^    double  requested_price;                \/\/ IN-OUT parameter$/;"	m	struct:TPCE::TTradeOrderFrame3Input
requested_price	benchmarks/egen/TxnHarnessStructs.h	/^    double  requested_price;            \/\/ IN-OUT parameter$/;"	m	struct:TPCE::TTradeOrderFrame3Output
requested_price	benchmarks/egen/TxnHarnessStructs.h	/^    double  requested_price;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
res	scripts/tester.py	/^    res = float(output.strip())$/;"	v
reserve	masstree/json.cc	/^void Json::reserve(size_type n) {$/;"	f	class:lcdf::Json
reserve	masstree/kvio.hh	/^inline char* kvout::reserve(int nchars) {$/;"	f	class:kvout
reserve	masstree/straccum.hh	/^inline char *StringAccum::reserve(int n) {$/;"	f	class:lcdf::StringAccum
reserve	small_vector.h	/^  reserve(size_t n)$/;"	f	class:small_vector
reserve	static_vector.h	/^  reserve(size_t n)$/;"	f	class:static_vector
reset	benchmarks/egen/shore_tpce_egen.h	/^    void reset() {size=0;}$/;"	f	class:TPCE::EgenTupleContainer
reset	benchmarks/masstree/kvrandom.hh	/^    void reset(seed_type seed) {$/;"	f	class:kvrandom_lcg_nr_simple
reset	benchmarks/masstree/kvrandom.hh	/^    void reset(seed_type seed) {$/;"	f	class:kvrandom_psdes_nr
reset	benchmarks/masstree/kvrandom.hh	/^    void reset(uint32_t seed) {$/;"	f	class:kvrandom_random
reset	dbcore/stopwatch.h	/^    uint64_t reset() {$/;"	f	class:stopwatch_t
reset	marked_ptr.h	/^  reset(U *px)$/;"	f	class:marked_ptr
reset	masstree/json.hh	/^inline void Json::streaming_parser::reset() {$/;"	f	class:lcdf::Json::streaming_parser
reset	masstree/kvrandom.hh	/^    void reset(seed_type seed) {$/;"	f	class:kvrandom_lcg_nr_simple
reset	masstree/kvrandom.hh	/^    void reset(seed_type seed) {$/;"	f	class:kvrandom_psdes_nr
reset	masstree/kvrandom.hh	/^    void reset(uint32_t seed) {$/;"	f	class:kvrandom_random
reset	masstree/msgpack.hh	/^inline void streaming_parser::reset() {$/;"	f	class:msgpack::streaming_parser
reset	masstree/mttest.cc	/^    void reset(const String &test, int trial) {$/;"	f	struct:kvtest_client
reset	record/cursor.h	/^  reset()$/;"	f	struct:read_record_cursor
reset	record/cursor.h	/^  reset()$/;"	f	struct:write_record_cursor
reset	scopedperf.hh	/^  void reset() \/* override *\/ {$/;"	f	class:scopedperf::perfsum_ctr
reset	scopedperf.hh	/^  void reset() \/* override *\/ {$/;"	f	class:scopedperf::perfsum_hist_tmpl
reset	str_arena.h	/^  reset()$/;"	f	class:str_arena
reset_all_counters	counter.cc	/^event_counter::reset_all_counters()$/;"	f	class:event_counter
reset_ntxn_persisted	benchmarks/abstract_db.h	/^  virtual void reset_ntxn_persisted() { }$/;"	f	class:abstract_db
reset_ref	masstree/string.hh	/^        inline void reset_ref() {$/;"	f	struct:lcdf::String::rep_type
reset_retry	masstree/masstree_tcursor.hh	/^    inline node_type* reset_retry() {$/;"	f	class:Masstree::tcursor
resetall	scopedperf.hh	/^  static void resetall() {$/;"	f	class:scopedperf::perfsum_base
resize	dbcore/dynarray.cpp	/^dynarray::resize(size_t new_size)$/;"	f	class:dynarray
resize	masstree/json.cc	/^void Json::resize(size_type n) {$/;"	f	class:lcdf::Json
resize	masstree/json.hh	/^    void resize(Json::size_type n) {$/;"	f	class:lcdf::Json_proxy_base
resize	masstree/straccum.cc	/^StringAccum::resize(int len)$/;"	f	class:lcdf::StringAccum
resize	record/inline_str.h	/^  resize(size_t n, char c = 0)$/;"	f	class:inline_str_base
resize	static_vector.h	/^  resize(size_t n, value_type val = value_type())$/;"	f	class:static_vector
resize_junk	record/inline_str.h	/^  resize_junk(size_t n)$/;"	f	class:inline_str_base
restrict	third-party/lz4/lz4.c	113;"	d	file:
restrict	third-party/lz4/lz4hc.c	99;"	d	file:
result	masstree/json.hh	/^inline Json& Json::streaming_parser::result() {$/;"	f	class:lcdf::Json::streaming_parser
result	masstree/json.hh	/^inline const Json& Json::streaming_parser::result() const {$/;"	f	class:lcdf::Json::streaming_parser
result	masstree/msgpack.hh	/^inline Json& streaming_parser::result() {$/;"	f	class:msgpack::streaming_parser
result	masstree/msgpack.hh	/^inline const Json& streaming_parser::result() const {$/;"	f	class:msgpack::streaming_parser
result_t	masstree/kvproto.hh	/^enum result_t {$/;"	g
result_type	dbcore/w_rand.h	/^    typedef uint32_t result_type;$/;"	t	struct:w_rand_urng
results	benchmarks/runner.py	/^  results = []$/;"	v
results	scripts/tester.py	/^  results = []$/;"	v
results	txn_btree.h	/^    results() const$/;"	f	class:txn_btree_::single_value_reader
results	txn_btree.h	/^    results() const$/;"	f	class:txn_btree_::value_reader
results	txn_btree.h	/^    results()$/;"	f	class:txn_btree_::single_value_reader
results	txn_btree.h	/^    results()$/;"	f	class:txn_btree_::value_reader
results	typed_txn_btree.h	/^    results() const$/;"	f	class:typed_txn_btree_::single_value_reader
results	typed_txn_btree.h	/^    results() const$/;"	f	class:typed_txn_btree_::value_reader
results	typed_txn_btree.h	/^    results()$/;"	f	class:typed_txn_btree_::single_value_reader
results	typed_txn_btree.h	/^    results()$/;"	f	class:typed_txn_btree_::value_reader
retry_aborted_transaction	benchmarks/bench.cc	/^int retry_aborted_transaction = 0;$/;"	v
return_last	str_arena.h	/^  return_last(std::string *px)$/;"	f	class:str_arena
return_last	util.h	/^  return_last(std::string *px)$/;"	f	struct:util::default_string_allocator
rev	benchmarks/egen/TxnHarnessStructs.h	/^    double              rev;$/;"	m	struct:TPCE::TFinInfo
rev_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        rev_ind;$/;"	m	struct:TPCE::TFinInfo
reverse_	btree.cc	/^    bool reverse_;$/;"	m	class:mp_test_long_keys_ns::scan_worker	file:
reverse_	btree.cc	/^    bool reverse_;$/;"	m	struct:test6_ns::scan_callback	file:
reverse_	btree.cc	/^  bool reverse_;$/;"	m	class:test_range_scan_helper	file:
reverse_	masstree/query_masstree.cc	/^    bool reverse_;$/;"	m	struct:Masstree::__anon23::scan_tester	file:
reverse_iterator	masstree/local_vector.hh	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:local_vector
reverse_iterator	small_vector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:small_vector
reverse_iterator	static_vector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:static_vector
reverse_scan_helper	masstree/masstree_scan.hh	/^    reverse_scan_helper()$/;"	f	struct:Masstree::reverse_scan_helper
reverse_scan_helper	masstree/masstree_scan.hh	/^struct reverse_scan_helper {$/;"	s	namespace:Masstree
rfds_	masstree/mtd.cc	/^    fd_set rfds_;$/;"	m	class:tcpfds	file:
rl_bitmap	tuple.h	/^  rl_bitmap_t rl_bitmap;   \/\/ bitmap of readers$/;"	m	struct:dbtuple
rl_bitmap_t	dbcore/ssn.cpp	/^typedef dbtuple::rl_bitmap_t rl_bitmap_t;$/;"	t	namespace:TXN	file:
rl_bitmap_t	tuple.h	/^  typedef unsigned int rl_bitmap_t;  \/\/ _builtin_ctz needs it to be uint$/;"	t	struct:dbtuple
rlist	dbcore/ssn.cpp	/^readers_list rlist;$/;"	m	namespace:TXN	file:
rm0_worker	btree.cc	/^    rm0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test2_ns::rm0_worker
rm0_worker	btree.cc	/^    rm0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test3_ns::rm0_worker
rm0_worker	btree.cc	/^    rm0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test4_ns::rm0_worker
rm0_worker	btree.cc	/^  class rm0_worker : public btree_worker {$/;"	c	namespace:mp_test2_ns	file:
rm0_worker	btree.cc	/^  class rm0_worker : public btree_worker {$/;"	c	namespace:mp_test3_ns	file:
rm0_worker	btree.cc	/^  class rm0_worker : public btree_worker {$/;"	c	namespace:mp_test4_ns	file:
rm1_worker	btree.cc	/^    rm1_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test2_ns::rm1_worker
rm1_worker	btree.cc	/^  class rm1_worker : public btree_worker {$/;"	c	namespace:mp_test2_ns	file:
rng	dbcore/w_rand.h	/^    w_rand &rng;$/;"	m	struct:w_rand_urng
ro_txns_extractor	benchmarks/results/make_graphs-6.py	/^    def ro_txns_extractor(enabled):$/;"	f
roll_it_back	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           roll_it_back;$/;"	m	struct:TPCE::TTradeOrderTxnInput
rollback	benchmarks/egen/DriverParamSettings.h	/^    INT32   rollback;$/;"	m	struct:TPCE::TTradeOrderSettings
rollback	benchmarks/egen/DriverParamSettings.h	/^    bool    rollback;$/;"	m	struct:TPCE::TTradeOrderSettingsState
root	masstree/masstree_struct.hh	/^inline node_base<P>* basic_table<P>::root() const {$/;"	f	class:Masstree::basic_table
root_	btree.h	/^  node *volatile root_;$/;"	m	class:btree
root_	masstree/masstree_remove.hh	/^    node_base<P>* root_;$/;"	m	struct:Masstree::destroy_rcu_callback
root_	masstree/masstree_remove.hh	/^    node_base<P>* root_;$/;"	m	struct:Masstree::gc_layer_rcu_callback
root_	masstree/masstree_scan.hh	/^    node_base<P> *root_;$/;"	m	class:Masstree::scanstackelt
root_	masstree/masstree_tcursor.hh	/^    const node_base<P>* root_;$/;"	m	class:Masstree::unlocked_tcursor
root_	masstree/masstree_tcursor.hh	/^    node_base<P>* root_;$/;"	m	class:Masstree::tcursor
root_bit	masstree/nodeversion.hh	/^	root_bit = (1U << 30),$/;"	e	enum:nodeversion32_parameters::__anon10
root_bit	masstree/nodeversion.hh	/^	root_bit = (1ULL << 62),$/;"	e	enum:nodeversion64_parameters::__anon11
root_oid_	masstree/masstree.hh	/^	oid_type root_oid_;$/;"	m	class:Masstree::basic_table
rotate	masstree/kpermuter.hh	/^    void rotate(int i, int j) {$/;"	f	class:kpermuter
round_down	util.h	/^round_down(T t)$/;"	f	namespace:util
round_up	util.h	/^round_up(T t)$/;"	f	namespace:util
round_up_to_pow2	log2.hh	/^round_up_to_pow2(std::size_t x)$/;"	f
round_up_to_pow2_const	log2.hh	/^round_up_to_pow2_const(std::size_t x)$/;"	f
row_delta_marker	masstree/log.hh	/^struct row_delta_marker : public row_marker {$/;"	s
row_get_delta_marker	masstree/log.hh	/^inline row_delta_marker<R>* row_get_delta_marker(const R* row, bool force = false) {$/;"	f
row_is_delta_marker	masstree/log.hh	/^inline bool row_is_delta_marker(const R* row) {$/;"	f
row_is_marker	masstree/kvproto.hh	/^inline bool row_is_marker(const R* row) {$/;"	f
row_marker	masstree/kvproto.hh	/^struct row_marker {$/;"	s
row_string	masstree/value_bag.hh	/^inline lcdf::Str value_bag<O>::row_string() const {$/;"	f	class:value_bag
row_type	masstree/kvrow.hh	/^typedef value_array row_type;$/;"	t
row_type	masstree/kvrow.hh	/^typedef value_bag<uint16_t> row_type;$/;"	t
row_type	masstree/kvrow.hh	/^typedef value_string row_type;$/;"	t
row_type	masstree/kvrow.hh	/^typedef value_versioned_array row_type;$/;"	t
rowversion	masstree/value_versioned_array.hh	/^    rowversion() {$/;"	f	struct:rowversion
rowversion	masstree/value_versioned_array.hh	/^    rowversion(value_t v)$/;"	f	struct:rowversion
rowversion	masstree/value_versioned_array.hh	/^struct rowversion {$/;"	s
rscale_ncores	masstree/mttest.cc	/^static int rscale_ncores = 0;$/;"	v	file:
rscale_partsz	masstree/mtclient.cc	/^static int rscale_partsz = 0;$/;"	v	file:
rscan	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::rscan($/;"	f	class:ndb_ordered_index
rscan	masstree/masstree_scan.hh	/^int basic_table<P>::rscan(Str firstkey, bool emit_firstkey,$/;"	f	class:Masstree::basic_table
rscan	masstree/query_masstree.cc	/^    int rscan(T& table, threadinfo& ti) {$/;"	f	struct:Masstree::__anon23::scan_tester
rscan_sync	masstree/mttest.cc	/^void kvtest_client<T>::rscan_sync(const Str &firstkey, int n,$/;"	f	class:kvtest_client
rsearch_range	btree.h	/^  rsearch_range(const key_type &upper,$/;"	f	class:btree
rsearch_range	masstree_btree.h	/^inline void mbtree<P>::rsearch_range(const key_type &upper,$/;"	f	class:mbtree
rsearch_range_call	btree.h	/^  rsearch_range_call(const key_type &upper,$/;"	f	class:btree
rsearch_range_call	masstree_btree.h	/^inline void mbtree<P>::rsearch_range_call(const key_type &upper,$/;"	f	class:mbtree
rsearch_range_call	txn_btree.h	/^  rsearch_range_call(Transaction<Traits> &t,$/;"	f	class:txn_btree
rsinit_part	masstree/mtclient.cc	/^static int rsinit_part = 0;$/;"	v	file:
rtrim	masstree/str.hh	/^    Str rtrim() const {$/;"	f	struct:lcdf::Str
rtrim	masstree/string.cc	/^String::rtrim() const$/;"	f	class:lcdf::String
rtrim	masstree/string_base.hh	/^inline typename T::substring_type String_generic::rtrim(const T &str) {$/;"	f	class:lcdf::String_generic
run	benchmarks/bench.cc	/^bench_runner::run()$/;"	f	class:bench_runner
run	benchmarks/bench.cc	/^bench_worker::run()$/;"	f	class:bench_worker
run	benchmarks/bench.h	/^  run()$/;"	f	class:bench_loader
run	benchmarks/egen/bucketsimulator.cpp	/^void BucketSimulator::run(void* thread UNUSED) {$/;"	f	class:TPCE::BucketSimulator
run	benchmarks/egen/threading_single.h	/^        void run() {$/;"	f	class:TPCE::Thread
run	benchmarks/masstree/kvtest.cc	/^  run()$/;"	f	class:kvtest_worker
run	btree.cc	/^    run()$/;"	f	class:mp_test_inserts_removes_ns::worker
run	btree.cc	/^    run()$/;"	f	class:mp_test_pinning_ns::worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test1_ns::ins0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test1_ns::ins1_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test2_ns::rm0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test2_ns::rm1_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test3_ns::ins0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test3_ns::rm0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test4_ns::ins0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test4_ns::rm0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test4_ns::search0_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test5_ns::worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test6_ns::insert_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test6_ns::remove_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test7_ns::lookup_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test7_ns::mod_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test7_ns::scan_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test8_ns::insert_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test8_ns::remove_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test_long_keys_ns::insert_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test_long_keys_ns::remove_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:mp_test_long_keys_ns::scan_worker
run	btree.cc	/^    virtual void run()$/;"	f	class:read_only_perf_test_ns::worker
run	btree.cc	/^    virtual void run()$/;"	f	class:write_only_perf_test_ns::worker
run	masstree/json.hh	/^    static inline void run(Json& j, I first, I last) {$/;"	f	struct:lcdf::Json_iterator_initializer
run	masstree/log.cc	/^void logrecord::run(T& table, std::vector<lcdf::Json>& jrepo, threadinfo& ti) {$/;"	f	class:logrecord
run	scripts/tester.py	/^def run(cmd):$/;"	f
run	thread.cc	/^ndb_thread::run()$/;"	f	class:ndb_thread
run_child	masstree/mtclient.cc	/^run_child(testrunner* test, int childno)$/;"	f
run_configuration	benchmarks/runner.py	/^def run_configuration($/;"	f
run_get	masstree/kvrow.hh	/^void query<R>::run_get(T& table, Json& req, threadinfo& ti) {$/;"	f	class:query
run_get1	masstree/kvrow.hh	/^bool query<R>::run_get1(T& table, Str key, int col, Str& value, threadinfo& ti) {$/;"	f	class:query
run_length	benchmarks/egen/EGenValidate.cpp	/^        INT64   run_length;$/;"	m	class:BucketSimOptions	file:
run_mode	benchmarks/bench.cc	/^int run_mode = RUNMODE_TIME;$/;"	v
run_one_test	masstree/mttest.cc	/^static void run_one_test(int trial, const char *treetype, const char *test,$/;"	f	file:
run_one_test_body	masstree/mttest.cc	/^static void run_one_test_body(int trial, const char *treetype, const char *test) {$/;"	f	file:
run_put	masstree/kvrow.hh	/^result_t query<R>::run_put(T& table, Str key,$/;"	f	class:query
run_remove	masstree/kvrow.hh	/^bool query<R>::run_remove(T& table, Str key, threadinfo& ti) {$/;"	f	class:query
run_replace	masstree/kvrow.hh	/^result_t query<R>::run_replace(T& table, Str key, Str value, threadinfo& ti) {$/;"	f	class:query
run_rscan	masstree/kvrow.hh	/^void query<R>::run_rscan(T& table, Json& request, threadinfo& ti) {$/;"	f	class:query
run_scan	masstree/kvrow.hh	/^void query<R>::run_scan(T& table, Json& request, threadinfo& ti) {$/;"	f	class:query
run_t	thread.h	/^  typedef void (*run_t)(void);$/;"	t	class:ndb_thread
running	benchmarks/bench.cc	/^volatile bool running = true;$/;"	v
running	btree.cc	/^  static volatile bool running = false;$/;"	m	namespace:mp_test7_ns	file:
running	btree.cc	/^  static volatile bool running = false;$/;"	m	namespace:mp_test_long_keys_ns	file:
running	btree.cc	/^  volatile bool running = false;$/;"	m	namespace:read_only_perf_test_ns	file:
runtest	masstree/mtd.cc	/^void runtest(const char *testname, int nthreads) {$/;"	f
runtest	masstree/mttest.cc	/^void runtest(int nthreads, void *(*func)(void *)) {$/;"	f
runtime	benchmarks/bench.cc	/^uint64_t runtime = 30;$/;"	v
ruscale_init_part_no	masstree/mtclient.cc	/^    int ruscale_init_part_no() const {$/;"	f	struct:kvtest_client
ruscale_init_part_no	masstree/mttest.cc	/^    int ruscale_init_part_no() const {$/;"	f	struct:kvtest_client
ruscale_partsz	masstree/mtclient.cc	/^    int ruscale_partsz() const {$/;"	f	struct:kvtest_client
ruscale_partsz	masstree/mttest.cc	/^    int ruscale_partsz() const {$/;"	f	struct:kvtest_client
s	dbcore/test-epoch.cpp	/^static state s;$/;"	v	file:
s	masstree/clp.h	/^	const char *s;$/;"	m	union:Clp_Parser::__anon9
s	masstree/mtclient.cc	/^    int s;$/;"	m	struct:child	file:
s	masstree/mtd.cc	/^    int s;$/;"	m	struct:conninfo	file:
s	masstree/str.hh	/^    char s[0];$/;"	m	struct:lcdf::inline_string
s	masstree/str.hh	/^    const char *s;$/;"	m	struct:lcdf::Str
s	masstree/straccum.hh	/^	unsigned char *s;$/;"	m	struct:lcdf::StringAccum::rep_t
s	masstree/string_slice.hh	/^	char s[sizeof(T)];$/;"	m	union:string_slice::union_type
s	scopedperf.hh	/^  uint64_t s[Perfsum::ps_nctr];$/;"	m	class:scopedperf::base_perf_region
s16_varkey	varkey.h	/^typedef obj_varkey<int16_t>  s16_varkey;$/;"	t
s32_varkey	varkey.h	/^typedef obj_varkey<int32_t>  s32_varkey;$/;"	t
s52_wk_high	benchmarks/egen/TxnHarnessStructs.h	/^    double              s52_wk_high;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
s52_wk_high_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    s52_wk_high_date;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
s52_wk_low	benchmarks/egen/TxnHarnessStructs.h	/^    double              s52_wk_low;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
s52_wk_low_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    s52_wk_low_date;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
s64_varkey	varkey.h	/^typedef obj_varkey<int64_t>  s64_varkey;$/;"	t
s8_varkey	varkey.h	/^typedef obj_varkey<int8_t>   s8_varkey;$/;"	t
s_	btree_impl.h	/^  S *s_;$/;"	m	class:string_restore
s_	masstree/log.hh	/^    char s_[0];$/;"	m	struct:row_delta_marker
s_	masstree/masstree_key.hh	/^    const char* s_;$/;"	m	class:Masstree::key
s_	masstree/masstree_remove.hh	/^    char s_[0];$/;"	m	struct:Masstree::gc_layer_rcu_callback
s_	masstree/msgpack.hh	/^    const uint8_t* s_;$/;"	m	class:msgpack::parser
s_	masstree/stringbag.hh	/^	char s_[0];$/;"	m	union:stringbag::__anon27
s_	masstree/value_bag.hh	/^	char s_[0];$/;"	m	union:value_bag::bagdata
s_	masstree/value_string.hh	/^    char s_[0];$/;"	m	class:value_string
s_i_ids	benchmarks/tpcc.cc	/^  small_unordered_map<uint, bool, 512> s_i_ids;$/;"	m	class:order_line_scan_callback	file:
s_instance	ticker.cc	/^ticker ticker::s_instance;$/;"	m	class:ticker	file:
s_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                s_name[cS_NAME_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
s_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                s_name[cS_NAME_len+1];$/;"	m	struct:TPCE::TTradeResultFrame6Input
s_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                s_name[cS_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
s_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                s_name[max_trade_status_len][cS_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
s_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    s_name[cS_NAME_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame3Output
s_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    s_name[cS_NAME_len+1];$/;"	m	struct:TPCE::TTradeResultFrame4Output
s_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        s_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
sa	txn.h	/^  string_allocator_type *sa;$/;"	m	class:transaction
safe_next	masstree/masstree_struct.hh	/^    leaf<P>* safe_next() const {$/;"	f	class:Masstree::leaf
safe_read	masstree/file.hh	/^safe_read(int fd, void *buf, size_t count)$/;"	f
safe_write	masstree/file.hh	/^safe_write(int fd, const void *buf, size_t count)$/;"	f
sample	scopedperf.hh	/^  static uint64_t sample() {$/;"	f	class:scopedperf::tsc_ctr
sample	scopedperf.hh	/^  static uint64_t sample() {$/;"	f	class:scopedperf::tscp_ctr
sample	scopedperf.hh	/^  uint64_t sample() const { return 0; }$/;"	f	class:scopedperf::zero_ctr
sample	scopedperf.hh	/^  uint64_t sample() const {$/;"	f	class:scopedperf::pmc_ctr
sample	scopedperf.hh	/^  uint64_t sample() const {$/;"	f	class:scopedperf::tod_ctr
sample_json	masstree/msgpacktest.cc	/^static const char sample_json[] = "{\\"name\\": \\"Deborah Estrin\\", \\"email\\": \\"estrin@usc.edu\\", \\"affiliation\\": \\"University of Southern California\\", \\"roles\\": [\\"pc\\"]}";$/;"	v	file:
sample_msgpack	masstree/msgpacktest.cc	/^static const char sample_msgpack[] = "\\204\\244name\\256Deborah Estrin\\245email\\256estrin@usc.edu\\253affiliation\\331!University of Southern California\\245roles\\221\\242pc";$/;"	v	file:
sanity_check	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::sanity_check()$/;"	f	class:sm_allocator
sc_hash_set	dbcore/sc-hash.h	/^    sc_hash_set(H &&hash, typename std::enable_if<std::is_convertible<H, hash_function>::value, dummy>::type dummy=dummy{})$/;"	f
sc_hash_set	dbcore/sc-hash.h	/^    sc_hash_set(typename std::enable_if<std::is_default_constructible<hash_function>::value, dummy>::type=dummy{})$/;"	f
sc_hash_set	dbcore/sc-hash.h	/^struct sc_hash_set {$/;"	s
scalaradd	benchmarks/results/make_graphs-5.py	/^    def scalaradd(x, s):$/;"	f	function:datafromfile
scale	benchmarks/results/make_graphs-5.py	/^    def scale(x, s):$/;"	f	function:datafromfile
scale	benchmarks/runner.py	/^def scale(x, a):$/;"	f
scale	scripts/tester.py	/^def scale(x, a):$/;"	f
scale_factor	benchmarks/bench.cc	/^double scale_factor = 1.0;$/;"	v
scale_tpcc	benchmarks/results/make_graphs-4.py	/^    scale_tpcc = filter_name(RESULTS, 'scale_tpcc')$/;"	v
scan	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::scan($/;"	f	class:ndb_ordered_index
scan	dbcore/sm-log-impl.h	/^    sm_log_recover_mgr::log_scanner scan;$/;"	m	struct:sm_log_header_scan_impl
scan	dbcore/sm-log-impl.h	/^    sm_log_recover_mgr::log_scanner scan;$/;"	m	struct:sm_log_record_scan_impl
scan	masstree/masstree_scan.hh	/^int basic_table<P>::scan(H helper,$/;"	f	class:Masstree::basic_table
scan	masstree/masstree_scan.hh	/^int basic_table<P>::scan(Str firstkey, bool emit_firstkey,$/;"	f	class:Masstree::basic_table
scan	masstree/query_masstree.cc	/^    int scan(T& table, threadinfo& ti) {$/;"	f	struct:Masstree::__anon23::scan_tester
scan_callback	benchmarks/abstract_ordered_index.h	/^  class scan_callback {$/;"	c	class:abstract_ordered_index
scan_callback	btree.cc	/^    scan_callback(kv_vec *data) : data(data) {}$/;"	f	struct:mp_test7_ns::scan_callback
scan_callback	btree.cc	/^    scan_callback(kv_vec *data, bool reverse = false)$/;"	f	struct:test6_ns::scan_callback
scan_callback	btree.cc	/^  struct scan_callback {$/;"	s	namespace:mp_test7_ns	file:
scan_callback	btree.cc	/^  struct scan_callback {$/;"	s	namespace:test6_ns	file:
scan_down	masstree/masstree_scan.hh	/^    enum { scan_emit, scan_find_next, scan_down, scan_up, scan_retry };$/;"	e	enum:Masstree::scanstackelt::__anon22
scan_emit	masstree/masstree_scan.hh	/^    enum { scan_emit, scan_find_next, scan_down, scan_up, scan_retry };$/;"	e	enum:Masstree::scanstackelt::__anon22
scan_find_next	masstree/masstree_scan.hh	/^    enum { scan_emit, scan_find_next, scan_down, scan_up, scan_retry };$/;"	e	enum:Masstree::scanstackelt::__anon22
scan_retry	masstree/masstree_scan.hh	/^    enum { scan_emit, scan_find_next, scan_down, scan_up, scan_retry };$/;"	e	enum:Masstree::scanstackelt::__anon22
scan_set	benchmarks/tpce.cc	/^		std::vector<std::string *> scan_set;$/;"	m	class:sector_scan_callback	file:
scan_sync	masstree/mttest.cc	/^void kvtest_client<T>::scan_sync(const Str &firstkey, int n,$/;"	f	class:kvtest_client
scan_tester	masstree/query_masstree.cc	/^    scan_tester(const char * const *vbegin, const char * const *vend,$/;"	f	struct:Masstree::__anon23::scan_tester
scan_tester	masstree/query_masstree.cc	/^struct scan_tester {$/;"	s	namespace:Masstree::__anon23	file:
scan_up	masstree/masstree_scan.hh	/^    enum { scan_emit, scan_find_next, scan_down, scan_up, scan_retry };$/;"	e	enum:Masstree::scanstackelt::__anon22
scan_worker	btree.cc	/^    scan_worker(const key_vec &keys, testing_concurrent_btree &btr)$/;"	f	class:mp_test7_ns::scan_worker
scan_worker	btree.cc	/^    scan_worker(const set<string> &ex, testing_concurrent_btree &btr, bool reverse)$/;"	f	class:mp_test_long_keys_ns::scan_worker
scan_worker	btree.cc	/^  class scan_worker : public btree_worker {$/;"	c	namespace:mp_test7_ns	file:
scan_worker	btree.cc	/^  class scan_worker : public btree_worker {$/;"	c	namespace:mp_test_long_keys_ns	file:
scankey_	masstree/kvrow.hh	/^    lcdf::String scankey_;$/;"	m	class:query
scankeypos_	masstree/kvrow.hh	/^    int scankeypos_;$/;"	m	class:query
scanner	dbcore/sm-log-recover.h	/^    sm_log_scan_mgr *scanner;$/;"	m	struct:sm_log_recover_mgr
scanstackelt	masstree/masstree_scan.hh	/^    scanstackelt() {$/;"	f	class:Masstree::scanstackelt
scanstackelt	masstree/masstree_scan.hh	/^class scanstackelt {$/;"	c	namespace:Masstree
scantest	masstree/mtclient.cc	/^scantest(struct child *c)$/;"	f
sched_getcpu	scopedperf.hh	/^static inline int sched_getcpu() {$/;"	f	namespace:scopedperf
schema	record/encoder.h	/^struct schema {$/;"	s
scoped_db_thread_ctx	benchmarks/bench.h	/^  scoped_db_thread_ctx(abstract_db *db, bool loader)$/;"	f	class:scoped_db_thread_ctx
scoped_db_thread_ctx	benchmarks/bench.h	/^class scoped_db_thread_ctx {$/;"	c
scoped_lock_guard	benchmarks/tpcc.cc	/^  inline scoped_lock_guard(T &l)$/;"	f	class:scoped_lock_guard
scoped_lock_guard	benchmarks/tpcc.cc	/^  inline scoped_lock_guard(T *l)$/;"	f	class:scoped_lock_guard
scoped_lock_guard	benchmarks/tpcc.cc	/^class scoped_lock_guard {$/;"	c	file:
scoped_multilock	benchmarks/tpcc.cc	/^  inline scoped_multilock()$/;"	f	class:scoped_multilock
scoped_multilock	benchmarks/tpcc.cc	/^class scoped_multilock {$/;"	c	file:
scoped_perf_region	scopedperf.hh	/^  scoped_perf_region(Perfsum *psarg, getcpu_fn getcpu)$/;"	f	class:scopedperf::scoped_perf_region
scoped_perf_region	scopedperf.hh	/^class scoped_perf_region : public base_perf_region<Perfsum> {$/;"	c	namespace:scopedperf
scoped_ra_region	dbcore/sm-alloc.h	/^    scoped_ra_region(void)$/;"	f	class:scoped_ra_region
scoped_ra_region	dbcore/sm-alloc.h	/^class scoped_ra_region {$/;"	c
scoped_rate_timer	btree.cc	/^  scoped_rate_timer(const string &region, size_t n) : region(region), n(n)$/;"	f	class:scoped_rate_timer
scoped_rate_timer	btree.cc	/^class scoped_rate_timer {$/;"	c	file:
scoped_rcu_region	rcu-wrapper.h	/^  scoped_rcu_region()$/;"	f	class:scoped_rcu_region
scoped_rcu_region	rcu-wrapper.h	/^class scoped_rcu_region {$/;"	c
scoped_recorder	tuple.h	/^    scoped_recorder(unsigned long &n) : n(&n) {}$/;"	f	struct:dbtuple::scoped_recorder
scoped_recorder	tuple.h	/^  struct scoped_recorder {$/;"	s	struct:dbtuple
scoped_spinlock	scopedperf.hh	/^  scoped_spinlock(spinlock *larg) : l(larg) {$/;"	f	class:scopedperf::scoped_spinlock
scoped_spinlock	scopedperf.hh	/^class scoped_spinlock {$/;"	c	namespace:scopedperf
scoped_str_arena	str_arena.h	/^  scoped_str_arena(str_arena &arena)$/;"	f	class:scoped_str_arena
scoped_str_arena	str_arena.h	/^  scoped_str_arena(str_arena *arena)$/;"	f	class:scoped_str_arena
scoped_str_arena	str_arena.h	/^class scoped_str_arena {$/;"	c
scoped_timer	util.h	/^  scoped_timer(const std::string &region, bool enabled = true)$/;"	f	class:util::scoped_timer
scoped_timer	util.h	/^class scoped_timer {$/;"	c	namespace:util
scopedperf	scopedperf.hh	/^namespace scopedperf {$/;"	n
score	benchmarks/runner.py	/^  def score(allocation):$/;"	f	function:allocate
se_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              se_amount;$/;"	m	struct:TPCE::TTradeResultFrame6Input
search	btree.h	/^  search(const key_type &k, value_type &v,$/;"	f	class:btree
search	masstree_btree.h	/^inline bool mbtree<P>::search(const key_type &k, oid_type &o, dbtuple* &v, XID xid,$/;"	f	class:mbtree
search	txn_btree.h	/^  search(Transaction<Traits> &t,$/;"	f	class:txn_btree
search	typed_txn_btree.h	/^typed_txn_btree<Transaction, Schema>::search($/;"	f	class:typed_txn_btree
search0_worker	btree.cc	/^    search0_worker(testing_concurrent_btree &btr) : btree_worker(btr) {}$/;"	f	class:mp_test4_ns::search0_worker
search0_worker	btree.cc	/^  class search0_worker : public btree_worker {$/;"	c	namespace:mp_test4_ns	file:
search_impl	btree_impl.h	/^btree<P>::search_impl(const key_type &k, value_type &v,$/;"	f	class:btree
search_range	btree.h	/^  search_range(const key_type &lower,$/;"	f	class:btree
search_range	masstree_btree.h	/^inline void mbtree<P>::search_range(const key_type &lower,$/;"	f	class:mbtree
search_range	txn_btree.h	/^  search_range(Transaction<Traits> &t,$/;"	f	class:txn_btree
search_range_at_layer	btree_impl.h	/^btree<P>::search_range_at_layer($/;"	f	class:btree
search_range_call	btree_impl.h	/^btree<P>::search_range_call(const key_type &lower,$/;"	f	class:btree
search_range_call	masstree_btree.h	/^inline void mbtree<P>::search_range_call(const key_type &lower,$/;"	f	class:mbtree
search_range_call	txn_btree.h	/^  search_range_call(Transaction<Traits> &t,$/;"	f	class:txn_btree
search_range_call	typed_txn_btree.h	/^typed_txn_btree<Transaction, Schema>::search_range_call($/;"	f	class:typed_txn_btree
search_range_callback	btree.h	/^  class search_range_callback : public low_level_search_range_callback {$/;"	c	class:btree
search_range_callback	masstree_btree.h	/^  class search_range_callback : public low_level_search_range_callback {$/;"	c	class:mbtree
search_range_callback	txn_btree.h	/^  struct search_range_callback {$/;"	s	class:txn_btree
search_range_callback	typed_txn_btree.h	/^  struct search_range_callback {$/;"	s	class:typed_txn_btree
search_range_scanner_base	masstree_btree.h	/^  search_range_scanner_base(const key_type* boundary)$/;"	f	class:mbtree::search_range_scanner_base
search_range_scanner_base	masstree_btree.h	/^class mbtree<P>::search_range_scanner_base {$/;"	c	class:mbtree
second	benchmarks/egen/DateTime.h	/^        UINT16   second;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
second	scopedperf.hh	/^  B second;$/;"	m	struct:scopedperf::pair
sectorTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CSectorTable*				sectorTable;$/;"	m	class:TPCE::CGenerateAndLoad
sector_name	benchmarks/egen/TxnHarnessStructs.h	/^    char            sector_name[cSC_NAME_len+1];$/;"	m	struct:TPCE::TBrokerVolumeTxnInput
sector_scan_callback	benchmarks/tpce.cc	/^		sector_scan_callback( str_arena* arena ) : _arena(arena) {}$/;"	f	class:sector_scan_callback
sector_scan_callback	benchmarks/tpce.cc	/^class sector_scan_callback : public abstract_ordered_index::scan_callback {$/;"	c	file:
securityTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CSecurityTable*				securityTable;$/;"	m	class:TPCE::CGenerateAndLoad
security_by_name	benchmarks/egen/DriverParamSettings.h	/^    INT32   security_by_name;$/;"	m	struct:TPCE::TTradeOrderSettings
security_by_name	benchmarks/egen/DriverParamSettings.h	/^    bool    security_by_name;$/;"	m	struct:TPCE::TTradeOrderSettingsState
security_by_symbol	benchmarks/egen/DriverParamSettings.h	/^    INT32   security_by_symbol;$/;"	m	struct:TPCE::TTradeOrderSettings
security_by_symbol	benchmarks/egen/DriverParamSettings.h	/^    bool    security_by_symbol;$/;"	m	struct:TPCE::TTradeOrderSettingsState
security_detail	benchmarks/tpce.cc	/^		txn_result security_detail()$/;"	f	class:tpce_worker
seed	btree.cc	/^    unsigned int seed;$/;"	m	class:mp_test5_ns::worker	file:
seed	btree.cc	/^    unsigned int seed;$/;"	m	class:read_only_perf_test_ns::worker	file:
seed	btree.cc	/^    unsigned int seed;$/;"	m	class:write_only_perf_test_ns::worker	file:
seed	btree.cc	/^    unsigned long seed;$/;"	m	class:mp_test7_ns::lookup_worker	file:
seed	dbcore/w_rand.cpp	/^void w_rand::seed(uint32_t const *w, size_t n) {$/;"	f	class:w_rand
seed	dbcore/w_rand.h	/^    void seed(uint32_t const (&w)[N]) { seed(w, N); }$/;"	f	struct:w_rand
seed	third-party/lz4/xxhash.c	/^    U32 seed;$/;"	m	struct:XXH_state32_t	file:
seed	util.h	/^  unsigned long seed;$/;"	m	class:util::fast_random
seed_	benchmarks/masstree/kvrandom.hh	/^    uint32_t seed_;$/;"	m	class:kvrandom_lcg_nr_simple
seed_	benchmarks/masstree/kvrandom.hh	/^    uint32_t seed_;$/;"	m	class:kvrandom_psdes_nr
seed_	masstree/kvrandom.hh	/^    uint32_t seed_;$/;"	m	class:kvrandom_lcg_nr_simple
seed_	masstree/kvrandom.hh	/^    uint32_t seed_;$/;"	m	class:kvrandom_psdes_nr
seed_type	benchmarks/masstree/kvrandom.hh	/^    typedef uint32_t seed_type;$/;"	t	class:kvrandom_lcg_nr_simple
seed_type	benchmarks/masstree/kvrandom.hh	/^    typedef uint32_t seed_type;$/;"	t	class:kvrandom_psdes_nr
seed_type	masstree/kvrandom.hh	/^    typedef uint32_t seed_type;$/;"	t	class:kvrandom_lcg_nr_simple
seed_type	masstree/kvrandom.hh	/^    typedef uint32_t seed_type;$/;"	t	class:kvrandom_psdes_nr
seeds	btree.cc	/^  unsigned long seeds[] = {$/;"	m	namespace:read_only_perf_test_ns	file:
seeds	btree.cc	/^  unsigned long seeds[] = {$/;"	m	namespace:write_only_perf_test_ns	file:
segment	dbcore/sm-common.h	/^    uint32_t segment() const { return (_val >> fat_ptr::ASI_START_BIT) & fat_ptr::ASI_SEGMENT_MASK; }$/;"	f	struct:LSN
segment_array	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::segment_array::segment_array() {$/;"	f	class:sm_log_file_mgr::segment_array
segment_array	dbcore/sm-log-file.h	/^    struct segment_array {$/;"	s	struct:sm_log_file_mgr
segment_assignment	dbcore/sm-log-offset.h	/^    struct segment_assignment {$/;"	s	struct:sm_log_offset_mgr
segment_change_mutex	dbcore/sm-log-segments.h	/^    pthread_mutex_t segment_change_mutex;$/;"	m	struct:log_segment_mgr
segment_close_size	dbcore/sm-log-segments.h	/^    uint64_t const segment_close_size;$/;"	m	struct:log_segment_mgr
segment_file_name	dbcore/sm-log-file.cpp	/^    segment_file_name(sm_log_file_mgr::segment_id *sid)$/;"	f	struct:segment_file_name
segment_file_name	dbcore/sm-log-file.cpp	/^    segment_file_name(uint32_t segnum, uint64_t start, uint64_t end) {$/;"	f	struct:segment_file_name
segment_file_name	dbcore/sm-log-file.cpp	/^struct segment_file_name {$/;"	s	file:
segment_id	dbcore/sm-log-file.h	/^    struct segment_id {$/;"	s	struct:sm_log_file_mgr
segment_list	dbcore/sm-log-file.h	/^    struct segment_list : std::deque<segment_id*> {$/;"	s	struct:sm_log_file_mgr
segment_number	dbcore/sm-log-segments.h	/^    int64_t segment_number;$/;"	m	struct:log_segment_desc
segment_size	dbcore/sm-log-file.h	/^    size_t volatile segment_size;$/;"	m	struct:sm_log_file_mgr
segment_size	dbcore/sm-log-segments.h	/^    uint64_t volatile segment_size;$/;"	m	struct:log_segment_mgr
segments	dbcore/sm-log-file.h	/^    segment_array segments;$/;"	m	struct:sm_log_file_mgr
segnum	dbcore/sm-log-file.h	/^        uint32_t segnum;$/;"	m	struct:sm_log_file_mgr::segment_id
selectDecoder	third-party/lz4/lz4c.c	/^unsigned long long selectDecoder( FILE* finput,  FILE* foutput)$/;"	f
selem	masstree/msgpack.hh	/^    struct selem {$/;"	s	class:msgpack::streaming_parser
self	dbcore/rcu-slist.h	/^    _rcu_slist self;$/;"	m	struct:rcu_slist
sell_orders	benchmarks/egen/DriverParamSettings.h	/^    INT32   sell_orders;$/;"	m	struct:TPCE::TTradeOrderSettings
sell_orders	benchmarks/egen/DriverParamSettings.h	/^    bool    sell_orders;$/;"	m	struct:TPCE::TTradeOrderSettingsState
sell_value	benchmarks/egen/TxnHarnessStructs.h	/^    double              sell_value;$/;"	m	struct:TPCE::TTradeResultFrame2Output
sell_value	benchmarks/egen/TxnHarnessStructs.h	/^    double  sell_value;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
sell_value	benchmarks/egen/TxnHarnessStructs.h	/^    double  sell_value;$/;"	m	struct:TPCE::TTradeOrderTxnOutput
sell_value	benchmarks/egen/TxnHarnessStructs.h	/^    double  sell_value;$/;"	m	struct:TPCE::TTradeResultFrame3Input
send	masstree/mtclient.hh	/^    inline void send() {$/;"	f	class:KVConn
send_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           send_len;$/;"	m	struct:TPCE::TMarketFeedFrame1Output
send_len	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           send_len;$/;"	m	struct:TPCE::TMarketFeedTxnOutput
sendget	masstree/mtclient.hh	/^    void sendget(Str key, const std::vector<unsigned>& f, unsigned seq) {$/;"	f	class:KVConn
sendgetcol	masstree/mtclient.hh	/^    void sendgetcol(Str key, int col, unsigned seq) {$/;"	f	class:KVConn
sendgetwhole	masstree/mtclient.hh	/^    void sendgetwhole(Str key, unsigned seq) {$/;"	f	class:KVConn
sendpkt	stats_common.h	/^  sendpkt(int fd) const$/;"	f	class:stats_command::packet
sendputcol	masstree/mtclient.hh	/^    void sendputcol(Str key, int col, Str val, unsigned seq) {$/;"	f	class:KVConn
sendputwhole	masstree/mtclient.hh	/^    void sendputwhole(Str key, Str val, unsigned seq) {$/;"	f	class:KVConn
sendremove	masstree/mtclient.hh	/^    void sendremove(Str key, unsigned seq) {$/;"	f	class:KVConn
sendscan	masstree/mtclient.hh	/^    void sendscan(Str firstkey, const std::vector<unsigned>& f,$/;"	f	class:KVConn
sendscanwhole	masstree/mtclient.hh	/^    void sendscanwhole(Str firstkey, int numpairs, unsigned seq) {$/;"	f	class:KVConn
sep_trees_extractor	benchmarks/results/make_graphs-6.py	/^    def sep_trees_extractor(enabled):$/;"	f
seq	masstree/mtclient.cc	/^    unsigned seq;$/;"	m	struct:async	file:
seq0_	masstree/mtclient.cc	/^    unsigned seq0_;$/;"	m	struct:child	file:
seq1_	masstree/mtclient.cc	/^    unsigned seq1_;$/;"	m	struct:child	file:
serializer	record/inline_str.h	/^struct serializer< inline_str_base<IntSizeType, N>, Compress > {$/;"	s
serializer	record/serializer.h	/^struct serializer {$/;"	s
serializer	record/serializer.h	/^struct serializer<int32_t, true> {$/;"	s
serializer	record/serializer.h	/^struct serializer<uint32_t, true> {$/;"	s
serve_client	stats_server.cc	/^stats_server::serve_client(int fd)$/;"	f	class:stats_server
serve_forever	stats_server.cc	/^stats_server::serve_forever()$/;"	f	class:stats_server
serverip	masstree/mtclient.cc	/^const char *serverip = "127.0.0.1";$/;"	v
set	benchmarks/masstree/kvtest.cc	/^  set(unsigned long x, int minlen = 0)$/;"	f	struct:quick_istr
set	masstree/json.hh	/^    inline Json& set(const String& key, Json value) {$/;"	f	class:lcdf::Json_proxy_base
set	masstree/json.hh	/^    inline Json& set(const String& key, const Json_proxy_base<Q>& value) {$/;"	f	class:lcdf::Json_proxy_base
set	masstree/json.hh	/^inline Json& Json::set(const String& key, Json value) {$/;"	f	class:lcdf::Json
set	masstree/json.hh	/^inline Json& Json::set(const String& key, const Json_proxy_base<P>& value) {$/;"	f	class:lcdf::Json
set	masstree/misc.hh	/^    void set(unsigned long x, int minlen = 0){$/;"	f	struct:quick_istr
setMFQueue	benchmarks/MEESUT.h	/^    void setMFQueue(MFBuffer* p){ MFQueue = p;}$/;"	f	class:TPCE::CMEESUT
setMoreToRead	benchmarks/egen/shore_tpce_egen.h	/^    void setMoreToRead(bool x) {moreToRead = x;}    $/;"	f	class:TPCE::EgenTupleContainer
setRNGSeeds	benchmarks/tpce.cc	/^void setRNGSeeds(CCETxnInputGenerator* gen, unsigned int UniqueId )$/;"	f
setSize	benchmarks/egen/shore_tpce_egen.h	/^    void setSize(int k) {size = k;}$/;"	f	class:TPCE::EgenTupleContainer
setTRQueue	benchmarks/MEESUT.h	/^    void setTRQueue(TRBuffer* p){ TRQueue = p;}$/;"	f	class:TPCE::CMEESUT
set_barrier	benchmarks/bench.h	/^  set_barrier(spin_barrier &b)$/;"	f	class:bench_loader
set_core_id	benchmarks/bench.h	/^  bool set_core_id;$/;"	m	class:bench_worker
set_core_id	core.h	/^  set_core_id(unsigned cid)$/;"	f	class:coreid
set_display_interval	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::set_display_interval(int val) {$/;"	f	class:TPCE::ProgressMeter
set_end	masstree/kvio.hh	/^inline void kvout::set_end(char* x) {$/;"	f	class:kvout
set_end	masstree/straccum.hh	/^inline void StringAccum::set_end(char* x) {$/;"	f	class:lcdf::StringAccum
set_end	masstree/straccum.hh	/^inline void StringAccum::set_end(unsigned char* x) {$/;"	f	class:lcdf::StringAccum
set_flags	marked_ptr.h	/^  set_flags(uint8_t flags)$/;"	f	class:marked_ptr
set_hack_status	txn_proto2_impl.h	/^  set_hack_status(bool hack_status)$/;"	f	class:transaction_proto2_static
set_key_slots_used	btree.h	/^    set_key_slots_used(size_t n)$/;"	f	struct:btree::node
set_landmark	masstree/kvthread.hh	/^    static void set_landmark(void* p, const char* file, int line) {$/;"	f	struct:memdebug
set_length	masstree/straccum.hh	/^inline void StringAccum::set_length(int len) {$/;"	f	class:lcdf::StringAccum
set_list	masstree/json.hh	/^    inline Json& set_list(Args&&... args) {$/;"	f	class:lcdf::Json_proxy_base
set_list	masstree/json.hh	/^inline Json& Json::set_list() {$/;"	f	class:lcdf::Json
set_list	masstree/json.hh	/^inline Json& Json::set_list(const String& key, T value, Args&&... rest) {$/;"	f	class:lcdf::Json
set_option_text	masstree/clp.c	/^set_option_text(Clp_Internal *cli, const char *text, int n_option_chars)$/;"	f	file:
set_owner_status	dbcore/rcu-slist.cpp	/^void _rcu_slist::next_ptr::set_owner_status(owner_status s) {$/;"	f	class:_rcu_slist::next_ptr
set_parent	masstree/masstree_struct.hh	/^    inline void set_parent(base_type* p) {$/;"	f	class:Masstree::node_base
set_root	btree.h	/^    set_root()$/;"	f	struct:btree::node
set_seed	util.h	/^  set_seed(unsigned long seed)$/;"	f	class:util::fast_random
set_seed0	util.h	/^  set_seed0(unsigned long seed)$/;"	f	class:util::fast_random
set_segment_size	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::set_segment_size(size_t ssize) {$/;"	f	class:sm_log_file_mgr
set_size	masstree/kpermuter.hh	/^    void set_size(int n) {$/;"	f	class:kpermuter
set_table	masstree/mttest.cc	/^    void set_table(T *table, threadinfo *ti) {$/;"	f	struct:kvtest_client
set_thread	masstree/mtd.cc	/^    void set_thread(threadinfo *ti) {$/;"	f	struct:kvtest_client
set_timespec	masstree/timestamp.hh	/^inline struct timespec &set_timespec(struct timespec &x, double y) {$/;"	f
set_value_size_hint	base_txn_btree.h	/^  set_value_size_hint(size_type value_size_hint)$/;"	f	class:base_txn_btree
setdirty	masstree/value_versioned_array.hh	/^    void setdirty() {$/;"	f	struct:rowversion
settimeout	masstree/mtclient.cc	/^settimeout(int)$/;"	f
settlement_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              settlement_amount;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
settlement_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              settlement_amount;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
settlement_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              settlement_amount;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
settlement_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              settlement_amount;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
settlement_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              settlement_amount;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
settlement_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double              settlement_amount;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
settlement_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_amount_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
settlement_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_amount_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
settlement_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_amount_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
settlement_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_amount_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
settlement_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_amount_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
settlement_amount_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_amount_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
settlement_cash_due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    settlement_cash_due_date;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
settlement_cash_due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    settlement_cash_due_date;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
settlement_cash_due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    settlement_cash_due_date;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
settlement_cash_due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    settlement_cash_due_date;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
settlement_cash_due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    settlement_cash_due_date;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
settlement_cash_due_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    settlement_cash_due_date;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
settlement_cash_due_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_due_date_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
settlement_cash_due_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_due_date_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
settlement_cash_due_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_due_date_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
settlement_cash_due_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_due_date_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
settlement_cash_due_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_due_date_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
settlement_cash_due_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_due_date_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
settlement_cash_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                settlement_cash_type[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
settlement_cash_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                settlement_cash_type[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
settlement_cash_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                settlement_cash_type[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
settlement_cash_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                settlement_cash_type[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
settlement_cash_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                settlement_cash_type[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
settlement_cash_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                settlement_cash_type[cSE_CASH_TYPE_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
settlement_cash_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_type_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
settlement_cash_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_type_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
settlement_cash_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_type_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
settlement_cash_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_type_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
settlement_cash_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_type_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
settlement_cash_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        settlement_cash_type_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
setup	scopedperf.hh	/^  void setup() {$/;"	f	class:scopedperf::pmc_setup
setup	scopedperf.hh	/^  void setup() {}$/;"	f	class:scopedperf::namedctr
shallow_size	masstree/value_array.hh	/^inline size_t value_array::shallow_size() const {$/;"	f	class:value_array
shallow_size	masstree/value_array.hh	/^inline size_t value_array::shallow_size(int ncol) {$/;"	f	class:value_array
shallow_size	masstree/value_string.hh	/^inline size_t value_string::shallow_size() const {$/;"	f	class:value_string
shallow_size	masstree/value_string.hh	/^inline size_t value_string::shallow_size(int vallen) {$/;"	f	class:value_string
shallow_size	masstree/value_versioned_array.hh	/^inline size_t value_versioned_array::shallow_size() const {$/;"	f	class:value_versioned_array
shallow_size	masstree/value_versioned_array.hh	/^inline size_t value_versioned_array::shallow_size(int ncol) {$/;"	f	class:value_versioned_array
share_server_port	masstree/mtclient.cc	/^bool share_server_port = false;$/;"	v
shared	masstree/json.hh	/^inline bool Json::shared() const {$/;"	f	class:lcdf::Json
shift	masstree/masstree_key.hh	/^    void shift() {$/;"	f	class:Masstree::key
shift	varkey.h	/^  shift() const$/;"	f	class:varkey
shift_clear	masstree/masstree_key.hh	/^    void shift_clear() {$/;"	f	class:Masstree::key
shift_clear	masstree/masstree_scan.hh	/^    template <typename K> void shift_clear(K &ka) const {$/;"	f	struct:Masstree::forward_scan_helper
shift_clear	masstree/masstree_scan.hh	/^    template <typename K> void shift_clear(K &ka) const {$/;"	f	struct:Masstree::reverse_scan_helper
shift_clear_reverse	masstree/masstree_key.hh	/^    void shift_clear_reverse() {$/;"	f	class:Masstree::key
shift_down	masstree/masstree_struct.hh	/^    void shift_down(int p, int xp, int n) {$/;"	f	class:Masstree::internode
shift_from	masstree/masstree_struct.hh	/^    void shift_from(int p, const internode<P>* x, int xp, int n) {$/;"	f	class:Masstree::internode
shift_many	varkey.h	/^  shift_many(size_t n) const$/;"	f	class:varkey
shift_up	masstree/masstree_struct.hh	/^    void shift_up(int p, int xp, int n) {$/;"	f	class:Masstree::internode
short_name	masstree/clp.h	/^    int short_name;		\/**< Character defining short option, or 0 if$/;"	m	struct:Clp_Option
shouldProcessCashTransactionRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::shouldProcessCashTransactionRow()$/;"	f	class:CGenerateAndLoad
shouldProcessSettlementRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::shouldProcessSettlementRow()$/;"	f	class:CGenerateAndLoad
shouldProcessTradeRequestRow	benchmarks/egen/EGenGenerateAndLoad.cpp	/^bool CGenerateAndLoad::shouldProcessTradeRequestRow()$/;"	f	class:CGenerateAndLoad
show	scopedperf.hh	/^  enum display_opt { show, hide };$/;"	e	enum:scopedperf::perfsum_base::display_opt
shrink_to_fit	masstree/string.hh	/^inline void String::shrink_to_fit() {$/;"	f	class:lcdf::String
si_commit	txn_impl.h	/^transaction<Protocol, Traits>::si_commit()$/;"	f	class:transaction
sid	dbcore/sm-log-offset.h	/^        segment_id *sid;$/;"	m	struct:sm_log_offset_mgr::segment_assignment
sift_left	btree.h	/^  sift_left(T *array, size_t p, size_t n, size_t k = 1)$/;"	f	class:btree
sift_right	btree.h	/^  sift_right(T *array, size_t p, size_t n, size_t k = 1)$/;"	f	class:btree
sift_swap_left	btree.h	/^  sift_swap_left(T *array, size_t p, size_t n, size_t k = 1)$/;"	f	class:btree
sift_swap_right	btree.h	/^  sift_swap_right(T *array, size_t p, size_t n, size_t k = 1)$/;"	f	class:btree
signal	dbcore/sm-common.h	/^    void signal() {$/;"	f	struct:os_condvar_pod
signal_abort	txn_impl.h	/^transaction<Protocol, Traits>::signal_abort(abort_reason reason)$/;"	f	class:transaction
signed_aware_trfm	varkey.h	/^struct signed_aware_trfm {};$/;"	s
signed_aware_trfm	varkey.h	/^struct signed_aware_trfm<false, T> {$/;"	s
signed_aware_trfm	varkey.h	/^struct signed_aware_trfm<true, T> {$/;"	s
signed_type	varkey.h	/^  typedef T signed_type;$/;"	t	struct:signed_aware_trfm
sim_count	benchmarks/egen/EGenValidate.cpp	/^        UINT    sim_count;$/;"	m	class:BucketSimOptions	file:
sim_first	benchmarks/egen/EGenValidate.cpp	/^        UINT    sim_first;$/;"	m	class:BucketSimOptions	file:
simple_has_split	masstree/nodeversion.hh	/^    bool simple_has_split(basic_nodeversion<P> x) const {$/;"	f	class:basic_nodeversion
simple_has_split	masstree/nodeversion.hh	/^    bool simple_has_split(basic_singlethreaded_nodeversion<P>) const {$/;"	f	class:basic_singlethreaded_nodeversion
simple_threadinfo	masstree_btree.h	/^    simple_threadinfo()$/;"	f	class:simple_threadinfo
simple_threadinfo	masstree_btree.h	/^class simple_threadinfo {$/;"	c
simulate	benchmarks/egen/bucketsimulator.cpp	/^double BucketSimulator::simulate() {$/;"	f	class:TPCE::BucketSimulator
simulate_onerun	benchmarks/egen/bucketsimulator.cpp	/^double BucketSimulator::simulate_onerun(INT64 iorders) {$/;"	f	class:TPCE::BucketSimulator
single_threaded_btree	btree.h	/^typedef btree<single_threaded_btree_traits> single_threaded_btree;$/;"	t
single_threaded_btree	masstree_btree.h	/^typedef mbtree<masstree_single_threaded_params> single_threaded_btree;$/;"	t
single_threaded_btree_traits	btree.h	/^struct single_threaded_btree_traits : public base_btree_config {$/;"	s
single_value_reader	txn_btree.h	/^    constexpr single_value_reader(std::string *px, size_t max_bytes_read)$/;"	f	class:txn_btree_::single_value_reader
single_value_reader	txn_btree.h	/^  class single_value_reader {$/;"	c	struct:txn_btree_
single_value_reader	typed_txn_btree.h	/^    constexpr single_value_reader(value_type &v, uint64_t fields_mask)$/;"	f	class:typed_txn_btree_::single_value_reader
single_value_reader	typed_txn_btree.h	/^    single_value_reader;$/;"	t	class:typed_txn_btree
single_value_reader	typed_txn_btree.h	/^  class single_value_reader {$/;"	c	struct:typed_txn_btree_
single_value_reader_type	txn_btree.h	/^  typedef txn_btree_::SingleValueReader single_value_reader_type;$/;"	t	class:txn_btree
singlethreaded_nodeversion	masstree/nodeversion.hh	/^typedef basic_singlethreaded_nodeversion<nodeversion32_parameters> singlethreaded_nodeversion;$/;"	t
size	benchmarks/MEESUT.h	/^    int size, first, last;$/;"	m	class:TPCE::InputBuffer
size	benchmarks/bench.h	/^  inline size_t size() const { return n; }$/;"	f	class:latest_key_callback
size	benchmarks/bench.h	/^  size() const$/;"	f	class:static_limit_callback
size	benchmarks/egen/FixedArray.h	/^    int size() {return m_iTotalElements;}$/;"	f	class:TPCE::CFixedArray
size	benchmarks/egen/shore_tpce_egen.h	/^  int size;$/;"	m	class:TPCE::EgenTupleContainer
size	benchmarks/masstree/kvtest.cc	/^  size() const$/;"	f	struct:quick_istr
size	benchmarks/ndb_wrapper_impl.h	/^ndb_ordered_index<Transaction>::size() const$/;"	f	class:ndb_ordered_index
size	btree.h	/^  size() const$/;"	f	class:btree
size	core.h	/^  size() const$/;"	f	class:percore
size	dbcore/dynarray.cpp	/^dynarray::size() const$/;"	f	class:dynarray
size	dbcore/rcu.h	/^    size_t size;$/;"	m	struct:RCU::pointer
size	dbcore/sc-hash.h	/^    size_t size() {$/;"	f
size	dbcore/sm-log-defs.h	/^    size_t size(uint32_t nrec, size_t payload_bytes) {$/;"	f	struct:log_block
size	dbcore/sm-log-recover.h	/^            size_t size;$/;"	m	struct:sm_log_recover_mgr::log_scanner::decay
size	dbcore/sm-oid-alloc-impl.h	/^    uint16_t size() {$/;"	f	struct:sparse_bitset
size	dbcore/sm-trace.cpp	/^    uint32_t size;      \/\/ data size (excluing dbtuple header)$/;"	m	struct:TRACER::read_trace_record	file:
size	dbcore/sm-trace.cpp	/^    uint32_t size;$/;"	m	struct:TRACER::insert_trace_record	file:
size	dbcore/test-sc-hash.cpp	/^    size_t size;$/;"	m	struct:hinstance	file:
size	dbcore/test-sm-log.cpp	/^    size_t size() { return sizeof(*this) + payload_size; }$/;"	f	struct:db_record
size	imstring.h	/^  size() const$/;"	f	class:base_imstring
size	masstree/json.hh	/^        int size;$/;"	m	struct:lcdf::Json::ComplexJson
size	masstree/json.hh	/^    Json::size_type size() const {$/;"	f	class:lcdf::Json_proxy_base
size	masstree/json.hh	/^inline Json::size_type Json::size() const {$/;"	f	class:lcdf::Json
size	masstree/kpermuter.hh	/^    int size() const {$/;"	f	class:identity_kpermuter
size	masstree/kpermuter.hh	/^    int size() const {$/;"	f	class:kpermuter
size	masstree/kpermuter.hh	/^    static inline int size(value_type p) {$/;"	f	class:kpermuter
size	masstree/kvthread.hh	/^    size_t size;$/;"	m	struct:memdebug
size	masstree/local_vector.hh	/^inline unsigned local_vector<T, N, A>::size() const {$/;"	f	class:local_vector
size	masstree/log.cc	/^    static size_t size() {$/;"	f	struct:logrec_base
size	masstree/log.cc	/^    static size_t size() {$/;"	f	struct:logrec_epoch
size	masstree/log.cc	/^    static size_t size(uint32_t keylen, uint32_t vallen) {$/;"	f	struct:logrec_kv
size	masstree/log.cc	/^    static size_t size(uint32_t keylen, uint32_t vallen) {$/;"	f	struct:logrec_kvdelta
size	masstree/log.hh	/^inline int logset::size() const {$/;"	f	class:logset
size	masstree/masstree_remove.hh	/^    size_t size() const {$/;"	f	struct:Masstree::gc_layer_rcu_callback
size	masstree/masstree_scan.hh	/^    int size() const {$/;"	f	class:Masstree::scanstackelt
size	masstree/masstree_struct.hh	/^    int size() const {$/;"	f	class:Masstree::internode
size	masstree/masstree_struct.hh	/^    int size() const {$/;"	f	class:Masstree::leaf
size	masstree/masstree_struct.hh	/^    int size() const {$/;"	f	class:Masstree::node_base
size	masstree/msgpack.hh	/^        int size;$/;"	m	struct:msgpack::streaming_parser::selem
size	masstree/msgpack.hh	/^    uint32_t size;$/;"	m	struct:msgpack::array_t
size	masstree/msgpack.hh	/^    uint32_t size;$/;"	m	struct:msgpack::object_t
size	masstree/mttest.cc	/^    long long size;$/;"	m	struct:mttest_numainfo	file:
size	masstree/perfstat.cc	/^  long long size;$/;"	m	struct:Perf::__anon54	file:
size	masstree/str.hh	/^    size_t size() const {$/;"	f	struct:lcdf::inline_string
size	masstree/str.hh	/^    static size_t size(int len) {$/;"	f	struct:lcdf::inline_string
size	masstree/string_slice.hh	/^    static constexpr int size = (int) sizeof(T);$/;"	m	struct:string_slice
size	masstree/string_slice.hh	/^template <typename T> constexpr int string_slice<T>::size;$/;"	m	class:string_slice
size	masstree/stringbag.hh	/^    int size() const {$/;"	f	class:stringbag
size	masstree/value_bag.hh	/^inline size_t value_bag<O>::size() const {$/;"	f	class:value_bag
size	masstree/value_string.hh	/^inline size_t value_string::size() const {$/;"	f	class:value_string
size	masstree_btree.h	/^inline size_t mbtree<P>::size() const$/;"	f	class:mbtree
size	object.h	/^	inline unsigned long long size() $/;"	f	class:object_vector
size	record/inline_str.h	/^  size() const$/;"	f	class:inline_str_base
size	record/inline_str.h	/^  size() const$/;"	f	class:inline_str_fixed
size	small_unordered_map.h	/^  size() const$/;"	f	class:small_unordered_map
size	small_vector.h	/^  size() const$/;"	f	class:small_vector
size	static_unordered_map.h	/^  size() const$/;"	f	class:static_unordered_map
size	static_vector.h	/^  size() const$/;"	f	class:static_vector
size	stats_common.h	/^  inline uint32_t size() const { return size_; }$/;"	f	class:stats_command::packet
size	tuple.h	/^  size_type size; \/\/ actual size of record$/;"	m	struct:dbtuple
size	varkey.h	/^  size() const$/;"	f	class:varkey
size_	btree.h	/^    size_t size_;$/;"	m	class:btree::size_walk_callback
size_	masstree/kpermuter.hh	/^    int size_;$/;"	m	class:identity_kpermuter
size_	masstree/local_vector.hh	/^	size_type size_;$/;"	m	struct:local_vector::rep
size_	masstree/log.cc	/^    uint32_t size_;$/;"	m	struct:logrec_base	file:
size_	masstree/log.cc	/^    uint32_t size_;$/;"	m	struct:logrec_epoch	file:
size_	masstree/log.cc	/^    uint32_t size_;$/;"	m	struct:logrec_kv	file:
size_	masstree/log.cc	/^    uint32_t size_;$/;"	m	struct:logrec_kvdelta	file:
size_	masstree/log.hh	/^        int32_t size_;$/;"	m	struct:loginfo::logset_info
size_	masstree/log.hh	/^    off_t size_;$/;"	m	class:logreplay
size_	masstree_btree.h	/^  size_t size_;$/;"	m	class:mbtree::size_walk_callback
size_	stats_common.h	/^  uint32_t size_;$/;"	m	class:stats_command::packet
size_align_bits	dbcore/sm-log-defs.h	/^    int16_t size_align_bits;$/;"	m	struct:log_record
size_align_bits	dbcore/sm-log-defs.h	/^    int16_t size_align_bits;$/;"	m	struct:log_request
size_bits	masstree/kpermuter.hh	/^    enum { size_bits = 4 };$/;"	e	enum:kpermuter::__anon41
size_code	dbcore/sm-common.h	/^    uint8_t size_code() const { return _ptr & SIZE_MASK; }$/;"	f	struct:fat_ptr
size_code	dbcore/sm-common.h	/^    uint8_t size_code() const { return _val & fat_ptr::SIZE_MASK; }$/;"	f	struct:LSN
size_code	dbcore/sm-log-defs.h	/^    uint8_t size_code;$/;"	m	struct:log_record
size_delta	benchmarks/bench.h	/^  ssize_t size_delta; \/\/ how many logical bytes (of values) did the worker add to the DB$/;"	m	class:bench_worker
size_estimate	base_txn_btree.h	/^  size_estimate() const$/;"	f	class:base_txn_btree
size_stash	dbcore/rcu.cpp	/^    std::map<size_t, pointer_stash> size_stash;$/;"	m	struct:RCU::rcu_tcb	file:
size_type	base_txn_btree.h	/^  typedef transaction_base::size_type size_type;$/;"	t	class:base_txn_btree
size_type	masstree/json.hh	/^    typedef int size_type;$/;"	t	class:lcdf::Json
size_type	masstree/local_vector.hh	/^    typedef unsigned size_type;$/;"	t	class:local_vector
size_type	small_vector.h	/^  typedef size_t size_type;$/;"	t	class:small_vector
size_type	static_vector.h	/^  typedef size_t size_type;$/;"	t	class:static_vector
size_type	tuple.h	/^  typedef uint32_t size_type;$/;"	t	struct:dbtuple
size_type	txn.h	/^  typedef dbtuple::size_type size_type;$/;"	t	class:transaction_base
size_type	txn_btree.h	/^  typedef typename super_type::size_type size_type;$/;"	t	class:txn_btree
size_type	typed_txn_btree.h	/^  typedef typename super_type::size_type size_type;$/;"	t	class:typed_txn_btree
size_uvint32	varint.h	/^size_uvint32(uint32_t value)$/;"	f
size_walk_callback	btree.h	/^    size_walk_callback() : spec_size_(0), size_(0) {}$/;"	f	class:btree::size_walk_callback
size_walk_callback	btree.h	/^  class size_walk_callback : public tree_walk_callback {$/;"	c	class:btree
size_walk_callback	masstree_btree.h	/^  size_walk_callback()$/;"	f	class:mbtree::size_walk_callback
size_walk_callback	masstree_btree.h	/^class mbtree<P>::size_walk_callback : public tree_walk_callback {$/;"	c	class:mbtree
sized_compiler_operations	masstree/compiler.hh	/^template <typename B> struct sized_compiler_operations<1, B> {$/;"	s
sized_compiler_operations	masstree/compiler.hh	/^template <typename B> struct sized_compiler_operations<2, B> {$/;"	s
sized_compiler_operations	masstree/compiler.hh	/^template <typename B> struct sized_compiler_operations<4, B> {$/;"	s
sized_compiler_operations	masstree/compiler.hh	/^template <typename B> struct sized_compiler_operations<8, B> {$/;"	s
sized_kpermuter_info	masstree/kpermuter.hh	/^template <> struct sized_kpermuter_info<0> {$/;"	s
sized_kpermuter_info	masstree/kpermuter.hh	/^template <> struct sized_kpermuter_info<1> {$/;"	s
sized_kpermuter_info	masstree/kpermuter.hh	/^template <> struct sized_kpermuter_info<2> {$/;"	s
sized_kpermuter_info	masstree/kpermuter.hh	/^template <int C> struct sized_kpermuter_info {};$/;"	s
sized_writer	masstree/msgpack.hh	/^template <> struct sized_writer<4> {$/;"	s	namespace:msgpack::format
sized_writer	masstree/msgpack.hh	/^template <> struct sized_writer<8> {$/;"	s	namespace:msgpack::format
sized_writer	masstree/msgpack.hh	/^template <size_t s> struct sized_writer {};$/;"	s	namespace:msgpack::format
sizeof	dbcore/sm-oid-alloc-impl.h	/^    static_assert(sizeof(Array) == sizeof(entries), "Fix CAPACITY");$/;"	m	struct:sparse_bitset
sizeof_txn_object	benchmarks/abstract_db.h	/^  sizeof_txn_object(uint64_t txn_flags) const { NDB_UNIMPLEMENTED("sizeof_txn_object"); };$/;"	f	class:abstract_db
sizeof_txn_object	benchmarks/ndb_wrapper_impl.h	/^ndb_wrapper<Transaction>::sizeof_txn_object(uint64_t txn_flags) const$/;"	f	class:ndb_wrapper
skip	record/inline_str.h	/^  skip(const uint8_t *stream, uint8_t *oldv)$/;"	f	struct:serializer
skip	record/serializer.h	/^  skip(const uint8_t *stream, uint8_t *rawv)$/;"	f	struct:generic_serializer
skip	record/serializer.h	/^  skip(const uint8_t *stream, uint8_t *rawv)$/;"	f	struct:serializer
skip_array_size	masstree/msgpack.hh	/^    inline parser& skip_array_size() {$/;"	f	class:msgpack::parser
skip_primitive	masstree/msgpack.hh	/^    inline parser& skip_primitive() {$/;"	f	class:msgpack::parser
skip_primitives	masstree/msgpack.hh	/^    inline parser& skip_primitives(unsigned n) {$/;"	f	class:msgpack::parser
skip_to	record/cursor.h	/^  skip_to(size_t i)$/;"	f	struct:read_record_cursor
skip_to	record/cursor.h	/^  skip_to(size_t i)$/;"	f	struct:write_record_cursor
skip_utf8_bom	masstree/string.hh	/^inline const char *String::skip_utf8_bom(const char *first, const char *last) {$/;"	f	class:lcdf::String
skip_utf8_bom	masstree/string.hh	/^inline const unsigned char *String::skip_utf8_bom(const unsigned char *first,$/;"	f	class:lcdf::String
skip_utf8_char	masstree/string.cc	/^String::skip_utf8_char(const unsigned char *s, const unsigned char *end)$/;"	f	class:lcdf::String
skip_utf8_char	masstree/string.hh	/^inline const char *String::skip_utf8_char(const char *first, const char *last) {$/;"	f	class:lcdf::String
skip_uvint32	varint.h	/^skip_uvint32(const uint8_t *stream, uint8_t *rawv)$/;"	f
slice	varkey.h	/^  slice() const$/;"	f	class:varkey
slice_at	varkey.h	/^  inline uint64_t slice_at(int pos) const {$/;"	f	class:varkey
slow_exit	benchmarks/bench.cc	/^int slow_exit = 0;$/;"	v
slow_round_down	util.h	/^slow_round_down(T x, T q)$/;"	f	namespace:util
slow_round_up	util.h	/^slow_round_up(T x, T q)$/;"	f	namespace:util
slow_worker	dbcore/test-xid.cpp	/^slow_worker( void* t)$/;"	f
sm_allocator	dbcore/sm-oid-alloc-impl.cpp	/^sm_allocator::sm_allocator(dynarray &&self)$/;"	f	class:sm_allocator
sm_allocator	dbcore/sm-oid-alloc-impl.h	/^struct sm_allocator {$/;"	s
sm_heap_mgr	dbcore/sm-heap.h	/^    sm_heap_mgr() { }$/;"	f	struct:sm_heap_mgr
sm_heap_mgr	dbcore/sm-heap.h	/^struct sm_heap_mgr {$/;"	s
sm_log	dbcore/sm-log-impl.h	/^DEF_IMPL(sm_log);$/;"	v
sm_log	dbcore/sm-log.h	/^    sm_log() { }$/;"	f	struct:sm_log
sm_log	dbcore/sm-log.h	/^struct sm_log {$/;"	s
sm_log_alloc_mgr	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::sm_log_alloc_mgr(char const *dname, size_t segment_size,$/;"	f	class:sm_log_alloc_mgr
sm_log_alloc_mgr	dbcore/sm-log-alloc.h	/^struct sm_log_alloc_mgr {$/;"	s
sm_log_file_mgr	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::sm_log_file_mgr(char const *dname, size_t ssize)$/;"	f	class:sm_log_file_mgr
sm_log_file_mgr	dbcore/sm-log-file.h	/^struct sm_log_file_mgr {$/;"	s
sm_log_header_scan_impl	dbcore/sm-log-impl.h	/^struct sm_log_header_scan_impl : sm_log_scan_mgr::header_scan {$/;"	s
sm_log_header_scan_impl	dbcore/sm-log-recover.cpp	/^sm_log_header_scan_impl::sm_log_header_scan_impl(sm_log_recover_mgr *lm, LSN start)$/;"	f	class:sm_log_header_scan_impl
sm_log_impl	dbcore/sm-log-impl.h	/^    sm_log_impl(char const *dname, size_t segsz,$/;"	f	struct:sm_log_impl
sm_log_impl	dbcore/sm-log-impl.h	/^struct sm_log_impl : sm_log {$/;"	s
sm_log_offset_mgr	dbcore/sm-log-offset.h	/^struct sm_log_offset_mgr : sm_log_file_mgr {$/;"	s
sm_log_record_scan_impl	dbcore/sm-log-impl.h	/^struct sm_log_record_scan_impl : sm_log_scan_mgr::record_scan {$/;"	s
sm_log_record_scan_impl	dbcore/sm-log-recover.cpp	/^sm_log_record_scan_impl::sm_log_record_scan_impl(sm_log_recover_mgr *lm, LSN start, bool just_one_tx)$/;"	f	class:sm_log_record_scan_impl
sm_log_recover_function	dbcore/sm-log.h	/^typedef void sm_log_recover_function(void *arg, sm_log_scan_mgr *scanner,$/;"	t
sm_log_recover_mgr	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::sm_log_recover_mgr(char const *dname, size_t segment_size,$/;"	f	class:sm_log_recover_mgr
sm_log_recover_mgr	dbcore/sm-log-recover.h	/^struct sm_log_recover_mgr : sm_log_offset_mgr {$/;"	s
sm_log_scan_mgr	dbcore/sm-log-impl.h	/^DEF_IMPL(sm_log_scan_mgr);$/;"	v
sm_log_scan_mgr	dbcore/sm-log.h	/^    sm_log_scan_mgr() { }$/;"	f	struct:sm_log_scan_mgr
sm_log_scan_mgr	dbcore/sm-log.h	/^struct sm_log_scan_mgr {$/;"	s
sm_log_scan_mgr_impl	dbcore/sm-log-impl.h	/^struct sm_log_scan_mgr_impl : sm_log_scan_mgr {$/;"	s
sm_log_scan_mgr_impl	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr_impl::sm_log_scan_mgr_impl(sm_log_recover_mgr *lm)$/;"	f	class:sm_log_scan_mgr_impl
sm_oid_mgr	dbcore/sm-oid-impl.h	/^DEF_IMPL(sm_oid_mgr);$/;"	v
sm_oid_mgr	dbcore/sm-oid.h	/^    sm_oid_mgr() { }$/;"	f	struct:sm_oid_mgr
sm_oid_mgr	dbcore/sm-oid.h	/^struct sm_oid_mgr {$/;"	s
sm_oid_mgr_impl	dbcore/sm-oid-impl.h	/^struct sm_oid_mgr_impl : sm_oid_mgr {$/;"	s
sm_oid_mgr_impl	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::sm_oid_mgr_impl()$/;"	f	class:sm_oid_mgr_impl
sm_tx_log	dbcore/sm-log-impl.h	/^DEF_IMPL(sm_tx_log);$/;"	v
sm_tx_log	dbcore/sm-log.h	/^    sm_tx_log() { }$/;"	f	struct:sm_tx_log
sm_tx_log	dbcore/sm-log.h	/^struct sm_tx_log {$/;"	s
sm_tx_log_impl	dbcore/sm-log-impl.h	/^    sm_tx_log_impl(sm_log_impl *l)$/;"	f	struct:sm_tx_log_impl
sm_tx_log_impl	dbcore/sm-log-impl.h	/^struct sm_tx_log_impl : sm_tx_log {$/;"	s
small_begin	small_vector.h	/^  small_begin() const$/;"	f	class:small_vector
small_begin	small_vector.h	/^  small_begin()$/;"	f	class:small_vector
small_elems	small_unordered_map.h	/^  bucket small_elems[SmallSize];$/;"	m	class:small_unordered_map
small_elems_buf	small_vector.h	/^  char small_elems_buf[sizeof(T) * SmallSize];$/;"	m	class:small_vector
small_end	small_vector.h	/^  small_end() const$/;"	f	class:small_vector
small_end	small_vector.h	/^  small_end()$/;"	f	class:small_vector
small_it	small_vector.h	/^    SmallTypeIter small_it;$/;"	m	class:small_vector::iterator_
small_iterator	small_vector.h	/^  typedef small_iterator_<T> small_iterator;$/;"	t	class:small_vector
small_iterator_	small_vector.h	/^    inline small_iterator_() : p(0) {}$/;"	f	class:small_vector::small_iterator_
small_iterator_	small_vector.h	/^    inline small_iterator_(ObjType *p) : p(p) {}$/;"	f	class:small_vector::small_iterator_
small_iterator_	small_vector.h	/^    inline small_iterator_(const small_iterator_<O> &other)$/;"	f	class:small_vector::small_iterator_
small_iterator_	small_vector.h	/^  class small_iterator_ : public std::iterator<std::bidirectional_iterator_tag, ObjType> {$/;"	c	class:small_vector
small_unordered_map	small_unordered_map.h	/^  small_unordered_map()$/;"	f	class:small_unordered_map
small_unordered_map	small_unordered_map.h	/^  small_unordered_map(const small_unordered_map &other)$/;"	f	class:small_unordered_map
small_unordered_map	small_unordered_map.h	/^class small_unordered_map {$/;"	c
small_vector	small_vector.h	/^  small_vector() : n(0), large_elems(0) {}$/;"	f	class:small_vector
small_vector	small_vector.h	/^  small_vector(const small_vector &that)$/;"	f	class:small_vector
small_vector	small_vector.h	/^  small_vector(std::initializer_list<T> l)$/;"	f	class:small_vector
small_vector	small_vector.h	/^class small_vector {$/;"	c
snapshot	masstree/kvrow.hh	/^    inline const R* snapshot(const R* row, const std::vector<typename R::index_type>&, threadinfo&) {$/;"	f	struct:query_helper
snapshot	masstree/value_versioned_array.cc	/^void value_versioned_array::snapshot(value_versioned_array*& storage,$/;"	f	class:value_versioned_array
snapshot	masstree/value_versioned_array.hh	/^    inline const value_versioned_array* snapshot(const value_versioned_array* row,$/;"	f	struct:query_helper
snapshot_	masstree/value_versioned_array.hh	/^    value_versioned_array* snapshot_;$/;"	m	struct:query_helper
snapshots_extractor	benchmarks/results/make_graphs-6.py	/^    def snapshots_extractor(enabled):$/;"	f
snprintf	benchmarks/egen/EGenStandardTypes.h	118;"	d
snprintf	masstree/str.hh	/^    static Str snprintf(char *buf, size_t size, const char *fmt, ...) {$/;"	f	struct:lcdf::Str
snprintf	masstree/straccum.cc	/^StringAccum::snprintf(int n, const char *format, ...)$/;"	f	class:lcdf::StringAccum
sockfile_	stats_server.h	/^  std::string sockfile_;$/;"	m	class:stats_server
sort	small_vector.h	/^  sort(Compare c = Compare())$/;"	f	class:small_vector
sort	static_vector.h	/^  sort(Compare c = Compare())$/;"	f	class:static_vector
sp_rate	benchmarks/egen/TxnHarnessStructs.h	/^    char                sp_rate[cSP_RATE_len+1];$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
space_remaining	dbcore/sm-oid-alloc-impl.h	/^        uint32_t space_remaining() { return N - nentries; }$/;"	f	struct:sm_allocator::thread_cache
space_separator	masstree/json.hh	/^    bool space_separator() const {$/;"	f	class:lcdf::Json::unparse_manipulator
space_separator	masstree/json.hh	/^    unparse_manipulator space_separator(bool x) const {$/;"	f	class:lcdf::Json::unparse_manipulator
space_separator	masstree/json.hh	/^inline Json::unparse_manipulator Json::space_separator(bool x) {$/;"	f	class:lcdf::Json
space_separator_	masstree/json.hh	/^    bool space_separator_;$/;"	m	class:lcdf::Json::unparse_manipulator
sparse_bitset	dbcore/sm-oid-alloc-impl.h	/^struct sparse_bitset {$/;"	s
spec_size_	btree.h	/^    size_t spec_size_;$/;"	m	class:btree::size_walk_callback
spec_values	base_txn_btree.h	/^    std::vector< std::pair<typename concurrent_btree::value_type, bool> > spec_values;$/;"	m	struct:base_txn_btree::purge_tree_walker
spill_overflow	dbcore/sm-tx-log.cpp	/^void sm_tx_log_impl::spill_overflow() {$/;"	f	class:sm_tx_log_impl
spin_barrier	spinbarrier.h	/^  spin_barrier(size_t n)$/;"	f	class:spin_barrier
spin_barrier	spinbarrier.h	/^class spin_barrier {$/;"	c
spinlock	scopedperf.hh	/^  spinlock() : x(0) {}$/;"	f	class:scopedperf::spinlock
spinlock	scopedperf.hh	/^class spinlock {$/;"	c	namespace:scopedperf
spinlock	spinlock.h	/^  spinlock() : value(0) {}$/;"	f	class:spinlock
spinlock	spinlock.h	/^class spinlock {$/;"	c
split	util.h	/^split(const std::string &s, char delim)$/;"	f	namespace:util
split_into	masstree/masstree_split.hh	/^int internode<P>::split_into(internode<P> *nr, int p, ikey_type ka,$/;"	f	class:Masstree::internode
split_into	masstree/masstree_split.hh	/^int leaf<P>::split_into(leaf<P>* nr, int p, const key_type& ka,$/;"	f	class:Masstree::leaf
split_results_by_predicate	benchmarks/results/make_graphs-4.py	/^def split_results_by_predicate(results, pred):$/;"	f
split_results_by_predicate	benchmarks/results/make_graphs-5.py	/^def split_results_by_predicate(results, pred):$/;"	f
split_unlock_mask	masstree/nodeversion.hh	/^	split_unlock_mask = ~(root_bit | unused1_bit | (vsplit_lowbit - 1)),$/;"	e	enum:nodeversion32_parameters::__anon10
split_unlock_mask	masstree/nodeversion.hh	/^	split_unlock_mask = ~(root_bit | unused1_bit | (vsplit_lowbit - 1)),$/;"	e	enum:nodeversion64_parameters::__anon11
split_ws	benchmarks/dbtest.cc	/^split_ws(const string &s)$/;"	f	file:
splitting	masstree/nodeversion.hh	/^    bool splitting() const {$/;"	f	class:basic_nodeversion
splitting	masstree/nodeversion.hh	/^    bool splitting() const {$/;"	f	class:basic_singlethreaded_nodeversion
splitting_bit	masstree/nodeversion.hh	/^	splitting_bit = (1U << 2),$/;"	e	enum:nodeversion32_parameters::__anon10
splitting_bit	masstree/nodeversion.hh	/^	splitting_bit = (1ULL << 10),$/;"	e	enum:nodeversion64_parameters::__anon11
src	benchmarks/egen/TxnHarnessStructs.h	/^    char                src[cNI_SOURCE_len+1];$/;"	m	struct:TPCE::TNews
ssn_abort_count	dbcore/ssn.cpp	/^uint64_t ssn_abort_count;$/;"	m	namespace:TXN	file:
ssn_check_exclusion	dbcore/ssn.h	/^inline bool ssn_check_exclusion(xid_context *xc) {$/;"	f	namespace:TXN
ssn_deregister_reader_tx	dbcore/ssn.cpp	/^ssn_deregister_reader_tx(dbtuple *t)$/;"	f	namespace:TXN
ssn_deregister_tx	dbcore/ssn.cpp	/^ssn_deregister_tx(XID xid)$/;"	f	namespace:TXN
ssn_get_tuple_readers	dbcore/ssn.h	/^readers_list::bitmap_t ssn_get_tuple_readers(dbtuple *tup) {$/;"	f	namespace:TXN
ssn_parallel_si_commit	txn_impl.h	/^transaction<Protocol, Traits>::ssn_parallel_si_commit()$/;"	f	class:transaction
ssn_register_reader_tx	dbcore/ssn.cpp	/^ssn_register_reader_tx(dbtuple *t, XID xid)$/;"	f	namespace:TXN
ssn_register_tx	dbcore/ssn.cpp	/^ssn_register_tx(XID xid)$/;"	f	namespace:TXN
sstamp	dbcore/xid.h	/^    uint64_t sstamp; \/\/ oldest successor (\\pi)$/;"	m	struct:TXN::xid_context
sstamp	tuple.h	/^  uint64_t sstamp;         \/\/ successor (overwriter) stamp (\\pi), updated when writer commits$/;"	m	struct:dbtuple
st_array_delim	masstree/json.hh	/^	st_initial = 0, st_array_initial = 1, st_array_delim = 2,$/;"	e	enum:lcdf::Json::__anon49
st_array_delim	masstree/json.hh	/^        st_array_delim = 0x400,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_array_initial	masstree/json.hh	/^	st_initial = 0, st_array_initial = 1, st_array_delim = 2,$/;"	e	enum:lcdf::Json::__anon49
st_array_initial	masstree/json.hh	/^        st_array_initial = 0x100,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_array_value	masstree/json.hh	/^	st_array_value = 3, st_object_initial = 4, st_object_delim = 5,$/;"	e	enum:lcdf::Json::__anon49
st_array_value	masstree/json.hh	/^        st_array_value = 0x200,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_canceled_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                st_canceled_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeCleanupTxnInput
st_completed_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                st_completed_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeResultFrame5Input
st_error	masstree/json.hh	/^        st_final = -2, st_error = -1,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_error	masstree/msgpack.hh	/^        st_final = -2, st_error = -1, st_normal = 0, st_partial = 1,$/;"	e	enum:msgpack::streaming_parser::__anon36
st_final	masstree/json.hh	/^        st_final = -2, st_error = -1,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_final	masstree/msgpack.hh	/^        st_final = -2, st_error = -1, st_normal = 0, st_partial = 1,$/;"	e	enum:msgpack::streaming_parser::__anon36
st_initial	masstree/json.hh	/^	st_initial = 0, st_array_initial = 1, st_array_delim = 2,$/;"	e	enum:lcdf::Json::__anon49
st_initial	masstree/json.hh	/^	st_initial = 0x000,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_normal	masstree/msgpack.hh	/^        st_final = -2, st_error = -1, st_normal = 0, st_partial = 1,$/;"	e	enum:msgpack::streaming_parser::__anon36
st_numberpart	masstree/json.hh	/^        st_stringpart = 0x10, st_primitivepart = 0x20, st_numberpart = 0x40,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_object_colon	masstree/json.hh	/^	st_object_key = 6, st_object_colon = 7, st_object_value = 8,$/;"	e	enum:lcdf::Json::__anon49
st_object_colon	masstree/json.hh	/^        st_object_colon = 0x800,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_object_delim	masstree/json.hh	/^	st_array_value = 3, st_object_initial = 4, st_object_delim = 5,$/;"	e	enum:lcdf::Json::__anon49
st_object_delim	masstree/json.hh	/^        st_object_delim = 0x500,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_object_initial	masstree/json.hh	/^	st_array_value = 3, st_object_initial = 4, st_object_delim = 5,$/;"	e	enum:lcdf::Json::__anon49
st_object_initial	masstree/json.hh	/^        st_object_initial = 0x600,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_object_key	masstree/json.hh	/^	st_object_key = 6, st_object_colon = 7, st_object_value = 8,$/;"	e	enum:lcdf::Json::__anon49
st_object_key	masstree/json.hh	/^        st_object_key = 0x700,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_object_value	masstree/json.hh	/^	st_object_key = 6, st_object_colon = 7, st_object_value = 8,$/;"	e	enum:lcdf::Json::__anon49
st_object_value	masstree/json.hh	/^        st_object_value = 0x300,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_partial	masstree/msgpack.hh	/^        st_final = -2, st_error = -1, st_normal = 0, st_partial = 1,$/;"	e	enum:msgpack::streaming_parser::__anon36
st_partlenmask	masstree/json.hh	/^        st_partlenmask = 0x0F, st_partmask = 0xFF,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_partmask	masstree/json.hh	/^        st_partlenmask = 0x0F, st_partmask = 0xFF,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_pending_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                st_pending_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeCleanupTxnInput
st_pending_id	benchmarks/egen/TxnHarnessStructs.h	/^    char            st_pending_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
st_pending_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    st_pending_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame3Input
st_primitivepart	masstree/json.hh	/^        st_stringpart = 0x10, st_primitivepart = 0x20, st_numberpart = 0x40,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_string	masstree/msgpack.hh	/^        st_string = 2$/;"	e	enum:msgpack::streaming_parser::__anon36
st_stringpart	masstree/json.hh	/^        st_stringpart = 0x10, st_primitivepart = 0x20, st_numberpart = 0x40,$/;"	e	enum:lcdf::Json::streaming_parser::__anon50
st_submitted_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                st_submitted_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeCleanupTxnInput
st_submitted_id	benchmarks/egen/TxnHarnessStructs.h	/^    char            st_submitted_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
st_submitted_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    st_submitted_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame3Input
stable	masstree/masstree_scan.hh	/^    typename N::nodeversion_type stable(N *&n, const K &k) const {$/;"	f	struct:Masstree::reverse_scan_helper
stable	masstree/masstree_scan.hh	/^    typename N::nodeversion_type stable(const N *n, const K &) const {$/;"	f	struct:Masstree::forward_scan_helper
stable	masstree/nodeversion.hh	/^    basic_nodeversion<P> stable() const {$/;"	f	class:basic_nodeversion
stable	masstree/nodeversion.hh	/^    basic_nodeversion<P> stable(SF spin_function) const {$/;"	f	class:basic_nodeversion
stable	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> stable() const {$/;"	f	class:basic_singlethreaded_nodeversion
stable	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> stable(SF) const {$/;"	f	class:basic_singlethreaded_nodeversion
stable	masstree/value_versioned_array.hh	/^    rowversion stable() const {$/;"	f	struct:rowversion
stable_accounting_relax_fence_function	masstree/kvthread.hh	/^	stable_accounting_relax_fence_function(threadinfo *ti)$/;"	f	struct:threadinfo::stable_accounting_relax_fence_function
stable_accounting_relax_fence_function	masstree/kvthread.hh	/^    struct stable_accounting_relax_fence_function {$/;"	s	class:threadinfo
stable_annotated	masstree/nodeversion.hh	/^    basic_nodeversion<P> stable_annotated(SF spin_function) const {$/;"	f	class:basic_nodeversion
stable_annotated	masstree/nodeversion.hh	/^    basic_singlethreaded_nodeversion<P> stable_annotated(SF) const {$/;"	f	class:basic_singlethreaded_nodeversion
stable_fence	masstree/kvthread.hh	/^    stable_accounting_relax_fence_function stable_fence() {$/;"	f	class:threadinfo
stable_fence	masstree_btree.h	/^    accounting_relax_fence_function stable_fence() {$/;"	f	class:simple_threadinfo
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_kv_get_put_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_kv_scan_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_read_only_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_tpcc_credit_check_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_tpcc_delivery_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_tpcc_new_order_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_tpcc_order_status_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_tpcc_payment_traits
stable_input_memory	benchmarks/ndb_wrapper_impl.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:hint_tpcc_stock_level_traits
stable_input_memory	txn.h	/^  static const bool stable_input_memory = false;$/;"	m	struct:default_transaction_traits
stable_input_memory	txn.h	/^  static const bool stable_input_memory = true;$/;"	m	struct:default_stable_transaction_traits
stable_last_key_compare	masstree/masstree_struct.hh	/^internode<P>::stable_last_key_compare(const key_type& k, nodeversion_type v,$/;"	f	class:Masstree::internode
stable_last_key_compare	masstree/masstree_struct.hh	/^leaf<P>::stable_last_key_compare(const key_type& k, nodeversion_type v,$/;"	f	class:Masstree::leaf
stable_read	tuple.h	/^  stable_read(Reader &reader, StringAllocator &sa) const$/;"	f	struct:dbtuple
stable_version	btree.h	/^    stable_version() const$/;"	f	struct:btree::node
stablize	txn_btree.h	/^  stablize(Transaction<Traits> &t, const std::string &s)$/;"	f	class:txn_btree
stablize	txn_btree.h	/^  stablize(Transaction<Traits> &t, const uint8_t *p, size_t sz)$/;"	f	class:txn_btree
stablize	txn_btree.h	/^  stablize(Transaction<Traits> &t, const varkey &k)$/;"	f	class:txn_btree
stablize	typed_txn_btree.h	/^  stablize(Transaction<Traits> &t, const key_type &k)$/;"	f	class:typed_txn_btree
stablize	typed_txn_btree.h	/^  stablize(Transaction<Traits> &t, const value_type &v)$/;"	f	class:typed_txn_btree
stack_	masstree/json.hh	/^    std::vector<Json*> stack_;$/;"	m	class:lcdf::Json::streaming_parser
stack_	masstree/msgpack.hh	/^    local_vector<selem, 2> stack_;$/;"	m	class:msgpack::streaming_parser
stacksize_	benchmarks/egen/threading.h	/^        int stacksize_;$/;"	m	class:TPCE::Thread
start	benchmarks/egen/threading.h	/^void Thread<T>::start()$/;"	f	class:TPCE::Thread
start	benchmarks/egen/threading_pthread.h	/^        void start() {$/;"	f	class:TPCE::Thread
start	benchmarks/egen/threading_single.h	/^        void start() {$/;"	f	class:TPCE::Thread
start	dbcore/sm-trace.cpp	/^start()$/;"	f	namespace:TRACER
start	thread.cc	/^ndb_thread::start()$/;"	f	class:ndb_thread
start	util.h	/^  uint64_t start;$/;"	m	class:util::timer
start_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_date;$/;"	m	struct:TPCE::TFinInfo
start_date	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_date;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
start_date_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        start_date_ind;$/;"	m	struct:TPCE::TFinInfo
start_day	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_day;$/;"	m	struct:TPCE::TMarketWatchTxnInput
start_day	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_day;$/;"	m	struct:TPCE::TSecurityDetailTxnInput
start_lsn	dbcore/sm-log-impl.h	/^    LSN start_lsn;$/;"	m	struct:sm_log_record_scan_impl
start_offset	dbcore/sm-log-file.h	/^        uint64_t start_offset;$/;"	m	struct:sm_log_file_mgr::segment_id
start_offset	dbcore/sm-log-segments.h	/^    uint64_t start_offset;$/;"	m	struct:log_segment_desc
start_thread	benchmarks/egen/threading.cpp	/^DWORD WINAPI start_thread(LPVOID arg)$/;"	f	namespace:TPCE
start_timer	masstree/mttest.cc	/^    static void start_timer() {$/;"	f	struct:kvtest_client
start_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_trade_dts;$/;"	m	struct:TPCE::TTradeLookupFrame2Input
start_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_trade_dts;$/;"	m	struct:TPCE::TTradeLookupFrame3Input
start_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_trade_dts;$/;"	m	struct:TPCE::TTradeLookupTxnInput
start_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_trade_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame2Input
start_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_trade_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame3Input
start_trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    start_trade_dts;$/;"	m	struct:TPCE::TTradeUpdateTxnInput
start_trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              start_trade_id;$/;"	m	struct:TPCE::TTradeCleanupTxnInput
start_us	ticker.h	/^    start_us() const$/;"	f	class:ticker::guard
start_us_	ticker.h	/^    std::atomic<uint64_t> start_us_; \/\/ 0 if not in RCU section$/;"	m	struct:ticker::tickinfo
start_us_	ticker.h	/^    uint64_t start_us_;$/;"	m	class:ticker::guard
starting_co_id	benchmarks/egen/TxnHarnessStructs.h	/^    TIdent              starting_co_id;$/;"	m	struct:TPCE::TMarketWatchTxnInput
startkey	masstree/checkpoint.hh	/^    Str startkey;$/;"	m	struct:ckstate
starts_with	masstree/string_base.hh	/^    bool starts_with(const String_base<TT> &x) const {$/;"	f	class:lcdf::String_base
starts_with	masstree/string_base.hh	/^    bool starts_with(const char *cstr) const {$/;"	f	class:lcdf::String_base
starts_with	masstree/string_base.hh	/^    bool starts_with(const char *s, int len) const {$/;"	f	class:lcdf::String_base
starts_with	masstree/string_base.hh	/^    static bool starts_with(const char *a, int a_len, const char *b, int b_len) {$/;"	f	class:lcdf::String_generic
stat	counter.cc	/^event_counter::stat(const string &name, counter_data &d)$/;"	f	class:event_counter
stat	counter.cc	/^event_ctx::stat(counter_data &d)$/;"	f	class:event_ctx
stat	masstree/perfstat.hh	/^struct stat {$/;"	s	namespace:Perf
stat	scopedperf.hh	/^  struct stats stat[perfsum_tmpl<Enabler, Counters...>::maxcpu];$/;"	m	class:scopedperf::perfsum_ctr	typeref:struct:scopedperf::perfsum_ctr::stats
stat	scopedperf.hh	/^  struct stats stat[perfsum_tmpl<Enabler, Counters...>::maxcpu];$/;"	m	class:scopedperf::perfsum_hist_tmpl	typeref:struct:scopedperf::perfsum_hist_tmpl::stats
stat_collector	masstree/mttest.cc	/^void *stat_collector(void *arg) {$/;"	f
state	benchmarks/egen/DriverParamSettings.h	/^    T2  state;$/;"	m	class:TPCE::CParametersWithDefaults
state	dbcore/epoch.h	/^    private_state *state = 0;$/;"	m	struct:epoch_mgr
state	dbcore/test-epoch.cpp	/^struct state {$/;"	s	file:
state	dbcore/xid.h	/^    txn_state state;$/;"	m	struct:TXN::xid_context
state	masstree/checkpoint.hh	/^    volatile int state;$/;"	m	struct:ckstate
state	txn.h	/^  inline txn_state state() const$/;"	f	class:transaction
state_	masstree/json.hh	/^    int state_;$/;"	m	class:lcdf::Json::streaming_parser
state_	masstree/masstree_tcursor.hh	/^    int state_;$/;"	m	class:Masstree::tcursor
state_	masstree/msgpack.hh	/^    int state_;$/;"	m	class:msgpack::streaming_parser
state_cond	masstree/checkpoint.hh	/^    pthread_cond_t state_cond;$/;"	m	struct:ckstate
static_assert	masstree/compiler.hh	32;"	d
static_init	dbcore/sm-common.h	/^    os_condvar_pod static_init() {$/;"	f	struct:os_condvar_pod
static_init	dbcore/sm-common.h	/^    os_mutex_pod static_init() {$/;"	f	struct:os_mutex_pod
static_limit_callback	benchmarks/bench.h	/^  static_limit_callback(str_arena *arena, bool ignore_key)$/;"	f	class:static_limit_callback
static_limit_callback	benchmarks/bench.h	/^class static_limit_callback : public abstract_ordered_index::scan_callback {$/;"	c
static_unordered_map	static_unordered_map.h	/^  static_unordered_map()$/;"	f	class:static_unordered_map
static_unordered_map	static_unordered_map.h	/^  static_unordered_map(const static_unordered_map &other)$/;"	f	class:static_unordered_map
static_unordered_map	static_unordered_map.h	/^class static_unordered_map {$/;"	c
static_vector	static_vector.h	/^  inline static_vector() : n(0) {}$/;"	f	class:static_vector
static_vector	static_vector.h	/^  inline static_vector(const static_vector &that)$/;"	f	class:static_vector
static_vector	static_vector.h	/^  static_vector(std::initializer_list<T> l)$/;"	f	class:static_vector
static_vector	static_vector.h	/^class static_vector {$/;"	c
stats	dbcore/test-sc-hash.cpp	/^    mvar_tracker stats;$/;"	m	struct:hinstance	file:
stats	masstree/query_masstree.cc	/^void query_table<P>::stats(FILE* f) {$/;"	f	class:Masstree::query_table
stats	scopedperf.hh	/^  struct stats {$/;"	s	class:scopedperf::perfsum_ctr
stats	scopedperf.hh	/^  struct stats {$/;"	s	class:scopedperf::perfsum_hist_tmpl
stats_command	stats_common.h	/^enum class stats_command : uint8_t { GET_COUNTER_VALUE = 0x1 };$/;"	c
stats_server	stats_server.cc	/^stats_server::stats_server(const string &sockfile)$/;"	f	class:stats_server
stats_server	stats_server.h	/^class stats_server {$/;"	c
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               status;$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               status;$/;"	m	struct:TPCE::TSecurityDetailTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               status;$/;"	m	struct:TPCE::TTradeCleanupTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               status;$/;"	m	struct:TPCE::TTradeLookupTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               status;$/;"	m	struct:TPCE::TTradeStatusTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               status;$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           status;$/;"	m	struct:TPCE::TBrokerVolumeTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           status;$/;"	m	struct:TPCE::TMarketFeedTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32       status;$/;"	m	struct:TPCE::TTradeResultTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   status;$/;"	m	struct:TPCE::TDataMaintenanceTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   status;$/;"	m	struct:TPCE::TMarketWatchTxnOutput
status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   status;$/;"	m	struct:TPCE::TTradeOrderTxnOutput
status	masstree/json.hh	/^    bool status() const {$/;"	f	class:lcdf::Json_get_proxy
status	masstree/json.hh	/^    const Json_get_proxy& status(bool& x) const {$/;"	f	class:lcdf::Json_get_proxy
statusTypeTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CStatusTypeTable*			statusTypeTable;$/;"	m	class:TPCE::CGenerateAndLoad
status_	masstree/json.hh	/^    bool status_;$/;"	m	class:lcdf::Json_get_proxy
status_	txn_proto2_impl.h	/^    std::atomic<bool> status_;$/;"	m	struct:transaction_proto2_static::hackstruct
status_error	masstree/msgpacktest.cc	/^enum { status_ok, status_error, status_incomplete };$/;"	e	enum:__anon21	file:
status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    status_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame3Output
status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    status_id[cST_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame4Input
status_incomplete	masstree/msgpacktest.cc	/^enum { status_ok, status_error, status_incomplete };$/;"	e	enum:__anon21	file:
status_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                status_name[max_trade_status_len][cST_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
status_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                status_name[max_trade_status_len][cST_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusTxnOutput
status_ok	masstree/msgpacktest.cc	/^enum { status_ok, status_error, status_incomplete };$/;"	e	enum:__anon21	file:
status_submitted	benchmarks/egen/TxnHarnessStructs.h	/^    char    status_submitted[cST_ID_len+1];$/;"	m	struct:TPCE::TStatusAndTradeType
std	marked_ptr.h	/^namespace std {$/;"	n
std_pair_first_cmp	util.h	/^struct std_pair_first_cmp {$/;"	s	namespace:util
std_reverse_pq	util.h	/^struct std_reverse_pq {$/;"	s	namespace:util
stddev	benchmarks/egen/EGenValidate.cpp	/^        double  stddev;$/;"	m	class:BucketSimOptions	file:
stdinmark	third-party/lz4/lz4c.c	/^char stdinmark[] = "stdin";$/;"	v
stdoutmark	third-party/lz4/lz4c.c	/^char stdoutmark[] = "stdout";$/;"	v
stop	benchmarks/egen/threading.h	/^void Thread<T>::stop()$/;"	f	class:TPCE::Thread
stop	benchmarks/egen/threading_pthread.h	/^        void stop() {$/;"	f	class:TPCE::Thread
stop	benchmarks/egen/threading_single.h	/^        void stop() {$/;"	f	class:TPCE::Thread
stop	scopedperf.hh	/^  void stop() {$/;"	f	class:scopedperf::killable_perf_region
stop_loss	benchmarks/egen/DriverParamSettings.h	/^    INT32   stop_loss;$/;"	m	struct:TPCE::TTradeOrderSettings
stop_loss	benchmarks/egen/DriverParamSettings.h	/^    bool    stop_loss;$/;"	m	struct:TPCE::TTradeOrderSettingsState
stopwatch_t	dbcore/stopwatch.h	/^    stopwatch_t() {$/;"	f	class:stopwatch_t
stopwatch_t	dbcore/stopwatch.h	/^class stopwatch_t {$/;"	c
storage_type	masstree/kpermuter.hh	/^    typedef typename info::storage_type storage_type;$/;"	t	class:kpermuter
storage_type	masstree/kpermuter.hh	/^    typedef uint16_t storage_type;$/;"	t	struct:sized_kpermuter_info
storage_type	masstree/kpermuter.hh	/^    typedef uint32_t storage_type;$/;"	t	struct:sized_kpermuter_info
storage_type	masstree/kpermuter.hh	/^    typedef uint64_t storage_type;$/;"	t	struct:sized_kpermuter_info
store	masstree/log.cc	/^    static size_t store(char *buf, uint32_t command) {$/;"	f	struct:logrec_base
store	masstree/log.cc	/^    static size_t store(char *buf, uint32_t command, kvepoch_t epoch) {$/;"	f	struct:logrec_epoch
store	masstree/log.cc	/^    static size_t store(char *buf, uint32_t command,$/;"	f	struct:logrec_kv
store	masstree/log.cc	/^    static size_t store(char *buf, uint32_t command,$/;"	f	struct:logrec_kvdelta
str	benchmarks/bid.cc	/^  str()$/;"	f	class:bid_worker	file:
str	benchmarks/tpcc.cc	/^  str()$/;"	f	class:tpcc_worker
str	benchmarks/tpce.cc	/^			str()$/;"	f	class:tpce_worker
str	masstree/json.hh	/^        String::rep_type str;$/;"	m	union:lcdf::Json::rep_type
str	record/inline_str.h	/^  str() const$/;"	f	class:inline_str_fixed
str	record/inline_str.h	/^  str(bool zeropad = false) const$/;"	f	class:inline_str_base
str	varkey.h	/^  std::string str() const$/;"	f	class:varkey
str	varkey.h	/^  str(std::string &buf) const$/;"	f	class:varkey
str_	masstree/json.hh	/^    String str_;$/;"	m	class:lcdf::Json::streaming_parser
str_	masstree/msgpack.hh	/^    String str_;$/;"	m	class:msgpack::parser
str_	masstree/msgpack.hh	/^    String str_;$/;"	m	class:msgpack::streaming_parser
str_arena	str_arena.h	/^  str_arena()$/;"	f	class:str_arena
str_arena	str_arena.h	/^class str_arena {$/;"	c
straggler	dbcore/epoch.cpp	/^    bool straggler;$/;"	m	struct:epoch_mgr::thread_state	file:
straggler_check	dbcore/epoch.cpp	/^straggler_check(epoch_mgr *em, epoch_mgr::thread_state *self, epoch_mgr::epoch_num tmp)$/;"	f	file:
straggler_ended	dbcore/epoch.cpp	/^straggler_ended(epoch_mgr *em)$/;"	f	file:
streamChecksum	third-party/lz4/lz4c.c	/^static int streamChecksum = 1;$/;"	v	file:
streaming_parser	masstree/json.hh	/^class Json::streaming_parser {$/;"	c	class:lcdf::Json
streaming_parser	masstree/json.hh	/^inline Json::streaming_parser::streaming_parser()$/;"	f	class:lcdf::Json::streaming_parser
streaming_parser	masstree/msgpack.hh	/^class streaming_parser {$/;"	c	namespace:msgpack
streaming_parser	masstree/msgpack.hh	/^inline streaming_parser::streaming_parser()$/;"	f	class:msgpack::streaming_parser
string	masstree/misc.hh	/^    lcdf::Str string() const {$/;"	f	struct:quick_istr
string_allocator	txn.h	/^  string_allocator()$/;"	f	class:transaction
string_allocator_type	txn.h	/^  typedef typename Traits::StringAllocator string_allocator_type;$/;"	t	class:transaction
string_restore	btree_impl.h	/^  inline string_restore(S &s, size_t n)$/;"	f	class:string_restore
string_restore	btree_impl.h	/^class string_restore {$/;"	c
string_slice	masstree/string_slice.hh	/^template <typename T> struct string_slice {$/;"	s
string_to_int_key	masstree/json.cc	/^template <typename T> bool string_to_int_key(const char *first,$/;"	f	namespace:lcdf::__anon60
string_type	base_txn_btree.h	/^  typedef transaction_base::string_type string_type;$/;"	t	class:base_txn_btree
string_type	btree.h	/^  typedef std::string string_type;$/;"	t	class:btree
string_type	masstree_btree.h	/^  typedef lcdf::Str string_type;$/;"	t	class:mbtree
string_type	tuple.h	/^  typedef std::string string_type;$/;"	t	struct:dbtuple
string_type	txn.h	/^  typedef dbtuple::string_type string_type;$/;"	t	class:transaction_base
string_type	txn_btree.h	/^  typedef typename super_type::string_type string_type;$/;"	t	class:txn_btree
string_type	txn_proto2_impl.h	/^  typedef transaction_base::string_type string_type;$/;"	t	class:transaction_proto2
string_type	typed_txn_btree.h	/^  typedef typename super_type::string_type string_type;$/;"	t	class:typed_txn_btree
stringbag	masstree/stringbag.hh	/^    stringbag(int width, size_t allocated_size) {$/;"	f	class:stringbag
stringbag	masstree/stringbag.hh	/^class stringbag {$/;"	c
strs	str_arena.h	/^  std::string strs[NStrs];$/;"	m	class:str_arena
strs	util.h	/^  std::vector<std::shared_ptr<std::string>> strs;$/;"	m	struct:util::default_string_allocator
strtodbl	benchmarks/egen/strutil.cpp	/^double strtodbl(const char *ptr) {$/;"	f	namespace:TPCE
strtoint64	benchmarks/egen/strutil.cpp	/^INT64 strtoint64(const char *ptr) {$/;"	f	namespace:TPCE
strtoull	benchmarks/egen/strutil.cpp	48;"	d	file:
sub	benchmarks/runner.py	/^def sub(a, b):$/;"	f
substring	masstree/str.hh	/^    Str substring(const char *first, const char *last) const {$/;"	f	struct:lcdf::Str
substring	masstree/str.hh	/^    Str substring(const unsigned char *first, const unsigned char *last) const {$/;"	f	struct:lcdf::Str
substring	masstree/string.cc	/^String::substring(int pos, int len) const$/;"	f	class:lcdf::String
substring	masstree/string.hh	/^inline String String::substring(const char* first, const char* last) const {$/;"	f	class:lcdf::String
substring	masstree/string.hh	/^inline String String::substring(const unsigned char* first, const unsigned char* last) const {$/;"	f	class:lcdf::String
substring	masstree/string.hh	/^inline String String::substring(int pos) const {$/;"	f	class:lcdf::String
substring_type	masstree/str.hh	/^    typedef Str substring_type;$/;"	t	struct:lcdf::Str
substring_type	masstree/string.hh	/^    typedef String substring_type;$/;"	t	class:lcdf::String
subtest_cond	masstree/mttest.cc	/^static pthread_cond_t subtest_cond;$/;"	v	file:
subtest_mutex	masstree/mttest.cc	/^static pthread_mutex_t subtest_mutex;$/;"	v	file:
subtract	masstree/json.hh	/^inline Json& Json::subtract(T x) {$/;"	f	class:lcdf::Json
subtract	masstree/json.hh	/^inline Json& Json::subtract(double x) {$/;"	f	class:lcdf::Json
subtract	util.h	/^	subtract(const struct timespec *x,$/;"	f	struct:util::timespec_utils
success	masstree/json.hh	/^inline bool Json::streaming_parser::success() const {$/;"	f	class:lcdf::Json::streaming_parser
success	masstree/msgpack.hh	/^inline bool streaming_parser::success() const {$/;"	f	class:msgpack::streaming_parser
suffix	btree.h	/^    suffix(size_t i) const$/;"	f	struct:btree::leaf_node
suffix	masstree/masstree_key.hh	/^    Str suffix() const {$/;"	f	class:Masstree::key
suffix_	btree.h	/^    varkey suffix_;$/;"	m	struct:btree::leaf_kvinfo
suffix_length	masstree/masstree_key.hh	/^    int suffix_length() const {$/;"	f	class:Masstree::key
suffixes_	btree.h	/^    imstring *suffixes_;$/;"	m	struct:btree::leaf_node
sum	btree.cc	/^    summary sum;$/;"	m	class:mp_test5_ns::worker	file:
sum	masstree/kvstats.hh	/^  double min, max, sum, sumsq;$/;"	m	struct:kvstats
sum	scopedperf.hh	/^    uint64_t sum[perfsum_tmpl<Enabler, Counters...>::ps_nctr];$/;"	m	struct:scopedperf::perfsum_ctr::stats
sum_	counter.h	/^  uint64_t sum_;$/;"	m	struct:counter_data
sum_all_cores	masstree/perfstat.cc	/^sum_all_cores(const stat **s, int n, const int offset) {$/;"	f	namespace:Perf
sum_all_cores_of	masstree/perfstat.cc	98;"	d	file:
sum_all_cores_of_array	masstree/perfstat.cc	105;"	d	file:
sum_all_per_chip	masstree/perfstat.cc	/^sum_all_per_chip(const stat **s, int n, const int offset) {$/;"	f	namespace:Perf
sum_all_per_chip_of	masstree/perfstat.cc	102;"	d	file:
sum_all_per_chip_of_array	masstree/perfstat.cc	111;"	d	file:
sum_one_chip	masstree/perfstat.cc	/^sum_one_chip(const stat **s, int n, const int offset, const int chipidx) {$/;"	f	namespace:Perf
sum_one_chip_of	masstree/perfstat.cc	100;"	d	file:
sum_one_chip_of_array	masstree/perfstat.cc	108;"	d	file:
summarize_ssn_aborts	dbcore/ssn.cpp	/^void summarize_ssn_aborts()$/;"	f	namespace:TXN
summary	benchmarks/egen/TxnHarnessStructs.h	/^    char                summary[cNI_SUMMARY_len+1];$/;"	m	struct:TPCE::TNews
summary	btree.cc	/^  struct summary {$/;"	s	namespace:mp_test5_ns	file:
sums_	counter.h	/^    percore<uint64_t, false, false> sums_;$/;"	m	struct:private_::event_ctx_avg
sumsq	masstree/kvstats.hh	/^  double min, max, sum, sumsq;$/;"	m	struct:kvstats
super_type	record/inline_str.h	/^  typedef inline_str_base<uint16_t, N> super_type;$/;"	t	class:inline_str_16
super_type	record/inline_str.h	/^  typedef inline_str_base<uint8_t, N> super_type;$/;"	t	class:inline_str_8
super_type	txn_btree.h	/^  typedef base_txn_btree<Transaction, txn_btree_> super_type;$/;"	t	class:txn_btree
super_type	txn_proto2_impl.h	/^  typedef transaction<transaction_proto2, Traits> super_type;$/;"	t	class:transaction_proto2
super_type	typed_txn_btree.h	/^  typedef base_txn_btree<Transaction, typed_txn_btree_<Schema>> super_type;$/;"	t	class:typed_txn_btree
superpage_size	masstree/kvthread.cc	/^static size_t superpage_size = 0;$/;"	v	file:
swap	imstring.h	/^  swap(base_imstring<R> &that)$/;"	f	class:base_imstring
swap	masstree/json.hh	/^    void swap(Json& x) {$/;"	f	class:lcdf::Json_proxy_base
swap	masstree/json.hh	/^inline void Json::swap(Json& x) {$/;"	f	class:lcdf::Json
swap	masstree/json.hh	/^inline void swap(Json& a, Json& b) {$/;"	f	namespace:lcdf
swap	masstree/straccum.cc	/^StringAccum::swap(StringAccum &x)$/;"	f	class:lcdf::StringAccum
swap	masstree/straccum.hh	/^inline void swap(StringAccum& a, StringAccum& b) {$/;"	f	namespace:lcdf
swap	masstree/string.hh	/^    void swap(rep_type& other_rep) {$/;"	f	class:lcdf::String
swap	masstree/string.hh	/^inline void String::swap(String &x) {$/;"	f	class:lcdf::String
swap	masstree/string.hh	/^inline void swap(String& a, String& b) {$/;"	f	namespace:lcdf
swap32	third-party/lz4/lz4c.c	/^  static inline unsigned int swap32(unsigned int x) {$/;"	f	file:
swap32	third-party/lz4/lz4c.c	66;"	d	file:
swap32	third-party/lz4/lz4c.c	68;"	d	file:
swap_with	btree.h	/^  swap_with(T *dest, T *source, size_t p, size_t n)$/;"	f	class:btree
switch_to_short_argument	masstree/clp.c	/^switch_to_short_argument(Clp_Parser *clp)$/;"	f	file:
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TSecurityDetailTxnInput
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTickerEntry
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame3Input
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeLookupTxnInput
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeRequest
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeResultFrame2Input
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3Input
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeUpdateTxnInput
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[max_hist_len][cSYMBOL_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame2Output
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[max_hist_len][cSYMBOL_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char                symbol[max_trade_status_len][cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char            symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char    symbol[cSYMBOL_len+1];          \/\/ IN-OUT parameter$/;"	m	struct:TPCE::TTradeOrderFrame3Input
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char    symbol[cSYMBOL_len+1];      \/\/ IN-OUT parameter$/;"	m	struct:TPCE::TTradeOrderFrame3Output
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char    symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char    symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame4Input
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char    symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeResultFrame1Output
symbol	benchmarks/egen/TxnHarnessStructs.h	/^    char    symbol[cSYMBOL_len+1];$/;"	m	struct:TPCE::TTradeResultFrame4Input
sync_write_file_contents	masstree/file.cc	/^int sync_write_file_contents(const char *filename, const lcdf::String &contents,$/;"	f
system_sync_epoch_	persist_test.cc	/^  aligned_padded_elem<atomic<uint64_t>> system_sync_epoch_;$/;"	m	class:database_simulation	file:
sz	record/inline_str.h	/^  IntSizeType sz;$/;"	m	class:inline_str_base
szDB	benchmarks/egen/EGenLoader.cpp	/^char                szDB[iMaxDBName];$/;"	v
szDriverTypeNames	benchmarks/egen/BaseLogger.cpp	/^char TPCE::szDriverTypeNames[eDriverMax][14] =$/;"	m	class:TPCE	file:
szInDir	benchmarks/egen/EGenLoader.cpp	/^char                szInDir[iMaxPath];$/;"	v
szLoaderParms	benchmarks/egen/EGenLoader.cpp	/^char                szLoaderParms[1024];$/;"	v
szOutDir	benchmarks/egen/EGenLoader.cpp	/^char                szOutDir[iMaxPath];$/;"	v
szServer	benchmarks/egen/EGenLoader.cpp	/^char                szServer[iMaxHostname];$/;"	v
szUSAreaCode	benchmarks/egen/CustomerTable.cpp	/^const char *szUSAreaCode="011"; \/\/USA\/Canada phone area code$/;"	m	namespace:TPCE	file:
t	base_txn_btree.h	/^    Transaction<Traits> *const t;$/;"	m	struct:base_txn_btree::txn_search_range_callback
t	btree.cc	/^  util::timer t;$/;"	m	class:scoped_rate_timer	file:
t	util.h	/^  timer t;$/;"	m	class:util::scoped_timer
tab_width	masstree/json.hh	/^    int tab_width() const {$/;"	f	class:lcdf::Json::unparse_manipulator
tab_width	masstree/json.hh	/^    unparse_manipulator tab_width(int x) const {$/;"	f	class:lcdf::Json::unparse_manipulator
tab_width	masstree/json.hh	/^inline Json::unparse_manipulator Json::tab_width(int x) {$/;"	f	class:lcdf::Json
tab_width_	masstree/json.hh	/^    int tab_width_;$/;"	m	class:lcdf::Json::unparse_manipulator
table	masstree/query_masstree.hh	/^    basic_table<P>& table() {$/;"	f	class:Masstree::query_table
table	masstree/query_masstree.hh	/^    const basic_table<P>& table() const {$/;"	f	class:Masstree::query_table
table	small_unordered_map.h	/^  bucket *table[TableSize];$/;"	m	class:small_unordered_map
table	static_unordered_map.h	/^  bucket *table[TableSize];$/;"	m	class:static_unordered_map
table_	masstree/masstree_struct.hh	/^	basic_table_type* table_;$/;"	m	class:Masstree::node_base
table_	masstree/mttest.cc	/^    T *table_;$/;"	m	struct:kvtest_client	file:
table_	masstree/mttest.cc	/^    static T *table_;$/;"	m	struct:test_thread	file:
table_	masstree/mttest.cc	/^template <typename T> T *test_thread<T>::table_;$/;"	m	class:test_thread	file:
table_	masstree/query_masstree.hh	/^    basic_table<P> table_;$/;"	m	class:Masstree::query_table
table_	masstree_btree.h	/^  Masstree::basic_table<P> table_;$/;"	m	class:mbtree
table_is_full	dbcore/sm-exceptions.h	/^struct table_is_full { };$/;"	s
table_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    table_name[max_table_name+1];$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
tables	dbcore/test-sm-oid.cpp	/^FID tables[NTABLES];$/;"	v
tag	btree.cc	/^    uint8_t tag;$/;"	m	struct:test_range_scan_helper::expect	file:
tagTIMESTAMP_STRUCT	benchmarks/egen/DateTime.h	/^typedef struct tagTIMESTAMP_STRUCT$/;"	s	namespace:TPCE
tail_	circbuf.h	/^  std::atomic<unsigned> tail_;$/;"	m	class:circbuf
tail_	masstree/kvthread.hh	/^    int tail_;$/;"	m	struct:limbo_group
take	dbcore/rcu.cpp	/^pointer *pointer_stash::take() {$/;"	f	class:RCU::pointer_stash
take_one	dbcore/xid.cpp	/^take_one(thread_data *t)$/;"	f	namespace:TXN
take_string	masstree/straccum.cc	/^StringAccum::take_string()$/;"	f	class:lcdf::StringAccum
tax_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double  tax_amount;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
tax_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double  tax_amount;$/;"	m	struct:TPCE::TTradeOrderTxnOutput
tax_amount	benchmarks/egen/TxnHarnessStructs.h	/^    double  tax_amount;$/;"	m	struct:TPCE::TTradeResultFrame3Output
tax_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                tax_id[cTAX_ID_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame1Input
tax_id	benchmarks/egen/TxnHarnessStructs.h	/^    char        tax_id[cTAX_ID_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnInput
tax_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    tax_id[cTAX_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame1Output
tax_status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               tax_status;$/;"	m	struct:TPCE::TTradeResultFrame2Output
tax_status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   tax_status;$/;"	m	struct:TPCE::TTradeOrderFrame1Output
tax_status	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   tax_status;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
taxrateTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CTaxrateTable*				taxrateTable;$/;"	m	class:TPCE::CGenerateAndLoad
tbl	benchmarks/encstress.cc	/^  abstract_ordered_index *tbl;$/;"	m	class:encstress_worker	file:
tbl	benchmarks/queue.cc	/^  abstract_ordered_index *tbl;$/;"	m	class:queue_worker	file:
tc_alloc	masstree/mtcounters.hh	/^    tc_alloc,$/;"	e	enum:threadcounter
tc_alloc_other	masstree/mtcounters.hh	/^    tc_alloc_other = tc_alloc + 1,$/;"	e	enum:threadcounter
tc_alloc_value	masstree/mtcounters.hh	/^    tc_alloc_value = tc_alloc,$/;"	e	enum:threadcounter
tc_gc	masstree/mtcounters.hh	/^    tc_gc,$/;"	e	enum:threadcounter
tc_internode_lock	masstree/mtcounters.hh	/^    tc_internode_lock,$/;"	e	enum:threadcounter
tc_internode_retry	masstree/mtcounters.hh	/^    tc_internode_retry,$/;"	e	enum:threadcounter
tc_leaf_lock	masstree/mtcounters.hh	/^    tc_leaf_lock,$/;"	e	enum:threadcounter
tc_leaf_retry	masstree/mtcounters.hh	/^    tc_leaf_retry,$/;"	e	enum:threadcounter
tc_leaf_walk	masstree/mtcounters.hh	/^    tc_leaf_walk,$/;"	e	enum:threadcounter
tc_limbo_slots	masstree/mtcounters.hh	/^    tc_limbo_slots,$/;"	e	enum:threadcounter
tc_max	masstree/mtcounters.hh	/^    tc_max$/;"	e	enum:threadcounter
tc_replay_create_delta	masstree/mtcounters.hh	/^    tc_replay_create_delta,$/;"	e	enum:threadcounter
tc_replay_remove_delta	masstree/mtcounters.hh	/^    tc_replay_remove_delta,$/;"	e	enum:threadcounter
tc_root_retry	masstree/mtcounters.hh	/^    tc_root_retry,$/;"	e	enum:threadcounter
tc_stable	masstree/mtcounters.hh	/^    tc_stable,$/;"	e	enum:threadcounter
tc_stable_internode_insert	masstree/mtcounters.hh	/^    tc_stable_internode_insert = tc_stable + 0,$/;"	e	enum:threadcounter
tc_stable_internode_split	masstree/mtcounters.hh	/^    tc_stable_internode_split = tc_stable + 1,$/;"	e	enum:threadcounter
tc_stable_leaf_insert	masstree/mtcounters.hh	/^    tc_stable_leaf_insert = tc_stable + 2,$/;"	e	enum:threadcounter
tc_stable_leaf_split	masstree/mtcounters.hh	/^    tc_stable_leaf_split = tc_stable + 3,$/;"	e	enum:threadcounter
tcpfds	masstree/mtd.cc	/^    tcpfds(int pipefd) {$/;"	f	struct:tcpfds
tcpfds	masstree/mtd.cc	/^    tcpfds(int pipefd)$/;"	f	class:tcpfds
tcpfds	masstree/mtd.cc	/^class tcpfds {$/;"	c	file:
tcpfds	masstree/mtd.cc	/^struct tcpfds {$/;"	s	file:
tcpgo	masstree/mtd.cc	/^tcpgo(void *xarg)$/;"	f
tcpthreads	masstree/mtd.cc	/^static int tcpthreads = 0;$/;"	v	file:
tcpthreads	masstree/mttest.cc	/^static int tcpthreads = 0;$/;"	v	file:
tcursor	masstree/masstree_tcursor.hh	/^    tcursor(basic_table<P>& table, Str str)$/;"	f	class:Masstree::tcursor
tcursor	masstree/masstree_tcursor.hh	/^    tcursor(basic_table<P>& table, const char* s, int len)$/;"	f	class:Masstree::tcursor
tcursor	masstree/masstree_tcursor.hh	/^    tcursor(basic_table<P>& table, const unsigned char* s, int len)$/;"	f	class:Masstree::tcursor
tcursor	masstree/masstree_tcursor.hh	/^    tcursor(node_base<P>* root, const char* s, int len)$/;"	f	class:Masstree::tcursor
tcursor	masstree/masstree_tcursor.hh	/^    tcursor(node_base<P>* root, const unsigned char* s, int len)$/;"	f	class:Masstree::tcursor
tcursor	masstree/masstree_tcursor.hh	/^class tcursor {$/;"	c	namespace:Masstree
tempprefix	benchmarks/runner.py	/^        tempprefix = MACHINE_CONFIG[node]['tempprefix']$/;"	v
terminate	persist_test.cc	/^  terminate()$/;"	f	class:database_simulation
test	btree.cc	/^  void test()$/;"	f	class:test_range_scan_helper
test	masstree/kvthread.hh	/^    static bool test(threadcounter ci) {$/;"	f	struct:has_threadcounter
test	masstree/kvthread.hh	/^    static bool test(threadcounter) {$/;"	f	struct:has_threadcounter
test	masstree/msgpacktest.cc	/^static void test(const char* file, int line,$/;"	f	file:
test	masstree/query_masstree.cc	/^void query_table<P>::test(threadinfo& ti) {$/;"	f	class:Masstree::query_table
test1	btree.cc	/^test1()$/;"	f	file:
test2	btree.cc	/^test2()$/;"	f	file:
test3	btree.cc	/^test3()$/;"	f	file:
test4	btree.cc	/^test4()$/;"	f	file:
test5	btree.cc	/^test5()$/;"	f	file:
test6	btree.cc	/^test6()$/;"	f	file:
test6_ns	btree.cc	/^namespace test6_ns {$/;"	n	file:
test7	btree.cc	/^test7()$/;"	f	file:
test_and_set_acquire	masstree/compiler.hh	/^inline void test_and_set_acquire(T* object) {$/;"	f
test_and_set_release	masstree/compiler.hh	/^inline void test_and_set_release(T* object) {$/;"	f
test_atomics	masstree/test_atomics.cc	/^void test_atomics() {$/;"	f
test_bitset	dbcore/test-sm-oid-alloc-impl.cpp	/^void test_bitset() {$/;"	f
test_canary	third-party/lz4/fuzzer.c	/^int test_canary(unsigned char *buf)$/;"	f
test_ensure_printable	btree.cc	/^static __attribute__((used)) void test_ensure_printable() {$/;"	f	file:
test_error	masstree/msgpacktest.cc	/^static void test_error(const char* file, int line,$/;"	f	file:
test_insert_remove_mix	btree.cc	/^test_insert_remove_mix()$/;"	f	file:
test_json	masstree/test_atomics.cc	/^void test_json()$/;"	f
test_kpermuter	masstree/test_atomics.cc	/^void test_kpermuter() {$/;"	f
test_limit	masstree/mtd.cc	/^static uint64_t test_limit = ~uint64_t(0);$/;"	v	file:
test_limit	masstree/mttest.cc	/^uint64_t test_limit = ~uint64_t(0);$/;"	v
test_multi_layer_scan	btree.cc	/^test_multi_layer_scan()$/;"	f	file:
test_null_keys	btree.cc	/^test_null_keys()$/;"	f	file:
test_null_keys_2	btree.cc	/^test_null_keys_2()$/;"	f	file:
test_output_file	masstree/mttest.cc	/^static FILE *test_output_file;$/;"	v	file:
test_psdes_nr	masstree/test_atomics.cc	/^void test_psdes_nr() {$/;"	f
test_random_keys	btree.cc	/^test_random_keys()$/;"	f	file:
test_range_scan_helper	btree.cc	/^  test_range_scan_helper($/;"	f	class:test_range_scan_helper
test_range_scan_helper	btree.cc	/^class test_range_scan_helper : public testing_concurrent_btree::search_range_callback {$/;"	c	file:
test_string_bag	masstree/test_atomics.cc	/^void test_string_bag() {$/;"	f
test_string_slice	masstree/test_atomics.cc	/^void test_string_slice() {$/;"	f
test_thread	masstree/mttest.cc	/^    test_thread(void *arg) {$/;"	f	struct:test_thread
test_thread	masstree/mttest.cc	/^struct test_thread {$/;"	s	file:
test_thread_map	masstree/mttest.cc	/^} test_thread_map[] = {$/;"	v	typeref:struct:__anon63	file:
test_timeout	masstree/mtd.cc	/^void test_timeout(int) {$/;"	f
test_timeout	masstree/mttest.cc	/^void test_timeout(int) {$/;"	f
test_two_layer	btree.cc	/^test_two_layer()$/;"	f	file:
test_two_layer_range_scan	btree.cc	/^test_two_layer_range_scan()$/;"	f	file:
test_value_updates	masstree/test_atomics.cc	/^void test_value_updates() {$/;"	f
test_varlen_multi_layer	btree.cc	/^test_varlen_multi_layer()$/;"	f	file:
test_varlen_single_layer	btree.cc	/^test_varlen_single_layer()$/;"	f	file:
testdelta	masstree/mttest.cc	/^	testdelta = 0.08, typedelta = 0.2;$/;"	m	struct:__anon67::gnuplot_info	file:
testdelta	masstree/mttest.cc	/^constexpr double gnuplot_info::trialdelta, gnuplot_info::treetypedelta, gnuplot_info::testdelta, gnuplot_info::typedelta;$/;"	m	class:__anon67::gnuplot_info	file:
testgo	masstree/mtd.cc	/^static void *testgo(void *arg) {$/;"	f	file:
testing_concurrent_btree	btree.cc	/^typedef btree<testing_concurrent_btree_traits> testing_concurrent_btree;$/;"	t	file:
testing_concurrent_btree	btree.cc	/^typedef mbtree<testing_concurrent_btree_traits> testing_concurrent_btree;$/;"	t	file:
testing_concurrent_btree_traits	btree.cc	/^struct testing_concurrent_btree_traits : public concurrent_btree_traits {$/;"	s	file:
testing_concurrent_btree_traits	btree.cc	/^struct testing_concurrent_btree_traits : public masstree_params {$/;"	s	file:
testname_	masstree/mtd.cc	/^    const char *testname_;$/;"	m	struct:kvtest_client	file:
testrunner	masstree/testrunner.hh	/^    inline testrunner(const lcdf::String& name)$/;"	f	class:testrunner
testrunner	masstree/testrunner.hh	/^class testrunner : public testrunner_base {$/;"	c
testrunner_base	masstree/testrunner.hh	/^    testrunner_base(const lcdf::String& name)$/;"	f	class:testrunner_base
testrunner_base	masstree/testrunner.hh	/^class testrunner_base {$/;"	c
testthreads	masstree/mtd.cc	/^static int testthreads = 0;$/;"	v	file:
that	varkey.h	/^  inline varkey &operator=(const varkey &that) = default;$/;"	m	class:varkey
that	varkey.h	/^  inline varkey(const varkey &that) = default;$/;"	m	class:varkey
that	varkey.h	/^  inline varkey(varkey &&that) = default;$/;"	m	class:varkey
thd_	thread.h	/^  std::thread thd_;$/;"	m	class:ndb_thread
thds	benchmarks/runner.py	/^  thds = [1,2,4,6,8,10,12,16,20,24,28,32]$/;"	v
thehead	masstree/testrunner.cc	/^testrunner_base* testrunner_base::thehead;$/;"	m	class:testrunner_base	file:
thehead	masstree/testrunner.hh	/^    static testrunner_base* thehead;$/;"	m	class:testrunner_base
thetail	masstree/testrunner.cc	/^testrunner_base* testrunner_base::thetail;$/;"	m	class:testrunner_base	file:
thetail	masstree/testrunner.hh	/^    static testrunner_base* thetail;$/;"	m	class:testrunner_base
thread	btree.cc	/^    unsigned int thread;$/;"	m	class:mp_test_inserts_removes_ns::worker	file:
thread	btree.cc	/^    unsigned int thread;$/;"	m	class:mp_test_pinning_ns::worker	file:
thread_allocate	dbcore/sm-oid.cpp	/^thread_allocate(sm_oid_mgr_impl *om, FID f)$/;"	f	namespace:__anon93
thread_cache	dbcore/sm-oid-alloc-impl.h	/^        thread_cache(FID fid) : f(fid), nentries(0) { }$/;"	f	struct:sm_allocator::thread_cache
thread_cache	dbcore/sm-oid-alloc-impl.h	/^    struct thread_cache {$/;"	s	struct:sm_allocator
thread_cache	dbcore/sm-oid.cpp	/^thread_cache(sm_oid_mgr_impl *om, FID f)$/;"	f	namespace:__anon93
thread_data	dbcore/sm-alloc.h	/^    struct thread_data {$/;"	s	namespace:RA
thread_data	dbcore/sm-oid.cpp	/^struct thread_data {$/;"	s	namespace:__anon93	file:
thread_data	dbcore/xid.cpp	/^struct thread_data {$/;"	s	namespace:TXN	file:
thread_deregistered	dbcore/epoch.h	/^        void (*thread_deregistered)(void* cookie, void *thread_cookie);$/;"	m	struct:epoch_mgr::callbacks
thread_deregistered	dbcore/sm-alloc.cpp	/^    thread_deregistered(void *cookie, void *thread_cookie)$/;"	f	namespace:RA
thread_deregistered	dbcore/test-epoch.cpp	/^thread_deregistered(void* cookie, void *thread_cookie)$/;"	f
thread_deregistered	dbcore/xid.cpp	/^thread_deregistered(void*, void *thread_cookie)$/;"	f	namespace:TXN
thread_end	benchmarks/abstract_db.h	/^  virtual void thread_end() {}$/;"	f	class:abstract_db
thread_end	benchmarks/ndb_wrapper.h	/^  thread_end()$/;"	f	class:ndb_wrapper
thread_enter	dbcore/epoch.cpp	/^epoch_mgr::thread_enter()$/;"	f	class:epoch_mgr
thread_exit	dbcore/epoch.cpp	/^epoch_mgr::thread_exit()$/;"	f	class:epoch_mgr
thread_fini	dbcore/epoch.cpp	/^epoch_mgr::thread_fini()$/;"	f	class:epoch_mgr
thread_fini	dbcore/sm-oid.cpp	/^void thread_fini(sm_oid_mgr_impl *om) {$/;"	f	namespace:__anon93
thread_free	dbcore/sm-oid.cpp	/^thread_free(sm_oid_mgr_impl *om, FID f, OID o)$/;"	f	namespace:__anon93
thread_init	benchmarks/abstract_db.h	/^  virtual void thread_init(bool loader) {}$/;"	f	class:abstract_db
thread_init	benchmarks/ndb_wrapper.h	/^  thread_init(bool loader)$/;"	f	class:ndb_wrapper
thread_init	dbcore/epoch.cpp	/^epoch_mgr::thread_init()$/;"	f	class:epoch_mgr
thread_init	dbcore/sm-oid.cpp	/^void thread_init() {$/;"	f	namespace:__anon93
thread_initialized	dbcore/epoch.cpp	/^epoch_mgr::thread_initialized()$/;"	f	class:epoch_mgr
thread_is_active	dbcore/epoch.cpp	/^epoch_mgr::thread_is_active()$/;"	f	class:epoch_mgr
thread_main	dbcore/test-sm-oid.cpp	/^*thread_main(void *arg)$/;"	f
thread_quiesce	dbcore/epoch.cpp	/^epoch_mgr::thread_quiesce()$/;"	f	class:epoch_mgr
thread_registered	dbcore/epoch.h	/^        void *(*thread_registered)(void*);$/;"	m	struct:epoch_mgr::callbacks
thread_registered	dbcore/sm-alloc.cpp	/^    thread_registered(void*)$/;"	f	namespace:RA
thread_registered	dbcore/test-epoch.cpp	/^thread_registered(void*)$/;"	f
thread_registered	dbcore/xid.cpp	/^thread_registered(void*)$/;"	f	namespace:TXN
thread_revoke_caches	dbcore/sm-oid.cpp	/^thread_revoke_caches(sm_oid_mgr_impl *om) {$/;"	f	namespace:__anon93
thread_run	dbcore/test-rcu-slist.cpp	/^extern "C" void *thread_run(void*) {$/;"	f
thread_run	dbcore/test-rcu.cpp	/^extern "C" void *thread_run(void*) {$/;"	f
thread_state	dbcore/epoch.cpp	/^struct epoch_mgr::thread_state {$/;"	s	class:epoch_mgr	file:
threadcounter	masstree/mtcounters.hh	/^enum threadcounter {$/;"	g
threadcounter_names	masstree/mttest.cc	/^static const char *threadcounter_names[(int) tc_max];$/;"	v	file:
threadinfo	masstree/kvthread.hh	/^class threadinfo {$/;"	c
threadinfo	masstree/masstree.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::basic_table
threadinfo	masstree/masstree_remove.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	struct:Masstree::destroy_rcu_callback
threadinfo	masstree/masstree_remove.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	struct:Masstree::gc_layer_rcu_callback
threadinfo	masstree/masstree_scan.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::scanstackelt
threadinfo	masstree/masstree_struct.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::internode
threadinfo	masstree/masstree_struct.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::leaf
threadinfo	masstree/masstree_struct.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::node_base
threadinfo	masstree/masstree_tcursor.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::tcursor
threadinfo	masstree/masstree_tcursor.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::unlocked_tcursor
threadinfo	masstree/query_masstree.hh	/^    typedef typename P::threadinfo_type threadinfo;$/;"	t	class:Masstree::query_table
threadinfo	masstree_btree.h	/^  typedef typename P::threadinfo_type threadinfo;$/;"	t	class:mbtree
threadinfo_type	masstree/query_masstree.hh	/^    typedef ::threadinfo threadinfo_type;$/;"	t	struct:Masstree::default_query_table_params
threadinfo_type	masstree_btree.h	/^  typedef simple_threadinfo threadinfo_type;$/;"	t	struct:masstree_params
threads	dbcore/epoch.cpp	/^    std::map<pthread_t, thread_state*> threads;$/;"	m	struct:epoch_mgr::private_state	file:
threads	dbcore/sm-oid.cpp	/^std::map<pthread_t, thread_data*> *threads;$/;"	m	namespace:__anon93	file:
threadtype	masstree/mtd.cc	/^inline const char *threadtype(int type) {$/;"	f
three	masstree/test_atomics.cc	/^	unsigned three : 3;$/;"	m	struct:myunion::__anon14	file:
ti	masstree/checkpoint.hh	/^    threadinfo *ti;$/;"	m	struct:ckstate
ti_	masstree/kvthread.hh	/^	threadinfo *ti_;$/;"	m	struct:threadinfo::accounting_relax_fence_function
ti_	masstree/kvthread.hh	/^	threadinfo *ti_;$/;"	m	struct:threadinfo::stable_accounting_relax_fence_function
ti_	masstree/log.hh	/^            threadinfo *ti_;$/;"	m	struct:loginfo::__anon78::__anon79
ti_	masstree/mtd.cc	/^    threadinfo *ti_;$/;"	m	struct:kvtest_client	file:
ti_	masstree/mttest.cc	/^    threadinfo *ti_;$/;"	m	struct:kvtest_client	file:
ti_index	masstree/kvthread.hh	/^	    int ti_index;	    \/\/ the index of a udp, logging, tcp,$/;"	m	struct:threadinfo::__anon72::__anon73
ti_log	masstree/kvthread.hh	/^	    loginfo *ti_log;$/;"	m	struct:threadinfo::__anon72::__anon73
ti_next	masstree/kvthread.hh	/^	    threadinfo *ti_next;$/;"	m	struct:threadinfo::__anon72::__anon73
ti_pipe	masstree/kvthread.hh	/^	    int ti_pipe[2];         \/\/ the pipe used to communicate with the thread$/;"	m	struct:threadinfo::__anon72::__anon73
ti_purpose	masstree/kvthread.hh	/^	    int ti_purpose;$/;"	m	struct:threadinfo::__anon72::__anon73
ti_threadid	masstree/kvthread.hh	/^	    pthread_t ti_threadid;$/;"	m	struct:threadinfo::__anon72::__anon73
tick	ticker.h	/^    tick() const$/;"	f	class:ticker::guard
tick_	ticker.h	/^    uint64_t tick_;$/;"	m	class:ticker::guard
tick_us	ticker.h	/^  static const uint64_t tick_us = 1 * 1000; \/* 1 ms *\/$/;"	m	class:ticker
ticker	ticker.h	/^  ticker()$/;"	f	class:ticker
ticker	ticker.h	/^class ticker {$/;"	c
tickerloop	ticker.h	/^  tickerloop()$/;"	f	class:ticker
tickinfo	ticker.h	/^    tickinfo()$/;"	f	struct:ticker::tickinfo
tickinfo	ticker.h	/^  struct tickinfo {$/;"	s	class:ticker
ticks_	ticker.h	/^  percore<tickinfo> ticks_;$/;"	m	class:ticker
tid_	benchmarks/egen/threading.h	/^        TThread tid_;$/;"	m	class:TPCE::Thread
tid_	benchmarks/egen/threading_pthread.h	/^        pthread_t tid_;$/;"	m	class:TPCE::Thread
tidhelpers	persist_test.cc	/^struct tidhelpers {$/;"	s	file:
time	dbcore/stopwatch.h	/^    double time() {$/;"	f	class:stopwatch_t
time_keyslice	masstree/test_atomics.cc	/^void time_keyslice() {$/;"	f
time_ms	dbcore/stopwatch.h	/^    double time_ms() {$/;"	f	class:stopwatch_t
time_ns	dbcore/stopwatch.h	/^    uint64_t time_ns() {$/;"	f	class:stopwatch_t
time_random	masstree/test_atomics.cc	/^void time_random() {$/;"	f
time_us	dbcore/stopwatch.h	/^    double time_us() {$/;"	f	class:stopwatch_t
timeout	masstree/mtclient.cc	/^    bool timeout(int which) const {$/;"	f	struct:kvtest_client
timeout	masstree/mtclient.cc	/^volatile bool timeout[2] = {false, false};$/;"	v
timeout	masstree/mtd.cc	/^    bool timeout(int which) const {$/;"	f	struct:kvtest_client
timeout	masstree/mtd.cc	/^volatile bool timeout[2] = {false, false};$/;"	v
timeout	masstree/mttest.cc	/^    bool timeout(int which) const {$/;"	f	struct:kvtest_client
timeout	masstree/mttest.cc	/^volatile bool timeout[2] = {false, false};$/;"	v
timer	util.h	/^  timer()$/;"	f	class:util::timer
timer	util.h	/^class timer {$/;"	c	namespace:util
timespec_utils	util.h	/^struct timespec_utils {$/;"	s	namespace:util
timestamp	masstree/timestamp.hh	/^inline kvtimestamp_t timestamp() {$/;"	f
timestamp	masstree/value_array.hh	/^inline kvtimestamp_t value_array::timestamp() const {$/;"	f	class:value_array
timestamp	masstree/value_bag.hh	/^inline kvtimestamp_t value_bag<O>::timestamp() const {$/;"	f	class:value_bag
timestamp	masstree/value_string.hh	/^inline kvtimestamp_t value_string::timestamp() const {$/;"	f	class:value_string
timestamp	masstree/value_versioned_array.hh	/^inline kvtimestamp_t value_versioned_array::timestamp() const {$/;"	f	class:value_versioned_array
timestamp_sub	masstree/timestamp.hh	/^inline kvtimestamp_t timestamp_sub(kvtimestamp_t a, kvtimestamp_t b) {$/;"	f
timestamp_us_	stats_common.h	/^  uint64_t timestamp_us_; \/\/ usec$/;"	m	struct:stats_command::get_counter_value_t
timestrtoint64	benchmarks/egen/strutil.cpp	/^INT64 timestrtoint64(const char *ptr) {$/;"	f	namespace:TPCE
tl_core_id	core.cc	/^__thread int coreid::tl_core_id = -1;$/;"	m	class:coreid	file:
tl_core_id	core.h	/^  static __thread int tl_core_id;$/;"	m	class:coreid
tls	dbcore/rcu.cpp	/^    static rcu_tcb* tls() {$/;"	f	struct:RCU::rcu_tcb
tls	dbcore/sm-oid.cpp	/^__thread thread_data *tls;$/;"	m	namespace:__anon93	file:
tls	dbcore/xid.cpp	/^__thread thread_data tls;$/;"	m	namespace:TXN	file:
tls_bitmap_entry	dbcore/ssn.cpp	/^static __thread rl_bitmap_t tls_bitmap_entry = 0;$/;"	m	namespace:TXN	file:
tls_log_requests	dbcore/sm-tx-log.cpp	/^    static __thread log_request tls_log_requests[sm_log_recover_mgr::MAX_BLOCK_RECORDS];$/;"	m	namespace:__anon94	file:
tls_log_space	dbcore/sm-tx-log.cpp	/^    static __thread char LOG_ALIGN tls_log_space[sizeof(sm_tx_log_impl)];$/;"	m	namespace:__anon94	file:
tls_log_space_used	dbcore/sm-tx-log.cpp	/^    static __thread bool tls_log_space_used = false;$/;"	m	namespace:__anon94	file:
tls_rcu_active	dbcore/test-rcu-slist.cpp	/^static __thread ptr_list *tls_rcu_active;$/;"	v	file:
tls_record_buffer	dbcore/sm-trace.cpp	/^static __thread char tls_record_buffer[TLS_BUFSIZE];$/;"	m	namespace:TRACER	file:
tls_ssn_abort_count	dbcore/ssn.cpp	/^uint64_t __thread tls_ssn_abort_count;$/;"	m	namespace:TXN	file:
tls_storage	dbcore/epoch.h	/^    struct __attribute__((aligned(8))) tls_storage {$/;"	s	struct:epoch_mgr
tmp_dir	dbcore/sm-common.cpp	/^tmp_dir::tmp_dir()$/;"	f	class:tmp_dir
tmp_dir	dbcore/sm-common.h	/^struct tmp_dir {$/;"	s
to_b	masstree/json.hh	/^    bool to_b() const {$/;"	f	class:lcdf::Json_proxy_base
to_b	masstree/json.hh	/^    bool to_b(bool& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_b	masstree/json.hh	/^inline bool Json::to_b() const {$/;"	f	class:lcdf::Json
to_b	masstree/json.hh	/^inline bool Json::to_b(bool& x) const {$/;"	f	class:lcdf::Json
to_d	masstree/json.hh	/^    bool to_d(double& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_d	masstree/json.hh	/^    double to_d() const {$/;"	f	class:lcdf::Json_proxy_base
to_d	masstree/json.hh	/^inline bool Json::to_d(double& x) const {$/;"	f	class:lcdf::Json
to_d	masstree/json.hh	/^inline double Json::to_d() const {$/;"	f	class:lcdf::Json
to_ext_ptr	dbcore/sm-common.h	/^    fat_ptr to_ext_ptr() const { return fat_ptr{_val | fat_ptr::ASI_EXT_FLAG}; }$/;"	f	struct:LSN
to_hex	masstree/string.cc	/^String String::to_hex() const {$/;"	f	class:lcdf::String
to_i	masstree/json.hh	/^    bool to_i(int& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^    bool to_i(long long& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^    bool to_i(long& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^    bool to_i(unsigned long long& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^    bool to_i(unsigned long& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^    bool to_i(unsigned& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^    int64_t to_i() const {$/;"	f	class:lcdf::Json_proxy_base
to_i	masstree/json.hh	/^inline bool Json::to_i(int& x) const {$/;"	f	class:lcdf::Json
to_i	masstree/json.hh	/^inline bool Json::to_i(long long& x) const {$/;"	f	class:lcdf::Json
to_i	masstree/json.hh	/^inline bool Json::to_i(long& x) const {$/;"	f	class:lcdf::Json
to_i	masstree/json.hh	/^inline bool Json::to_i(unsigned long long& x) const {$/;"	f	class:lcdf::Json
to_i	masstree/json.hh	/^inline bool Json::to_i(unsigned long& x) const {$/;"	f	class:lcdf::Json
to_i	masstree/json.hh	/^inline bool Json::to_i(unsigned& x) const {$/;"	f	class:lcdf::Json
to_i	masstree/json.hh	/^inline int64_t Json::to_i() const {$/;"	f	class:lcdf::Json
to_i	masstree/str.hh	/^    long to_i() const {		\/\/ XXX does not handle negative$/;"	f	struct:lcdf::Str
to_i	masstree/string.cc	/^long String_generic::to_i(const char* s, const char* ends) {$/;"	f	class:lcdf::String_generic
to_i	masstree/string_base.hh	/^    long to_i() const {$/;"	f	class:lcdf::String_base
to_log_ptr	dbcore/sm-common.h	/^    fat_ptr to_log_ptr() const { return fat_ptr{_val | fat_ptr::ASI_LOG_FLAG}; }$/;"	f	struct:LSN
to_lower	util.h	/^to_lower(const std::string &s)$/;"	f	namespace:util
to_ptr	dbcore/sm-common.h	/^    fat_ptr to_ptr() const { return fat_ptr{_val | INVALID_SIZE_CODE}; }$/;"	f	struct:XID
to_ptr	dbcore/sm-common.h	/^    fat_ptr to_ptr() const { return fat_ptr{_val }; }$/;"	f	struct:LSN
to_s	masstree/json.hh	/^    String to_s() const {$/;"	f	class:lcdf::Json_proxy_base
to_s	masstree/json.hh	/^    bool to_s(Str& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_s	masstree/json.hh	/^    bool to_s(String& x) const {$/;"	f	class:lcdf::Json_proxy_base
to_s	masstree/json.hh	/^inline String Json::to_s() const {$/;"	f	class:lcdf::Json
to_s	masstree/json.hh	/^inline bool Json::to_s(Str& x) const {$/;"	f	class:lcdf::Json
to_s	masstree/json.hh	/^inline bool Json::to_s(String& x) const {$/;"	f	class:lcdf::Json
to_string_type	txn_btree.h	/^  to_string_type(const varkey &k)$/;"	f	class:txn_btree
to_u	masstree/json.hh	/^    uint64_t to_u() const {$/;"	f	class:lcdf::Json_proxy_base
to_u	masstree/json.hh	/^inline uint64_t Json::to_u() const {$/;"	f	class:lcdf::Json
to_u64	masstree/json.hh	/^    uint64_t to_u64() const {$/;"	f	class:lcdf::Json_proxy_base
to_u64	masstree/json.hh	/^inline uint64_t Json::to_u64() const {$/;"	f	class:lcdf::Json
to_utf8	masstree/string.cc	/^String::to_utf8(int flags) const$/;"	f	class:lcdf::String
tod_ctr	scopedperf.hh	/^  tod_ctr() : namedctr("tod-usec") {}$/;"	f	class:scopedperf::tod_ctr
tod_ctr	scopedperf.hh	/^class tod_ctr : public namedctr<64> {$/;"	c	namespace:scopedperf
top_stable_bits	masstree/nodeversion.hh	/^        top_stable_bits = 4$/;"	e	enum:nodeversion32_parameters::__anon10
top_stable_bits	masstree/nodeversion.hh	/^        top_stable_bits = 4$/;"	e	enum:nodeversion64_parameters::__anon11
total	benchmarks/egen/progressmeter.cpp	/^int ProgressMeter::total() const$/;"	f	class:TPCE::ProgressMeter
total_len	third-party/lz4/xxhash.c	/^    U64 total_len;$/;"	m	struct:XXH_state32_t	file:
tpcc_bench_runner	benchmarks/tpcc.cc	/^  tpcc_bench_runner(abstract_db *db)$/;"	f	class:tpcc_bench_runner
tpcc_bench_runner	benchmarks/tpcc.cc	/^class tpcc_bench_runner : public bench_runner {$/;"	c	file:
tpcc_customer_loader	benchmarks/tpcc.cc	/^  tpcc_customer_loader(unsigned long seed,$/;"	f	class:tpcc_customer_loader
tpcc_customer_loader	benchmarks/tpcc.cc	/^class tpcc_customer_loader : public bench_loader, public tpcc_worker_mixin {$/;"	c	file:
tpcc_district_loader	benchmarks/tpcc.cc	/^  tpcc_district_loader(unsigned long seed,$/;"	f	class:tpcc_district_loader
tpcc_district_loader	benchmarks/tpcc.cc	/^class tpcc_district_loader : public bench_loader, public tpcc_worker_mixin {$/;"	c	file:
tpcc_do_test	benchmarks/tpcc.cc	/^tpcc_do_test(abstract_db *db, int argc, char **argv)$/;"	f
tpcc_fast_id_extractor	benchmarks/results/make_graphs-6.py	/^    def tpcc_fast_id_extractor(enabled):$/;"	f
tpcc_item_loader	benchmarks/tpcc.cc	/^  tpcc_item_loader(unsigned long seed,$/;"	f	class:tpcc_item_loader
tpcc_item_loader	benchmarks/tpcc.cc	/^class tpcc_item_loader : public bench_loader, public tpcc_worker_mixin {$/;"	c	file:
tpcc_order_loader	benchmarks/tpcc.cc	/^  tpcc_order_loader(unsigned long seed,$/;"	f	class:tpcc_order_loader
tpcc_order_loader	benchmarks/tpcc.cc	/^class tpcc_order_loader : public bench_loader, public tpcc_worker_mixin {$/;"	c	file:
tpcc_stock_loader	benchmarks/tpcc.cc	/^  tpcc_stock_loader(unsigned long seed,$/;"	f	class:tpcc_stock_loader
tpcc_stock_loader	benchmarks/tpcc.cc	/^class tpcc_stock_loader : public bench_loader, public tpcc_worker_mixin {$/;"	c	file:
tpcc_warehouse_loader	benchmarks/tpcc.cc	/^  tpcc_warehouse_loader(unsigned long seed,$/;"	f	class:tpcc_warehouse_loader
tpcc_warehouse_loader	benchmarks/tpcc.cc	/^class tpcc_warehouse_loader : public bench_loader, public tpcc_worker_mixin {$/;"	c	file:
tpcc_worker	benchmarks/tpcc.cc	/^  tpcc_worker(unsigned int worker_id,$/;"	f	class:tpcc_worker
tpcc_worker	benchmarks/tpcc.cc	/^class tpcc_worker : public bench_worker, public tpcc_worker_mixin {$/;"	c	file:
tpcc_worker_mixin	benchmarks/tpcc.cc	/^class tpcc_worker_mixin : private _dummy {$/;"	c	file:
tpce_address_loader	benchmarks/tpce.cc	/^		tpce_address_loader(unsigned long seed,$/;"	f	class:tpce_address_loader
tpce_address_loader	benchmarks/tpce.cc	/^class tpce_address_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_bench_runner	benchmarks/tpce.cc	/^		tpce_bench_runner(abstract_db *db)$/;"	f	class:tpce_bench_runner
tpce_bench_runner	benchmarks/tpce.cc	/^class tpce_bench_runner : public bench_runner {$/;"	c	file:
tpce_ca_and_ap_loader	benchmarks/tpce.cc	/^		tpce_ca_and_ap_loader(unsigned long seed,$/;"	f	class:tpce_ca_and_ap_loader
tpce_ca_and_ap_loader	benchmarks/tpce.cc	/^class tpce_ca_and_ap_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_charge_loader	benchmarks/tpce.cc	/^		tpce_charge_loader(unsigned long seed,$/;"	f	class:tpce_charge_loader
tpce_charge_loader	benchmarks/tpce.cc	/^class tpce_charge_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_commission_rate_loader	benchmarks/tpce.cc	/^		tpce_commission_rate_loader(unsigned long seed,$/;"	f	class:tpce_commission_rate_loader
tpce_commission_rate_loader	benchmarks/tpce.cc	/^class tpce_commission_rate_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_company_competitor_loader	benchmarks/tpce.cc	/^		tpce_company_competitor_loader(unsigned long seed,$/;"	f	class:tpce_company_competitor_loader
tpce_company_competitor_loader	benchmarks/tpce.cc	/^class tpce_company_competitor_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_company_loader	benchmarks/tpce.cc	/^		tpce_company_loader(unsigned long seed,$/;"	f	class:tpce_company_loader
tpce_company_loader	benchmarks/tpce.cc	/^class tpce_company_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_customer_loader	benchmarks/tpce.cc	/^		tpce_customer_loader(unsigned long seed,$/;"	f	class:tpce_customer_loader
tpce_customer_loader	benchmarks/tpce.cc	/^class tpce_customer_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_customer_taxrate_loader	benchmarks/tpce.cc	/^		tpce_customer_taxrate_loader(unsigned long seed,$/;"	f	class:tpce_customer_taxrate_loader
tpce_customer_taxrate_loader	benchmarks/tpce.cc	/^class tpce_customer_taxrate_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_daily_market_loader	benchmarks/tpce.cc	/^		tpce_daily_market_loader(unsigned long seed,$/;"	f	class:tpce_daily_market_loader
tpce_daily_market_loader	benchmarks/tpce.cc	/^class tpce_daily_market_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_do_test	benchmarks/tpce.cc	/^void tpce_do_test(abstract_db *db, int argc, char **argv)$/;"	f
tpce_exchange_loader	benchmarks/tpce.cc	/^		tpce_exchange_loader(unsigned long seed,$/;"	f	class:tpce_exchange_loader
tpce_exchange_loader	benchmarks/tpce.cc	/^class tpce_exchange_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_financial_loader	benchmarks/tpce.cc	/^		tpce_financial_loader(unsigned long seed,$/;"	f	class:tpce_financial_loader
tpce_financial_loader	benchmarks/tpce.cc	/^class tpce_financial_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_growing_loader	benchmarks/tpce.cc	/^		tpce_growing_loader(unsigned long seed,$/;"	f	class:tpce_growing_loader
tpce_growing_loader	benchmarks/tpce.cc	/^class tpce_growing_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_industry_loader	benchmarks/tpce.cc	/^		tpce_industry_loader(unsigned long seed,$/;"	f	class:tpce_industry_loader
tpce_industry_loader	benchmarks/tpce.cc	/^class tpce_industry_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_last_trade_loader	benchmarks/tpce.cc	/^		tpce_last_trade_loader(unsigned long seed,$/;"	f	class:tpce_last_trade_loader
tpce_last_trade_loader	benchmarks/tpce.cc	/^class tpce_last_trade_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_ni_and_nx_loader	benchmarks/tpce.cc	/^		tpce_ni_and_nx_loader(unsigned long seed,$/;"	f	class:tpce_ni_and_nx_loader
tpce_ni_and_nx_loader	benchmarks/tpce.cc	/^class tpce_ni_and_nx_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_sector_loader	benchmarks/tpce.cc	/^		tpce_sector_loader(unsigned long seed,$/;"	f	class:tpce_sector_loader
tpce_sector_loader	benchmarks/tpce.cc	/^class tpce_sector_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_security_loader	benchmarks/tpce.cc	/^		tpce_security_loader(unsigned long seed,$/;"	f	class:tpce_security_loader
tpce_security_loader	benchmarks/tpce.cc	/^class tpce_security_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_status_type_loader	benchmarks/tpce.cc	/^		tpce_status_type_loader(unsigned long seed,$/;"	f	class:tpce_status_type_loader
tpce_status_type_loader	benchmarks/tpce.cc	/^class tpce_status_type_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_tax_rate_loader	benchmarks/tpce.cc	/^		tpce_tax_rate_loader(unsigned long seed,$/;"	f	class:tpce_tax_rate_loader
tpce_tax_rate_loader	benchmarks/tpce.cc	/^class tpce_tax_rate_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_trade_type_loader	benchmarks/tpce.cc	/^		tpce_trade_type_loader(unsigned long seed,$/;"	f	class:tpce_trade_type_loader
tpce_trade_type_loader	benchmarks/tpce.cc	/^class tpce_trade_type_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_wl_and_wi_loader	benchmarks/tpce.cc	/^		tpce_wl_and_wi_loader(unsigned long seed,$/;"	f	class:tpce_wl_and_wi_loader
tpce_wl_and_wi_loader	benchmarks/tpce.cc	/^class tpce_wl_and_wi_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpce_worker	benchmarks/tpce.cc	/^		tpce_worker(unsigned int worker_id,$/;"	f	class:tpce_worker
tpce_worker	benchmarks/tpce.cc	/^class tpce_worker : $/;"	c	file:
tpce_worker_mixin	benchmarks/tpce.cc	/^class tpce_worker_mixin : private _dummy {$/;"	c	file:
tpce_zip_code_loader	benchmarks/tpce.cc	/^		tpce_zip_code_loader(unsigned long seed,$/;"	f	class:tpce_zip_code_loader
tpce_zip_code_loader	benchmarks/tpce.cc	/^class tpce_zip_code_loader : public bench_loader, public tpce_worker_mixin {$/;"	c	file:
tpse	benchmarks/egen/EGenValidate.cpp	/^        double  tpse;$/;"	m	class:BucketSimOptions	file:
trace_fd	dbcore/sm-trace.cpp	/^int trace_fd;$/;"	m	namespace:TRACER	file:
trace_filename	dbcore/sm-trace.cpp	/^std::string trace_filename;$/;"	m	namespace:TRACER	file:
trace_insert	dbcore/sm-trace.cpp	/^trace_insert(uintptr_t version, uint32_t size)$/;"	f	namespace:TRACER
trace_mutex	dbcore/sm-trace.cpp	/^std::mutex trace_mutex;$/;"	m	namespace:TRACER	file:
trace_read	dbcore/sm-trace.cpp	/^trace_read(uintptr_t version, uint32_t size, uint32_t pos,$/;"	f	namespace:TRACER
trace_record_header	dbcore/sm-trace.cpp	/^struct trace_record_header {$/;"	s	namespace:TRACER	file:
trace_update	dbcore/sm-trace.cpp	/^trace_update(uintptr_t old_version, uintptr_t new_version,$/;"	f	namespace:TRACER
tradeTypeTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CTradeTypeTable*			tradeTypeTable;$/;"	m	class:TPCE::CGenerateAndLoad
trade_cleanup	benchmarks/tpce.cc	/^		txn_result trade_cleanup()$/;"	f	class:tpce_worker
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts;$/;"	m	struct:TPCE::TTradeLookupFrame4Input
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts;$/;"	m	struct:TPCE::TTradeResultFrame2Output
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts;$/;"	m	struct:TPCE::TTradeResultFrame5Input
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts;$/;"	m	struct:TPCE::TTradeResultFrame6Input
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_dts[max_trade_status_len];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
trade_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_dts_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_dts_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_history_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_history_dts[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
trade_history_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_history_dts[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_history_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_history_dts[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_history_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_history_dts[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
trade_history_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_history_dts[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_history_dts	benchmarks/egen/TxnHarnessStructs.h	/^    TIMESTAMP_STRUCT    trade_history_dts[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_history_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_dts_ind[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
trade_history_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_dts_ind[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_history_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_dts_ind[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_history_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_dts_ind[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
trade_history_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_dts_ind[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_history_dts_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_dts_ind[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_history_status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_history_status_id[TradeLookupMaxTradeHistoryRowsReturned][cTH_ST_ID_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
trade_history_status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_history_status_id[TradeLookupMaxTradeHistoryRowsReturned][cTH_ST_ID_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_history_status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_history_status_id[TradeLookupMaxTradeHistoryRowsReturned][cTH_ST_ID_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_history_status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_history_status_id[TradeUpdateMaxTradeHistoryRowsReturned][cTH_ST_ID_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
trade_history_status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_history_status_id[TradeUpdateMaxTradeHistoryRowsReturned][cTH_ST_ID_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_history_status_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_history_status_id[TradeUpdateMaxTradeHistoryRowsReturned][cTH_ST_ID_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_history_status_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_status_id_ind[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
trade_history_status_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_status_id_ind[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_history_status_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_status_id_ind[TradeLookupMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_history_status_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_status_id_ind[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
trade_history_status_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_status_id_ind[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_history_status_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_history_status_id_ind[TradeUpdateMaxTradeHistoryRowsReturned];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade                      trade_id;$/;"	m	struct:TPCE::TTradeLookupFrame4Output
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeRequest
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeResultFrame2Input
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeResultFrame5Input
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeResultFrame6Input
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[TradeLookupFrame1MaxRows];$/;"	m	struct:TPCE::TTradeLookupFrame1Input
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[TradeLookupFrame1MaxRows];$/;"	m	struct:TPCE::TTradeLookupTxnInput
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[TradeUpdateFrame1MaxRows];$/;"	m	struct:TPCE::TTradeUpdateFrame1Input
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[TradeUpdateFrame1MaxRows];$/;"	m	struct:TPCE::TTradeUpdateTxnInput
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[max_hist_len];$/;"	m	struct:TPCE::TCustomerPositionFrame2Output
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[max_hist_len];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[max_trade_status_len];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_id[max_trade_status_len];$/;"	m	struct:TPCE::TTradeStatusTxnOutput
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade      trade_id;$/;"	m	struct:TPCE::TTradeResultFrame1Input
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade      trade_id;$/;"	m	struct:TPCE::TTradeResultTxnInput
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade  trade_id;$/;"	m	struct:TPCE::TTradeOrderFrame4Output
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade  trade_id;$/;"	m	struct:TPCE::TTradeOrderTxnOutput
trade_id	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade  trade_id;$/;"	m	struct:TPCE::TTradeResultFrame3Input
trade_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_id_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_id_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_id_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_id_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_id_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeLookupFrame1TradeInfo trade_info[TradeLookupFrame1MaxRows];$/;"	m	struct:TPCE::TTradeLookupFrame1Output
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeLookupFrame2TradeInfo trade_info[TradeLookupFrame2MaxRows];$/;"	m	struct:TPCE::TTradeLookupFrame2Output
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeLookupFrame3TradeInfo trade_info[TradeLookupFrame3MaxRows];$/;"	m	struct:TPCE::TTradeLookupFrame3Output
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeLookupFrame4TradeInfo trade_info[TradeLookupFrame4MaxRows];$/;"	m	struct:TPCE::TTradeLookupFrame4Output
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeUpdateFrame1TradeInfo trade_info[TradeUpdateFrame1MaxRows];$/;"	m	struct:TPCE::TTradeUpdateFrame1Output
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeUpdateFrame2TradeInfo trade_info[TradeUpdateFrame2MaxRows];$/;"	m	struct:TPCE::TTradeUpdateFrame2Output
trade_info	benchmarks/egen/TxnHarnessStructs.h	/^    TTradeUpdateFrame3TradeInfo trade_info[TradeUpdateFrame3MaxRows];$/;"	m	struct:TPCE::TTradeUpdateFrame3Output
trade_is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               trade_is_cash;$/;"	m	struct:TPCE::TTradeResultFrame6Input
trade_is_cash	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   trade_is_cash;$/;"	m	struct:TPCE::TTradeResultFrame1Output
trade_list	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_list[TradeLookupMaxRows];$/;"	m	struct:TPCE::TTradeLookupTxnOutput
trade_list	benchmarks/egen/TxnHarnessStructs.h	/^    TTrade              trade_list[TradeUpdateMaxRows];$/;"	m	struct:TPCE::TTradeUpdateTxnOutput
trade_lookup	benchmarks/tpce.cc	/^		txn_result trade_lookup()$/;"	f	class:tpce_worker
trade_order	benchmarks/tpce.cc	/^		txn_result trade_order()$/;"	f	class:tpce_worker
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              trade_price;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              trade_price;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              trade_price;$/;"	m	struct:TPCE::TTradeResultFrame2Input
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              trade_price;$/;"	m	struct:TPCE::TTradeResultFrame5Input
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              trade_price;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double              trade_price;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_price	benchmarks/egen/TxnHarnessStructs.h	/^    double      trade_price;$/;"	m	struct:TPCE::TTradeResultTxnInput
trade_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_price_ind;$/;"	m	struct:TPCE::TTradeLookupFrame1TradeInfo
trade_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_price_ind;$/;"	m	struct:TPCE::TTradeLookupFrame2TradeInfo
trade_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_price_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame1TradeInfo
trade_price_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_price_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame2TradeInfo
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               trade_qty;$/;"	m	struct:TPCE::TTickerEntry
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               trade_qty;$/;"	m	struct:TPCE::TTradeRequest
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               trade_qty;$/;"	m	struct:TPCE::TTradeResultFrame2Input
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               trade_qty;$/;"	m	struct:TPCE::TTradeResultFrame6Input
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               trade_qty[max_trade_status_len];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           trade_qty;$/;"	m	struct:TPCE::TTradeOrderTxnInput
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   trade_qty;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   trade_qty;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   trade_qty;$/;"	m	struct:TPCE::TTradeResultFrame1Output
trade_qty	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   trade_qty;$/;"	m	struct:TPCE::TTradeResultFrame4Input
trade_result	benchmarks/tpce.cc	/^		txn_result trade_result()$/;"	f	class:tpce_worker
trade_status	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_status[max_hist_len][cST_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionFrame2Output
trade_status	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_status[max_hist_len][cST_NAME_len+1];$/;"	m	struct:TPCE::TCustomerPositionTxnOutput
trade_status	benchmarks/tpce.cc	/^		txn_result trade_status()$/;"	f	class:tpce_worker
trade_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_type[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_type	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_type[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_type_id	benchmarks/egen/TxnHarnessStructs.h	/^    char                trade_type_id[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeRequest
trade_type_id	benchmarks/egen/TxnHarnessStructs.h	/^    char            trade_type_id[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderTxnInput
trade_type_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    trade_type_id[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame3Input
trade_type_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    trade_type_id[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeOrderFrame4Input
trade_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_type_ind;$/;"	m	struct:TPCE::TTradeLookupFrame3TradeInfo
trade_type_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        trade_type_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
trade_update	benchmarks/tpce.cc	/^		txn_result trade_update()$/;"	f	class:tpce_worker
traits_type	masstree/nodeversion.hh	/^    typedef P traits_type;$/;"	t	class:basic_nodeversion
traits_type	masstree/nodeversion.hh	/^    typedef P traits_type;$/;"	t	class:basic_singlethreaded_nodeversion
traits_type	txn.h	/^  typedef Traits traits_type;$/;"	t	class:transaction
traits_type	txn_proto2_impl.h	/^  typedef Traits traits_type;$/;"	t	class:transaction_proto2
transaction	txn.h	/^class transaction : public transaction_base {$/;"	c
transaction	txn_impl.h	/^transaction<Protocol, Traits>::transaction(uint64_t flags, string_allocator_type &sa)$/;"	f	class:transaction
transaction_abort_exception	txn.h	/^  transaction_abort_exception(transaction_base::abort_reason r)$/;"	f	class:transaction_abort_exception
transaction_abort_exception	txn.h	/^class transaction_abort_exception : public std::exception {$/;"	c
transaction_base	txn.h	/^  transaction_base(uint64_t flags)$/;"	f	class:transaction_base
transaction_base	txn.h	/^class transaction_base {$/;"	c
transaction_flags_to_str	txn_impl.h	/^  transaction_flags_to_str(uint64_t flags)$/;"	f	namespace:__anon8
transaction_proto2	txn_proto2_impl.h	/^  transaction_proto2(uint64_t flags,$/;"	f	class:transaction_proto2
transaction_proto2	txn_proto2_impl.h	/^class transaction_proto2 : public transaction<transaction_proto2, Traits>,$/;"	c
transaction_proto2_static	txn_proto2_impl.h	/^class transaction_proto2_static {$/;"	c
transaction_read_only_exception	txn.h	/^class transaction_read_only_exception {};$/;"	c
transaction_state_to_cstr	txn_impl.h	/^  transaction_state_to_cstr(txn_state state)$/;"	f	namespace:__anon8
transaction_unusable_exception	txn.h	/^class transaction_unusable_exception {};$/;"	c
transactions_input_init	benchmarks/egen/EGenLoader.cpp	/^	CCETxnInputGenerator*  transactions_input_init(int customers, int sf, int wdays) $/;"	f
transfer_from	masstree/straccum.cc	/^void StringAccum::transfer_from(String& x) {$/;"	f	class:lcdf::StringAccum
tree	masstree/mtd.cc	/^Masstree::default_table *tree;$/;"	v
tree_stats	masstree/mttest.cc	/^static bool tree_stats = false;$/;"	v	file:
tree_walk	btree_impl.h	/^btree<P>::tree_walk(tree_walk_callback &callback) const$/;"	f	class:btree
tree_walk	masstree_btree.h	/^void mbtree<P>::tree_walk(tree_walk_callback &callback) const {$/;"	f	class:mbtree
tree_walk_callback	btree.h	/^  class tree_walk_callback {$/;"	c	class:btree
tree_walk_callback	masstree_btree.h	/^  class tree_walk_callback {$/;"	c	class:mbtree
treestats1	masstree/query_masstree.cc	/^static void treestats1(node_base<P>* n, unsigned height) {$/;"	f	namespace:Masstree
treetype	masstree/mttest.cc	/^    const char *treetype;$/;"	m	struct:__anon63	file:
treetypedelta	masstree/mttest.cc	/^    static constexpr double trialdelta = 0.015, treetypedelta = 0.04,$/;"	m	struct:__anon67::gnuplot_info	file:
treetypedelta	masstree/mttest.cc	/^constexpr double gnuplot_info::trialdelta, gnuplot_info::treetypedelta, gnuplot_info::testdelta, gnuplot_info::typedelta;$/;"	m	class:__anon67::gnuplot_info	file:
trfm	benchmarks/results/make_graphs-4.py	/^  def trfm(ent):$/;"	f	function:extract_latency
trfm	benchmarks/results/make_graphs-4.py	/^  def trfm(ent):$/;"	f	function:extract_throughput
trfm	benchmarks/results/make_graphs-4.py	/^  def trfm(ent):$/;"	f	function:order_results_by_threads
trfm	benchmarks/results/make_graphs-5.py	/^        def trfm(ent):$/;"	f	function:datafromfile.extract_latency
trfm	benchmarks/results/make_graphs-5.py	/^        def trfm(ent):$/;"	f	function:datafromfile.extract_throughput
trfm	benchmarks/results/make_graphs-5.py	/^        def trfm(ent):$/;"	f	function:datafromfile.order_results_by_threads
trialdelta	masstree/mttest.cc	/^    static constexpr double trialdelta = 0.015, treetypedelta = 0.04,$/;"	m	struct:__anon67::gnuplot_info	file:
trialdelta	masstree/mttest.cc	/^constexpr double gnuplot_info::trialdelta, gnuplot_info::treetypedelta, gnuplot_info::testdelta, gnuplot_info::typedelta;$/;"	m	class:__anon67::gnuplot_info	file:
trim	masstree/str.hh	/^    Str trim() const {$/;"	f	struct:lcdf::Str
trim	masstree/string.cc	/^String::trim() const$/;"	f	class:lcdf::String
trim	masstree/string_base.hh	/^inline typename T::substring_type String_generic::trim(const T &str) {$/;"	f	class:lcdf::String_generic
trim_lsn	dbcore/sm-alloc.cpp	/^    LSN trim_lsn;$/;"	m	namespace:RA	file:
true_type	masstree/compiler.hh	/^typedef integral_constant<bool, true> true_type;$/;"	t	namespace:mass
true_type	masstree/compiler.hh	/^typedef std::true_type true_type;$/;"	t	namespace:mass
truncate	dbcore/dynarray.cpp	/^dynarray::truncate(size_t new_size)$/;"	f	class:dynarray
truncate_after	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::truncate_after(uint32_t segnum, uint64_t new_end)$/;"	f	class:sm_log_file_mgr
truthy	masstree/json.hh	/^    bool truthy() const {$/;"	f	class:lcdf::Json_proxy_base
truthy	masstree/json.hh	/^inline bool Json::truthy() const {$/;"	f	class:lcdf::Json
try_insert_new_tuple	txn_impl.h	/^transaction<Protocol, Traits>::try_insert_new_tuple($/;"	f	class:transaction
try_lock	dbcore/sm-common.h	/^    bool try_lock() {$/;"	f	struct:os_mutex_pod
try_lock	spinlock.h	/^  try_lock()$/;"	f	class:spinlock
try_read_null	masstree/msgpack.hh	/^    inline bool try_read_null() {$/;"	f	class:msgpack::parser
ts	masstree/log.cc	/^    kvtimestamp_t ts;$/;"	m	struct:logrecord	file:
ts	masstree/log.hh	/^        kvtimestamp_t ts;$/;"	m	struct:loginfo::query_times
ts_	masstree/kvthread.hh	/^    mutable kvtimestamp_t ts_;$/;"	m	class:threadinfo
ts_	masstree/log.cc	/^    kvtimestamp_t ts_;$/;"	m	struct:logrec_kv	file:
ts_	masstree/log.cc	/^    kvtimestamp_t ts_;$/;"	m	struct:logrec_kvdelta	file:
ts_	masstree/value_array.hh	/^    kvtimestamp_t ts_;$/;"	m	class:value_array
ts_	masstree/value_bag.hh	/^    kvtimestamp_t ts_;$/;"	m	class:value_bag
ts_	masstree/value_string.hh	/^    kvtimestamp_t ts_;$/;"	m	class:value_string
ts_	masstree/value_versioned_array.hh	/^    kvtimestamp_t ts_;$/;"	m	class:value_versioned_array
ts_	masstree_btree.h	/^    mutable kvtimestamp_t ts_;$/;"	m	class:simple_threadinfo
tsc_ctr	scopedperf.hh	/^  tsc_ctr() : namedctr("tsc") {}$/;"	f	class:scopedperf::tsc_ctr
tsc_ctr	scopedperf.hh	/^class tsc_ctr : public namedctr<64> {$/;"	c	namespace:scopedperf
tscp_ctr	scopedperf.hh	/^  tscp_ctr() : namedctr("tscp") {}$/;"	f	class:scopedperf::tscp_ctr
tscp_ctr	scopedperf.hh	/^class tscp_ctr : public namedctr<64> {$/;"	c	namespace:scopedperf
tup	dbcore/rcu.h	/^    Tuple tup;$/;"	m	struct:RCU::rcu_new_decay
tup	dbcore/sm-defs.h	/^    Tuple tup;$/;"	m	struct:make_new_decay
tuple	txn.h	/^    dbtuple *tuple;$/;"	m	struct:transaction::read_record_t
tuple_vector	masstree/masstree.hh	/^	tuple_vector_type* tuple_vector; $/;"	m	class:Masstree::basic_table
tuple_vector_type	masstree/masstree.hh	/^	typedef object_vector<value_type> tuple_vector_type; $/;"	t	class:Masstree::basic_table
tuple_vector_type	masstree_btree.h	/^  typedef object_vector<value_type> tuple_vector_type;$/;"	t	class:mbtree
tuple_vector_type	txn_impl.h	/^typedef object_vector<typename concurrent_btree::value_type> tuple_vector_type;$/;"	t
tuple_writer	txn_btree.h	/^  tuple_writer(dbtuple::TupleWriterMode mode, const void *v, uint8_t *p, size_t sz)$/;"	f	struct:txn_btree_
tuple_writer	typed_txn_btree.h	/^  tuple_writer(dbtuple::TupleWriterMode mode, const void *v, uint8_t *p, size_t sz)$/;"	f	struct:typed_txn_btree_
tuple_writer_t	tuple.h	/^  typedef size_t (*tuple_writer_t)(TupleWriterMode, const void *, uint8_t *, size_t);$/;"	t	struct:dbtuple
two	masstree/test_atomics.cc	/^	unsigned two : 2;$/;"	m	struct:myunion::__anon14	file:
twonorm	benchmarks/runner.py	/^def twonorm(x):$/;"	f
tx_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    tx_id[cTX_ID_len+1];$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
txn	benchmarks/tpce.cc	/^		void* txn;$/;"	m	class:tpce_worker	file:
txn_bid	benchmarks/bid.cc	/^  txn_bid()$/;"	f	class:bid_worker
txn_btree	txn_btree.h	/^  txn_btree(size_type value_size_hint = 128,$/;"	f	class:txn_btree
txn_btree	txn_btree.h	/^class txn_btree : public base_txn_btree<Transaction, txn_btree_> {$/;"	c
txn_btree_	txn_btree.h	/^struct txn_btree_ {$/;"	s
txn_buf	benchmarks/bench.h	/^  inline void *txn_buf() { return (void *) txn_obj_buf.data(); }$/;"	f	class:bench_loader
txn_buf	benchmarks/bench.h	/^  inline void *txn_buf() { return (void *) txn_obj_buf.data(); }$/;"	f	class:bench_worker
txn_consume	benchmarks/queue.cc	/^  txn_consume()$/;"	f	class:queue_worker
txn_consume_noscan	benchmarks/queue.cc	/^  txn_consume_noscan()$/;"	f	class:queue_worker
txn_consume_scanhint	benchmarks/queue.cc	/^  txn_consume_scanhint()$/;"	f	class:queue_worker
txn_counter_map	benchmarks/abstract_db.h	/^  typedef std::map<std::string, counter_map> txn_counter_map;$/;"	t	class:abstract_db
txn_counter_map	benchmarks/bench.h	/^  typedef abstract_db::txn_counter_map txn_counter_map;$/;"	t	class:bench_worker
txn_counts	benchmarks/bench.h	/^  std::vector<size_t> txn_counts; \/\/ breakdown of txns$/;"	m	class:bench_worker
txn_credit_check	benchmarks/tpcc.cc	/^tpcc_worker::txn_credit_check()$/;"	f	class:tpcc_worker
txn_delivery	benchmarks/tpcc.cc	/^tpcc_worker::txn_delivery()$/;"	f	class:tpcc_worker
txn_flags	benchmarks/bench.cc	/^uint64_t txn_flags = 0;$/;"	v
txn_fn_t	benchmarks/bench.h	/^  typedef txn_result (*txn_fn_t)(bench_worker *);$/;"	t	class:bench_worker
txn_max_batch_size	benchmarks/abstract_db.h	/^  virtual ssize_t txn_max_batch_size() const { return -1; }$/;"	f	class:abstract_db
txn_micro_bench_order_line	benchmarks/tpcc.cc	/^tpcc_worker::txn_micro_bench_order_line()$/;"	f	class:tpcc_worker
txn_micro_bench_random	benchmarks/tpcc.cc	/^tpcc_worker::txn_micro_bench_random()$/;"	f	class:tpcc_worker
txn_micro_bench_ro	benchmarks/tpcc.cc	/^tpcc_worker::txn_micro_bench_ro()$/;"	f	class:tpcc_worker
txn_micro_bench_simple	benchmarks/tpcc.cc	/^tpcc_worker::txn_micro_bench_simple()$/;"	f	class:tpcc_worker
txn_micro_bench_static	benchmarks/tpcc.cc	/^tpcc_worker::txn_micro_bench_static()$/;"	f	class:tpcc_worker
txn_new_order	benchmarks/tpcc.cc	/^tpcc_worker::txn_new_order()$/;"	f	class:tpcc_worker
txn_obj_buf	benchmarks/bench.h	/^  std::string txn_obj_buf;$/;"	m	class:bench_loader
txn_obj_buf	benchmarks/bench.h	/^  std::string txn_obj_buf;$/;"	m	class:bench_worker
txn_order_status	benchmarks/tpcc.cc	/^tpcc_worker::txn_order_status()$/;"	f	class:tpcc_worker
txn_payment	benchmarks/tpcc.cc	/^tpcc_worker::txn_payment()$/;"	f	class:tpcc_worker
txn_produce	benchmarks/queue.cc	/^  txn_produce()$/;"	f	class:queue_worker
txn_read	benchmarks/encstress.cc	/^  txn_read()$/;"	f	class:encstress_worker
txn_result	benchmarks/bench.h	/^  typedef std::pair<bool, ssize_t> txn_result;$/;"	t	class:bench_worker
txn_search_range_callback	base_txn_btree.h	/^    constexpr txn_search_range_callback($/;"	f	struct:base_txn_btree::txn_search_range_callback
txn_search_range_callback	base_txn_btree.h	/^  struct txn_search_range_callback : public concurrent_btree::low_level_search_range_callback {$/;"	s	class:base_txn_btree
txn_state	dbcore/xid.h	/^enum txn_state { TXN_EMBRYO, TXN_ACTIVE, TXN_COMMITTING, TXN_CMMTD, TXN_ABRTD };$/;"	g	namespace:TXN
txn_state	txn.h	/^  typedef TXN::txn_state txn_state;$/;"	t	class:transaction_base
txn_stock_level	benchmarks/tpcc.cc	/^tpcc_worker::txn_stock_level()$/;"	f	class:tpcc_worker
type	benchmarks/ndb_wrapper.h	/^    typedef Transaction<Traits> type;$/;"	t	struct:private_::cast_base
type	dbcore/rcu.h	/^struct rcu_new_helper<0, Tuple, i...> { typedef rcu_new_decay<Tuple, i...> type; };$/;"	t	struct:RCU::rcu_new_helper
type	dbcore/sm-defs.h	/^struct make_new_helper<0, Tuple, i...> { typedef make_new_decay<Tuple, i...> type; };$/;"	t	struct:make_new_helper
type	dbcore/sm-log-defs.h	/^    log_record_type type;$/;"	m	struct:log_record
type	dbcore/sm-log-defs.h	/^    log_record_type type;$/;"	m	struct:log_request
type	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::type()$/;"	f	class:sm_log_scan_mgr::header_scan
type	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::type()$/;"	f	class:sm_log_scan_mgr::record_scan
type	dbcore/stub-impl.h	/^struct _impl_of { typedef T type; };$/;"	t	struct:_impl_of
type	masstree/clp.c	/^    int type;$/;"	m	struct:__anon44	file:
type	masstree/compiler.hh	/^    typedef T type;$/;"	t	struct:mass::fast_argument
type	masstree/compiler.hh	/^    typedef T type;$/;"	t	struct:mass::type_synonym
type	masstree/compiler.hh	/^    typedef char type;$/;"	t	struct:sized_compiler_operations
type	masstree/compiler.hh	/^    typedef const T &type;$/;"	t	struct:mass::fast_argument
type	masstree/compiler.hh	/^    typedef int type;$/;"	t	struct:sized_compiler_operations
type	masstree/compiler.hh	/^    typedef integral_constant<T, V> type;$/;"	t	struct:mass::integral_constant
type	masstree/compiler.hh	/^    typedef long long type;$/;"	t	struct:sized_compiler_operations
type	masstree/compiler.hh	/^    typedef short type;$/;"	t	struct:sized_compiler_operations
type	masstree/json.hh	/^    int type;$/;"	m	struct:lcdf::Json_rep_item
type	masstree/kpermuter.hh	/^    typedef identity_kpermuter type;$/;"	t	struct:key_permuter
type	masstree/kpermuter.hh	/^    typedef typename T::permuter_type type;$/;"	t	struct:key_permuter
type	masstree/ksearch.hh	/^    typedef key_bound_binary type;$/;"	t	struct:key_bound
type	masstree/ksearch.hh	/^    typedef key_bound_linear type;$/;"	t	struct:key_bound
type	masstree/masstree_struct.hh	/^				       do_nothing>::type type;$/;"	t	struct:Masstree::make_prefetcher
type	masstree/masstree_struct.hh	/^				       singlethreaded_nodeversion>::type type;$/;"	t	struct:Masstree::make_nodeversion
type	masstree/string_base.hh	/^    typedef T type;$/;"	t	class:lcdf::String_base
type	masstree/string_slice.hh	/^    typedef T type;$/;"	t	struct:string_slice
type	small_unordered_map.h	/^    typedef typename std::conditional<std::is_scalar<T>::value, T, const T &>::type type;$/;"	t	struct:private_::fast_func_param
type	util.h	/^  typedef small_vector<T, SmallSize> type;$/;"	t	struct:util::vec
type	util.h	/^  typedef std::priority_queue<T, Container, std::greater<T> > type;$/;"	t	struct:util::std_reverse_pq
type_	counter.h	/^  Type type_;$/;"	m	struct:counter_data
type_callback_wrapper	btree.h	/^    type_callback_wrapper(T *callback) : callback_(callback) {}$/;"	f	class:btree::type_callback_wrapper
type_callback_wrapper	btree.h	/^  class type_callback_wrapper : public search_range_callback {$/;"	c	class:btree
type_callback_wrapper	txn_btree.h	/^    constexpr type_callback_wrapper(T *callback)$/;"	f	class:txn_btree::type_callback_wrapper
type_callback_wrapper	txn_btree.h	/^  class type_callback_wrapper : public search_range_callback {$/;"	c	class:txn_btree
type_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    type_id[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeResultFrame1Output
type_id	benchmarks/egen/TxnHarnessStructs.h	/^    char    type_id[cTT_ID_len+1];$/;"	m	struct:TPCE::TTradeResultFrame4Input
type_is_margin	benchmarks/egen/DriverParamSettings.h	/^    INT32   type_is_margin;$/;"	m	struct:TPCE::TTradeOrderSettings
type_is_margin	benchmarks/egen/DriverParamSettings.h	/^    bool    type_is_margin;$/;"	m	struct:TPCE::TTradeOrderSettingsState
type_is_margin	benchmarks/egen/TxnHarnessStructs.h	/^    INT32           type_is_margin;$/;"	m	struct:TPCE::TTradeOrderTxnInput
type_is_margin	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   type_is_margin;$/;"	m	struct:TPCE::TTradeOrderFrame3Input
type_is_market	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   type_is_market;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
type_is_market	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   type_is_market;$/;"	m	struct:TPCE::TTradeOrderFrame4Input
type_is_market	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   type_is_market;$/;"	m	struct:TPCE::TTradeResultFrame1Output
type_is_sell	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               type_is_sell;$/;"	m	struct:TPCE::TTradeResultFrame2Input
type_is_sell	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   type_is_sell;$/;"	m	struct:TPCE::TTradeOrderFrame3Output
type_is_sell	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   type_is_sell;$/;"	m	struct:TPCE::TTradeResultFrame1Output
type_limit_buy	benchmarks/egen/TxnHarnessStructs.h	/^    char    type_limit_buy[cTT_ID_len+1];$/;"	m	struct:TPCE::TStatusAndTradeType
type_limit_sell	benchmarks/egen/TxnHarnessStructs.h	/^    char    type_limit_sell[cTT_ID_len+1];$/;"	m	struct:TPCE::TStatusAndTradeType
type_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                type_name[cTT_NAME_len+1];$/;"	m	struct:TPCE::TTradeResultFrame6Input
type_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                type_name[cTT_NAME_len+1];$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
type_name	benchmarks/egen/TxnHarnessStructs.h	/^    char                type_name[max_trade_status_len][cTT_NAME_len+1];$/;"	m	struct:TPCE::TTradeStatusFrame1Output
type_name	benchmarks/egen/TxnHarnessStructs.h	/^    char    type_name[cTT_NAME_len+1];$/;"	m	struct:TPCE::TTradeResultFrame1Output
type_name_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        type_name_ind;$/;"	m	struct:TPCE::TTradeUpdateFrame3TradeInfo
type_stop_loss	benchmarks/egen/TxnHarnessStructs.h	/^    char    type_stop_loss[cTT_ID_len+1];$/;"	m	struct:TPCE::TStatusAndTradeType
type_synonym	masstree/compiler.hh	/^template <typename T> struct type_synonym {$/;"	s	namespace:mass
typed_txn_btree	typed_txn_btree.h	/^  typed_txn_btree(size_type value_size_hint = 128,$/;"	f	class:typed_txn_btree
typed_txn_btree	typed_txn_btree.h	/^class typed_txn_btree : public base_txn_btree<Transaction, typed_txn_btree_<Schema>> {$/;"	c
typed_txn_btree_	typed_txn_btree.h	/^struct typed_txn_btree_ {$/;"	s
typedelta	masstree/mttest.cc	/^	testdelta = 0.08, typedelta = 0.2;$/;"	m	struct:__anon67::gnuplot_info	file:
typedelta	masstree/mttest.cc	/^constexpr double gnuplot_info::trialdelta, gnuplot_info::treetypedelta, gnuplot_info::testdelta, gnuplot_info::typedelta;$/;"	m	class:__anon67::gnuplot_info	file:
typeutil	ndb_type_traits.h	/^  struct typeutil { typedef const T & func_param_type; };$/;"	s	namespace:private_
u	masstree/clp.h	/^	unsigned u;$/;"	m	union:Clp_Parser::__anon9
u	masstree/json.hh	/^        Json_rep_item<uint64_t> u;$/;"	m	union:lcdf::Json::rep_type
u	masstree/value_versioned_array.hh	/^        uint32_t u;$/;"	m	union:rowversion::value_t
u1	masstree/mtclient.cc	/^u1(struct child *c)$/;"	f
u16_varkey	varkey.h	/^typedef obj_varkey<uint16_t> u16_varkey;$/;"	t
u32_varkey	varkey.h	/^typedef obj_varkey<uint32_t> u32_varkey;$/;"	t
u64	masstree/clp.h	/^	uint64_t u64;$/;"	m	union:Clp_Parser::__anon9
u64_varkey	varkey.h	/^typedef obj_varkey<uint64_t> u64_varkey;$/;"	t
u64manip	btree.h	/^  struct u64manip<std::atomic<uint64_t>, P> {$/;"	s	namespace:private_
u64manip	btree.h	/^  struct u64manip<uint64_t, P> {$/;"	s	namespace:private_
u8_varkey	varkey.h	/^typedef obj_varkey<uint8_t>  u8_varkey;$/;"	t
u_	masstree/json.hh	/^    } u_;$/;"	m	class:lcdf::Json	typeref:union:lcdf::Json::rep_type
u_	masstree/masstree_struct.hh	/^    } u_;$/;"	m	class:Masstree::leafvalue	typeref:union:Masstree::leafvalue::__anon76
u_replacement	masstree/string.hh	/^	u_replacement = 0xFFFD$/;"	e	enum:lcdf::String::__anon47
ubegin	masstree/string_base.hh	/^    const_unsigned_iterator ubegin() const {$/;"	f	class:lcdf::String_base
ucs	masstree/clp.h	/^	unsigned char ucs[Clp_ValSize];$/;"	m	union:Clp_Parser::__anon9
udata	masstree/straccum.hh	/^inline const unsigned char* StringAccum::udata() const {$/;"	f	class:lcdf::StringAccum
udata	masstree/straccum.hh	/^inline unsigned char* StringAccum::udata() {$/;"	f	class:lcdf::StringAccum
udata	masstree/string_base.hh	/^    const unsigned char* udata() const {$/;"	f	class:lcdf::String_base
udp	masstree/mtclient.cc	/^    int udp; \/\/ 1 -> udp, 0 -> tcp$/;"	m	struct:child	file:
udpflag	masstree/mtclient.cc	/^int udpflag = 0;$/;"	v
udpgo	masstree/mtd.cc	/^udpgo(void *xarg)$/;"	f
udpthreads	masstree/mtd.cc	/^static int udpthreads = 0;$/;"	v	file:
udpthreads	masstree/mttest.cc	/^static int udpthreads = 0;$/;"	v	file:
uend	masstree/string_base.hh	/^    const_unsigned_iterator uend() const {$/;"	f	class:lcdf::String_base
uint	scopedperf.hh	/^typedef u32 uint;$/;"	t	namespace:scopedperf
uint16_t	dbcore/sm-oid-alloc-impl.h	/^    typedef uint16_t (Array)[CAPACITY];$/;"	t	struct:sparse_bitset
uint64_t	scopedperf.hh	/^typedef u64 uint64_t;$/;"	t	namespace:scopedperf
uint8_t	dbcore/sm-log-defs.h	/^enum log_record_flags : uint8_t {$/;"	g
uint8_t	dbcore/sm-log-defs.h	/^enum log_record_type : uint8_t {$/;"	g
uintptr_t	masstree/clp.c	/^typedef unsigned long uintptr_t;$/;"	t	file:
ul	masstree/clp.h	/^        unsigned long ul;$/;"	m	union:Clp_Parser::__anon9
underlying_btree	base_txn_btree.h	/^  concurrent_btree underlying_btree;$/;"	m	class:base_txn_btree
uninitialized_type	masstree/compiler.hh	/^struct uninitialized_type {};$/;"	s
union_type	masstree/string_slice.hh	/^	union_type(T x)$/;"	f	union:string_slice::union_type
union_type	masstree/string_slice.hh	/^    union union_type {$/;"	u	struct:string_slice
unique	masstree/string.hh	/^inline String String::unique() const {$/;"	f	class:lcdf::String
unique_filter	benchmarks/tpcc.cc	/^unique_filter(const vector<T> &v)$/;"	f	file:
unique_filter	benchmarks/tpce.cc	/^unique_filter(const vector<T> &v)$/;"	f	file:
unique_symbols	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               unique_symbols;$/;"	m	struct:TPCE::TMarketFeedTxnInput
uniqueify	masstree/json.hh	/^    void uniqueify() const {$/;"	f	class:lcdf::Json::iterator
uniqueify_array	masstree/json.hh	/^inline void Json::uniqueify_array(bool convert, int ncap) {$/;"	f	class:lcdf::Json
uniqueify_array_insert	masstree/json.cc	/^void* Json::uniqueify_array_insert(bool convert, size_type pos) {$/;"	f	class:lcdf::Json
uniqueify_object	masstree/json.hh	/^inline void Json::uniqueify_object(bool convert) {$/;"	f	class:lcdf::Json
unlikely	macros.h	55;"	d
unlikely	masstree/compiler.hh	29;"	d
unlikely	third-party/lz4/lz4.c	150;"	d	file:
unlink	masstree/btree_leaflink.hh	/^    static void unlink(N *n) {$/;"	f	struct:btree_leaflink
unlink	masstree/btree_leaflink.hh	/^    static void unlink(N *n, SF spin_function) {$/;"	f	struct:btree_leaflink
unlink	masstree/btree_leaflink.hh	/^    static void unlink(N *n, SF) {$/;"	f	struct:btree_leaflink
unlink	object.h	/^	void unlink( oid_type oid, void *item )$/;"	f	class:object_vector
unlink_tuple	masstree/masstree.hh	/^	inline void unlink_tuple( oid_type oid, dbtuple *item )$/;"	f	class:Masstree::basic_table
unlink_tuple	masstree_btree.h	/^  inline void unlink_tuple( oid_type oid, dbtuple* item )$/;"	f	class:mbtree
unlock	benchmarks/egen/locking.cpp	/^void CMutex::unlock()$/;"	f	class:TPCE::CMutex
unlock	benchmarks/egen/progressmeter.cpp	/^void ProgressMeter::unlock() const$/;"	f	class:TPCE::ProgressMeter
unlock	btree.h	/^    unlock()$/;"	f	struct:btree::node
unlock	dbcore/sm-common.h	/^    void unlock() {$/;"	f	struct:os_mutex_pod
unlock	masstree/nodeversion.hh	/^    void unlock() {$/;"	f	class:basic_nodeversion
unlock	masstree/nodeversion.hh	/^    void unlock() {$/;"	f	class:basic_singlethreaded_nodeversion
unlock	masstree/nodeversion.hh	/^    void unlock(basic_nodeversion<P> x) {$/;"	f	class:basic_nodeversion
unlock	masstree/nodeversion.hh	/^    void unlock(basic_singlethreaded_nodeversion<P>) {$/;"	f	class:basic_singlethreaded_nodeversion
unlock	spinlock.h	/^  unlock()$/;"	f	class:spinlock
unlock_file	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::unlock_file(FID f)$/;"	f	class:sm_oid_mgr_impl
unlock_mask	masstree/nodeversion.hh	/^	unlock_mask = ~(unused1_bit | (vinsert_lowbit - 1)),$/;"	e	enum:nodeversion32_parameters::__anon10
unlock_mask	masstree/nodeversion.hh	/^	unlock_mask = ~(unused1_bit | (vinsert_lowbit - 1)),$/;"	e	enum:nodeversion64_parameters::__anon11
unlocked_cursor_type	masstree/masstree.hh	/^    typedef unlocked_tcursor<P> unlocked_cursor_type;$/;"	t	class:Masstree::basic_table
unlocked_cursor_type	masstree/query_masstree.hh	/^    typedef unlocked_tcursor<P> unlocked_cursor_type;$/;"	t	class:Masstree::query_table
unlocked_tcursor	masstree/masstree_tcursor.hh	/^    inline unlocked_tcursor(basic_table<P>& table, Str str)$/;"	f	class:Masstree::unlocked_tcursor
unlocked_tcursor	masstree/masstree_tcursor.hh	/^    inline unlocked_tcursor(basic_table<P>& table,$/;"	f	class:Masstree::unlocked_tcursor
unlocked_tcursor	masstree/masstree_tcursor.hh	/^    inline unlocked_tcursor(const basic_table<P>& table, Str str)$/;"	f	class:Masstree::unlocked_tcursor
unlocked_tcursor	masstree/masstree_tcursor.hh	/^    inline unlocked_tcursor(const basic_table<P>& table,$/;"	f	class:Masstree::unlocked_tcursor
unlocked_tcursor	masstree/masstree_tcursor.hh	/^class unlocked_tcursor {$/;"	c	namespace:Masstree
unlocked_version_value	masstree/nodeversion.hh	/^    value_type unlocked_version_value() const {$/;"	f	class:basic_nodeversion
unlocked_version_value	masstree/nodeversion.hh	/^    value_type unlocked_version_value() const {$/;"	f	class:basic_singlethreaded_nodeversion
unmanaged	util.h	/^  unmanaged(Args &&... args)$/;"	f	class:unmanaged
unmanaged	util.h	/^class unmanaged {$/;"	c
unmap	masstree/log.cc	/^logreplay::unmap()$/;"	f	class:logreplay
unparse	masstree/json.hh	/^    String unparse() const {$/;"	f	class:lcdf::Json_proxy_base
unparse	masstree/json.hh	/^    String unparse(const Json::unparse_manipulator& m) const {$/;"	f	class:lcdf::Json_proxy_base
unparse	masstree/json.hh	/^    void unparse(StringAccum& sa) const {$/;"	f	class:lcdf::Json_proxy_base
unparse	masstree/json.hh	/^    void unparse(StringAccum& sa, const Json::unparse_manipulator& m) const {$/;"	f	class:lcdf::Json_proxy_base
unparse	masstree/json.hh	/^inline String Json::unparse() const {$/;"	f	class:lcdf::Json
unparse	masstree/json.hh	/^inline String Json::unparse(const unparse_manipulator &m) const {$/;"	f	class:lcdf::Json
unparse	masstree/json.hh	/^inline void Json::unparse(StringAccum &sa) const {$/;"	f	class:lcdf::Json
unparse	masstree/json.hh	/^inline void Json::unparse(StringAccum &sa, const unparse_manipulator &m) const {$/;"	f	class:lcdf::Json
unparse	masstree/kpermuter.hh	/^lcdf::String kpermuter<width>::unparse() const$/;"	f	class:kpermuter
unparse	masstree/masstree_key.hh	/^    String unparse() const {$/;"	f	class:Masstree::key
unparse	masstree/masstree_key.hh	/^    int unparse(char* data, int datalen) const {$/;"	f	class:Masstree::key
unparse	masstree/msgpack.hh	/^inline String unparse(const Json& j) {$/;"	f	namespace:msgpack
unparse	masstree/msgpack.hh	/^inline T& unparse(T& s, const X& x) {$/;"	f	namespace:msgpack
unparse_comparable	masstree/string_slice.hh	/^    static int unparse_comparable(char *buf, int buflen, T value) {$/;"	f	struct:string_slice
unparse_comparable	masstree/string_slice.hh	/^    static int unparse_comparable(char *buf, int buflen, T value, int len) {$/;"	f	struct:string_slice
unparse_ikey	masstree/masstree_key.hh	/^    static String unparse_ikey(ikey_type ikey) {$/;"	f	class:Masstree::key
unparse_indent	masstree/json.cc	/^void Json::unparse_indent(StringAccum &sa, const unparse_manipulator &m, int depth)$/;"	f	class:lcdf::Json
unparse_is_complex	masstree/json.cc	/^bool Json::unparse_is_complex() const {$/;"	f	class:lcdf::Json
unparse_manipulator	masstree/json.hh	/^    unparse_manipulator()$/;"	f	class:lcdf::Json::unparse_manipulator
unparse_manipulator	masstree/json.hh	/^class Json::unparse_manipulator {$/;"	c	class:lcdf::Json
unparse_printable	masstree/masstree_key.hh	/^    int unparse_printable(char* data, int datalen) const {$/;"	f	class:Masstree::key
unparse_wide	masstree/msgpack.hh	/^inline T& unparse_wide(T& s, const X& x) {$/;"	f	namespace:msgpack
unparser	masstree/msgpack.hh	/^    inline unparser(T& base)$/;"	f	class:msgpack::unparser
unparser	masstree/msgpack.hh	/^    inline unparser(T& base, const X& x)$/;"	f	class:msgpack::unparser
unparser	masstree/msgpack.hh	/^class unparser {$/;"	c	namespace:msgpack
unsafe_clear	dbcore/cslist.h	/^    void unsafe_clear() {$/;"	f	struct:cslist
unsafe_purge	base_txn_btree.h	/^base_txn_btree<Transaction, P>::unsafe_purge(bool dump_stats)$/;"	f	class:base_txn_btree
unset	masstree/json.hh	/^    Json& unset(Str key) {$/;"	f	class:lcdf::Json_proxy_base
unset	masstree/json.hh	/^inline Json& Json::unset(Str key) {$/;"	f	class:lcdf::Json
unshift	masstree/masstree_key.hh	/^    void unshift() {$/;"	f	class:Masstree::key
unshift_all	masstree/masstree_key.hh	/^    void unshift_all() {$/;"	f	class:Masstree::key
unsigned_iterator	masstree/string_base.hh	/^    typedef const_unsigned_iterator unsigned_iterator;$/;"	t	class:lcdf::String_base
unsigned_type	varkey.h	/^    unsigned_type;$/;"	t	struct:signed_aware_trfm
unspecified_bool_type	masstree/kvstats.hh	/^  typedef void (kvstats::*unspecified_bool_type)(double);$/;"	t	struct:kvstats
unsplit_ancestor	masstree/masstree_struct.hh	/^    inline base_type* unsplit_ancestor() const {$/;"	f	class:Masstree::node_base
unstable_version	btree.h	/^    unstable_version() const$/;"	f	struct:btree::node
unused1_bit	masstree/nodeversion.hh	/^	unused1_bit = (1U << 28),$/;"	e	enum:nodeversion32_parameters::__anon10
unused1_bit	masstree/nodeversion.hh	/^	unused1_bit = (1ULL << 60),$/;"	e	enum:nodeversion64_parameters::__anon11
upcall	benchmarks/ndb_wrapper_impl.h	/^  abstract_ordered_index::scan_callback *upcall;$/;"	m	class:ndb_wrapper_search_range_callback
update	masstree/value_array.cc	/^value_array* value_array::update(const Json* first, const Json* last,$/;"	f	class:value_array
update	masstree/value_bag.hh	/^inline value_bag<O>* value_bag<O>::update(int col, Str value, kvtimestamp_t ts,$/;"	f	class:value_bag
update	masstree/value_bag.hh	/^value_bag<O>* value_bag<O>::update(const Json* first, const Json* last,$/;"	f	class:value_bag
update	masstree/value_string.hh	/^value_string* value_string::update(const Json* first, const Json* last,$/;"	f	class:value_string
update	masstree/value_versioned_array.cc	/^value_versioned_array::update(const Json* first, const Json* last,$/;"	f	class:value_versioned_array
update_chkpt_mark	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::update_chkpt_mark(LSN cstart, LSN cend)$/;"	f	class:sm_log_file_mgr
update_durable_mark	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::update_durable_mark(uint64_t lsn_offset)$/;"	f	class:sm_log_alloc_mgr
update_durable_mark	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::update_durable_mark(LSN dlsn) {$/;"	f	class:sm_log_file_mgr
update_labnotebook	masstree/mttest.cc	/^update_labnotebook(String notebook)$/;"	f	file:
update_timestamp	masstree/kvthread.hh	/^    kvtimestamp_t update_timestamp() const {$/;"	f	class:threadinfo
update_timestamp	masstree/kvthread.hh	/^    kvtimestamp_t update_timestamp(kvtimestamp_t x) const {$/;"	f	class:threadinfo
update_timestamp	masstree/kvthread.hh	/^    kvtimestamp_t update_timestamp(kvtimestamp_t x, kvtimestamp_t y) const {$/;"	f	class:threadinfo
update_timestamp	masstree_btree.h	/^    kvtimestamp_t update_timestamp() const {$/;"	f	class:simple_threadinfo
update_timestamp	masstree_btree.h	/^    kvtimestamp_t update_timestamp(kvtimestamp_t x) const {$/;"	f	class:simple_threadinfo
update_timestamp	masstree_btree.h	/^    kvtimestamp_t update_timestamp(kvtimestamp_t x, kvtimestamp_t y) const {$/;"	f	class:simple_threadinfo
update_trace_record	dbcore/sm-trace.cpp	/^struct update_trace_record {$/;"	s	namespace:TRACER	file:
update_tuple	masstree_btree.h	/^  inline bool update_tuple( oid_type oid, value_type val )$/;"	f	class:mbtree
update_version	masstree/masstree.hh	/^	dbtuple *update_version(oid_type oid, object* new_desc, XID xid)$/;"	f	class:Masstree::basic_table
update_version	masstree_btree.h	/^  dbtuple *update_version(oid_type oid, object* obj, XID xid)$/;"	f	class:mbtree
upper	masstree/ksearch.hh	/^    static inline int upper(const KA &ka, const T &n) {$/;"	f	struct:key_bound_binary
upper	masstree/ksearch.hh	/^    static inline int upper(const KA &ka, const T &n) {$/;"	f	struct:key_bound_linear
upper	masstree/string.cc	/^String::upper() const$/;"	f	class:lcdf::String
upper_bound_	masstree/masstree_scan.hh	/^    mutable bool upper_bound_;$/;"	m	struct:Masstree::reverse_scan_helper
upx_expanded	masstree/json.cc	/^const char* const upx_expanded[] = {": ", ","};$/;"	m	namespace:lcdf::__anon61	file:
upx_normal	masstree/json.cc	/^const char* const upx_normal[] = {":", ","};$/;"	m	namespace:lcdf::__anon61	file:
upx_separated	masstree/json.cc	/^const char* const upx_separated[] = {": ", ", "};$/;"	m	namespace:lcdf::__anon61	file:
us	masstree/clp.h	/^	unsigned us[Clp_ValIntSize];$/;"	m	union:Clp_Parser::__anon9
usage	benchmarks/egen/EGenValidate.cpp	/^void usage(const char *progname, BucketSimOptions& options, $/;"	f
usage	masstree/mtclient.cc	/^usage()$/;"	f
usage	third-party/lz4/fullbench.c	/^int usage(char* exename)$/;"	f
usage	third-party/lz4/lz4c.c	/^int usage(char* exename)$/;"	f
usage_advanced	third-party/lz4/fullbench.c	/^int usage_advanced()$/;"	f
usage_advanced	third-party/lz4/lz4c.c	/^int usage_advanced()$/;"	f
use_stddev	benchmarks/egen/EGenValidate.cpp	/^        bool    use_stddev;$/;"	m	class:BucketSimOptions	file:
used	dbcore/sm-common.h	/^    bool used;$/;"	m	struct:dirent_iterator
user_data	masstree/clp.c	/^    void *user_data;$/;"	m	struct:__anon42	file:
user_data	masstree/clp.h	/^    void *user_data;		\/**< Uninterpreted by CLP; users can set$/;"	m	struct:Clp_Parser
utf16_to_utf8	masstree/string.cc	/^String::utf16_to_utf8(int flags) const$/;"	f	class:lcdf::String
utf16be_to_utf8	masstree/string.cc	/^String::utf16be_to_utf8(int flags) const$/;"	f	class:lcdf::String
utf16le_to_utf8	masstree/string.cc	/^String::utf16le_to_utf8(int flags) const$/;"	f	class:lcdf::String
utf8	masstree/clp.c	/^    int utf8;$/;"	m	struct:Clp_Internal	file:
utf8_charlen	masstree/clp.c	/^utf8_charlen(const char *s)$/;"	f	file:
utf8_to_utf8	masstree/string.cc	/^String::utf8_to_utf8(int flags) const$/;"	f	class:lcdf::String
utf_prefer_le	masstree/string.hh	/^	utf_prefer_le = 4$/;"	e	enum:lcdf::String::__anon46
utf_replacement	masstree/string.hh	/^	utf_replacement = 2,$/;"	e	enum:lcdf::String::__anon46
utf_strip_bom	masstree/string.hh	/^	utf_strip_bom = 1,$/;"	e	enum:lcdf::String::__anon46
util	util.h	/^namespace util {$/;"	n
v	dbcore/rcu-slist.h	/^        Visitor &v;$/;"	m	struct:rcu_slist::visitor_helper
v	dbcore/rcu.h	/^    void *v;$/;"	m	union:RCU::rcu_pointer
v	dbcore/test-sc-hash.cpp	/^    double v;$/;"	m	struct:mvar_tracker	file:
v	masstree/masstree_struct.hh	/^	value_type v;				\/\/ Record objects$/;"	m	union:Masstree::leafvalue::__anon76
v	third-party/lz4/lz4.c	/^typedef struct _U16_S { U16 v; } _PACKED U16_S;$/;"	m	struct:_U16_S	file:
v	third-party/lz4/lz4.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	m	struct:_U32_S	file:
v	third-party/lz4/lz4.c	/^typedef struct _U64_S { U64 v; } _PACKED U64_S;$/;"	m	struct:_U64_S	file:
v	third-party/lz4/lz4hc.c	/^typedef struct _U16_S { U16 v; } _PACKED U16_S;$/;"	m	struct:_U16_S	file:
v	third-party/lz4/lz4hc.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	m	struct:_U32_S	file:
v	third-party/lz4/lz4hc.c	/^typedef struct _U64_S { U64 v; } _PACKED U64_S;$/;"	m	struct:_U64_S	file:
v	third-party/lz4/xxhash.c	/^typedef struct _U32_S { U32 v; } _PACKED U32_S;$/;"	m	struct:_U32_S	file:
v	txn_btree.h	/^    const std::string *v;$/;"	m	class:txn_btree_::value_writer
v	typed_txn_btree.h	/^    const value_type *v;$/;"	m	class:typed_txn_btree_::value_writer
v	typed_txn_btree.h	/^    value_type *v;$/;"	m	class:typed_txn_btree_::single_value_reader
v	typed_txn_btree.h	/^    value_type v;$/;"	m	class:typed_txn_btree_::value_reader
v1	third-party/lz4/xxhash.c	/^    U32 v1;$/;"	m	struct:XXH_state32_t	file:
v16qi	dbcore/adler.cpp	/^typedef __v16qi v16qi;$/;"	t	file:
v2	third-party/lz4/xxhash.c	/^    U32 v2;$/;"	m	struct:XXH_state32_t	file:
v3	third-party/lz4/xxhash.c	/^    U32 v3;$/;"	m	struct:XXH_state32_t	file:
v4	third-party/lz4/xxhash.c	/^    U32 v4;$/;"	m	struct:XXH_state32_t	file:
v4si	dbcore/adler.cpp	/^typedef __v4si v4si;$/;"	t	file:
v8hi	dbcore/adler.cpp	/^typedef __v8hi v8hi;$/;"	t	file:
v8hi	dbcore/sm-oid-alloc-impl.h	/^typedef __v8hi v8hi;$/;"	t
v_	btree.h	/^      value_type v_;$/;"	m	union:btree::leaf_node::value_or_node_ptr
v_	masstree/circular_int.hh	/^    value_type v_;$/;"	m	class:circular_int
v_	masstree/json.hh	/^    std::pair<const String, Json> v_;$/;"	m	struct:lcdf::Json::ObjectItem
v_	masstree/local_vector.hh	/^	T* v_;$/;"	m	struct:local_vector::rep
v_	masstree/masstree_scan.hh	/^    nodeversion_type v_;$/;"	m	class:Masstree::scanstackelt
v_	masstree/masstree_tcursor.hh	/^    typename leaf<P>::nodeversion_type v_;$/;"	m	class:Masstree::unlocked_tcursor
v_	masstree/nodeversion.hh	/^    value_type v_;$/;"	m	class:basic_nodeversion
v_	masstree/nodeversion.hh	/^    value_type v_;$/;"	m	class:basic_singlethreaded_nodeversion
v_	masstree/value_versioned_array.hh	/^    value_t v_;$/;"	m	struct:rowversion
v_	masstree_btree.h	/^  uint64_t v_;$/;"	m	class:mbtree::low_level_search_range_scanner
val	dbcore/rcu-slist.h	/^        uintptr_t val;$/;"	m	struct:_rcu_slist::next_ptr
val	masstree/clp.h	/^    } val;			\/**< The parsed value provided with the last$/;"	m	struct:Clp_Parser	typeref:union:Clp_Parser::__anon9
val	masstree/log.cc	/^    Str val;$/;"	m	struct:logrecord	file:
val_cmpxchg	masstree/compiler.hh	/^    static inline type val_cmpxchg(type* object, type expected, type desired) {$/;"	f	struct:sized_compiler_operations
val_long	masstree/clp.c	/^    unsigned char val_long;$/;"	m	struct:Clp_StringList	file:
val_type	masstree/clp.c	/^    int val_type;$/;"	m	struct:__anon42	file:
val_type	masstree/clp.h	/^    int val_type;		\/**< ID of option's value type, or 0 if option$/;"	m	struct:Clp_Option
val_type_binsearch	masstree/clp.c	/^val_type_binsearch(Clp_Internal *cli, int val_type)$/;"	f	file:
valid	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::header_scan::valid()$/;"	f	class:sm_log_scan_mgr::header_scan
valid	dbcore/sm-log-recover.cpp	/^sm_log_scan_mgr::record_scan::valid()$/;"	f	class:sm_log_scan_mgr::record_scan
valid	dbcore/sm-log-recover.h	/^        bool valid() { return _block->lsn != INVALID_LSN; }$/;"	f	struct:sm_log_recover_mgr::block_scanner
valid	dbcore/sm-log-recover.h	/^        bool valid() { return _bscan.valid() and _i < _bscan->nrec; }$/;"	f	struct:sm_log_recover_mgr::log_scanner
vallen_	masstree/value_string.hh	/^    unsigned vallen_;$/;"	m	class:value_string
vals	masstree/checkpoint.hh	/^    kvout *vals; \/\/ key, val, timestamp in msgpack$/;"	m	struct:ckstate
valtype	masstree/clp.c	/^    Clp_ValType *valtype;$/;"	m	struct:Clp_Internal	file:
value	benchmarks/runner.py	/^        value = run_configuration($/;"	v
value	dbcore/test-rcu-slist.cpp	/^    uintptr_t value;$/;"	m	struct:my_node	file:
value	dbcore/test-rcu.cpp	/^    uintptr_t value;$/;"	m	struct:my_node	file:
value	masstree/circular_int.hh	/^    value_type value() const {$/;"	f	class:circular_int
value	masstree/compiler.hh	/^    static constexpr T value = V;$/;"	m	struct:mass::integral_constant
value	masstree/compiler.hh	/^template <typename T, T V> constexpr T integral_constant<T, V>::value;$/;"	m	class:mass::integral_constant
value	masstree/json.hh	/^    Json& value() const {$/;"	f	class:lcdf::Json::array_iterator
value	masstree/json.hh	/^    Json& value() const {$/;"	f	class:lcdf::Json::iterator
value	masstree/json.hh	/^    Json& value() const {$/;"	f	class:lcdf::Json::object_iterator
value	masstree/json.hh	/^    Json& value() {$/;"	f	class:lcdf::Json_array_proxy
value	masstree/json.hh	/^    Json& value() {$/;"	f	class:lcdf::Json_object_proxy
value	masstree/json.hh	/^    Json& value() {$/;"	f	class:lcdf::Json_object_str_proxy
value	masstree/json.hh	/^    Json& value() {$/;"	f	class:lcdf::Json_proxy_base
value	masstree/json.hh	/^    const Json& value() const {$/;"	f	class:lcdf::Json::const_array_iterator
value	masstree/json.hh	/^    const Json& value() const {$/;"	f	class:lcdf::Json::const_iterator
value	masstree/json.hh	/^    const Json& value() const {$/;"	f	class:lcdf::Json::const_object_iterator
value	masstree/kpermuter.hh	/^    static constexpr bool value = sizeof(test<T>(0)) == 1;$/;"	m	struct:has_permuter_type
value	masstree/kpermuter.hh	/^    value_type value() const {$/;"	f	class:kpermuter
value	masstree/masstree_struct.hh	/^    value_type value() const {$/;"	f	class:Masstree::leafvalue
value	masstree/masstree_struct.hh	/^    value_type& value() {$/;"	f	class:Masstree::leafvalue
value	masstree/masstree_tcursor.hh	/^    inline value_type &value() const {$/;"	f	class:Masstree::tcursor
value	masstree/masstree_tcursor.hh	/^    inline value_type value() const {$/;"	f	class:Masstree::unlocked_tcursor
value	ndb_type_traits.h	/^    static const bool value = std::is_scalar<T>::value;$/;"	m	struct:private_::is_trivially_destructible
value	ndb_type_traits.h	/^    static const bool value =$/;"	m	struct:private_::is_trivially_destructible
value	small_unordered_map.h	/^  struct cheap_eq { static const bool value = false; };$/;"	m	struct:private_::cheap_eq
value	small_unordered_map.h	/^  struct is_eq_expensive { static const bool value = true; };$/;"	m	struct:private_::is_eq_expensive
value	spinlock.h	/^  volatile uint32_t value;$/;"	m	class:spinlock
value	util.h	/^  static const T value = ((T(1) << lgbase) - 1);$/;"	m	struct:util::mask_
value	util.h	/^  static const uint64_t value = Mask;$/;"	m	struct:util::Fields
value	util.h	/^  value()$/;"	f	struct:util::cxx_typename
value_	masstree/json.hh	/^    value_type value_;$/;"	m	class:lcdf::Json::const_iterator
value_array	masstree/value_array.hh	/^class value_array {$/;"	c
value_array	masstree/value_array.hh	/^inline value_array::value_array()$/;"	f	class:value_array
value_bag	masstree/value_bag.hh	/^class value_bag {$/;"	c
value_bag	masstree/value_bag.hh	/^inline value_bag<O>::value_bag()$/;"	f	class:value_bag
value_descriptor_type	record/cursor.h	/^  typedef typename T::value_descriptor value_descriptor_type;$/;"	t	struct:read_record_cursor
value_descriptor_type	record/cursor.h	/^  typedef typename T::value_descriptor value_descriptor_type;$/;"	t	struct:write_record_cursor
value_descriptor_type	record/encoder.h	/^  typedef typename T::value_descriptor value_descriptor_type;$/;"	t	struct:schema
value_descriptor_type	typed_txn_btree.h	/^  typedef typename Schema::value_descriptor_type value_descriptor_type;$/;"	t	class:typed_txn_btree
value_descriptor_type	typed_txn_btree.h	/^  typedef typename Schema::value_descriptor_type value_descriptor_type;$/;"	t	struct:typed_txn_btree_
value_encoder	typed_txn_btree.h	/^  value_encoder_type value_encoder;$/;"	m	class:typed_txn_btree
value_encoder_type	record/encoder.h	/^  typedef encoder<value_type> value_encoder_type;$/;"	t	struct:schema
value_encoder_type	typed_txn_btree.h	/^  typedef typename Schema::value_encoder_type value_encoder_type;$/;"	t	class:typed_txn_btree
value_encoder_type	typed_txn_btree.h	/^  typedef typename Schema::value_encoder_type value_encoder_type;$/;"	t	struct:typed_txn_btree_
value_from	masstree/kpermuter.hh	/^    value_type value_from(int i) const {$/;"	f	class:kpermuter
value_is_layer	btree.h	/^    value_is_layer(size_t n) const$/;"	f	struct:btree::leaf_node
value_is_layer	masstree/masstree_struct.hh	/^    bool value_is_layer(int p) const {$/;"	f	class:Masstree::leaf
value_is_stable_layer	masstree/masstree_struct.hh	/^    bool value_is_stable_layer(int p) const {$/;"	f	class:Masstree::leaf
value_or_node_ptr	btree.h	/^    union value_or_node_ptr {$/;"	u	struct:btree::leaf_node
value_prefetcher	masstree/compiler.hh	/^struct value_prefetcher {$/;"	s
value_prefetcher	masstree/compiler.hh	/^struct value_prefetcher<T *> {$/;"	s
value_print	masstree/masstree_print.hh	/^class value_print {$/;"	c	namespace:Masstree
value_print	masstree/masstree_print.hh	/^class value_print<unsigned char*> {$/;"	c	namespace:Masstree
value_print_type	masstree/query_masstree.hh	/^    typedef value_print<value_type> value_print_type;$/;"	t	struct:Masstree::default_query_table_params
value_print_type	masstree_btree.h	/^  typedef Masstree::value_print<value_type> value_print_type;$/;"	t	struct:masstree_params
value_reader	base_txn_btree.h	/^    ValueReader *const value_reader;$/;"	m	struct:base_txn_btree::txn_search_range_callback
value_reader	txn_btree.h	/^    constexpr value_reader(size_t max_bytes_read)$/;"	f	class:txn_btree_::value_reader
value_reader	txn_btree.h	/^  class value_reader {$/;"	c	struct:txn_btree_
value_reader	typed_txn_btree.h	/^    constexpr value_reader(uint64_t fields_mask) : fields_mask(fields_mask) {}$/;"	f	class:typed_txn_btree_::value_reader
value_reader	typed_txn_btree.h	/^    value_reader;$/;"	t	class:typed_txn_btree
value_reader	typed_txn_btree.h	/^  class value_reader {$/;"	c	struct:typed_txn_btree_
value_reader_type	txn_btree.h	/^  typedef txn_btree_::ValueReader value_reader_type;$/;"	t	class:txn_btree
value_set_layer	btree.h	/^    value_set_layer(size_t n)$/;"	f	struct:btree::leaf_node
value_size_hint	base_txn_btree.h	/^  size_type value_size_hint;$/;"	m	class:base_txn_btree
value_space	dbcore/sc-hash.h	/^    struct __attribute__((aligned(alignof(value_type)))) value_space {$/;"	s
value_start	tuple.h	/^  uint8_t value_start[0];   \/\/ must be last field$/;"	m	struct:dbtuple
value_string	masstree/value_string.hh	/^class value_string {$/;"	c
value_string	masstree/value_string.hh	/^inline value_string::value_string()$/;"	f	class:value_string
value_t	masstree/value_versioned_array.hh	/^    union value_t {$/;"	u	struct:rowversion
value_type	benchmarks/masstree/kvrandom.hh	/^    typedef int32_t value_type;$/;"	t	class:kvrandom_lcg_nr
value_type	benchmarks/masstree/kvrandom.hh	/^    typedef uint32_t value_type;$/;"	t	class:kvrandom_lcg_nr_simple
value_type	benchmarks/masstree/kvrandom.hh	/^    typedef uint32_t value_type;$/;"	t	class:kvrandom_psdes_nr
value_type	btree.h	/^  typedef uint8_t* value_type;$/;"	t	class:btree
value_type	dbcore/sc-hash.h	/^    typedef T value_type;$/;"	t	struct:sc_hash_set
value_type	masstree/circular_int.hh	/^    typedef typename mass::make_unsigned<T>::type value_type;$/;"	t	class:circular_int
value_type	masstree/compiler.hh	/^    typedef T value_type;$/;"	t	struct:mass::integral_constant
value_type	masstree/json.hh	/^    typedef Json value_type;$/;"	t	class:lcdf::Json::const_array_iterator
value_type	masstree/json.hh	/^    typedef std::pair<const String, Json&> value_type;$/;"	t	class:lcdf::Json::const_iterator
value_type	masstree/json.hh	/^    typedef std::pair<const String, Json> value_type;$/;"	t	class:lcdf::Json::const_object_iterator
value_type	masstree/kpermuter.hh	/^    typedef typename info::value_type value_type;$/;"	t	class:kpermuter
value_type	masstree/kpermuter.hh	/^    typedef uint64_t value_type;$/;"	t	struct:sized_kpermuter_info
value_type	masstree/kpermuter.hh	/^    typedef unsigned value_type;$/;"	t	struct:sized_kpermuter_info
value_type	masstree/kvrandom.hh	/^    typedef int32_t value_type;$/;"	t	class:kvrandom_lcg_nr
value_type	masstree/kvrandom.hh	/^    typedef uint32_t value_type;$/;"	t	class:kvrandom_lcg_nr_simple
value_type	masstree/kvrandom.hh	/^    typedef uint32_t value_type;$/;"	t	class:kvrandom_psdes_nr
value_type	masstree/masstree.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:Masstree::basic_table
value_type	masstree/masstree_struct.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:Masstree::leafvalue
value_type	masstree/masstree_struct.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:Masstree::node_base
value_type	masstree/masstree_tcursor.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:Masstree::tcursor
value_type	masstree/masstree_tcursor.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:Masstree::unlocked_tcursor
value_type	masstree/nodeversion.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:basic_nodeversion
value_type	masstree/nodeversion.hh	/^    typedef typename P::value_type value_type;$/;"	t	class:basic_singlethreaded_nodeversion
value_type	masstree/nodeversion.hh	/^    typedef uint32_t value_type;$/;"	t	struct:nodeversion32_parameters
value_type	masstree/nodeversion.hh	/^    typedef uint64_t value_type;$/;"	t	struct:nodeversion64_parameters
value_type	masstree/query_masstree.hh	/^    typedef row_type* value_type;$/;"	t	struct:Masstree::default_query_table_params
value_type	masstree_btree.h	/^  typedef oid_type value_type;$/;"	t	struct:masstree_params
value_type	masstree_btree.h	/^  typedef typename P::value_type value_type;$/;"	t	class:mbtree
value_type	record/cursor.h	/^  typedef typename T::value value_type;$/;"	t	struct:read_record_cursor
value_type	record/cursor.h	/^  typedef typename T::value value_type;$/;"	t	struct:write_record_cursor
value_type	record/encoder.h	/^  typedef typename T::value value_type;$/;"	t	struct:schema
value_type	small_unordered_map.h	/^  typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:small_unordered_map
value_type	small_vector.h	/^  typedef T value_type;$/;"	t	class:small_vector
value_type	static_unordered_map.h	/^  typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:static_unordered_map
value_type	static_vector.h	/^  typedef T value_type;$/;"	t	class:static_vector
value_type	txn_btree.h	/^    typedef std::string value_type;$/;"	t	class:txn_btree_::single_value_reader
value_type	txn_btree.h	/^    typedef std::string value_type;$/;"	t	class:txn_btree_::value_reader
value_type	txn_btree.h	/^  typedef txn_btree_::Value value_type;$/;"	t	class:txn_btree
value_type	typed_txn_btree.h	/^    typedef typename Schema::value_type value_type;$/;"	t	class:typed_txn_btree_::single_value_reader
value_type	typed_txn_btree.h	/^    typedef typename Schema::value_type value_type;$/;"	t	class:typed_txn_btree_::value_reader
value_type	typed_txn_btree.h	/^  typedef typename Schema::value_type value_type;$/;"	t	class:typed_txn_btree
value_type	typed_txn_btree.h	/^  typedef typename Schema::value_type value_type;$/;"	t	struct:typed_txn_btree_
value_versioned_array	masstree/value_versioned_array.hh	/^class value_versioned_array {$/;"	c
value_versioned_array	masstree/value_versioned_array.hh	/^inline value_versioned_array::value_versioned_array()$/;"	f	class:value_versioned_array
value_writer	txn_btree.h	/^    constexpr value_writer(const std::string *v) : v(v) {}$/;"	f	class:txn_btree_::value_writer
value_writer	txn_btree.h	/^  class value_writer {$/;"	c	struct:txn_btree_
value_writer	typed_txn_btree.h	/^    constexpr value_writer(const value_type *v, uint64_t fields)$/;"	f	class:typed_txn_btree_::value_writer
value_writer	typed_txn_btree.h	/^  class value_writer {$/;"	c	struct:typed_txn_btree_
value_writer_type	txn_btree.h	/^  typedef txn_btree_::ValueWriter value_writer_type;$/;"	t	class:txn_btree
values	benchmarks/bench.h	/^  std::vector<kv_pair> values;$/;"	m	class:limit_callback
values	benchmarks/bench.h	/^  typename util::vec<kv_pair, N>::type values;$/;"	m	class:static_limit_callback
values	benchmarks/results/make_graphs-2.py	/^      values = []$/;"	v
values	benchmarks/runner.py	/^      values = []$/;"	v
values_	btree.h	/^    value_or_node_ptr values_[NKeysPerNode];$/;"	m	struct:btree::leaf_node
varint	varint.h	/^class varint {$/;"	c
varkey	varkey.h	/^  explicit inline varkey(const char *s)$/;"	f	class:varkey
varkey	varkey.h	/^  explicit inline varkey(const imstring &s)$/;"	f	class:varkey
varkey	varkey.h	/^  explicit inline varkey(const std::string &s)$/;"	f	class:varkey
varkey	varkey.h	/^  inline varkey() : p(NULL), l(0) {}$/;"	f	class:varkey
varkey	varkey.h	/^  inline varkey(const uint8_t *p, size_t l)$/;"	f	class:varkey
varkey	varkey.h	/^class varkey {$/;"	c
vbegin_	masstree/query_masstree.cc	/^    const char * const *vbegin_, * const *vend_;$/;"	m	struct:Masstree::__anon23::scan_tester	file:
vc	dbcore/rcu.h	/^    void const *vc;$/;"	m	union:RCU::rcu_pointer
vec	util.h	/^struct vec {$/;"	s	namespace:util
vecidmax	persist_test.cc	/^  vecidmax(uint64_t coremax, const vector<uint64_t> &v)$/;"	f	struct:tidhelpers
vector	scopedperf.hh	/^  vector() : _cnt(0) {}$/;"	f	struct:scopedperf::vector
vector	scopedperf.hh	/^struct vector {$/;"	s	namespace:scopedperf
vend_	masstree/query_masstree.cc	/^    const char * const *vbegin_, * const *vend_;$/;"	m	struct:Masstree::__anon23::scan_tester	file:
ver_	masstree/value_versioned_array.hh	/^    rowversion ver_;$/;"	m	class:value_versioned_array
verbose	benchmarks/bench.cc	/^int verbose = 0;$/;"	v
verbose	benchmarks/egen/EGenValidate.cpp	/^        int     verbose;$/;"	m	class:BucketSimOptions	file:
verify_record	dbcore/test-sm-log.cpp	/^verify_record(db_record *r, bool verbose)$/;"	f	file:
version	dbcore/sm-common.h	/^struct version {$/;"	s
version	dbcore/sm-trace.cpp	/^    uint64_t version;$/;"	m	struct:TRACER::insert_trace_record	file:
version	dbcore/sm-trace.cpp	/^    uint64_t version;$/;"	m	struct:TRACER::read_trace_record	file:
version_age	dbcore/sm-trace.cpp	/^    uint64_t version_age;   \/\/ age of version, actually LSN._val$/;"	m	struct:TRACER::read_trace_record	file:
version_info_str	btree.h	/^    version_info_str() const$/;"	f	struct:btree::node
version_value	masstree/nodeversion.hh	/^    value_type version_value() const {$/;"	f	class:basic_nodeversion
version_value	masstree/nodeversion.hh	/^    value_type version_value() const {$/;"	f	class:basic_singlethreaded_nodeversion
versioned_node_t	btree.h	/^  typedef std::pair< const node_opaque_t *, uint64_t > versioned_node_t;$/;"	t	class:btree
versioned_node_t	masstree_btree.h	/^  typedef std::pair< const node_opaque_t *, uint64_t > versioned_node_t;$/;"	t	class:mbtree
view	core.h	/^  view(unsigned i) const$/;"	f	class:percore_lazy
view	core.h	/^  view(unsigned i)$/;"	f	class:percore_lazy
vinsert_lowbit	masstree/nodeversion.hh	/^	vinsert_lowbit = (1U << 3), \/\/ == inserting_bit << 2$/;"	e	enum:nodeversion32_parameters::__anon10
vinsert_lowbit	masstree/nodeversion.hh	/^	vinsert_lowbit = (1ULL << 11), \/\/ == inserting_bit << 2$/;"	e	enum:nodeversion64_parameters::__anon11
visit	dbcore/rcu-slist.h	/^    void visit(Visitor &v) {$/;"	f	struct:_rcu_slist
visit	dbcore/rcu-slist.h	/^    void visit(Visitor &v) {$/;"	f	struct:rcu_slist
visit	dbcore/rcu-slist.h	/^    void visit(Visitor const &v) {$/;"	f	struct:_rcu_slist
visit	dbcore/rcu-slist.h	/^    void visit(Visitor const &v) {$/;"	f	struct:rcu_slist
visit_leaf	masstree/checkpoint.hh	/^    void visit_leaf(const SS&, const K&, threadinfo&) {$/;"	f	struct:ckstate
visit_leaf	masstree/kvrow.hh	/^    void visit_leaf(const SS&, const K&, threadinfo&) {$/;"	f	class:query_json_scanner
visit_leaf	masstree/query_masstree.cc	/^    void visit_leaf(const SS&, const K&, threadinfo&) {$/;"	f	struct:Masstree::__anon23::scan_tester
visit_leaf	masstree_btree.h	/^  void visit_leaf(const Masstree::scanstackelt<P>& iter,$/;"	f	class:mbtree::low_level_search_range_scanner
visit_value	masstree/checkpoint.cc	/^bool ckstate::visit_value(Str key, const row_type* value, threadinfo&) {$/;"	f	class:ckstate
visit_value	masstree/kvrow.hh	/^    bool visit_value(Str key, R* value, threadinfo& ti) {$/;"	f	class:query_json_scanner
visit_value	masstree/query_masstree.cc	/^    bool visit_value(Str key, row_type*, threadinfo&) {$/;"	f	struct:Masstree::__anon23::scan_tester
visit_value	masstree_btree.h	/^  bool visit_value(const Masstree::key<uint64_t>& key,$/;"	f	class:mbtree::low_level_search_range_scanner
visitor_helper	dbcore/rcu-slist.h	/^    struct visitor_helper {$/;"	s	struct:rcu_slist
viter	scopedperf.hh	/^  viter(const vector<T> *v, int pos) : _v(v), _pos(pos) {}$/;"	f	struct:scopedperf::viter
viter	scopedperf.hh	/^struct viter {$/;"	s	namespace:scopedperf
vn_	btree.h	/^    typename leaf_node::value_or_node_ptr vn_;$/;"	m	struct:btree::leaf_kvinfo
vnum	dbcore/test-sm-log.cpp	/^    uint64_t vnum;$/;"	m	struct:db_record	file:
vol	benchmarks/egen/TxnHarnessStructs.h	/^    INT64               vol;$/;"	m	struct:TPCE::TDailyHistory
vol_incr	benchmarks/egen/TxnHarnessStructs.h	/^    INT32   vol_incr;$/;"	m	struct:TPCE::TDataMaintenanceTxnInput
vol_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        vol_ind;$/;"	m	struct:TPCE::TDailyHistory
volatile_read	dbcore/sm-common.h	/^LSN volatile_read(LSN volatile &x) { return LSN{volatile_read(x._val)}; }$/;"	f
volatile_read	dbcore/sm-common.h	/^XID volatile_read(XID volatile &x) { return XID{volatile_read(x._val)}; }$/;"	f
volatile_read	dbcore/sm-common.h	/^fat_ptr volatile_read(fat_ptr volatile &p) {$/;"	f
volatile_read	dbcore/sm-defs.h	/^T volatile_read(T volatile &x) { return *&x; }$/;"	f
volatile_write	dbcore/sm-common.h	/^void volatile_write(fat_ptr volatile &x, fat_ptr const &y) {$/;"	f
volatile_write	dbcore/sm-defs.h	/^void volatile_write(T volatile &x, U const &y) { *&x = y; }$/;"	f
volt1a	masstree/mtclient.cc	/^volt1a(struct child *c)$/;"	f
volt1b	masstree/mtclient.cc	/^volt1b(struct child *c)$/;"	f
volt2a	masstree/mtclient.cc	/^volt2a(struct child *c)$/;"	f
volt2b	masstree/mtclient.cc	/^volt2b(struct child *c)$/;"	f
volt2b1	masstree/mtclient.cc	/^volt2b1(struct child *c, struct async *a, bool, const Str &val)$/;"	f
volume	benchmarks/egen/TxnHarnessStructs.h	/^    double          volume[max_broker_list_len];$/;"	m	struct:TPCE::TBrokerVolumeFrame1Output
volume	benchmarks/egen/TxnHarnessStructs.h	/^    double          volume[max_broker_list_len];$/;"	m	struct:TPCE::TBrokerVolumeTxnOutput
vsnprintf	masstree/straccum.cc	/^StringAccum::vsnprintf(int n, const char *format, va_list val)$/;"	f	class:lcdf::StringAccum
vsplit_lowbit	masstree/nodeversion.hh	/^	vsplit_lowbit = (1U << 9),$/;"	e	enum:nodeversion32_parameters::__anon10
vsplit_lowbit	masstree/nodeversion.hh	/^	vsplit_lowbit = (1ULL << 27),$/;"	e	enum:nodeversion64_parameters::__anon11
vstr	masstree/clp.h	/^    const char *vstr;		\/**< The string value provided with the last$/;"	m	struct:Clp_Parser
w1b	masstree/mtclient.cc	/^w1b(struct child *c)$/;"	f
w_rand	dbcore/w_rand.cpp	/^w_rand::w_rand()$/;"	f	class:w_rand
w_rand	dbcore/w_rand.h	/^    w_rand(uint32_t const (&w)[N])$/;"	f	struct:w_rand
w_rand	dbcore/w_rand.h	/^    w_rand(uint32_t const *w, size_t n)$/;"	f	struct:w_rand
w_rand	dbcore/w_rand.h	/^struct w_rand {$/;"	s
w_rand_urng	dbcore/w_rand.h	/^struct w_rand_urng {$/;"	s
wait	dbcore/sm-common.h	/^    void wait(os_mutex_pod &mutex) {$/;"	f	struct:os_condvar_pod
wait	masstree/mtd.cc	/^    int wait(eventset &es) {$/;"	f	class:tcpfds
wait	masstree/mtd.cc	/^    int wait(eventset &es) {$/;"	f	struct:tcpfds
wait_all	masstree/mtclient.cc	/^    void wait_all() {$/;"	f	struct:kvtest_client
wait_all	masstree/mtd.cc	/^    void wait_all() {$/;"	f	struct:kvtest_client
wait_all	masstree/mttest.cc	/^    void wait_all() {$/;"	f	struct:kvtest_client
wait_for	spinbarrier.h	/^  wait_for()$/;"	f	class:spin_barrier
wait_for_commit_result	dbcore/ssn.cpp	/^wait_for_commit_result(xid_context *xc) {$/;"	f	namespace:TXN
wait_for_durable	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::wait_for_durable(uint64_t dlsn_offset)$/;"	f	class:sm_log_alloc_mgr
wait_for_durable_lsn	dbcore/sm-log.cpp	/^sm_log::wait_for_durable_lsn(LSN dlsn)$/;"	f	class:sm_log
waiting_	masstree/log.hh	/^	waitlist* waiting_;$/;"	m	struct:loginfo::front
waitlist	masstree/log.hh	/^    struct waitlist {$/;"	s	class:loginfo
waituntilphase	masstree/mtd.cc	/^waituntilphase(int phase)$/;"	f
wake_epoch	masstree/log.hh	/^	kvepoch_t wake_epoch;$/;"	m	struct:logreplay::info_type
wake_epoch_	masstree/log.hh	/^    kvepoch_t wake_epoch_;      \/\/ epoch for which we recorded a wake command$/;"	m	class:loginfo
wanted	masstree/mtclient.cc	/^    char wanted[16]; \/\/ just first 16 bytes$/;"	m	struct:async	file:
wantedlen	masstree/mtclient.cc	/^    int wantedlen;$/;"	m	struct:async	file:
warehouse_id	benchmarks/tpcc.cc	/^  ssize_t warehouse_id;$/;"	m	class:tpcc_customer_loader	file:
warehouse_id	benchmarks/tpcc.cc	/^  ssize_t warehouse_id;$/;"	m	class:tpcc_order_loader	file:
warehouse_id	benchmarks/tpcc.cc	/^  ssize_t warehouse_id;$/;"	m	class:tpcc_stock_loader	file:
watchListsAndItemsTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CWatchListsAndItemsTable*		watchListsAndItemsTable;$/;"	m	class:TPCE::CGenerateAndLoad
weights	benchmarks/runner.py	/^          normalize([1.0 for _ in info])$/;"	v
weights	scripts/tester.py	/^  weights = normalize([x[1] for x in LOGGERS])$/;"	v
what	benchmarks/egen/error.h	/^    virtual const char* what() const throw() {$/;"	f	class:TPCE::CBaseErr
what	txn.h	/^  what() const throw()$/;"	f	class:transaction_abort_exception
whole_negated	masstree/clp.c	/^    unsigned char whole_negated; \/* true if negated by an option character *\/$/;"	m	struct:Clp_Internal	file:
whole_negated	masstree/clp.c	/^    unsigned char whole_negated;$/;"	m	struct:Clp_ParserState	file:
width	masstree/masstree_struct.hh	/^    static constexpr int width = P::internode_width;$/;"	m	class:Masstree::internode
width	masstree/masstree_struct.hh	/^    static constexpr int width = P::leaf_width;$/;"	m	class:Masstree::leaf
widx	dbcore/xid.cpp	/^    size_t widx;$/;"	m	struct:TXN::bitmap	file:
window	masstree/mtclient.cc	/^unsigned window = MAXWINDOW;$/;"	v
window_buffer	dbcore/window-buffer.cpp	/^window_buffer::window_buffer(size_t bufsz, size_t start_offset)$/;"	f	class:window_buffer
window_buffer	dbcore/window-buffer.h	/^struct window_buffer {$/;"	s
window_size	dbcore/window-buffer.h	/^    size_t window_size() { return _size; }$/;"	f	struct:window_buffer
windows1252_c1_mapping	masstree/string.cc	/^static const uint16_t windows1252_c1_mapping[] = {$/;"	m	namespace:lcdf	file:
windows1252_to_utf8	masstree/string.cc	/^String::windows1252_to_utf8() const$/;"	f	class:lcdf::String
withPrefix	third-party/lz4/lz4.c	/^typedef enum { noPrefix = 0, withPrefix = 1 } prefix64k_directive;$/;"	e	enum:__anon4	file:
worker	btree.cc	/^    worker(bool inserts, unsigned int thread,$/;"	f	class:mp_test_inserts_removes_ns::worker
worker	btree.cc	/^    worker(unsigned int seed, testing_concurrent_btree &btr) : btree_worker(btr), n(0), seed(seed) {}$/;"	f	class:read_only_perf_test_ns::worker
worker	btree.cc	/^    worker(unsigned int seed, testing_concurrent_btree &btr) : btree_worker(btr), seed(seed) {}$/;"	f	class:mp_test5_ns::worker
worker	btree.cc	/^    worker(unsigned int seed, testing_concurrent_btree &btr) : btree_worker(btr), seed(seed) {}$/;"	f	class:write_only_perf_test_ns::worker
worker	btree.cc	/^    worker(unsigned int thread, testing_concurrent_btree &btr)$/;"	f	class:mp_test_pinning_ns::worker
worker	btree.cc	/^  class worker : public btree_worker {$/;"	c	namespace:mp_test5_ns	file:
worker	btree.cc	/^  class worker : public btree_worker {$/;"	c	namespace:mp_test_inserts_removes_ns	file:
worker	btree.cc	/^  class worker : public btree_worker {$/;"	c	namespace:mp_test_pinning_ns	file:
worker	btree.cc	/^  class worker : public btree_worker {$/;"	c	namespace:read_only_perf_test_ns	file:
worker	btree.cc	/^  class worker : public btree_worker {$/;"	c	namespace:write_only_perf_test_ns	file:
worker_id	benchmarks/bench.h	/^  unsigned int worker_id;$/;"	m	class:bench_worker
workload_desc	benchmarks/bench.h	/^    workload_desc() {}$/;"	f	struct:bench_worker::workload_desc
workload_desc	benchmarks/bench.h	/^    workload_desc(const std::string &name, double frequency, txn_fn_t fn)$/;"	f	struct:bench_worker::workload_desc
workload_desc	benchmarks/bench.h	/^  struct workload_desc {$/;"	s	class:bench_worker
workload_desc_vec	benchmarks/bench.h	/^  typedef std::vector<workload_desc> workload_desc_vec;$/;"	t	class:bench_worker
workload_mix_extractor	benchmarks/results/make_graphs-6.py	/^    def workload_mix_extractor(mix):$/;"	f
wrapped_size	dbcore/sm-log-defs.h	/^    size_t wrapped_size(uint32_t nrec, size_t payload_bytes)$/;"	f	struct:log_block
write	masstree/msgpack.hh	/^    inline unparser<T>& write(const X& x) {$/;"	f	class:msgpack::unparser
write	record/inline_str.h	/^  write(uint8_t *buf, const obj_type &obj)$/;"	f	struct:serializer
write	record/serializer.h	/^  write(uint8_t *buf, const T &obj)$/;"	f	struct:serializer
write	record/serializer.h	/^  write(uint8_t *buf, const uint8_t *obj)$/;"	f	struct:generic_serializer
write	record/serializer.h	/^  write(uint8_t *buf, int32_t obj)$/;"	f	struct:serializer
write	record/serializer.h	/^  write(uint8_t *buf, uint32_t obj)$/;"	f	struct:serializer
write_array_header	masstree/msgpack.hh	/^    inline unparser<T>& write_array_header(uint32_t size) {$/;"	f	class:msgpack::unparser
write_array_header	masstree/msgpack.hh	/^inline char* write_array_header(char* s, uint32_t size) {$/;"	f	namespace:msgpack::format
write_begin	dbcore/window-buffer.h	/^    size_t write_begin() { return read_end(); }$/;"	f	struct:window_buffer
write_bool	masstree/msgpack.hh	/^inline char* write_bool(char* s, bool x) {$/;"	f	namespace:msgpack::format
write_buf	dbcore/window-buffer.h	/^    char *write_buf(size_t offset, size_t size) {$/;"	f	struct:window_buffer
write_cb	benchmarks/bench.cc	/^write_cb(void *p, const char *s)$/;"	f	file:
write_current_and_advance	record/cursor.h	/^  write_current_and_advance(const value_type *v, uint8_t *old_v = nullptr)$/;"	f	struct:write_record_cursor
write_double	masstree/msgpack.hh	/^inline char* write_double(char* s, double x) {$/;"	f	namespace:msgpack::format
write_end	dbcore/window-buffer.h	/^    size_t write_end() { return read_begin() + window_size(); }$/;"	f	struct:window_buffer
write_float	masstree/msgpack.hh	/^inline char* write_float(char* s, float x) {$/;"	f	namespace:msgpack::format
write_horizon	persist_test.cc	/^  write_horizon(void *lz4ctx,$/;"	f	class:onecopy_logbased_simulation	file:
write_in_host_order	masstree/compiler.hh	/^inline char* write_in_host_order(char* s, T x) {$/;"	f
write_in_host_order	masstree/compiler.hh	/^inline uint8_t* write_in_host_order(uint8_t* s, T x) {$/;"	f
write_in_net_order	masstree/compiler.hh	/^inline char* write_in_net_order(char* s, T x) {$/;"	f
write_in_net_order	masstree/compiler.hh	/^inline uint8_t* write_in_net_order(uint8_t* s, T x) {$/;"	f
write_int	masstree/msgpack.hh	/^inline char* write_int(char* s, int x) {$/;"	f	namespace:msgpack::format
write_int	masstree/msgpack.hh	/^inline char* write_int(char* s, long long x) {$/;"	f	namespace:msgpack::format
write_int	masstree/msgpack.hh	/^inline char* write_int(char* s, long x) {$/;"	f	namespace:msgpack::format
write_int	masstree/msgpack.hh	/^inline char* write_int(char* s, unsigned long long x) {$/;"	f	namespace:msgpack::format
write_int	masstree/msgpack.hh	/^inline char* write_int(char* s, unsigned long x) {$/;"	f	namespace:msgpack::format
write_int	masstree/msgpack.hh	/^inline char* write_int(char* s, unsigned x) {$/;"	f	namespace:msgpack::format
write_map_header	masstree/msgpack.hh	/^inline char* write_map_header(char* s, uint32_t size) {$/;"	f	namespace:msgpack::format
write_null	masstree/msgpack.hh	/^inline char* write_null(char* s) {$/;"	f	namespace:msgpack::format
write_only	benchmarks/queue.cc	/^  bool write_only;$/;"	m	class:queue_bench_runner	file:
write_only_perf_test	btree.cc	/^write_only_perf_test()$/;"	f	file:
write_only_perf_test_ns	btree.cc	/^namespace write_only_perf_test_ns {$/;"	n	file:
write_record_cursor	record/cursor.h	/^  write_record_cursor(uint8_t *px)$/;"	f	struct:write_record_cursor
write_record_cursor	record/cursor.h	/^struct write_record_cursor {$/;"	s
write_record_t	txn.h	/^    write_record_t() : new_tuple(NULL), btr(NULL), oid(0) {}$/;"	f	struct:transaction::write_record_t
write_record_t	txn.h	/^    write_record_t(dbtuple *n, concurrent_btree *b, oid_type o) :$/;"	f	struct:transaction::write_record_t
write_record_t	txn.h	/^  struct write_record_t {$/;"	s	class:transaction
write_set	txn.h	/^  write_set_map write_set;$/;"	m	class:transaction
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 10;$/;"	m	struct:hint_tpcc_payment_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 175;$/;"	m	struct:hint_tpcc_delivery_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 1;$/;"	m	struct:hint_kv_get_put_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 1;$/;"	m	struct:hint_kv_scan_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 1;$/;"	m	struct:hint_read_only_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 1;$/;"	m	struct:hint_tpcc_order_status_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 1;$/;"	m	struct:hint_tpcc_stock_level_traits
write_set_expected_size	benchmarks/ndb_wrapper_impl.h	/^  static const size_t write_set_expected_size = 35;$/;"	m	struct:hint_tpcc_new_order_traits
write_set_map	txn.h	/^  typedef std::unordered_map<dbtuple*, write_record_t> write_set_map;$/;"	t	class:transaction
write_set_map	txn_proto2_impl.h	/^  typedef typename super_type::write_set_map write_set_map;$/;"	t	class:transaction_proto2
write_signed	masstree/msgpack.hh	/^    static inline char* write_signed(char* s, int32_t x) {$/;"	f	struct:msgpack::format::sized_writer
write_signed	masstree/msgpack.hh	/^    static inline char* write_signed(char* s, int64_t x) {$/;"	f	struct:msgpack::format::sized_writer
write_string	masstree/msgpack.hh	/^inline char* write_string(char* s, Str x) {$/;"	f	namespace:msgpack::format
write_string	masstree/msgpack.hh	/^inline char* write_string(char* s, const char *data, int len) {$/;"	f	namespace:msgpack::format
write_string	masstree/msgpack.hh	/^inline char* write_string(char* s, const lcdf::String_base<T>& x) {$/;"	f	namespace:msgpack::format
write_trace	dbcore/sm-trace.cpp	/^write_trace(size_t len)$/;"	f	namespace:TRACER
write_unsigned	masstree/msgpack.hh	/^    static inline char* write_unsigned(char* s, uint32_t x) {$/;"	f	struct:msgpack::format::sized_writer
write_unsigned	masstree/msgpack.hh	/^    static inline char* write_unsigned(char* s, uint64_t x) {$/;"	f	struct:msgpack::format::sized_writer
write_uvint32	varint.h	/^write_uvint32(uint8_t *buf, uint32_t value)$/;"	f
write_wide	masstree/msgpack.hh	/^    inline unparser<T>& write_wide(int64_t x) {$/;"	f	class:msgpack::unparser
write_wide	masstree/msgpack.hh	/^    inline unparser<T>& write_wide(uint64_t x) {$/;"	f	class:msgpack::unparser
write_wide_int64	masstree/msgpack.hh	/^inline char* write_wide_int64(char* s, int64_t x) {$/;"	f	namespace:msgpack::format
write_wide_int64	masstree/msgpack.hh	/^inline char* write_wide_int64(char* s, uint64_t x) {$/;"	f	namespace:msgpack::format
writeall	fileutils.h	/^  writeall(int fd, const char *buf, int n)$/;"	f	class:fileutils
writecheckpoint	masstree/mtd.cc	/^writecheckpoint(const char *path, ckstate *c, double t0)$/;"	f
writer	persist_test.cc	/^  writer(unsigned id, int fd, const vector<unsigned> &assignment)$/;"	f	class:onecopy_logbased_simulation	file:
x	dbcore/test-epoch.cpp	/^size_t x = 1;$/;"	v
x	dbcore/test-sc-hash.cpp	/^    int x;$/;"	m	struct:obj	file:
x	masstree/json.hh	/^        Json_rep_item<ComplexJson*> x;$/;"	m	union:lcdf::Json::rep_type
x	masstree/json.hh	/^    T x;$/;"	m	struct:lcdf::Json_rep_item
x	masstree/masstree_struct.hh	/^	uintptr_t x;$/;"	m	union:Masstree::leafvalue::__anon76
x	masstree/string_slice.hh	/^	T x;$/;"	m	union:string_slice::union_type
x	masstree/test_atomics.cc	/^    uint32_t x;$/;"	m	union:myunion	file:
x	scopedperf.hh	/^  volatile uint x;$/;"	m	class:scopedperf::spinlock
x_	masstree/kpermuter.hh	/^    value_type x_;$/;"	m	class:kpermuter
xalarm	masstree/misc.hh	/^inline void xalarm(double d) {$/;"	f
xchg	masstree/compiler.hh	/^    static inline type xchg(type* object, type new_value) {$/;"	f	struct:sized_compiler_operations
xchg	masstree/compiler.hh	/^inline T xchg(T* object, T new_value) {$/;"	f
xchg	masstree/compiler.hh	/^inline int16_t xchg(int16_t* object, int new_value) {$/;"	f
xchg	masstree/compiler.hh	/^inline int8_t xchg(int8_t* object, int new_value) {$/;"	f
xchg	masstree/compiler.hh	/^inline uint16_t xchg(uint16_t* object, int new_value) {$/;"	f
xchg	masstree/compiler.hh	/^inline uint8_t xchg(uint8_t* object, int new_value) {$/;"	f
xchg	masstree/compiler.hh	/^inline unsigned xchg(unsigned* object, int new_value) {$/;"	f
xcompar	masstree/mtclient.cc	/^xcompar(const void *xa, const void *xb)$/;"	f
xid	dbcore/sm-trace.cpp	/^    uint64_t xid;            \/\/ identifies the tx$/;"	m	struct:TRACER::trace_record_header	file:
xid	txn.h	/^  XID xid;$/;"	m	class:transaction
xid_age	dbcore/sm-trace.cpp	/^    uint64_t xid_age;   \/\/ reader's xc->begin$/;"	m	struct:TRACER::read_trace_record	file:
xid_alloc	dbcore/xid.cpp	/^xid_alloc()$/;"	f	namespace:TXN
xid_context	dbcore/xid.h	/^struct xid_context {$/;"	s	namespace:TXN
xid_free	dbcore/xid.cpp	/^void xid_free(XID x) {$/;"	f	namespace:TXN
xid_get_context	dbcore/xid.cpp	/^xid_get_context(XID x) {$/;"	f	namespace:TXN
xid_mutex	dbcore/xid.cpp	/^os_mutex_pod xid_mutex = os_mutex_pod::static_init();$/;"	m	namespace:TXN	file:
xids	dbcore/ssn.h	/^    XID xids[XIDS_PER_READER_KEY];$/;"	m	struct:TXN::readers_list
xl	masstree/test_atomics.cc	/^uint32_t xl[100];$/;"	v
xmemo	masstree/string.hh	/^        inline memo_type* xmemo() const {$/;"	f	struct:lcdf::String::rep_type
xposition	masstree/mtd.cc	/^    uint64_t xposition() const {$/;"	f	struct:conn
xstamp	tuple.h	/^  uint64_t xstamp;         \/\/ access (reader) stamp (\\eta), updated when reader commits$/;"	m	struct:dbtuple
xtext	masstree/clp.c	/^    const char *xtext;$/;"	m	struct:Clp_Internal	file:
xtext	masstree/clp.c	/^    const char *xtext;$/;"	m	struct:Clp_ParserState	file:
xtics	masstree/mttest.cc	/^    lcdf::StringAccum xtics;$/;"	m	struct:__anon67::gnuplot_info	file:
xunion	masstree/test_atomics.cc	/^} xunion;$/;"	v	typeref:union:myunion
xw	masstree/test_atomics.cc	/^uint16_t xw[100];$/;"	v
year	benchmarks/egen/DateTime.h	/^        INT16    year;$/;"	m	struct:TPCE::tagTIMESTAMP_STRUCT
year	benchmarks/egen/TxnHarnessStructs.h	/^    INT32               year;$/;"	m	struct:TPCE::TFinInfo
year_ind	benchmarks/egen/TxnHarnessStructs.h	/^    DB_INDICATOR        year_ind;$/;"	m	struct:TPCE::TFinInfo
yield	benchmarks/egen/TxnHarnessStructs.h	/^    double              yield;$/;"	m	struct:TPCE::TSecurityDetailFrame1Output
zero_ctr	scopedperf.hh	/^  zero_ctr() : namedctr("zero") {}$/;"	f	class:scopedperf::zero_ctr
zero_ctr	scopedperf.hh	/^class zero_ctr : public namedctr<64> {$/;"	c	namespace:scopedperf
zero_string_rep	masstree/string.cc	/^const String::rep_type String::zero_string_rep = {$/;"	m	class:lcdf::String	file:
zero_string_rep	masstree/string.hh	/^    static const rep_type zero_string_rep;$/;"	m	class:lcdf::String
zipCodeTable	benchmarks/egen/EGenGenerateAndLoad.h	/^	CZipCodeTable*				zipCodeTable;$/;"	m	class:TPCE::CGenerateAndLoad
zz_padding	benchmarks/egen/TxnHarnessStructs.h	/^    char                zz_padding[4];$/;"	m	struct:TPCE::TMarketFeedFrame1Input
zz_padding1	benchmarks/egen/TxnHarnessStructs.h	/^    char                zz_padding1[4];$/;"	m	struct:TPCE::TMarketFeedTxnInput
zz_padding2	benchmarks/egen/TxnHarnessStructs.h	/^    char                zz_padding2[4];$/;"	m	struct:TPCE::TMarketFeedTxnInput
~BucketSimulator	benchmarks/egen/bucketsimulator.cpp	/^BucketSimulator::~BucketSimulator() {$/;"	f	class:TPCE::BucketSimulator
~CAddressTable	benchmarks/egen/AddressTable.cpp	/^CAddressTable::~CAddressTable()$/;"	f	class:CAddressTable
~CBaseErr	benchmarks/egen/error.h	/^    ~CBaseErr() throw()$/;"	f	class:TPCE::CBaseErr
~CBaseLoader	benchmarks/egen/BaseLoader.h	/^    virtual ~CBaseLoader() {};$/;"	f	class:TPCE::CBaseLoader
~CBaseLoaderFactory	benchmarks/egen/BaseLoaderFactory.h	/^    virtual ~CBaseLoaderFactory() {};$/;"	f	class:TPCE::CBaseLoaderFactory
~CBaseLogFormatter	benchmarks/egen/BaseLogFormatter.h	/^    virtual ~CBaseLogFormatter() {};$/;"	f	class:TPCE::CBaseLogFormatter
~CBaseLogger	benchmarks/egen/BaseLogger.h	/^    virtual ~CBaseLogger() {}$/;"	f	class:TPCE::CBaseLogger
~CBrokerVolumeDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CBrokerVolumeDBInterface  () { }$/;"	f	class:TPCE::CBrokerVolumeDBInterface
~CBrokersTable	benchmarks/egen/Brokers.h	/^    ~CBrokersTable()$/;"	f	class:TPCE::CBrokersTable
~CCE	benchmarks/egen/CE.cpp	/^CCE::~CCE( void )$/;"	f	class:CCE
~CCESUTInterface	benchmarks/egen/CESUTInterface.h	/^    virtual ~CCESUTInterface() {};$/;"	f	class:TPCE::CCESUTInterface
~CCETxnMixGenerator	benchmarks/egen/CETxnMixGenerator.cpp	/^CCETxnMixGenerator::~CCETxnMixGenerator()$/;"	f	class:CCETxnMixGenerator
~CChargeTable	benchmarks/egen/ChargeTable.h	/^    ~CChargeTable( )$/;"	f	class:TPCE::CChargeTable
~CCheckErr	benchmarks/egen/error.h	/^    ~CCheckErr() throw()$/;"	f	class:TPCE::CCheckErr
~CCommissionRateTable	benchmarks/egen/CommissionRateTable.h	/^    ~CCommissionRateTable( )$/;"	f	class:TPCE::CCommissionRateTable
~CCustomerAccountsAndPermissionsTable	benchmarks/egen/CustomerAccountsAndPermissionsTable.h	/^    ~CCustomerAccountsAndPermissionsTable()$/;"	f	class:TPCE::CCustomerAccountsAndPermissionsTable
~CCustomerPositionDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CCustomerPositionDBInterface  () { }$/;"	f	class:TPCE::CCustomerPositionDBInterface
~CDM	benchmarks/egen/DM.cpp	/^CDM::~CDM()$/;"	f	class:CDM
~CDMSUTInterface	benchmarks/egen/DMSUTInterface.h	/^    virtual ~CDMSUTInterface() {};$/;"	f	class:TPCE::CDMSUTInterface
~CDataMaintenanceDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CDataMaintenanceDBInterface  () { }$/;"	f	class:TPCE::CDataMaintenanceDBInterface
~CDateTime	benchmarks/egen/DateTime.cpp	/^CDateTime::~CDateTime(void)$/;"	f	class:CDateTime
~CEGenErrorException	benchmarks/egen/EGenError.h	/^    ~CEGenErrorException( void )$/;"	f	class:TPCE::CEGenErrorException
~CExchangeTable	benchmarks/egen/ExchangeTable.h	/^    ~CExchangeTable( )$/;"	f	class:TPCE::CExchangeTable
~CFixedArray	benchmarks/egen/FixedArray.h	/^    ~CFixedArray()$/;"	f	class:TPCE::CFixedArray
~CFixedMap	benchmarks/egen/FixedMap.h	/^    ~CFixedMap()$/;"	f	class:TPCE::CFixedMap
~CFlatFile	benchmarks/egen/FlatFile.h	/^    virtual ~CFlatFile() {}$/;"	f	class:TPCE::CFlatFile
~CFlatFileLoader	benchmarks/egen/FlatFileLoader.h	/^CFlatFileLoader<T>::~CFlatFileLoader()$/;"	f	class:TPCE::CFlatFileLoader
~CGenerateAndLoadBaseOutput	benchmarks/egen/EGenGenerateAndLoadBaseOutput.h	/^    virtual ~CGenerateAndLoadBaseOutput() {};$/;"	f	class:TPCE::CGenerateAndLoadBaseOutput
~CHoldingsAndTradesTable	benchmarks/egen/HoldingsAndTradesTable.h	/^    ~CHoldingsAndTradesTable()$/;"	f	class:TPCE::CHoldingsAndTradesTable
~CIndustryTable	benchmarks/egen/IndustryTable.h	/^    ~CIndustryTable( )$/;"	f	class:TPCE::CIndustryTable
~CInputFileNoWeight	benchmarks/egen/InputFileNoWeight.h	/^    ~CInputFileNoWeight()$/;"	f	class:TPCE::CInputFileNoWeight
~CInputFiles	benchmarks/egen/InputFlatFilesStructure.h	/^    ~CInputFiles() {};$/;"	f	class:TPCE::CInputFiles
~CMEE	benchmarks/egen/MEE.cpp	/^CMEE::~CMEE( void )$/;"	f	class:CMEE
~CMEEPriceBoard	benchmarks/egen/MEEPriceBoard.cpp	/^CMEEPriceBoard::~CMEEPriceBoard(void)$/;"	f	class:CMEEPriceBoard
~CMEESUTInterface	benchmarks/egen/MEESUTInterface.h	/^    virtual ~CMEESUTInterface() {};$/;"	f	class:TPCE::CMEESUTInterface
~CMEETickerTape	benchmarks/egen/MEETickerTape.cpp	/^CMEETickerTape::~CMEETickerTape( void )$/;"	f	class:CMEETickerTape
~CMEETradingFloor	benchmarks/egen/MEETradingFloor.cpp	/^CMEETradingFloor::~CMEETradingFloor( void )$/;"	f	class:CMEETradingFloor
~CMarketFeedDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CMarketFeedDBInterface  () { }$/;"	f	class:TPCE::CMarketFeedDBInterface
~CMarketWatchDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CMarketWatchDBInterface   () { }$/;"	f	class:TPCE::CMarketWatchDBInterface
~CMutex	benchmarks/egen/locking.cpp	/^CMutex::~CMutex()$/;"	f	class:TPCE::CMutex
~CParametersWithDefaults	benchmarks/egen/DriverParamSettings.h	/^    virtual ~CParametersWithDefaults() {};$/;"	f	class:TPCE::CParametersWithDefaults
~CParametersWithoutDefaults	benchmarks/egen/DriverParamSettings.h	/^    virtual ~CParametersWithoutDefaults() {};$/;"	f	class:TPCE::CParametersWithoutDefaults
~CPerson	benchmarks/egen/Person.cpp	/^CPerson::~CPerson()$/;"	f	class:CPerson
~CRITICAL_SECTION	benchmarks/MEESUT.h	/^	~CRITICAL_SECTION()$/;"	f	class:TPCE::CRITICAL_SECTION
~CRandom	benchmarks/egen/Random.h	/^    ~CRandom(void) { };$/;"	f	class:TPCE::CRandom
~CSectorTable	benchmarks/egen/SectorTable.h	/^    ~CSectorTable( )$/;"	f	class:TPCE::CSectorTable
~CSecurityDetailDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CSecurityDetailDBInterface  () { }$/;"	f	class:TPCE::CSecurityDetailDBInterface
~CSendToMarketInterface	benchmarks/egen/TxnHarnessSendToMarketInterface.h	/^    virtual ~CSendToMarketInterface() {};$/;"	f	class:TPCE::CSendToMarketInterface
~CStatusTypeTable	benchmarks/egen/StatusTypeTable.h	/^    ~CStatusTypeTable( )$/;"	f	class:TPCE::CStatusTypeTable
~CSyncLock	benchmarks/egen/SyncLockInterface.h	/^    ~CSyncLock() {$/;"	f	class:TPCE::CSyncLock
~CSystemErr	benchmarks/egen/error.h	/^    ~CSystemErr() throw()$/;"	f	class:TPCE::CSystemErr
~CTimerWheel	benchmarks/egen/TimerWheel.h	/^CTimerWheel< T,  T2, Period, Resolution >::~CTimerWheel( void )$/;"	f	class:TPCE::CTimerWheel
~CTimerWheelTimer	benchmarks/egen/TimerWheelTimer.h	/^CTimerWheelTimer<T,T2>::~CTimerWheelTimer(void)$/;"	f	class:TPCE::CTimerWheelTimer
~CTradeCleanupDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CTradeCleanupDBInterface  () { }$/;"	f	class:TPCE::CTradeCleanupDBInterface
~CTradeGen	benchmarks/egen/TradeGen.cpp	/^CTradeGen::~CTradeGen()$/;"	f	class:CTradeGen
~CTradeLookupDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CTradeLookupDBInterface  () { }$/;"	f	class:TPCE::CTradeLookupDBInterface
~CTradeOrderDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CTradeOrderDBInterface  () { }$/;"	f	class:TPCE::CTradeOrderDBInterface
~CTradeResultDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CTradeResultDBInterface  () { }$/;"	f	class:TPCE::CTradeResultDBInterface
~CTradeStatusDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CTradeStatusDBInterface  () { }$/;"	f	class:TPCE::CTradeStatusDBInterface
~CTradeTypeTable	benchmarks/egen/TradeTypeTable.h	/^    ~CTradeTypeTable( )$/;"	f	class:TPCE::CTradeTypeTable
~CTradeUpdateDBInterface	benchmarks/egen/TxnHarnessDBInterface.h	/^        virtual ~CTradeUpdateDBInterface  () { }$/;"	f	class:TPCE::CTradeUpdateDBInterface
~CWheelTime	benchmarks/egen/WheelTime.cpp	/^CWheelTime::~CWheelTime( void )$/;"	f	class:CWheelTime
~Json	masstree/json.hh	/^inline Json::~Json() {$/;"	f	class:lcdf::Json
~KVConn	masstree/mtclient.hh	/^    ~KVConn() {$/;"	f	class:KVConn
~Locker	benchmarks/egen/locking.h	/^        ~Locker<T>() {$/;"	f	class:TPCE::Locker
~Locker	benchmarks/egen/threading_pthread.h	/^        ~Locker<T>() {$/;"	f	class:TPCE::Locker
~Locker	benchmarks/egen/threading_single.h	/^        ~Locker<T>() {$/;"	f	class:TPCE::Locker
~ObjectJson	masstree/json.cc	/^Json::ObjectJson::~ObjectJson()$/;"	f	class:lcdf::Json::ObjectJson
~ProgressMeterInterface	benchmarks/egen/progressmeterinterface.cpp	/^ProgressMeterInterface::~ProgressMeterInterface()$/;"	f	class:TPCE::ProgressMeterInterface
~String	masstree/string.hh	/^inline String::~String() {$/;"	f	class:lcdf::String
~StringAccum	masstree/straccum.hh	/^inline StringAccum::~StringAccum() {$/;"	f	class:lcdf::StringAccum
~TBaseElementsLimits	benchmarks/egen/InputFlatFilesDeclarations.h	/^    virtual ~TBaseElementsLimits() {}$/;"	f	struct:TPCE::TBaseElementsLimits
~TBaseInputRow	benchmarks/egen/Table_Defs.h	/^    virtual ~TBaseInputRow() {}$/;"	f	struct:TPCE::TBaseInputRow
~TableTemplate	benchmarks/egen/TableTemplate.h	/^    virtual ~TableTemplate() {};$/;"	f	class:TPCE::TableTemplate
~ThreadBase	benchmarks/egen/threading.cpp	/^ThreadBase::~ThreadBase()$/;"	f	class:TPCE::ThreadBase
~__defer	dbcore/defer.h	/^    ~__defer() { fn(); }$/;"	f	struct:__defer
~abstract_db	benchmarks/abstract_db.h	/^  virtual ~abstract_db() {}$/;"	f	class:abstract_db
~abstract_ordered_index	benchmarks/abstract_ordered_index.h	/^  virtual ~abstract_ordered_index() {}$/;"	f	class:abstract_ordered_index
~base_imstring	imstring.h	/^  ~base_imstring()$/;"	f	class:base_imstring
~base_txn_btree	base_txn_btree.h	/^  ~base_txn_btree()$/;"	f	class:base_txn_btree
~bench_runner	benchmarks/bench.h	/^  virtual ~bench_runner() {}$/;"	f	class:bench_runner
~bench_worker	benchmarks/bench.h	/^  virtual ~bench_worker() {}$/;"	f	class:bench_worker
~block_scanner	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::block_scanner::~block_scanner()$/;"	f	class:sm_log_recover_mgr::block_scanner
~btree	btree.h	/^  ~btree()$/;"	f	class:btree
~bytes_search_range_callback	typed_txn_btree.h	/^    virtual ~bytes_search_range_callback() {}$/;"	f	struct:typed_txn_btree::bytes_search_range_callback
~conn	masstree/mtd.cc	/^    ~conn() {$/;"	f	struct:conn
~database_simulation	persist_test.cc	/^  virtual ~database_simulation() {}$/;"	f	class:database_simulation
~db_file	dbcore/test-sm-log.cpp	/^    ~db_file() {$/;"	f	struct:db_file
~dbtuple	tuple.cc	/^dbtuple::~dbtuple()$/;"	f	class:dbtuple
~dirent_iterator	dbcore/sm-common.cpp	/^dirent_iterator::~dirent_iterator() {$/;"	f	class:dirent_iterator
~dynarray	dbcore/dynarray.cpp	/^dynarray::~dynarray()$/;"	f	class:dynarray
~event_ctx	counter.h	/^    ~event_ctx()$/;"	f	struct:private_::event_ctx
~guard	ticker.h	/^    ~guard()$/;"	f	class:ticker::guard
~header_scan	dbcore/sm-log.h	/^        virtual ~header_scan() { }$/;"	f	struct:sm_log_scan_mgr::header_scan
~illegal_argument	dbcore/sm-exceptions.h	/^    ~illegal_argument() { free(free_msg); }$/;"	f	struct:illegal_argument
~internal_node	btree_impl.h	/^btree<P>::internal_node::~internal_node()$/;"	f	class:btree::internal_node
~killable_perf_region	scopedperf.hh	/^  ~killable_perf_region() { stop(); }$/;"	f	class:scopedperf::killable_perf_region
~kvtest_client	masstree/mttest.cc	/^    ~kvtest_client() {$/;"	f	struct:kvtest_client
~leaf_node	btree_impl.h	/^btree<P>::leaf_node::~leaf_node()$/;"	f	class:btree::leaf_node
~list_visitor	dbcore/test-rcu-slist.cpp	/^    ~list_visitor() {$/;"	f	struct:list_visitor
~list_visitor	dbcore/test-rcu.cpp	/^    ~list_visitor() {$/;"	f	struct:list_visitor
~local_vector	masstree/local_vector.hh	/^inline local_vector<T, N, A>::~local_vector() {$/;"	f	class:local_vector
~lock_guard	lockguard.h	/^  ~lock_guard()$/;"	f	class:lock_guard
~log_file_error	dbcore/sm-exceptions.h	/^    ~log_file_error() { free(free_msg); }$/;"	f	struct:log_file_error
~loginfo	masstree/log.cc	/^loginfo::~loginfo() {$/;"	f	class:loginfo
~logreplay	masstree/log.cc	/^logreplay::~logreplay()$/;"	f	class:logreplay
~low_level_search_range_callback	btree.h	/^    virtual ~low_level_search_range_callback() {}$/;"	f	class:btree::low_level_search_range_callback
~low_level_search_range_callback	masstree_btree.h	/^    virtual ~low_level_search_range_callback() {}$/;"	f	class:mbtree::low_level_search_range_callback
~mbtree	masstree_btree.h	/^  ~mbtree() {$/;"	f	class:mbtree
~ndb_thread	thread.cc	/^ndb_thread::~ndb_thread()$/;"	f	class:ndb_thread
~node	btree.h	/^    ~node()$/;"	f	struct:btree::node
~os_condvar	dbcore/sm-common.h	/^    ~os_condvar() {$/;"	f	struct:os_condvar
~os_error	dbcore/sm-exceptions.h	/^    ~os_error() { free(free_msg); }$/;"	f	struct:os_error
~os_mutex	dbcore/sm-common.h	/^    ~os_mutex() {$/;"	f	struct:os_mutex
~percore	core.h	/^  ~percore()$/;"	f	class:percore
~rcu_callback	masstree/kvthread.hh	/^    virtual ~rcu_callback() {$/;"	f	struct:rcu_callback
~record_scan	dbcore/sm-log.h	/^        virtual ~record_scan() { }$/;"	f	struct:sm_log_scan_mgr::record_scan
~sc_hash_set	dbcore/sc-hash.h	/^    ~sc_hash_set() {$/;"	f
~scan_callback	benchmarks/abstract_ordered_index.h	/^    virtual ~scan_callback() {}$/;"	f	class:abstract_ordered_index::scan_callback
~scoped_db_thread_ctx	benchmarks/bench.h	/^  ~scoped_db_thread_ctx()$/;"	f	class:scoped_db_thread_ctx
~scoped_lock_guard	benchmarks/tpcc.cc	/^  inline ~scoped_lock_guard()$/;"	f	class:scoped_lock_guard
~scoped_multilock	benchmarks/tpcc.cc	/^  inline ~scoped_multilock()$/;"	f	class:scoped_multilock
~scoped_perf_region	scopedperf.hh	/^  ~scoped_perf_region() { base_perf_region<Perfsum>::lap(); }$/;"	f	class:scopedperf::scoped_perf_region
~scoped_ra_region	dbcore/sm-alloc.h	/^    ~scoped_ra_region(void)$/;"	f	class:scoped_ra_region
~scoped_rate_timer	btree.cc	/^  ~scoped_rate_timer()$/;"	f	class:scoped_rate_timer
~scoped_rcu_region	rcu-wrapper.h	/^  ~scoped_rcu_region()$/;"	f	class:scoped_rcu_region
~scoped_recorder	tuple.h	/^    ~scoped_recorder()$/;"	f	struct:dbtuple::scoped_recorder
~scoped_spinlock	scopedperf.hh	/^  ~scoped_spinlock() { release(); }$/;"	f	class:scopedperf::scoped_spinlock
~scoped_str_arena	str_arena.h	/^  ~scoped_str_arena()$/;"	f	class:scoped_str_arena
~scoped_timer	util.h	/^  ~scoped_timer()$/;"	f	class:util::scoped_timer
~search_range_callback	txn_btree.h	/^    virtual ~search_range_callback() {}$/;"	f	struct:txn_btree::search_range_callback
~search_range_callback	typed_txn_btree.h	/^    virtual ~search_range_callback() {}$/;"	f	struct:typed_txn_btree::search_range_callback
~segment_array	dbcore/sm-log-file.cpp	/^sm_log_file_mgr::segment_array::~segment_array()$/;"	f	class:sm_log_file_mgr::segment_array
~sm_heap_mgr	dbcore/sm-heap.h	/^    virtual ~sm_heap_mgr() { }$/;"	f	struct:sm_heap_mgr
~sm_log	dbcore/sm-log.h	/^    virtual ~sm_log() { }$/;"	f	struct:sm_log
~sm_log_alloc_mgr	dbcore/sm-log-alloc.cpp	/^sm_log_alloc_mgr::~sm_log_alloc_mgr()$/;"	f	class:sm_log_alloc_mgr
~sm_log_recover_mgr	dbcore/sm-log-recover.cpp	/^sm_log_recover_mgr::~sm_log_recover_mgr()$/;"	f	class:sm_log_recover_mgr
~sm_log_scan_mgr	dbcore/sm-log.h	/^    virtual ~sm_log_scan_mgr() { }$/;"	f	struct:sm_log_scan_mgr
~sm_oid_mgr	dbcore/sm-oid.h	/^    virtual ~sm_oid_mgr() { }$/;"	f	struct:sm_oid_mgr
~sm_oid_mgr_impl	dbcore/sm-oid.cpp	/^sm_oid_mgr_impl::~sm_oid_mgr_impl()$/;"	f	class:sm_oid_mgr_impl
~small_unordered_map	small_unordered_map.h	/^  ~small_unordered_map()$/;"	f	class:small_unordered_map
~small_vector	small_vector.h	/^  ~small_vector()$/;"	f	class:small_vector
~spin_barrier	spinbarrier.h	/^  ~spin_barrier()$/;"	f	class:spin_barrier
~static_unordered_map	static_unordered_map.h	/^  ~static_unordered_map()$/;"	f	class:static_unordered_map
~static_vector	static_vector.h	/^  inline ~static_vector() { clear(); }$/;"	f	class:static_vector
~string_restore	btree_impl.h	/^  inline ~string_restore()$/;"	f	class:string_restore
~test_range_scan_helper	btree.cc	/^  ~test_range_scan_helper()$/;"	f	class:test_range_scan_helper
~test_thread	masstree/mttest.cc	/^    ~test_thread() {$/;"	f	struct:test_thread
~testrunner_base	masstree/testrunner.hh	/^    virtual ~testrunner_base() {$/;"	f	class:testrunner_base
~tmp_dir	dbcore/sm-common.cpp	/^tmp_dir::~tmp_dir() {$/;"	f	class:tmp_dir
~transaction	txn_impl.h	/^transaction<Protocol, Traits>::~transaction()$/;"	f	class:transaction
~transaction_proto2	txn_proto2_impl.h	/^  ~transaction_proto2() {}$/;"	f	class:transaction_proto2
~tree_walk_callback	btree.h	/^    virtual ~tree_walk_callback() {}$/;"	f	class:btree::tree_walk_callback
~tree_walk_callback	masstree_btree.h	/^    virtual ~tree_walk_callback() {}$/;"	f	class:mbtree::tree_walk_callback
~window_buffer	dbcore/window-buffer.cpp	/^window_buffer::~window_buffer() {$/;"	f	class:window_buffer
